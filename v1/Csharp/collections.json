[
  {
    "q": "Which of the following statements correctly initializes a generic list of integers in C#?",
    "o": [
      "List<int> numbers = new List<int>();",
      "List numbers = new List<int>();",
      "List<int> numbers = new List();",
      "List<int> = new List<int>();"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "List<string> fruits = new List<string> { \"Apple\", \"Banana\", \"Cherry\" };\nConsole.WriteLine(fruits[1]);",
    "o": [
      "Banana",
      "Apple",
      "Cherry",
      "fruits"
    ]
  },
  {
    "q": "Which collection allows you to store key-value pairs and provides fast lookup by key?",
    "o": [
      "Dictionary<TKey, TValue>",
      "List<T>",
      "ArrayList",
      "Queue<T>"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "Dictionary<string, int> ages = new Dictionary<string, int>();\nages[\"Alice\"] = 30;\nages[\"Bob\"] = 25;\nConsole.WriteLine(ages[\"Bob\"]);",
    "o": [
      "25",
      "30",
      "Bob",
      "Alice"
    ]
  },
  {
    "q": "Which of the following is a benefit of using generic collections in C#?",
    "o": [
      "They provide type safety and better performance.",
      "They are easier to use than non-generic collections.",
      "They can only store value types.",
      "They eliminate the need for using classes."
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "List<int> numbers = new List<int> { 1, 2, 3, 4, 5 };\nvar even = numbers.Where(n => n % 2 == 0);\nforeach (var n in even) Console.Write(n + \" \");",
    "o": [
      "2 4 ",
      "1 3 5 ",
      "1 2 3 4 5 ",
      "None"
    ]
  },
  {
    "q": "Which of the following statements about ArrayList is true?",
    "o": [
      "ArrayList can store elements of any data type.",
      "ArrayList is a generic collection.",
      "ArrayList is faster than List<T> for type-specific data.",
      "ArrayList only stores reference types."
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "IEnumerable<int> GetNumbers()\n{\n    yield return 1;\n    yield return 2;\n    yield return 3;\n}\n\nforeach (var num in GetNumbers())\n{\n    Console.Write(num + \" \");\n}",
    "o": [
      "1 2 3 ",
      "3 2 1 ",
      "1 3 ",
      "Nothing"
    ]
  },
  {
    "q": "Which LINQ method is used to filter a sequence based on a condition?",
    "o": [
      "Where",
      "Select",
      "OrderBy",
      "Aggregate"
    ]
  },
  {
    "q": "Which of the following is a valid way to declare and initialize a Dictionary in C#?",
    "o": [
      "Dictionary<string, int> scores = new Dictionary<string, int> { { \"Tom\", 90 }, { \"Jerry\", 80 } };",
      "Dictionary scores = { \"Tom\" = 90, \"Jerry\" = 80 };",
      "Dictionary<string> scores = new Dictionary<string> { (\"Tom\", 90), (\"Jerry\", 80) };",
      "Dictionary<string, int> scores = new Dictionary<string, int>(\"Tom\": 90, \"Jerry\": 80);"
    ]
  },
  {
    "q": "Which of the following statements is true about the List<T> collection in C#?",
    "o": [
      "List<T> is a generic collection that provides dynamic resizing.",
      "List<T> requires specifying the size at declaration.",
      "List<T> can only be used with reference types.",
      "List<T> does not support index-based access."
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "ArrayList items = new ArrayList();\nitems.Add(\"Hello\");\nitems.Add(100);\nConsole.WriteLine(items[1]);",
    "o": [
      "100",
      "Hello",
      "items",
      "ArrayList"
    ]
  },
  {
    "q": "Which keyword is used in C# to implement custom iteration over a collection?",
    "o": [
      "yield",
      "return",
      "continue",
      "next"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "List<string> colors = new List<string> { \"Red\", \"Green\", \"Blue\" };\nvar selected = colors.FirstOrDefault(c => c.StartsWith(\"G\"));\nConsole.WriteLine(selected);",
    "o": [
      "Green",
      "Red",
      "Blue",
      "null"
    ]
  },
  {
    "q": "Which of the following is a correct way to iterate over a Dictionary in C#?",
    "o": [
      "foreach (KeyValuePair<string, int> pair in myDict) { Console.WriteLine(pair.Key + pair.Value); }",
      "foreach (string key, int value in myDict) { Console.WriteLine(key + value); }",
      "for (int i = 0; i < myDict.Count; i++) { Console.WriteLine(myDict[i]); }",
      "while (myDict.HasNext()) { Console.WriteLine(myDict.Next()); }"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "IEnumerable<string> GetNames()\n{\n    yield return \"Alice\";\n    yield return \"Bob\";\n}\n\nforeach (var name in GetNames())\n    Console.Write(name + \" \");",
    "o": [
      "Alice Bob ",
      "Bob Alice ",
      "Alice ",
      "Compilation Error"
    ]
  },
  {
    "q": "Which of the following LINQ expressions retrieves all elements greater than 50 from a list?",
    "o": [
      "var result = numbers.Where(n => n > 50);",
      "var result = numbers.Select(n => n > 50);",
      "var result = numbers.Filter(n => n > 50);",
      "var result = numbers.Find(n => n > 50);"
    ]
  },
  {
    "q": "Which generic type would you use to associate keys with values and retrieve them efficiently by key?",
    "o": [
      "Dictionary<TKey, TValue>",
      "List<T>",
      "Queue<T>",
      "Stack<T>"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "List<int> numbers = new List<int> { 10, 20, 30 };\nnumbers.Remove(20);\nConsole.WriteLine(numbers.Count);",
    "o": [
      "2",
      "3",
      "1",
      "0"
    ]
  },
  {
    "q": "What is the main difference between ArrayList and List<T> in C#?",
    "o": [
      "List<T> is type-safe and avoids boxing/unboxing.",
      "ArrayList is generic and type-safe.",
      "List<T> can store any type without casting.",
      "ArrayList only supports primitive types."
    ]
  },
  {
    "q": "Which of the following can store elements of different data types in a single collection?",
    "o": [
      "ArrayList",
      "List<int>",
      "Dictionary<string, int>",
      "List<string>"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "List<double> prices = new List<double> { 19.99, 29.99, 49.99 };\nConsole.WriteLine(prices.Contains(29.99));",
    "o": [
      "True",
      "False",
      "29.99",
      "0"
    ]
  },
  {
    "q": "Which of the following LINQ methods projects each element of a collection into a new form?",
    "o": [
      "Select",
      "Where",
      "FirstOrDefault",
      "Aggregate"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "Dictionary<int, string> students = new Dictionary<int, string>();\nstudents.Add(1, \"John\");\nstudents.Add(2, \"Jane\");\nConsole.WriteLine(students.Count);",
    "o": [
      "2",
      "1",
      "Jane",
      "0"
    ]
  },
  {
    "q": "What is the purpose of the 'yield return' statement in C#?",
    "o": [
      "To return an element one at a time without creating an intermediate collection.",
      "To exit from a loop early.",
      "To break out of a switch block.",
      "To pause a thread during execution."
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "List<string> cities = new List<string> { \"Paris\", \"London\", \"New York\" };\ncities.Sort();\nConsole.WriteLine(cities[0]);",
    "o": [
      "London",
      "Paris",
      "New York",
      "cities"
    ]
  },
  {
    "q": "Which LINQ method returns the total number of elements in a collection?",
    "o": [
      "Count()",
      "Sum()",
      "Length()",
      "Total()"
    ]
  },
  {
    "q": "Which of the following correctly retrieves a value from a Dictionary using a key?",
    "o": [
      "var value = myDict[\"key\"];",
      "var value = myDict.Get(\"key\");",
      "var value = myDict.Key(\"key\");",
      "var value = myDict.Find(\"key\");"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "List<int> data = new List<int> { 2, 4, 6, 8 };\nvar result = data.Average();\nConsole.WriteLine(result);",
    "o": [
      "5",
      "4",
      "6",
      "20"
    ]
  },
  {
    "q": "Which of the following is NOT a characteristic of List<T> in C#?",
    "o": [
      "It supports heterogeneous data types.",
      "It is type-safe.",
      "It supports index-based access.",
      "It grows dynamically."
    ]
  },
  {
    "q": "Which method is used to add a new element to a List<T> in C#?",
    "o": [
      "Add()",
      "Insert()",
      "Append()",
      "Push()"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "ArrayList values = new ArrayList();\nvalues.Add(5);\nvalues.Add(\"Five\");\nConsole.WriteLine(values.Count);",
    "o": [
      "2",
      "1",
      "0",
      "Error"
    ]
  },
  {
    "q": "What does the 'FirstOrDefault' LINQ method return when no element matches the condition?",
    "o": [
      "The default value for the type",
      "An exception",
      "Null always",
      "The last item in the collection"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "List<int> numbers = new List<int> { 3, 1, 4, 2 };\nnumbers.Sort();\nConsole.WriteLine(string.Join(\",\", numbers));",
    "o": [
      "1,2,3,4",
      "4,3,2,1",
      "3,1,4,2",
      "2,4,1,3"
    ]
  },
  {
    "q": "Which of the following collections is most appropriate for storing unique keys with associated values?",
    "o": [
      "Dictionary<TKey, TValue>",
      "List<T>",
      "ArrayList",
      "Queue<T>"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "Dictionary<string, string> capitals = new Dictionary<string, string>();\ncapitals[\"France\"] = \"Paris\";\ncapitals[\"Italy\"] = \"Rome\";\nConsole.WriteLine(capitals.ContainsKey(\"France\"));",
    "o": [
      "True",
      "False",
      "Paris",
      "France"
    ]
  },
  {
    "q": "What does the 'yield break' statement do in an iterator method?",
    "o": [
      "Ends the iteration early",
      "Skips one iteration",
      "Pauses the method temporarily",
      "Restarts the iteration"
    ]
  },
  {
    "q": "Which of the following LINQ methods would you use to transform each element of a collection?",
    "o": [
      "Select",
      "Where",
      "Take",
      "GroupBy"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "List<int> nums = new List<int> { 1, 2, 3 };\nnums.Clear();\nConsole.WriteLine(nums.Count);",
    "o": [
      "0",
      "3",
      "1",
      "Error"
    ]
  },
  {
    "q": "Which of the following best describes an iterator block in C#?",
    "o": [
      "A method that uses 'yield return' to return elements one at a time.",
      "A loop that processes each item in a collection.",
      "A class that implements IEnumerable<T> manually.",
      "A LINQ expression using Select and Where."
    ]
  },
  {
    "q": "Which of the following collections is non-generic and can store any type of object?",
    "o": [
      "ArrayList",
      "List<T>",
      "Dictionary<TKey, TValue>",
      "HashSet<T>"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "List<string> fruits = new List<string> { \"Mango\", \"Banana\", \"Apple\" };\nvar result = fruits.First();\nConsole.WriteLine(result);",
    "o": [
      "Mango",
      "Banana",
      "Apple",
      "Error"
    ]
  },
  {
    "q": "Which of the following LINQ methods returns a single element that satisfies a given condition?",
    "o": [
      "Single()",
      "Where()",
      "Select()",
      "Any()"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "Dictionary<string, int> stock = new Dictionary<string, int>();\nstock.Add(\"Pen\", 50);\nstock[\"Pen\"] = 75;\nConsole.WriteLine(stock[\"Pen\"]);",
    "o": [
      "75",
      "50",
      "0",
      "Pen"
    ]
  },
  {
    "q": "What is the primary benefit of using List<T> over ArrayList?",
    "o": [
      "Type safety and no boxing/unboxing",
      "It uses less memory",
      "It supports thread safety",
      "It only works with value types"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "List<int> data = new List<int> { 1, 2, 3, 4, 5 };\nvar filtered = data.Where(x => x % 2 == 0);\nConsole.WriteLine(filtered.Count());",
    "o": [
      "2",
      "3",
      "4",
      "5"
    ]
  },
  {
    "q": "In a yield iterator method, what is required for the method's return type?",
    "o": [
      "It must return IEnumerable or IEnumerator.",
      "It must return List or Array.",
      "It must return Task or async type.",
      "It must return void."
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "ArrayList list = new ArrayList();\nlist.Add(10);\nlist.Add(\"ten\");\nConsole.WriteLine(list[1]);",
    "o": [
      "ten",
      "10",
      "list",
      "Error"
    ]
  },
  {
    "q": "Which LINQ method can be used to check if any elements match a condition?",
    "o": [
      "Any()",
      "Select()",
      "FirstOrDefault()",
      "Count()"
    ]
  },
  {
    "q": "Which of the following is true about Dictionary<TKey, TValue>?",
    "o": [
      "Each key must be unique.",
      "It allows duplicate keys.",
      "It does not support generic types.",
      "The keys are accessed by index."
    ]
  },
  {
    "q": "Which collection allows retrieval of values using a unique key in C#?",
    "o": [
      "Dictionary<TKey, TValue>",
      "ArrayList",
      "List<T>",
      "Queue<T>"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "var names = new List<string> { \"Sam\", \"Sara\", \"Sue\" };\nvar shortNames = names.Where(n => n.StartsWith(\"S\"));\nConsole.WriteLine(shortNames.Count());",
    "o": [
      "3",
      "2",
      "1",
      "0"
    ]
  },
  {
    "q": "Which of the following is a characteristic of generic collections in C#?",
    "o": [
      "They are type-safe.",
      "They allow storing any data type without casting.",
      "They store values in key-value pairs only.",
      "They are obsolete in .NET Core."
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "var numbers = new List<int> { 5, 10, 15 };\nnumbers.Remove(10);\nConsole.WriteLine(numbers.Contains(10));",
    "o": [
      "False",
      "True",
      "10",
      "0"
    ]
  },
  {
    "q": "Which interface must be implemented to create a custom iterator using yield return?",
    "o": [
      "IEnumerable",
      "ICollection",
      "IList",
      "IDictionary"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "var dict = new Dictionary<int, string>();\ndict.Add(100, \"Start\");\ndict.Add(200, \"Middle\");\nConsole.WriteLine(dict.ContainsValue(\"Start\"));",
    "o": [
      "True",
      "False",
      "Start",
      "100"
    ]
  },
  {
    "q": "Which LINQ method is used to return a new collection with distinct elements?",
    "o": [
      "Distinct()",
      "Unique()",
      "Except()",
      "Filter()"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "ArrayList list = new ArrayList();\nlist.Add(1);\nlist.Add(true);\nlist.Add(\"hello\");\nConsole.WriteLine(list[2]);",
    "o": [
      "hello",
      "true",
      "1",
      "ArrayList"
    ]
  },
  {
    "q": "Which of the following operations is not valid for a Dictionary<TKey, TValue>?",
    "o": [
      "Adding duplicate keys",
      "Adding new key-value pairs",
      "Checking if a key exists",
      "Accessing value by key"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "List<int> numbers = new List<int> { 1, 2, 3 };\nnumbers.Insert(1, 5);\nConsole.WriteLine(numbers[1]);",
    "o": [
      "5",
      "2",
      "1",
      "3"
    ]
  },
  {
    "q": "Which collection provides key-value mapping and ensures keys are unique?",
    "o": [
      "Dictionary<TKey, TValue>",
      "List<T>",
      "ArrayList",
      "Stack<T>"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "var nums = new List<int> { 2, 4, 6, 8 };\nvar even = nums.All(n => n % 2 == 0);\nConsole.WriteLine(even);",
    "o": [
      "True",
      "False",
      "2",
      "0"
    ]
  },
  {
    "q": "Which of the following LINQ methods is used to filter elements based on a condition?",
    "o": [
      "Where",
      "Select",
      "GroupBy",
      "Join"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "ArrayList list = new ArrayList();\nlist.Add(100);\nlist.Add(\"C#\");\nConsole.WriteLine(list[0]);",
    "o": [
      "100",
      "C#",
      "list",
      "Error"
    ]
  },
  {
    "q": "Which generic collection would be best for fast lookups by key?",
    "o": [
      "Dictionary<TKey, TValue>",
      "List<T>",
      "Queue<T>",
      "ArrayList"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "var items = new List<string> { \"pen\", \"book\", \"lamp\" };\nvar result = items.OrderBy(x => x.Length).First();\nConsole.WriteLine(result);",
    "o": [
      "pen",
      "book",
      "lamp",
      "items"
    ]
  },
  {
    "q": "Which of the following statements is true about 'yield return'?",
    "o": [
      "It allows lazy iteration over a collection.",
      "It exits the method immediately.",
      "It stores results in memory at once.",
      "It works only with dictionaries."
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "List<int> data = new List<int> { 10, 20, 30 };\ndata.RemoveAt(1);\nConsole.WriteLine(data[1]);",
    "o": [
      "30",
      "20",
      "10",
      "Error"
    ]
  },
  {
    "q": "Which LINQ method returns the number of elements in a collection?",
    "o": [
      "Count()",
      "Sum()",
      "First()",
      "Max()"
    ]
  },
  {
    "q": "What happens if you try to access a non-existent key in Dictionary<TKey, TValue> using the indexer?",
    "o": [
      "It throws a KeyNotFoundException.",
      "It returns null.",
      "It adds the key with a default value.",
      "It returns an empty string."
    ]
  },
  {
    "q": "Which of the following allows adding elements of any type without compile-time type checking?",
    "o": [
      "ArrayList",
      "List<T>",
      "Dictionary<TKey, TValue>",
      "Queue<T>"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "List<int> numbers = new List<int> { 1, 2, 3, 4 };\nvar result = numbers.Where(n => n > 2).ToList();\nConsole.WriteLine(result[0]);",
    "o": [
      "3",
      "2",
      "4",
      "1"
    ]
  },
  {
    "q": "Which LINQ method would you use to combine elements from two collections based on a common key?",
    "o": [
      "Join",
      "GroupBy",
      "SelectMany",
      "Aggregate"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "Dictionary<string, int> ages = new Dictionary<string, int>();\nages[\"Eve\"] = 30;\nages[\"Adam\"] = 45;\nConsole.WriteLine(ages[\"Adam\"]);",
    "o": [
      "45",
      "30",
      "Adam",
      "0"
    ]
  },
  {
    "q": "Which statement about List<T> is true?",
    "o": [
      "It provides better performance than ArrayList for type-safe operations.",
      "It stores only string values.",
      "It can hold key-value pairs.",
      "It is slower than ArrayList in all cases."
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "var letters = new List<string> { \"a\", \"b\", \"c\" };\nletters.Reverse();\nConsole.WriteLine(string.Join(\"\", letters));",
    "o": [
      "cba",
      "abc",
      "acb",
      "bac"
    ]
  },
  {
    "q": "Which collection type allows retrieval using both key and index via explicit coding?",
    "o": [
      "Dictionary<TKey, TValue>",
      "List<T>",
      "ArrayList",
      "Stack<T>"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "IEnumerable<int> GetNumbers()\n{\n    yield return 5;\n    yield return 10;\n}\n\nforeach (var num in GetNumbers())\n{\n    Console.Write(num + \" \");\n}",
    "o": [
      "5 10 ",
      "10 5 ",
      "5",
      "Error"
    ]
  },
  {
    "q": "Which LINQ method is used to group elements based on a key?",
    "o": [
      "GroupBy",
      "Join",
      "Select",
      "Any"
    ]
  },
  {
    "q": "Which scenario is a good use case for 'yield return'?",
    "o": [
      "Generating large sequences without storing them all in memory",
      "Returning all values at once in a list",
      "Executing SQL commands",
      "Managing threads in parallel"
    ]
  },
  {
    "q": "Which method would you use to determine if a Dictionary contains a specific key?",
    "o": [
      "ContainsKey",
      "HasKey",
      "Exists",
      "IncludesKey"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "var data = new List<string> { \"dog\", \"cat\", \"rabbit\" };\nvar result = data.FirstOrDefault(x => x.StartsWith(\"c\"));\nConsole.WriteLine(result);",
    "o": [
      "cat",
      "dog",
      "rabbit",
      "null"
    ]
  },
  {
    "q": "What is a limitation of using ArrayList in C#?",
    "o": [
      "It stores elements as objects, causing boxing/unboxing for value types.",
      "It supports only integers.",
      "It requires a fixed size at declaration.",
      "It does not support iteration."
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "List<int> scores = new List<int> { 80, 90, 100 };\nscores.Add(70);\nscores.Sort();\nConsole.WriteLine(scores[0]);",
    "o": [
      "70",
      "80",
      "90",
      "100"
    ]
  },
  {
    "q": "Which LINQ method projects each element of a sequence into a new form?",
    "o": [
      "Select",
      "Where",
      "First",
      "Count"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "Dictionary<string, int> map = new Dictionary<string, int>();\nmap[\"one\"] = 1;\nmap[\"two\"] = 2;\nConsole.WriteLine(map.Count);",
    "o": [
      "2",
      "1",
      "3",
      "0"
    ]
  },
  {
    "q": "Which of the following is a correct way to declare a generic list of strings?",
    "o": [
      "List<string> names = new List<string>();",
      "List names = new List<string>();",
      "List<string> names = new List();",
      "List<> names = new List<string>();"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "IEnumerable<int> Generate()\n{\n    yield return 1;\n    yield return 2;\n    yield break;\n    yield return 3;\n}\n\nConsole.WriteLine(Generate().Count());",
    "o": [
      "2",
      "3",
      "1",
      "0"
    ]
  },
  {
    "q": "Which LINQ method checks if at least one element in the collection satisfies a condition?",
    "o": [
      "Any",
      "All",
      "Count",
      "Take"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "ArrayList list = new ArrayList();\nlist.Add(10);\nlist.Add(20);\nlist.Add(30);\nlist.RemoveAt(1);\nConsole.WriteLine(list[1]);",
    "o": [
      "30",
      "10",
      "20",
      "Error"
    ]
  },
  {
    "q": "Which of the following collections is not type-safe?",
    "o": [
      "ArrayList",
      "List<T>",
      "Dictionary<TKey, TValue>",
      "Queue<T>"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "var numbers = new List<int> { 10, 20, 30 };\nvar sum = numbers.Sum();\nConsole.WriteLine(sum);",
    "o": [
      "60",
      "30",
      "10",
      "0"
    ]
  },
  {
    "q": "Which of the following will throw a runtime exception if the key does not exist?",
    "o": [
      "dictionary[key]",
      "dictionary.ContainsKey(key)",
      "dictionary.TryGetValue(key, out value)",
      "dictionary.GetValueOrDefault(key)"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "var names = new List<string> { \"Anna\", \"Ben\", \"Clara\" };\nvar count = names.Count(n => n.StartsWith(\"A\"));\nConsole.WriteLine(count);",
    "o": [
      "1",
      "2",
      "3",
      "0"
    ]
  },
  {
    "q": "Which statement is true about List<T>?",
    "o": [
      "It automatically resizes when elements are added beyond its capacity.",
      "It has a fixed size after initialization.",
      "It can only store value types.",
      "It does not allow duplicate values."
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "Dictionary<int, string> colors = new Dictionary<int, string>();\ncolors.Add(1, \"Red\");\ncolors.Add(2, \"Blue\");\nConsole.WriteLine(colors[2]);",
    "o": [
      "Blue",
      "Red",
      "2",
      "Error"
    ]
  },
  {
    "q": "Which keyword is used in an iterator block to return a value to the enumerator?",
    "o": [
      "yield return",
      "return",
      "yield break",
      "continue"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "IEnumerable<int> Gen()\n{\n    for (int i = 0; i < 3; i++)\n        yield return i;\n}\n\nforeach (var x in Gen())\n    Console.Write(x);\n",
    "o": [
      "012",
      "123",
      "321",
      "01"
    ]
  },
  {
    "q": "Which LINQ method retrieves a specified number of elements from the start of a collection?",
    "o": [
      "Take",
      "Skip",
      "Select",
      "Where"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "ArrayList list = new ArrayList();\nlist.Add(5);\nlist.Add(\"five\");\nConsole.WriteLine(list.Count);",
    "o": [
      "2",
      "1",
      "0",
      "5"
    ]
  },
  {
    "q": "Which of the following is a benefit of using generic collections like List<T> over ArrayList?",
    "o": [
      "Type safety at compile time",
      "Faster performance due to boxing",
      "Ability to store mixed data types",
      "Support for dynamic resizing"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "var words = new List<string> { \"apple\", \"banana\", \"cherry\" };\nvar result = words.Where(w => w.Contains(\"a\")).Count();\nConsole.WriteLine(result);",
    "o": [
      "3",
      "2",
      "1",
      "0"
    ]
  },
  {
    "q": "Which interface must be implemented to allow iteration using foreach in a custom collection?",
    "o": [
      "IEnumerable",
      "IEnumerator",
      "ICollection",
      "IDisposable"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "Dictionary<string, string> capitals = new Dictionary<string, string>();\ncapitals.Add(\"UK\", \"London\");\ncapitals.Add(\"USA\", \"Washington\");\nConsole.WriteLine(capitals.ContainsKey(\"UK\"));",
    "o": [
      "True",
      "False",
      "UK",
      "London"
    ]
  },
  {
    "q": "Which LINQ method filters a sequence based on a condition?",
    "o": [
      "Where",
      "Select",
      "OrderBy",
      "Aggregate"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "IEnumerable<char> GetVowels()\n{\n    yield return 'a';\n    yield return 'e';\n    yield break;\n    yield return 'i';\n}\n\nforeach (var v in GetVowels())\n    Console.Write(v);\n",
    "o": [
      "ae",
      "aei",
      "a",
      "ei"
    ]
  },
  {
    "q": "Which collection type would be most appropriate for storing unique key-value pairs?",
    "o": [
      "Dictionary<TKey, TValue>",
      "List<T>",
      "ArrayList",
      "Queue<T>"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "List<double> prices = new List<double> { 9.99, 19.99, 29.99 };\nprices.RemoveAt(1);\nConsole.WriteLine(prices.Count);",
    "o": [
      "2",
      "3",
      "1",
      "0"
    ]
  },
  {
    "q": "Which LINQ method returns the first element of a sequence or a default value if no element is found?",
    "o": [
      "FirstOrDefault",
      "First",
      "Single",
      "Last"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "ArrayList list = new ArrayList();\nlist.Add(1);\nlist.Add(\"two\");\nlist.Add(3.0);\nConsole.WriteLine(list[1]);",
    "o": [
      "two",
      "1",
      "3.0",
      "Error"
    ]
  },
  {
    "q": "Which of the following generic types is best for key-value pair storage?",
    "o": [
      "Dictionary<TKey, TValue>",
      "List<T>",
      "ArrayList",
      "Queue<T>"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "var list = new List<int> { 2, 4, 6, 8 };\nConsole.WriteLine(list.Average());",
    "o": [
      "5",
      "4",
      "6",
      "8"
    ]
  },
  {
    "q": "Which statement about ArrayList is correct?",
    "o": [
      "It stores elements as objects, which can lead to boxing/unboxing.",
      "It is strongly typed.",
      "It only stores strings.",
      "It is a generic collection."
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "var dict = new Dictionary<string, int>();\ndict.Add(\"A\", 1);\ndict.Add(\"B\", 2);\ndict[\"A\"] = 10;\nConsole.WriteLine(dict[\"A\"]);",
    "o": [
      "10",
      "1",
      "2",
      "Error"
    ]
  },
  {
    "q": "Which LINQ method is used to skip a specified number of elements in a sequence?",
    "o": [
      "Skip",
      "Take",
      "Where",
      "Select"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "List<string> fruits = new List<string> { \"Apple\", \"Banana\", \"Mango\" };\nConsole.WriteLine(fruits.Contains(\"Mango\"));",
    "o": [
      "True",
      "False",
      "Mango",
      "Error"
    ]
  },
  {
    "q": "Which keyword ends the enumeration of an iterator method?",
    "o": [
      "yield break",
      "return",
      "break",
      "continue"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "IEnumerable<int> EvenNumbers()\n{\n    for (int i = 0; i < 5; i++)\n        if (i % 2 == 0)\n            yield return i;\n}\n\nforeach (var n in EvenNumbers())\n    Console.Write(n);",
    "o": [
      "024",
      "1234",
      "135",
      "01234"
    ]
  },
  {
    "q": "Which generic collection automatically resizes and allows indexed access?",
    "o": [
      "List<T>",
      "Dictionary<TKey, TValue>",
      "Queue<T>",
      "ArrayList"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "ArrayList items = new ArrayList();\nitems.Add(100);\nitems.Add(\"C#\");\nConsole.WriteLine(items[0].GetType().Name);",
    "o": [
      "Int32",
      "String",
      "Object",
      "CSharp"
    ]
  },
  {
    "q": "Which method would you use to determine if a key exists in a Dictionary?",
    "o": [
      "ContainsKey",
      "Contains",
      "Exists",
      "HasKey"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "List<int> values = new List<int> { 3, 6, 9 };\nvalues.Insert(1, 12);\nConsole.WriteLine(values[1]);",
    "o": [
      "12",
      "6",
      "3",
      "9"
    ]
  },
  {
    "q": "Which of the following collections maintains the order of insertion?",
    "o": [
      "List<T>",
      "Dictionary<TKey, TValue>",
      "HashSet<T>",
      "SortedDictionary<TKey, TValue>"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "var letters = new List<char> { 'x', 'y', 'z' };\nletters.Reverse();\nConsole.WriteLine(letters[0]);",
    "o": [
      "z",
      "x",
      "y",
      "Error"
    ]
  },
  {
    "q": "Which LINQ method returns elements until a condition becomes false?",
    "o": [
      "TakeWhile",
      "SkipWhile",
      "Where",
      "Select"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "ArrayList data = new ArrayList();\ndata.Add(\"Code\");\ndata.Add(404);\nConsole.WriteLine(data[1]);",
    "o": [
      "404",
      "Code",
      "Error",
      "1"
    ]
  },
  {
    "q": "Which generic collection is best suited for implementing a FIFO structure?",
    "o": [
      "Queue<T>",
      "Stack<T>",
      "List<T>",
      "Dictionary<TKey, TValue>"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "IEnumerable<string> YieldNames()\n{\n    yield return \"Tom\";\n    yield return \"Jerry\";\n}\n\nforeach (var name in YieldNames())\n    Console.Write(name + \" \");",
    "o": [
      "Tom Jerry ",
      "Jerry Tom ",
      "Tom ",
      "Jerry "
    ]
  },
  {
    "q": "Which of the following is a characteristic of IEnumerable<T>?",
    "o": [
      "It supports forward-only iteration.",
      "It supports random access by index.",
      "It is not supported in LINQ queries.",
      "It can only be used with arrays."
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "var scores = new List<int> { 5, 10, 15 };\nvar max = scores.Max();\nConsole.WriteLine(max);",
    "o": [
      "15",
      "10",
      "5",
      "0"
    ]
  },
  {
    "q": "Which method is used to convert a non-generic ArrayList to a generic List<T>?",
    "o": [
      "Cast<T>()",
      "ToList()",
      "Convert<T>()",
      "Map<T>()"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "var list = new List<string> { \"red\", \"blue\", \"green\" };\nConsole.WriteLine(list.IndexOf(\"blue\"));",
    "o": [
      "1",
      "0",
      "2",
      "-1"
    ]
  },
  {
    "q": "Which method would you use to add a key-value pair to a Dictionary?",
    "o": [
      "Add",
      "Insert",
      "Append",
      "Put"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "Dictionary<int, string> data = new Dictionary<int, string>();\ndata[1] = \"A\";\ndata[2] = \"B\";\ndata[1] = \"C\";\nConsole.WriteLine(data[1]);",
    "o": [
      "C",
      "A",
      "B",
      "Error"
    ]
  },
  {
    "q": "Which LINQ method is used to transform each element of a sequence?",
    "o": [
      "Select",
      "Where",
      "Take",
      "GroupBy"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "ArrayList a = new ArrayList();\na.Add(\"A\");\na.Add(\"B\");\na.Remove(\"A\");\nConsole.WriteLine(a.Count);",
    "o": [
      "1",
      "2",
      "0",
      "Error"
    ]
  },
  {
    "q": "Which collection type should you use to avoid duplicate keys and retrieve values efficiently?",
    "o": [
      "Dictionary<TKey, TValue>",
      "List<T>",
      "ArrayList",
      "Stack<T>"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "IEnumerable<int> GenerateSquares()\n{\n    for (int i = 1; i <= 3; i++)\n        yield return i * i;\n}\nforeach (var n in GenerateSquares())\n    Console.Write(n + \" \");",
    "o": [
      "1 4 9 ",
      "1 2 3 ",
      "2 4 6 ",
      "0 1 2 "
    ]
  },
  {
    "q": "Which of the following collections automatically resizes and enforces type safety?",
    "o": [
      "List<T>",
      "ArrayList",
      "Hashtable",
      "Stack"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "List<string> names = new List<string> { \"Ana\", \"Bob\", \"Cara\" };\nvar filtered = names.Where(n => n.StartsWith(\"C\"));\nConsole.WriteLine(filtered.First());",
    "o": [
      "Cara",
      "Ana",
      "Bob",
      "Error"
    ]
  },
  {
    "q": "Which of the following generic collections preserves insertion order and allows duplicates?",
    "o": [
      "List<T>",
      "Dictionary<TKey, TValue>",
      "HashSet<T>",
      "SortedSet<T>"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "List<int> numbers = new List<int> { 1, 2, 3, 4 };\nnumbers.Remove(2);\nConsole.WriteLine(string.Join(\",\", numbers));",
    "o": [
      "1,3,4",
      "1,2,3",
      "1,3",
      "2,3,4"
    ]
  },
  {
    "q": "Which interface must be implemented to enable a class to be used in a foreach loop with yield?",
    "o": [
      "IEnumerable",
      "IEnumerator",
      "IQueryable",
      "IList"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "var items = new Dictionary<string, int> { [\"a\"] = 1, [\"b\"] = 2 };\nConsole.WriteLine(items.ContainsKey(\"b\"));",
    "o": [
      "True",
      "False",
      "2",
      "b"
    ]
  },
  {
    "q": "Which of the following LINQ methods returns only distinct elements from a sequence?",
    "o": [
      "Distinct",
      "Where",
      "Select",
      "Union"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "ArrayList al = new ArrayList();\nal.Add(10);\nal.Add(20);\nal.Clear();\nConsole.WriteLine(al.Count);",
    "o": [
      "0",
      "2",
      "1",
      "Error"
    ]
  },
  {
    "q": "Which collection type is most appropriate for implementing LIFO behavior?",
    "o": [
      "Stack<T>",
      "Queue<T>",
      "List<T>",
      "Dictionary<TKey, TValue>"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "List<string> names = new List<string> { \"Zoe\", \"Amy\", \"Mike\" };\nnames.Sort();\nConsole.WriteLine(names[0]);",
    "o": [
      "Amy",
      "Zoe",
      "Mike",
      "Error"
    ]
  },
  {
    "q": "Which of the following is a benefit of using generic collections over non-generic ones like ArrayList?",
    "o": [
      "Type safety at compile time",
      "Better syntax highlighting",
      "Dynamic typing",
      "Lower memory usage"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "IEnumerable<int> GetOdds()\n{\n    for (int i = 0; i < 5; i++)\n        if (i % 2 != 0)\n            yield return i;\n}\nConsole.Write(string.Join(\",\", GetOdds()));",
    "o": [
      "1,3",
      "0,2,4",
      "0,1,2,3,4",
      "2,4"
    ]
  },
  {
    "q": "Which of the following is a correct way to declare a Dictionary with integer keys and string values?",
    "o": [
      "Dictionary<int, string> myDict = new Dictionary<int, string>();",
      "Dictionary<string, int> myDict = new Dictionary<int, string>();",
      "Dictionary myDict = new Dictionary<int, string>();",
      "var myDict = new Dictionary<string>();"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "List<int> numbers = new List<int> { 2, 4, 6 };\nnumbers.Add(8);\nnumbers.RemoveAt(0);\nConsole.WriteLine(numbers[0]);",
    "o": [
      "4",
      "2",
      "6",
      "8"
    ]
  },
  {
    "q": "Which of the following LINQ methods is used to skip a specified number of elements in a collection?",
    "o": [
      "Skip",
      "Take",
      "Where",
      "Select"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "ArrayList items = new ArrayList();\nitems.Add(\"A\");\nitems.Add(\"B\");\nConsole.WriteLine(items[1]);",
    "o": [
      "B",
      "A",
      "1",
      "Error"
    ]
  },
  {
    "q": "Which collection class allows access to elements using a unique key?",
    "o": [
      "Dictionary<TKey, TValue>",
      "List<T>",
      "Stack<T>",
      "Queue<T>"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "var data = new List<string> { \"dog\", \"cat\", \"bat\" };\nvar result = data.First(s => s.Contains(\"a\"));\nConsole.WriteLine(result);",
    "o": [
      "cat",
      "bat",
      "dog",
      "Error"
    ]
  },
  {
    "q": "Which statement is true about yield in C#?",
    "o": [
      "It enables lazy evaluation of returned data.",
      "It immediately executes the entire loop.",
      "It stores values in memory permanently.",
      "It requires the use of static methods."
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "List<int> nums = new List<int> { 1, 2, 3 };\nnums.Clear();\nConsole.WriteLine(nums.Count);",
    "o": [
      "0",
      "3",
      "1",
      "Error"
    ]
  },
  {
    "q": "Which LINQ clause is used to filter elements based on a condition?",
    "o": [
      "where",
      "select",
      "from",
      "orderby"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "IEnumerable<string> GetColors()\n{\n    yield return \"Red\";\n    yield return \"Green\";\n}\nforeach (var color in GetColors())\n    Console.Write(color + \" \");",
    "o": [
      "Red Green ",
      "Green Red ",
      "Red ",
      "Green "
    ]
  },
  {
    "q": "Which of the following statements about List<T> is true?",
    "o": [
      "List<T> provides type safety at compile time.",
      "List<T> can only store strings.",
      "List<T> does not support indexing.",
      "List<T> cannot be resized."
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "var dict = new Dictionary<string, int>();\ndict[\"x\"] = 10;\ndict[\"y\"] = 20;\ndict.Remove(\"x\");\nConsole.WriteLine(dict.ContainsKey(\"x\"));",
    "o": [
      "False",
      "True",
      "10",
      "Error"
    ]
  },
  {
    "q": "Which LINQ method is used to sort a sequence in ascending order?",
    "o": [
      "OrderBy",
      "ThenByDescending",
      "Reverse",
      "GroupBy"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "ArrayList list = new ArrayList();\nlist.Add(5);\nlist.Add(\"hello\");\nConsole.WriteLine(list[1]);",
    "o": [
      "hello",
      "5",
      "ArrayList",
      "Error"
    ]
  },
  {
    "q": "Which of the following is NOT a valid operation on a Dictionary<TKey, TValue>?",
    "o": [
      "Accessing elements by index",
      "Checking if a key exists",
      "Adding a key-value pair",
      "Removing a key"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "List<string> cities = new List<string> { \"Paris\", \"London\", \"Rome\" };\nvar result = cities.Where(c => c.StartsWith(\"L\"));\nConsole.WriteLine(result.Count());",
    "o": [
      "1",
      "2",
      "3",
      "0"
    ]
  },
  {
    "q": "Which feature allows a method to return elements one at a time without storing the entire collection in memory?",
    "o": [
      "yield",
      "params",
      "ref",
      "out"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "List<int> numbers = new List<int> { 10, 20, 30 };\nvar query = numbers.Select(n => n / 10);\nConsole.WriteLine(string.Join(\",\", query));",
    "o": [
      "1,2,3",
      "10,20,30",
      "0,0,0",
      "30,20,10"
    ]
  },
  {
    "q": "Which method returns the first element of a sequence that satisfies a condition in LINQ?",
    "o": [
      "First",
      "Select",
      "ToList",
      "Count"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "IEnumerable<int> GetRange()\n{\n    yield return 100;\n    yield return 200;\n}\nforeach (var val in GetRange())\n    Console.Write(val + \"-\");",
    "o": [
      "100-200-",
      "200-100-",
      "100-",
      "200-"
    ]
  },
  {
    "q": "Which of the following collections can store elements of different data types?",
    "o": [
      "ArrayList",
      "List<int>",
      "List<string>",
      "Dictionary<string, int>"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "List<string> fruits = new List<string> { \"Apple\", \"Banana\", \"Cherry\" };\nConsole.WriteLine(fruits.Contains(\"Banana\"));",
    "o": [
      "True",
      "False",
      "Banana",
      "Error"
    ]
  },
  {
    "q": "Which method in LINQ returns the number of elements in a collection?",
    "o": [
      "Count()",
      "Sum()",
      "First()",
      "Average()"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "ArrayList list = new ArrayList();\nlist.Add(1);\nlist.Add(\"one\");\nConsole.WriteLine(list.Count);",
    "o": [
      "2",
      "1",
      "0",
      "Error"
    ]
  },
  {
    "q": "Which statement about Dictionary<TKey, TValue> is true?",
    "o": [
      "Each key must be unique.",
      "Duplicate keys are allowed.",
      "Values must be unique.",
      "Keys must be integers."
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "List<int> list = new List<int> { 2, 4, 6, 8 };\nvar even = list.All(x => x % 2 == 0);\nConsole.WriteLine(even);",
    "o": [
      "True",
      "False",
      "0",
      "Error"
    ]
  },
  {
    "q": "Which keyword is used in C# to implement custom iterator logic?",
    "o": [
      "yield",
      "select",
      "return",
      "foreach"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "Dictionary<int, string> map = new Dictionary<int, string>();\nmap[1] = \"A\";\nmap[2] = \"B\";\nConsole.WriteLine(map[2]);",
    "o": [
      "B",
      "A",
      "2",
      "Error"
    ]
  },
  {
    "q": "Which LINQ method transforms each element in a collection?",
    "o": [
      "Select",
      "Where",
      "GroupBy",
      "FirstOrDefault"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "IEnumerable<char> GetVowels()\n{\n    yield return 'a';\n    yield return 'e';\n    yield return 'i';\n}\nforeach (var ch in GetVowels())\n    Console.Write(ch + \" \");",
    "o": [
      "a e i ",
      "i e a ",
      "a i e ",
      "Error"
    ]
  },
  {
    "q": "Which of the following allows storing key-value pairs with unique keys?",
    "o": [
      "Dictionary<string, int>",
      "List<int>",
      "ArrayList",
      "List<KeyValuePair<string, int>>"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "List<double> prices = new List<double> { 9.99, 19.99, 29.99 };\nConsole.WriteLine(prices[1]);",
    "o": [
      "19.99",
      "9.99",
      "29.99",
      "Error"
    ]
  },
  {
    "q": "Which LINQ method is used to determine whether any element in a collection satisfies a condition?",
    "o": [
      "Any",
      "All",
      "First",
      "Where"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "ArrayList items = new ArrayList();\nitems.Add(\"apple\");\nitems.Add(3.14);\nConsole.WriteLine(items[0]);",
    "o": [
      "apple",
      "3.14",
      "0",
      "Error"
    ]
  },
  {
    "q": "Which of the following best describes List<T>?",
    "o": [
      "A type-safe, resizable array.",
      "A fixed-size collection of generic type.",
      "A legacy non-generic collection.",
      "A key-value pair collection."
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "var data = new List<int> { 1, 3, 5, 7 };\nvar sum = data.Where(x => x > 2).Sum();\nConsole.WriteLine(sum);",
    "o": [
      "15",
      "16",
      "12",
      "10"
    ]
  },
  {
    "q": "Which keyword is used to pause and resume execution in an iterator block?",
    "o": [
      "yield",
      "return",
      "await",
      "break"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "Dictionary<string, int> ages = new Dictionary<string, int>();\nages.Add(\"Tom\", 25);\nConsole.WriteLine(ages.ContainsKey(\"Tom\"));",
    "o": [
      "True",
      "False",
      "Tom",
      "25"
    ]
  },
  {
    "q": "Which LINQ operator is used to select a specific number of elements from the start of a sequence?",
    "o": [
      "Take",
      "Skip",
      "Select",
      "Join"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "IEnumerable<int> GetOdds()\n{\n    for (int i = 1; i <= 5; i += 2)\n        yield return i;\n}\nforeach (var n in GetOdds())\n    Console.Write(n + \" \");",
    "o": [
      "1 3 5 ",
      "1 2 3 4 5 ",
      "1 3 ",
      "Error"
    ]
  },
  {
    "q": "Which collection is most appropriate for maintaining a list of names where duplicates are allowed and order matters?",
    "o": [
      "List<string>",
      "Dictionary<string, int>",
      "HashSet<string>",
      "ArrayList"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "ArrayList items = new ArrayList();\nitems.Add(10);\nitems.Add(\"Ten\");\nConsole.WriteLine(items.Count);",
    "o": [
      "2",
      "10",
      "Ten",
      "Error"
    ]
  },
  {
    "q": "Which LINQ method is used to skip a specified number of elements in a sequence?",
    "o": [
      "Skip",
      "Take",
      "Where",
      "First"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "List<int> list = new List<int> { 4, 5, 6 };\nlist.Insert(1, 99);\nConsole.WriteLine(list[1]);",
    "o": [
      "99",
      "4",
      "5",
      "6"
    ]
  },
  {
    "q": "Which statement about generic collections is correct?",
    "o": [
      "They enforce type safety at compile-time.",
      "They are slower than non-generic collections.",
      "They can only store reference types.",
      "They don't support iteration."
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "var words = new List<string> { \"sun\", \"moon\", \"star\" };\nvar upper = words.Select(w => w.ToUpper());\nConsole.WriteLine(upper.First());",
    "o": [
      "SUN",
      "sun",
      "moon",
      "STAR"
    ]
  },
  {
    "q": "What does the 'yield return' statement do in a method?",
    "o": [
      "It returns a value and pauses the method state.",
      "It exits the method immediately.",
      "It throws an exception.",
      "It loops back to the beginning of the method."
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "Dictionary<string, string> capitals = new Dictionary<string, string>();\ncapitals.Add(\"France\", \"Paris\");\nConsole.WriteLine(capitals[\"France\"]);",
    "o": [
      "Paris",
      "France",
      "KeyNotFoundException",
      "Error"
    ]
  },
  {
    "q": "Which LINQ method filters a sequence based on a condition?",
    "o": [
      "Where",
      "Select",
      "Take",
      "FirstOrDefault"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "IEnumerable<int> EvenNumbers()\n{\n    for (int i = 2; i <= 6; i += 2)\n        yield return i;\n}\nforeach (var num in EvenNumbers())\n    Console.Write(num + \",\");",
    "o": [
      "2,4,6,",
      "6,4,2,",
      "2,3,4,5,6,",
      "Error"
    ]
  },
  {
    "q": "Which of the following allows storing values using a strongly-typed key?",
    "o": [
      "Dictionary<int, string>",
      "ArrayList",
      "List<string>",
      "Queue"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "List<int> nums = new List<int> { 2, 4, 6 };\nnums.Remove(4);\nConsole.WriteLine(nums.Count);",
    "o": [
      "2",
      "3",
      "4",
      "0"
    ]
  },
  {
    "q": "Which method in LINQ returns the first element that satisfies a condition?",
    "o": [
      "First",
      "Where",
      "Select",
      "Take"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "ArrayList arr = new ArrayList();\narr.Add(1);\narr.Add(2);\narr.Add(3);\narr.RemoveAt(1);\nConsole.WriteLine(arr[1]);",
    "o": [
      "3",
      "2",
      "1",
      "Error"
    ]
  },
  {
    "q": "Which generic collection type would be most suitable for representing a mapping of usernames to email addresses?",
    "o": [
      "Dictionary<string, string>",
      "List<string>",
      "ArrayList",
      "Queue<string>"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "var numbers = new List<int> { 3, 6, 9 };\nvar result = numbers.Select(n => n * 2);\nConsole.WriteLine(result.Last());",
    "o": [
      "18",
      "6",
      "9",
      "12"
    ]
  },
  {
    "q": "Which keyword is required to create a method that can return elements one at a time while maintaining state?",
    "o": [
      "yield",
      "ref",
      "readonly",
      "async"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "Dictionary<int, string> dict = new Dictionary<int, string>();\ndict[100] = \"One Hundred\";\ndict[200] = \"Two Hundred\";\nConsole.WriteLine(dict.ContainsKey(300));",
    "o": [
      "False",
      "True",
      "300",
      "Error"
    ]
  },
  {
    "q": "Which LINQ method projects each element of a sequence into a new form?",
    "o": [
      "Select",
      "Where",
      "Take",
      "GroupBy"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "IEnumerable<char> GetDigits()\n{\n    yield return '1';\n    yield return '2';\n    yield return '3';\n}\nforeach (char d in GetDigits())\n    Console.Write(d);",
    "o": [
      "123",
      "321",
      "1 2 3",
      "Error"
    ]
  },
  {
    "q": "Which collection allows storing elements of different data types but lacks compile-time type checking?",
    "o": [
      "ArrayList",
      "List<T>",
      "Dictionary<TKey, TValue>",
      "Queue<T>"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "List<string> colors = new List<string> { \"Red\", \"Green\", \"Blue\" };\ncolors.Clear();\nConsole.WriteLine(colors.Count);",
    "o": [
      "0",
      "3",
      "1",
      "Error"
    ]
  },
  {
    "q": "Which LINQ method returns the number of elements in a sequence?",
    "o": [
      "Count",
      "Select",
      "Sum",
      "Any"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "ArrayList list = new ArrayList();\nlist.Add(100);\nlist.Add(\"one hundred\");\nConsole.WriteLine(list[1]);",
    "o": [
      "one hundred",
      "100",
      "Error",
      "1"
    ]
  },
  {
    "q": "Which is a correct example of a strongly typed generic collection?",
    "o": [
      "List<int>",
      "ArrayList",
      "Hashtable",
      "Queue"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "var scores = new List<int> { 1, 2, 3, 4 };\nvar filtered = scores.Where(x => x % 2 == 0);\nConsole.WriteLine(filtered.Count());",
    "o": [
      "2",
      "4",
      "0",
      "1"
    ]
  },
  {
    "q": "What type does the 'yield return' construct return from a method?",
    "o": [
      "IEnumerable",
      "object",
      "int",
      "void"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "Dictionary<string, int> stock = new Dictionary<string, int>();\nstock.Add(\"Apples\", 5);\nstock.Add(\"Bananas\", 7);\nConsole.WriteLine(stock[\"Bananas\"]);",
    "o": [
      "7",
      "5",
      "Bananas",
      "Error"
    ]
  },
  {
    "q": "Which LINQ method returns the first element or a default value if none exists?",
    "o": [
      "FirstOrDefault",
      "First",
      "Where",
      "ToList"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "IEnumerable<string> GenerateWords()\n{\n    yield return \"alpha\";\n    yield return \"beta\";\n}\nforeach (var word in GenerateWords())\n    Console.Write(word + \"-\");",
    "o": [
      "alpha-beta-",
      "beta-alpha-",
      "alpha beta",
      "Error"
    ]
  },
  {
    "q": "Which method would you use to determine if a key exists in a Dictionary?",
    "o": [
      "ContainsKey",
      "HasKey",
      "Exists",
      "FindKey"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "List<string> names = new List<string> { \"Alice\", \"Bob\", \"Charlie\" };\nnames.Remove(\"Bob\");\nConsole.WriteLine(names.Contains(\"Bob\"));",
    "o": [
      "False",
      "True",
      "Bob",
      "Error"
    ]
  },
  {
    "q": "Which LINQ method checks if any element in a sequence matches a condition?",
    "o": [
      "Any",
      "All",
      "Contains",
      "First"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "ArrayList items = new ArrayList();\nitems.Add(10);\nitems.Add(20);\nitems.Insert(1, 15);\nConsole.WriteLine(items[1]);",
    "o": [
      "15",
      "10",
      "20",
      "1"
    ]
  },
  {
    "q": "Which statement about generic collections is TRUE?",
    "o": [
      "They reduce the need for type casting.",
      "They perform implicit boxing for value types.",
      "They cannot use value types.",
      "They are slower than ArrayList."
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "var nums = new List<int> { 5, 10, 15 };\nvar result = nums.Where(n => n > 7).ToList();\nConsole.WriteLine(result[0]);",
    "o": [
      "10",
      "5",
      "7",
      "0"
    ]
  },
  {
    "q": "Which of the following types can use 'foreach' for iteration?",
    "o": [
      "IEnumerable",
      "int",
      "DictionaryEntry",
      "void"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "Dictionary<string, int> marks = new Dictionary<string, int>();\nmarks[\"John\"] = 80;\nmarks[\"Jane\"] = 90;\nConsole.WriteLine(marks.Count);",
    "o": [
      "2",
      "80",
      "90",
      "1"
    ]
  },
  {
    "q": "Which LINQ method is used to retrieve a specific number of elements from the beginning of a sequence?",
    "o": [
      "Take",
      "Skip",
      "Select",
      "OrderBy"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "IEnumerable<int> GetSquares()\n{\n    for (int i = 1; i <= 2; i++)\n        yield return i * i;\n}\nforeach (int sq in GetSquares())\n    Console.Write(sq + \" \");",
    "o": [
      "1 4 ",
      "1 2 ",
      "2 4 ",
      "1 1 "
    ]
  },
  {
    "q": "Which of the following collections provides key-value mapping with fast lookups?",
    "o": [
      "Dictionary<TKey, TValue>",
      "List<T>",
      "ArrayList",
      "Stack<T>"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "List<int> data = new List<int> { 4, 5, 6 };\ndata.Insert(1, 10);\nConsole.WriteLine(data[1]);",
    "o": [
      "10",
      "4",
      "5",
      "6"
    ]
  },
  {
    "q": "Which of the following best describes the purpose of generics in C#?",
    "o": [
      "To provide type safety without sacrificing performance",
      "To enable dynamic typing in collections",
      "To avoid the use of loops",
      "To store any type without declaring a class"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "ArrayList arr = new ArrayList();\narr.Add(100);\narr.Add(\"text\");\narr.Add(3.14);\nConsole.WriteLine(arr.Count);",
    "o": [
      "3",
      "2",
      "1",
      "Error"
    ]
  },
  {
    "q": "Which LINQ method is used to skip a specific number of elements in a sequence?",
    "o": [
      "Skip",
      "Take",
      "Where",
      "Select"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "var nums = new List<int> { 10, 20, 30 };\nvar first = nums.FirstOrDefault(n => n > 15);\nConsole.WriteLine(first);",
    "o": [
      "20",
      "10",
      "30",
      "0"
    ]
  },
  {
    "q": "Which interface is implemented when using 'yield return' to create custom iterators?",
    "o": [
      "IEnumerable",
      "IEnumerator",
      "IComparable",
      "IDisposable"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "Dictionary<char, int> frequency = new Dictionary<char, int>();\nfrequency.Add('A', 1);\nfrequency['B'] = 2;\nConsole.WriteLine(frequency['B']);",
    "o": [
      "2",
      "1",
      "A",
      "Error"
    ]
  },
  {
    "q": "Which LINQ method transforms each element in a sequence into a new form?",
    "o": [
      "Select",
      "OrderBy",
      "Where",
      "GroupBy"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "IEnumerable<int> GetOdds()\n{\n    for (int i = 1; i <= 5; i += 2)\n        yield return i;\n}\nforeach (int x in GetOdds())\n    Console.Write(x + \" \");",
    "o": [
      "1 3 5 ",
      "1 2 3 ",
      "2 4 ",
      "0 2 4 "
    ]
  },
  {
    "q": "Which of the following collections is NOT type-safe?",
    "o": [
      "ArrayList",
      "List<int>",
      "Dictionary<string, int>",
      "Queue<double>"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "List<int> nums = new List<int> { 2, 4, 6, 8 };\nnums.RemoveAt(2);\nConsole.WriteLine(string.Join(\",\", nums));",
    "o": [
      "2,4,8",
      "2,6,8",
      "4,6,8",
      "2,4,6"
    ]
  },
  {
    "q": "Which of the following best explains why generics are preferred over non-generic collections?",
    "o": [
      "They provide compile-time type checking.",
      "They use less memory.",
      "They execute faster in all cases.",
      "They support more data types."
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "ArrayList items = new ArrayList();\nitems.Add(\"A\");\nitems.Add(\"B\");\nitems.Add(\"C\");\nitems.Remove(\"B\");\nConsole.WriteLine(items[1]);",
    "o": [
      "C",
      "B",
      "A",
      "Error"
    ]
  },
  {
    "q": "Which LINQ method would you use to sort elements in ascending order?",
    "o": [
      "OrderBy",
      "Sort",
      "Arrange",
      "Ascend"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "var words = new List<string> { \"apple\", \"banana\", \"cherry\" };\nvar result = words.Where(w => w.StartsWith(\"b\"));\nConsole.WriteLine(result.First());",
    "o": [
      "banana",
      "apple",
      "cherry",
      "b"
    ]
  },
  {
    "q": "Which of the following must a method return if it uses 'yield return'?",
    "o": [
      "IEnumerable or IEnumerator",
      "void",
      "Task",
      "List"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "Dictionary<int, string> data = new Dictionary<int, string>();\ndata[1] = \"One\";\ndata[2] = \"Two\";\ndata[1] = \"First\";\nConsole.WriteLine(data[1]);",
    "o": [
      "First",
      "One",
      "Two",
      "Error"
    ]
  },
  {
    "q": "Which LINQ method would you use to convert a query result to a List?",
    "o": [
      "ToList",
      "List",
      "ConvertToList",
      "MakeList"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "IEnumerable<char> GetLetters()\n{\n    yield return 'x';\n    yield return 'y';\n    yield return 'z';\n}\nforeach (var ch in GetLetters())\n    Console.Write(ch + \" \");",
    "o": [
      "x y z ",
      "x y ",
      "y z ",
      "z x y "
    ]
  },
  {
    "q": "Which collection automatically resizes and holds objects of any data type, but is not type-safe?",
    "o": [
      "ArrayList",
      "List<T>",
      "Dictionary<TKey, TValue>",
      "HashSet<T>"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "List<string> fruits = new List<string> { \"Mango\", \"Apple\", \"Peach\" };\nfruits.Sort();\nConsole.WriteLine(fruits[0]);",
    "o": [
      "Apple",
      "Mango",
      "Peach",
      "fruits"
    ]
  },
  {
    "q": "Which keyword is required to define a generic method or class?",
    "o": [
      "<T>",
      "generic",
      "type",
      "var"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "ArrayList list = new ArrayList();\nlist.Add(5);\nlist.Add(\"Five\");\nConsole.WriteLine(list[1]);",
    "o": [
      "Five",
      "5",
      "1",
      "Error"
    ]
  },
  {
    "q": "Which LINQ method is typically used to filter a sequence based on a condition?",
    "o": [
      "Where",
      "Filter",
      "Select",
      "Map"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "var numbers = new List<int> { 3, 6, 9 };\nvar count = numbers.Count(n => n > 4);\nConsole.WriteLine(count);",
    "o": [
      "2",
      "3",
      "1",
      "0"
    ]
  },
  {
    "q": "Which of the following is TRUE about yield return in C#?",
    "o": [
      "It returns an item while preserving the state of the method.",
      "It terminates the iterator method immediately.",
      "It can be used in async methods.",
      "It returns all values at once like a list."
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "Dictionary<string, int> ages = new Dictionary<string, int>();\nages.Add(\"Tom\", 25);\nages.Add(\"Jerry\", 22);\nConsole.WriteLine(ages.ContainsKey(\"Spike\"));",
    "o": [
      "False",
      "True",
      "Spike",
      "Error"
    ]
  },
  {
    "q": "Which of these LINQ methods retrieves the last matching element or a default value if none found?",
    "o": [
      "LastOrDefault",
      "First",
      "Single",
      "FindLast"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "IEnumerable<int> GenerateEvens()\n{\n    for (int i = 0; i < 5; i++)\n        if (i % 2 == 0) yield return i;\n}\nforeach (int num in GenerateEvens())\n    Console.Write(num + \" \");",
    "o": [
      "0 2 4 ",
      "1 3 5 ",
      "0 1 2 3 4 ",
      "2 4 6 "
    ]
  },
  {
    "q": "Which collection allows duplicate values and maintains insertion order?",
    "o": [
      "List<T>",
      "Dictionary<TKey, TValue>",
      "HashSet<T>",
      "SortedDictionary<TKey, TValue>"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "ArrayList list = new ArrayList();\nlist.Add(1);\nlist.Add(2);\nlist.Add(3);\nlist.Remove(2);\nConsole.WriteLine(list.Contains(2));",
    "o": [
      "False",
      "True",
      "2",
      "Error"
    ]
  },
  {
    "q": "Which of the following statements about Dictionary<TKey, TValue> is true?",
    "o": [
      "Each key must be unique.",
      "Duplicate keys are allowed.",
      "Values must be unique.",
      "Keys must be integers."
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "List<string> names = new List<string> { \"John\", \"Alice\", \"Bob\" };\nvar filtered = names.Where(n => n.Length == 4);\nConsole.WriteLine(filtered.Count());",
    "o": [
      "2",
      "1",
      "3",
      "0"
    ]
  },
  {
    "q": "Which interface must be implemented to use 'foreach' on a custom collection?",
    "o": [
      "IEnumerable",
      "IComparable",
      "IClonable",
      "IDisposable"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "Dictionary<int, string> colors = new Dictionary<int, string>();\ncolors[1] = \"Red\";\ncolors[2] = \"Blue\";\nConsole.WriteLine(colors.Count);",
    "o": [
      "2",
      "1",
      "0",
      "Error"
    ]
  },
  {
    "q": "Which of the following LINQ methods returns the first element that satisfies a condition?",
    "o": [
      "First",
      "Where",
      "Select",
      "Take"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "IEnumerable<int> GenerateNumbers()\n{\n    yield return 1;\n    yield return 2;\n    yield break;\n    yield return 3;\n}\nforeach (int i in GenerateNumbers())\n    Console.Write(i + \" \");",
    "o": [
      "1 2 ",
      "1 2 3 ",
      "1 3 ",
      "2 3 "
    ]
  },
  {
    "q": "Which of these collections does NOT allow duplicate keys?",
    "o": [
      "Dictionary<TKey, TValue>",
      "List<T>",
      "ArrayList",
      "Queue<T>"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "List<int> nums = new List<int> { 1, 2, 3, 4 };\nnums.Clear();\nConsole.WriteLine(nums.Count);",
    "o": [
      "0",
      "1",
      "4",
      "Error"
    ]
  },
  {
    "q": "Which collection would you use to associate keys with values in C#?",
    "o": [
      "Dictionary<TKey, TValue>",
      "List<T>",
      "ArrayList",
      "Queue<T>"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "List<int> numbers = new List<int> { 4, 5, 6 };\nConsole.WriteLine(numbers.IndexOf(5));",
    "o": [
      "1",
      "0",
      "2",
      "-1"
    ]
  },
  {
    "q": "Which statement best describes yield return in C#?",
    "o": [
      "It defers execution and allows lazy evaluation.",
      "It immediately returns a list.",
      "It stops the execution permanently.",
      "It restarts the loop from the beginning."
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "ArrayList arr = new ArrayList();\narr.Add(10);\narr.Add(\"Ten\");\nConsole.WriteLine(arr[0].GetType());",
    "o": [
      "System.Int32",
      "System.String",
      "System.Object",
      "System.Array"
    ]
  },
  {
    "q": "Which LINQ method transforms each element in a collection?",
    "o": [
      "Select",
      "Where",
      "GroupBy",
      "Aggregate"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "Dictionary<string, int> dict = new Dictionary<string, int>();\ndict[\"A\"] = 1;\ndict[\"B\"] = 2;\ndict.Remove(\"A\");\nConsole.WriteLine(dict.ContainsKey(\"A\"));",
    "o": [
      "False",
      "True",
      "0",
      "Error"
    ]
  },
  {
    "q": "Which collection would you choose for storing elements in FIFO (First-In-First-Out) order?",
    "o": [
      "Queue<T>",
      "Stack<T>",
      "List<T>",
      "Dictionary<T, K>"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "List<string> cities = new List<string> { \"Tokyo\", \"Berlin\", \"Seoul\" };\nConsole.WriteLine(cities.Contains(\"Seoul\"));",
    "o": [
      "True",
      "False",
      "Seoul",
      "Error"
    ]
  },
  {
    "q": "Which generic interface supports iteration over a collection?",
    "o": [
      "IEnumerable<T>",
      "IComparable<T>",
      "IList<T>",
      "IDisposable<T>"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "IEnumerable<string> GetNames()\n{\n    yield return \"Anna\";\n    yield return \"Ben\";\n    yield return \"Cara\";\n}\nConsole.WriteLine(GetNames().First());",
    "o": [
      "Anna",
      "Ben",
      "Cara",
      "Error"
    ]
  },
  {
    "q": "Which collection type is most appropriate for storing key-value pairs with fast lookups?",
    "o": [
      "Dictionary<TKey, TValue>",
      "List<T>",
      "ArrayList",
      "Queue<T>"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "List<int> nums = new List<int> { 1, 2, 3, 4 };\nvar result = nums.Where(n => n % 2 == 0);\nConsole.WriteLine(result.Sum());",
    "o": [
      "6",
      "10",
      "4",
      "2"
    ]
  },
  {
    "q": "Which of the following statements about List<T> is TRUE?",
    "o": [
      "It is a type-safe, resizable array.",
      "It can only store reference types.",
      "It cannot be sorted.",
      "It uses boxing for value types."
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "ArrayList list = new ArrayList();\nlist.Add(100);\nlist.Add(\"C#\");\nConsole.WriteLine(list[1]);",
    "o": [
      "C#",
      "100",
      "System.Object",
      "Error"
    ]
  },
  {
    "q": "Which of the following LINQ methods is used to flatten nested collections?",
    "o": [
      "SelectMany",
      "Select",
      "GroupBy",
      "Aggregate"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "Dictionary<string, int> scores = new Dictionary<string, int>();\nscores.Add(\"Alex\", 90);\nscores[\"Ben\"] = 85;\nConsole.WriteLine(scores[\"Ben\"]);",
    "o": [
      "85",
      "90",
      "Ben",
      "Error"
    ]
  },
  {
    "q": "Which of the following best describes IEnumerable<T> in C#?",
    "o": [
      "It enables iteration over a collection using foreach.",
      "It stores elements in sorted order.",
      "It guarantees unique elements only.",
      "It automatically resizes based on capacity."
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "List<string> colors = new List<string> { \"Red\", \"Green\", \"Blue\" };\ncolors.Insert(1, \"Yellow\");\nConsole.WriteLine(colors[1]);",
    "o": [
      "Yellow",
      "Red",
      "Green",
      "Blue"
    ]
  },
  {
    "q": "Which keyword is used to define an iterator block that lazily returns elements one at a time?",
    "o": [
      "yield",
      "lazy",
      "return",
      "defer"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "IEnumerable<int> CountUpTo(int max)\n{\n    for (int i = 1; i <= max; i++)\n        yield return i;\n}\nConsole.WriteLine(CountUpTo(3).Last());",
    "o": [
      "3",
      "1",
      "2",
      "0"
    ]
  },
  {
    "q": "Which of the following collections is not type-safe in C#?",
    "o": [
      "ArrayList",
      "List<T>",
      "Dictionary<TKey, TValue>",
      "Queue<T>"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "List<string> animals = new List<string> { \"Cat\", \"Dog\", \"Elephant\" };\nConsole.WriteLine(animals[2]);",
    "o": [
      "Elephant",
      "Dog",
      "Cat",
      "Error"
    ]
  },
  {
    "q": "Which LINQ method returns true if at least one element satisfies a given condition?",
    "o": [
      "Any",
      "All",
      "First",
      "Select"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "Dictionary<int, string> map = new Dictionary<int, string>();\nmap.Add(1, \"One\");\nmap.Add(2, \"Two\");\nConsole.WriteLine(map.ContainsKey(3));",
    "o": [
      "False",
      "True",
      "Error",
      "3"
    ]
  },
  {
    "q": "Which of the following is required to support `foreach` in a custom class?",
    "o": [
      "Implement IEnumerable or IEnumerable<T>",
      "Implement IDisposable",
      "Derive from List<T>",
      "Implement ICloneable"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "ArrayList arr = new ArrayList { 1, 2, 3 };\narr.Insert(1, 100);\nConsole.WriteLine(arr[1]);",
    "o": [
      "100",
      "1",
      "2",
      "3"
    ]
  },
  {
    "q": "Which of the following C# features is most suitable for generating values on demand?",
    "o": [
      "yield return",
      "params",
      "ref return",
      "async await"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "List<int> values = new List<int> { 2, 4, 6, 8 };\nvar query = values.Where(v => v > 5);\nConsole.WriteLine(query.Count());",
    "o": [
      "2",
      "3",
      "4",
      "1"
    ]
  },
  {
    "q": "Which collection automatically resizes and enforces type safety at compile time?",
    "o": [
      "List<T>",
      "ArrayList",
      "Hashtable",
      "Queue"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "IEnumerable<char> Alphabet()\n{\n    for (char c = 'A'; c <= 'C'; c++)\n        yield return c;\n}\nConsole.WriteLine(string.Join(\"-\", Alphabet()));",
    "o": [
      "A-B-C",
      "ABC",
      "A C",
      "A-B C"
    ]
  },
  {
    "q": "Which of the following methods can be used to check if a key exists in a Dictionary?",
    "o": [
      "ContainsKey",
      "Exists",
      "HasKey",
      "KeyExists"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "List<int> nums = new List<int> { 1, 3, 5, 7 };\nConsole.WriteLine(nums.FirstOrDefault(n => n > 4));",
    "o": [
      "5",
      "7",
      "3",
      "0"
    ]
  },
  {
    "q": "Which of the following collections allows duplicate keys?",
    "o": [
      "None of the above",
      "Dictionary<TKey, TValue>",
      "SortedDictionary<TKey, TValue>",
      "Hashtable"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "ArrayList items = new ArrayList();\nitems.Add(\"Apple\");\nitems.Add(123);\nConsole.WriteLine(items.Count);",
    "o": [
      "2",
      "1",
      "0",
      "Error"
    ]
  },
  {
    "q": "Which LINQ method is used to retrieve a single element or the default value if no match is found?",
    "o": [
      "SingleOrDefault",
      "First",
      "Where",
      "ToList"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "Dictionary<string, string> capitals = new Dictionary<string, string>();\ncapitals[\"Japan\"] = \"Tokyo\";\ncapitals[\"France\"] = \"Paris\";\nConsole.WriteLine(capitals[\"France\"]);",
    "o": [
      "Paris",
      "France",
      "Tokyo",
      "Error"
    ]
  },
  {
    "q": "Which interface must be implemented to support 'yield return' in a custom iterator?",
    "o": [
      "IEnumerable",
      "IDisposable",
      "IList",
      "IComparer"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "List<string> names = new List<string> { \"Tom\", \"Jerry\" };\nnames.Clear();\nConsole.WriteLine(names.Count);",
    "o": [
      "0",
      "2",
      "1",
      "NullReferenceException"
    ]
  },
  {
    "q": "Which of the following best describes the purpose of the 'yield break' statement?",
    "o": [
      "It terminates the iterator block early.",
      "It returns the next value from the iterator.",
      "It skips the current iteration.",
      "It throws an exception."
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "List<int> list = new List<int> { 2, 4, 6 };\nvar squares = list.Select(x => x * x);\nConsole.WriteLine(string.Join(\",\", squares));",
    "o": [
      "4,16,36",
      "2,4,6",
      "8,12,18",
      "Error"
    ]
  },
  {
    "q": "Which of the following allows you to define a strongly-typed list in C#?",
    "o": [
      "List<T>",
      "ArrayList",
      "Hashtable",
      "Queue"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "var list = new List<int> { 10, 20, 30 };\nlist.Remove(20);\nConsole.WriteLine(list.Count);",
    "o": [
      "2",
      "3",
      "1",
      "0"
    ]
  },
  {
    "q": "Which collection type should you use to maintain the insertion order and allow duplicates?",
    "o": [
      "List<T>",
      "Dictionary<TKey, TValue>",
      "HashSet<T>",
      "SortedDictionary<TKey, TValue>"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "var dict = new Dictionary<string, int>();\ndict[\"A\"] = 1;\ndict[\"B\"] = 2;\ndict.Remove(\"A\");\nConsole.WriteLine(dict.ContainsKey(\"A\"));",
    "o": [
      "False",
      "True",
      "1",
      "Error"
    ]
  },
  {
    "q": "Which keyword enables deferred execution when iterating through a sequence?",
    "o": [
      "yield",
      "return",
      "await",
      "goto"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "ArrayList arr = new ArrayList();\narr.Add(\"Hello\");\narr.Add(42);\nConsole.WriteLine(arr[0]);",
    "o": [
      "Hello",
      "42",
      "0",
      "System.Object"
    ]
  },
  {
    "q": "Which LINQ operator returns the first element that satisfies a condition or throws an exception if none is found?",
    "o": [
      "First",
      "FirstOrDefault",
      "Where",
      "SingleOrDefault"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "List<int> data = new List<int> { 3, 6, 9 };\nvar even = data.Where(x => x % 2 == 0);\nConsole.WriteLine(even.Any());",
    "o": [
      "False",
      "True",
      "0",
      "3"
    ]
  },
  {
    "q": "Which of the following collections does NOT preserve type safety?",
    "o": [
      "ArrayList",
      "List<int>",
      "Dictionary<string, string>",
      "List<string>"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "IEnumerable<int> GetSquares(int count)\n{\n    for (int i = 1; i <= count; i++)\n        yield return i * i;\n}\nConsole.WriteLine(GetSquares(2).Last());",
    "o": [
      "4",
      "1",
      "2",
      "Error"
    ]
  },
  {
    "q": "Which method is used to retrieve a value from a Dictionary safely without risking an exception?",
    "o": [
      "TryGetValue",
      "GetValue",
      "FindValue",
      "GetOrDefault"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "List<string> fruits = new List<string> { \"Apple\", \"Banana\", \"Cherry\" };\nConsole.WriteLine(fruits.IndexOf(\"Banana\"));",
    "o": [
      "1",
      "0",
      "2",
      "-1"
    ]
  },
  {
    "q": "Which generic collection allows you to access elements by a key?",
    "o": [
      "Dictionary<TKey, TValue>",
      "List<T>",
      "Queue<T>",
      "Stack<T>"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "ArrayList items = new ArrayList { 10, 20, 30 };\nitems.RemoveAt(1);\nConsole.WriteLine(items[1]);",
    "o": [
      "30",
      "10",
      "20",
      "Error"
    ]
  },
  {
    "q": "Which LINQ method can transform each element in a collection into a new form?",
    "o": [
      "Select",
      "Where",
      "First",
      "Aggregate"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "List<int> nums = new List<int> { 1, 2, 3, 4 };\nvar result = nums.Where(n => n % 2 == 0).ToList();\nConsole.WriteLine(result.Count);",
    "o": [
      "2",
      "4",
      "3",
      "0"
    ]
  },
  {
    "q": "Which of the following best describes the yield keyword?",
    "o": [
      "It enables deferred execution and stateful iteration.",
      "It terminates a loop immediately.",
      "It passes control to another thread.",
      "It creates a background task."
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "Dictionary<string, int> scores = new Dictionary<string, int>();\nscores.Add(\"John\", 80);\nscores[\"John\"] = 90;\nConsole.WriteLine(scores[\"John\"]);",
    "o": [
      "90",
      "80",
      "0",
      "Error"
    ]
  },
  {
    "q": "Which method in List<T> removes all elements that match a condition?",
    "o": [
      "RemoveAll",
      "Clear",
      "RemoveAt",
      "Remove"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "IEnumerable<int> GenerateOdds(int limit)\n{\n    for (int i = 1; i <= limit; i += 2)\n        yield return i;\n}\nConsole.WriteLine(GenerateOdds(5).ElementAt(1));",
    "o": [
      "3",
      "1",
      "5",
      "Error"
    ]
  },
  {
    "q": "Which of the following statements about Dictionary<TKey, TValue> is true?",
    "o": [
      "It does not allow duplicate keys.",
      "It allows duplicate keys.",
      "It maintains insertion order.",
      "It accepts null as key for value types."
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "List<string> colors = new List<string> { \"Red\", \"Green\", \"Blue\" };\ncolors.Insert(1, \"Yellow\");\nConsole.WriteLine(colors[1]);",
    "o": [
      "Yellow",
      "Green",
      "Blue",
      "Red"
    ]
  },
  {
    "q": "Which collection would be ideal for a LIFO (Last-In-First-Out) data structure using generics?",
    "o": [
      "Stack<T>",
      "Queue<T>",
      "List<T>",
      "ArrayList"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "ArrayList data = new ArrayList();\ndata.Add(100);\ndata.Add(\"Test\");\nConsole.WriteLine(data[1]);",
    "o": [
      "Test",
      "100",
      "1",
      "System.Object"
    ]
  },
  {
    "q": "Which LINQ extension method is used to filter a collection?",
    "o": [
      "Where",
      "Select",
      "OrderBy",
      "GroupBy"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "var numbers = new List<int> { 5, 10, 15 };\nvar sum = numbers.Sum();\nConsole.WriteLine(sum);",
    "o": [
      "30",
      "15",
      "10",
      "25"
    ]
  },
  {
    "q": "Which of the following generic collections is ordered and allows duplicate values?",
    "o": [
      "List<T>",
      "Dictionary<TKey, TValue>",
      "HashSet<T>",
      "SortedDictionary<TKey, TValue>"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "List<int> list = new List<int> { 1, 2, 3 };\nlist.Reverse();\nConsole.WriteLine(string.Join(\",\", list));",
    "o": [
      "3,2,1",
      "1,2,3",
      "2,3,1",
      "Error"
    ]
  },
  {
    "q": "Which method is used to iterate through a collection one element at a time using 'yield'?",
    "o": [
      "yield return",
      "return yield",
      "yield foreach",
      "return foreach"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "List<string> list = new List<string> { \"A\", \"B\", \"C\" };\nConsole.WriteLine(list.Contains(\"B\"));",
    "o": [
      "True",
      "False",
      "B",
      "1"
    ]
  },
  {
    "q": "Which of the following best describes ArrayList in C#?",
    "o": [
      "It stores elements as objects and is not type-safe.",
      "It stores elements of a specific type and is type-safe.",
      "It supports only value types.",
      "It cannot store null values."
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "List<int> nums = new List<int> { 1, 2, 3, 4 };\nvar squared = nums.Select(x => x * x);\nConsole.WriteLine(squared.ElementAt(2));",
    "o": [
      "9",
      "4",
      "3",
      "16"
    ]
  },
  {
    "q": "Which of the following is a correct way to declare a Dictionary in C#?",
    "o": [
      "Dictionary<string, int> dict = new Dictionary<string, int>();",
      "Dictionary<int> dict = new Dictionary<int>();",
      "Dictionary dict = new Dictionary();",
      "Dictionary<string> dict = new Dictionary<string>();"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "var names = new List<string> { \"Tom\", \"Jerry\", \"Spike\" };\nvar result = names.FirstOrDefault(n => n.StartsWith(\"J\"));\nConsole.WriteLine(result);",
    "o": [
      "Jerry",
      "Tom",
      "Spike",
      "null"
    ]
  },
  {
    "q": "Which method adds a key-value pair to a Dictionary only if the key does not already exist?",
    "o": [
      "TryAdd",
      "Add",
      "Insert",
      "Append"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "ArrayList list = new ArrayList();\nlist.Add(\"One\");\nlist.Add(2);\nlist.Add(true);\nConsole.WriteLine(list.Count);",
    "o": [
      "3",
      "2",
      "1",
      "Error"
    ]
  },
  {
    "q": "Which LINQ method returns the number of elements in a collection?",
    "o": [
      "Count",
      "Sum",
      "Max",
      "First"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "List<int> data = new List<int> { 2, 4, 6 };\nvar result = data.All(x => x % 2 == 0);\nConsole.WriteLine(result);",
    "o": [
      "True",
      "False",
      "2",
      "0"
    ]
  },
  {
    "q": "Which of the following keywords enables custom iteration over a collection using deferred execution?",
    "o": [
      "yield return",
      "return yield",
      "defer",
      "async return"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "Dictionary<string, int> stock = new Dictionary<string, int>();\nstock.Add(\"Pens\", 10);\nstock.Add(\"Pencils\", 20);\nConsole.WriteLine(stock[\"Pencils\"]);",
    "o": [
      "20",
      "10",
      "Pens",
      "Error"
    ]
  },
  {
    "q": "Which generic collection maintains key-value pairs and provides fast lookup by key?",
    "o": [
      "Dictionary<TKey, TValue>",
      "List<T>",
      "Queue<T>",
      "ArrayList"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "var numbers = new List<int> { 2, 4, 6, 8 };\nvar evenCount = numbers.Count(n => n % 2 == 0);\nConsole.WriteLine(evenCount);",
    "o": [
      "4",
      "2",
      "0",
      "1"
    ]
  },
  {
    "q": "Which of the following is true about List<T>?",
    "o": [
      "It is a type-safe, resizable array.",
      "It can only store object types.",
      "It has a fixed size.",
      "It does not support LINQ."
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "ArrayList list = new ArrayList();\nlist.Add(1);\nlist.Add(\"Hello\");\nlist.Add(3.14);\nConsole.WriteLine(list[2]);",
    "o": [
      "3.14",
      "1",
      "Hello",
      "ArrayList"
    ]
  },
  {
    "q": "Which LINQ method returns the first element in a sequence that matches a condition?",
    "o": [
      "First",
      "Select",
      "Where",
      "Any"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "List<string> animals = new List<string> { \"Dog\", \"Cat\", \"Elephant\" };\nanimals.Remove(\"Cat\");\nConsole.WriteLine(string.Join(\",\", animals));",
    "o": [
      "Dog,Elephant",
      "Cat,Dog,Elephant",
      "Dog,Cat",
      "Elephant,Cat"
    ]
  },
  {
    "q": "Which C# feature allows iteration over a collection with deferred execution?",
    "o": [
      "yield return",
      "async await",
      "ref return",
      "defer"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "var words = new List<string> { \"one\", \"two\", \"three\" };\nvar upper = words.Select(w => w.ToUpper());\nConsole.WriteLine(upper.ElementAt(0));",
    "o": [
      "ONE",
      "one",
      "One",
      "TWO"
    ]
  },
  {
    "q": "Which collection type should be used when you need to retrieve items based on a unique key?",
    "o": [
      "Dictionary<TKey, TValue>",
      "List<T>",
      "Stack<T>",
      "ArrayList"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "IEnumerable<int> GenerateSequence()\n{\n    yield return 10;\n    yield return 20;\n    yield return 30;\n}\nConsole.WriteLine(GenerateSequence().Last());",
    "o": [
      "30",
      "20",
      "10",
      "0"
    ]
  },
  {
    "q": "Which generic collection is best suited for maintaining a list of unique elements?",
    "o": [
      "HashSet<T>",
      "List<T>",
      "ArrayList",
      "Queue<T>"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "Dictionary<int, string> map = new Dictionary<int, string>();\nmap[1] = \"A\";\nmap[2] = \"B\";\nConsole.WriteLine(map.ContainsKey(3));",
    "o": [
      "False",
      "True",
      "0",
      "Error"
    ]
  },
  {
    "q": "Which of the following statements is true about ArrayList?",
    "o": [
      "It can store elements of different data types.",
      "It only stores value types.",
      "It enforces compile-time type safety.",
      "It is a generic collection."
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "List<int> values = new List<int> { 10, 20, 30 };\nvalues.Clear();\nConsole.WriteLine(values.Count);",
    "o": [
      "0",
      "3",
      "1",
      "NullReferenceException"
    ]
  },
  {
    "q": "Which LINQ method returns the maximum value in a numeric list?",
    "o": [
      "Max",
      "Count",
      "Sum",
      "First"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "List<string> items = new List<string> { \"apple\", \"banana\" };\nitems.Add(\"cherry\");\nConsole.WriteLine(items[2]);",
    "o": [
      "cherry",
      "banana",
      "apple",
      "IndexOutOfRangeException"
    ]
  },
  {
    "q": "Which keyword is used to return values one at a time in an iterator block?",
    "o": [
      "yield",
      "return",
      "out",
      "select"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "var nums = new List<int> { 1, 2, 3, 4, 5 };\nvar filtered = nums.Where(n => n > 3);\nConsole.WriteLine(filtered.Count());",
    "o": [
      "2",
      "3",
      "4",
      "5"
    ]
  },
  {
    "q": "Which of the following is true about List<T>?",
    "o": [
      "It provides type safety and dynamic resizing.",
      "It allows storing elements of multiple types.",
      "It is not compatible with LINQ.",
      "It is fixed in size."
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "List<string> data = new List<string> { \"X\", \"Y\", \"Z\" };\ndata.RemoveAt(1);\nConsole.WriteLine(string.Join(\"-\", data));",
    "o": [
      "X-Z",
      "X-Y-Z",
      "Y-Z",
      "X-Y"
    ]
  },
  {
    "q": "Which collection is NOT type-safe and stores elements as objects in C#?",
    "o": [
      "ArrayList",
      "List<T>",
      "Dictionary<TKey, TValue>",
      "Queue<T>"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "var list = new List<int> { 3, 6, 9 };\nvar first = list.First();\nConsole.WriteLine(first);",
    "o": [
      "3",
      "6",
      "9",
      "0"
    ]
  },
  {
    "q": "Which of the following best describes the purpose of 'yield return' in C#?",
    "o": [
      "It allows deferred execution in custom iterators.",
      "It creates a new thread.",
      "It immediately exits a method.",
      "It returns control to the caller with an exception."
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "Dictionary<string, int> data = new Dictionary<string, int>();\ndata[\"x\"] = 100;\ndata[\"y\"] = 200;\nConsole.WriteLine(data[\"x\"]);",
    "o": [
      "100",
      "200",
      "x",
      "0"
    ]
  },
  {
    "q": "Which LINQ method transforms each element in a collection?",
    "o": [
      "Select",
      "Where",
      "First",
      "Count"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "List<string> list = new List<string> { \"a\", \"b\", \"c\" };\nlist.Insert(1, \"x\");\nConsole.WriteLine(string.Join(\",\", list));",
    "o": [
      "a,x,b,c",
      "a,b,x,c",
      "x,a,b,c",
      "a,b,c,x"
    ]
  },
  {
    "q": "Which of the following is true about Dictionary<TKey, TValue> in C#?",
    "o": [
      "It does not allow duplicate keys.",
      "It allows duplicate keys.",
      "It does not store values.",
      "It stores elements in a sorted order by default."
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "List<int> nums = new List<int> { 1, 2, 3, 4 };\nvar doubled = nums.Select(n => n * 2);\nConsole.WriteLine(doubled.Last());",
    "o": [
      "8",
      "4",
      "2",
      "1"
    ]
  },
  {
    "q": "Which method would you use to check if a Dictionary contains a specific value?",
    "o": [
      "ContainsValue",
      "ContainsKey",
      "HasValue",
      "Exists"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "IEnumerable<int> CountDown()\n{\n    for (int i = 3; i > 0; i--)\n        yield return i;\n}\nConsole.WriteLine(CountDown().First());",
    "o": [
      "3",
      "1",
      "0",
      "Error"
    ]
  },
  {
    "q": "Which of the following collection types supports key-based access and is generic?",
    "o": [
      "Dictionary<TKey, TValue>",
      "ArrayList",
      "List<T>",
      "Queue"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "var names = new List<string> { \"Anna\", \"Ben\", \"Cara\" };\nnames.Reverse();\nConsole.WriteLine(names[0]);",
    "o": [
      "Cara",
      "Anna",
      "Ben",
      "names"
    ]
  },
  {
    "q": "Which collection should be avoided when type safety is required at compile-time?",
    "o": [
      "ArrayList",
      "List<int>",
      "Dictionary<string, int>",
      "Queue<string>"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "List<int> scores = new List<int> { 10, 20, 30 };\nConsole.WriteLine(scores.Contains(20));",
    "o": [
      "True",
      "False",
      "20",
      "0"
    ]
  },
  {
    "q": "Which LINQ method returns a boolean indicating if any elements match a condition?",
    "o": [
      "Any",
      "First",
      "Where",
      "Count"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "var items = new List<string> { \"pen\", \"pencil\", \"eraser\" };\nConsole.WriteLine(items.IndexOf(\"pencil\"));",
    "o": [
      "1",
      "0",
      "2",
      "-1"
    ]
  },
  {
    "q": "Which of the following collections guarantees that items are returned in insertion order?",
    "o": [
      "List<T>",
      "Dictionary<TKey, TValue>",
      "HashSet<T>",
      "ArrayList"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "List<int> list = new List<int> { 1, 2, 3 };\nlist.Remove(2);\nConsole.WriteLine(string.Join(\" \", list));",
    "o": [
      "1 3",
      "2 3",
      "1 2",
      "3 2"
    ]
  },
  {
    "q": "What does the 'yield break' statement do inside an iterator block?",
    "o": [
      "Stops the iteration immediately.",
      "Returns the next value.",
      "Throws an exception.",
      "Skips the current element."
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "IEnumerable<char> GetVowels()\n{\n    yield return 'a';\n    yield return 'e';\n    yield return 'i';\n}\nConsole.WriteLine(GetVowels().Count());",
    "o": [
      "3",
      "2",
      "1",
      "0"
    ]
  },
  {
    "q": "Which of the following C# collections allows storing key-value pairs with generic type safety?",
    "o": [
      "Dictionary<TKey, TValue>",
      "ArrayList",
      "List<T>",
      "SortedList"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "var values = new List<int> { 5, 10, 15 };\nvalues.Add(20);\nConsole.WriteLine(values.Count);",
    "o": [
      "4",
      "3",
      "5",
      "20"
    ]
  },
  {
    "q": "Which of the following is a key benefit of using List<T> over ArrayList?",
    "o": [
      "Type safety at compile-time",
      "Better performance always",
      "Can hold multiple data types",
      "Fixed size"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "var dict = new Dictionary<string, int>();\ndict.Add(\"A\", 1);\ndict.Add(\"B\", 2);\nConsole.WriteLine(dict[\"B\"]);",
    "o": [
      "2",
      "1",
      "B",
      "Error"
    ]
  },
  {
    "q": "Which LINQ method retrieves the first element matching a condition or a default value if none is found?",
    "o": [
      "FirstOrDefault",
      "First",
      "Where",
      "Select"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "List<string> names = new List<string> { \"Tom\", \"Jerry\" };\nConsole.WriteLine(names.Exists(n => n.StartsWith(\"T\")));",
    "o": [
      "True",
      "False",
      "T",
      "Error"
    ]
  },
  {
    "q": "Which of the following statements is true about the yield keyword?",
    "o": [
      "It enables deferred execution and simplifies iterator implementation.",
      "It is used to define anonymous methods.",
      "It converts any method into an extension method.",
      "It is required in all LINQ queries."
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "List<int> numbers = new List<int> { 3, 6, 9 };\nvar even = numbers.Where(n => n % 2 == 0);\nConsole.WriteLine(even.Any());",
    "o": [
      "False",
      "True",
      "6",
      "0"
    ]
  },
  {
    "q": "Which interface must be implemented to create a custom collection that can be iterated with foreach?",
    "o": [
      "IEnumerable",
      "IDisposable",
      "IFormattable",
      "ICloneable"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "IEnumerable<int> Generate()\n{\n    yield return 1;\n    yield return 2;\n    yield break;\n    yield return 3;\n}\nConsole.WriteLine(Generate().Count());",
    "o": [
      "2",
      "3",
      "1",
      "0"
    ]
  },
  {
    "q": "Which generic collection allows fast lookup of values based on unique keys?",
    "o": [
      "Dictionary<TKey, TValue>",
      "List<T>",
      "ArrayList",
      "Stack<T>"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "List<string> fruits = new List<string> { \"apple\", \"banana\", \"cherry\" };\nConsole.WriteLine(fruits[2]);",
    "o": [
      "cherry",
      "banana",
      "apple",
      "2"
    ]
  },
  {
    "q": "Which method is used to determine whether a key exists in a Dictionary?",
    "o": [
      "ContainsKey",
      "Exists",
      "HasKey",
      "Contains"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "ArrayList list = new ArrayList();\nlist.Add(100);\nlist.Add(\"hello\");\nConsole.WriteLine(list[1]);",
    "o": [
      "hello",
      "100",
      "list",
      "1"
    ]
  },
  {
    "q": "Which LINQ method returns the number of elements in a sequence?",
    "o": [
      "Count",
      "Sum",
      "Length",
      "Get"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "List<int> data = new List<int> { 2, 4, 6, 8 };\nvar query = data.Where(x => x > 5);\nConsole.WriteLine(query.Count());",
    "o": [
      "2",
      "3",
      "1",
      "0"
    ]
  },
  {
    "q": "Which of the following describes the behavior of 'yield return'?",
    "o": [
      "Returns a value and pauses method execution.",
      "Immediately terminates the method.",
      "Returns multiple values at once.",
      "Replaces the foreach loop."
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "Dictionary<int, string> days = new Dictionary<int, string>();\ndays[1] = \"Monday\";\ndays[2] = \"Tuesday\";\nConsole.WriteLine(days.Count);",
    "o": [
      "2",
      "1",
      "0",
      "Error"
    ]
  },
  {
    "q": "Which of the following can be used to create a lazily evaluated sequence in C#?",
    "o": [
      "yield",
      "async",
      "ref",
      "base"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "List<int> values = new List<int> { 1, 2, 3 };\nvalues.Clear();\nConsole.WriteLine(values.Count);",
    "o": [
      "0",
      "1",
      "3",
      "NullReferenceException"
    ]
  },
  {
    "q": "Which of the following allows storing elements in a non-generic collection?",
    "o": [
      "ArrayList",
      "List<T>",
      "Dictionary<TKey, TValue>",
      "Queue<T>"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "var list = new List<string> { \"one\", \"two\", \"three\" };\nConsole.WriteLine(list.Contains(\"two\"));",
    "o": [
      "True",
      "False",
      "2",
      "one"
    ]
  },
  {
    "q": "Which collection throws an exception if a duplicate key is added?",
    "o": [
      "Dictionary<TKey, TValue>",
      "List<T>",
      "ArrayList",
      "Queue<T>"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "Dictionary<string, int> dict = new Dictionary<string, int>();\ndict.Add(\"x\", 10);\ndict.Add(\"y\", 20);\nConsole.WriteLine(dict[\"x\"] + dict[\"y\"]);",
    "o": [
      "30",
      "20",
      "10",
      "x + y"
    ]
  },
  {
    "q": "Which LINQ clause is used to filter data based on a condition?",
    "o": [
      "Where",
      "Select",
      "OrderBy",
      "GroupBy"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "List<int> numbers = new List<int> { 5, 10, 15 };\nvar result = numbers.Find(n => n > 8);\nConsole.WriteLine(result);",
    "o": [
      "10",
      "5",
      "15",
      "0"
    ]
  },
  {
    "q": "What is the purpose of 'yield return' in an iterator method?",
    "o": [
      "It returns each element one at a time while preserving the method state.",
      "It returns all elements at once.",
      "It restarts the method execution from the beginning.",
      "It breaks out of a foreach loop."
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "IEnumerable<int> Generate()\n{\n    yield return 100;\n    yield return 200;\n}\nforeach (var item in Generate())\n{\n    Console.Write(item + \" \");\n}",
    "o": [
      "100 200 ",
      "100 ",
      "200 ",
      "0"
    ]
  },
  {
    "q": "Which collection would you choose for fast lookup by key and enforced uniqueness of keys?",
    "o": [
      "Dictionary<TKey, TValue>",
      "List<T>",
      "ArrayList",
      "Stack<T>"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "var nums = new List<int> { 2, 4, 6 };\nvar doubled = nums.Select(n => n * 2);\nConsole.WriteLine(string.Join(\",\", doubled));",
    "o": [
      "4,8,12",
      "2,4,6",
      "1,2,3",
      "Error"
    ]
  },
  {
    "q": "Which of the following is true about List<T> in C#?",
    "o": [
      "It provides type safety and dynamic resizing.",
      "It only stores reference types.",
      "Its size must be specified at declaration.",
      "It does not support indexing."
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "ArrayList list = new ArrayList();\nlist.Add(42);\nlist.Add(\"text\");\nConsole.WriteLine(list.Count);",
    "o": [
      "2",
      "1",
      "0",
      "Runtime Error"
    ]
  },
  {
    "q": "Which method in List<T> is used to remove all elements that match a condition?",
    "o": [
      "RemoveAll",
      "RemoveAt",
      "Clear",
      "Delete"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "Dictionary<string, int> scores = new Dictionary<string, int>\n{\n    { \"Alice\", 90 },\n    { \"Bob\", 85 }\n};\nConsole.WriteLine(scores.ContainsKey(\"Bob\"));",
    "o": [
      "True",
      "False",
      "85",
      "Error"
    ]
  },
  {
    "q": "Which of the following is a feature of generic collections?",
    "o": [
      "They avoid boxing/unboxing and provide compile-time type checking.",
      "They allow storing different data types without casting.",
      "They use reflection to enforce type safety.",
      "They can only store value types."
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "List<int> nums = new List<int> { 3, 6, 9 };\nConsole.WriteLine(nums.Average());",
    "o": [
      "6",
      "9",
      "3",
      "0"
    ]
  },
  {
    "q": "Which LINQ method returns the last element in a collection that satisfies a condition?",
    "o": [
      "LastOrDefault",
      "FirstOrDefault",
      "Single",
      "Where"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "IEnumerable<int> GetOdds()\n{\n    for (int i = 1; i <= 5; i += 2)\n        yield return i;\n}\nConsole.WriteLine(string.Join(\",\", GetOdds()));",
    "o": [
      "1,3,5",
      "1,2,3",
      "2,4",
      "Error"
    ]
  },
  {
    "q": "Which generic collection would be most suitable for maintaining insertion order and key-value pairs?",
    "o": [
      "Dictionary<TKey, TValue>",
      "List<T>",
      "ArrayList",
      "HashSet<T>"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "List<int> values = new List<int> { 1, 2, 3, 4 };\nvalues.RemoveAll(v => v % 2 == 0);\nConsole.WriteLine(string.Join(\" \", values));",
    "o": [
      "1 3",
      "2 4",
      "1 2 3 4",
      "3 4"
    ]
  },
  {
    "q": "Which interface do all generic collections in System.Collections.Generic implement?",
    "o": [
      "IEnumerable<T>",
      "IDictionary",
      "ICloneable",
      "IConvertible"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "List<string> names = new List<string> { \"Anna\", \"Bob\", \"Cathy\" };\nnames.Insert(1, \"Dave\");\nConsole.WriteLine(names[1]);",
    "o": [
      "Dave",
      "Anna",
      "Bob",
      "Cathy"
    ]
  },
  {
    "q": "Which of the following collections allows duplicate keys?",
    "o": [
      "None of the above",
      "Dictionary<TKey, TValue>",
      "List<T>",
      "ArrayList"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "ArrayList arr = new ArrayList();\narr.Add(1);\narr.Add(2);\narr.Remove(1);\nConsole.WriteLine(arr[0]);",
    "o": [
      "2",
      "1",
      "0",
      "Error"
    ]
  },
  {
    "q": "Which LINQ method would you use to project only a specific property from a list of objects?",
    "o": [
      "Select",
      "Where",
      "GroupBy",
      "OrderBy"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "List<int> nums = new List<int> { 1, 2, 3, 4 };\nvar even = nums.Where(x => x % 2 == 0);\nConsole.WriteLine(even.First());",
    "o": [
      "2",
      "1",
      "3",
      "4"
    ]
  },
  {
    "q": "Which keyword is essential for creating custom iterators in C#?",
    "o": [
      "yield",
      "return",
      "ref",
      "delegate"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "IEnumerable<char> GetLetters()\n{\n    yield return 'A';\n    yield return 'B';\n    yield return 'C';\n}\nforeach (var ch in GetLetters())\n{\n    Console.Write(ch);\n}",
    "o": [
      "ABC",
      "CBA",
      "A B C",
      "Error"
    ]
  },
  {
    "q": "Which method can be used to convert a List<T> into an array?",
    "o": [
      "ToArray()",
      "ConvertAll()",
      "CopyTo()",
      "ToList()"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "var dict = new Dictionary<string, int>();\ndict[\"a\"] = 1;\ndict[\"b\"] = 2;\ndict[\"a\"] = 5;\nConsole.WriteLine(dict[\"a\"]);",
    "o": [
      "5",
      "1",
      "2",
      "0"
    ]
  },
  {
    "q": "Which of the following statements about ArrayList is true?",
    "o": [
      "ArrayList can store elements of different data types.",
      "ArrayList is a generic collection.",
      "ArrayList provides compile-time type checking.",
      "ArrayList is faster than List<T> for value types."
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "List<int> numbers = new List<int> { 2, 4, 6 };\nnumbers.AddRange(new[] { 8, 10 });\nConsole.WriteLine(numbers.Count);",
    "o": [
      "5",
      "3",
      "6",
      "4"
    ]
  },
  {
    "q": "Which of the following is a benefit of using Dictionary<TKey, TValue> over List<T>?",
    "o": [
      "Faster lookup by key",
      "Preserves order of insertion",
      "Allows duplicate keys",
      "Uses less memory"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "Dictionary<int, string> data = new Dictionary<int, string>();\ndata[1] = \"One\";\ndata[2] = \"Two\";\ndata.Remove(1);\nConsole.WriteLine(data.ContainsKey(1));",
    "o": [
      "False",
      "True",
      "One",
      "Error"
    ]
  },
  {
    "q": "Which LINQ operator is used to sort elements in ascending order?",
    "o": [
      "OrderBy",
      "Sort",
      "GroupBy",
      "Select"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "var query = new List<string> { \"dog\", \"cat\", \"bird\" };\nvar upper = query.Select(x => x.ToUpper());\nConsole.WriteLine(string.Join(\",\", upper));",
    "o": [
      "DOG,CAT,BIRD",
      "dog,cat,bird",
      "Dog,Cat,Bird",
      "Error"
    ]
  },
  {
    "q": "Which keyword allows you to create a stateful sequence of values in a method?",
    "o": [
      "yield",
      "var",
      "ref",
      "readonly"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "IEnumerable<int> CountUp()\n{\n    for (int i = 1; i <= 3; i++)\n        yield return i;\n}\nforeach (var n in CountUp())\n    Console.Write(n);",
    "o": [
      "123",
      "321",
      "1 2 3",
      "Error"
    ]
  },
  {
    "q": "Which method in List<T> is used to determine whether an element exists?",
    "o": [
      "Contains",
      "Exists",
      "HasItem",
      "InList"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "List<int> numbers = new List<int> { 1, 3, 5, 7 };\nvar found = numbers.Find(x => x > 4);\nConsole.WriteLine(found);",
    "o": [
      "5",
      "3",
      "1",
      "7"
    ]
  },
  {
    "q": "Which method would you use to sort elements in a List<T>?",
    "o": [
      "Sort()",
      "OrderBy()",
      "Arrange()",
      "Shuffle()"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "var list = new List<string> { \"a\", \"b\", \"c\" };\nlist.Remove(\"b\");\nConsole.WriteLine(string.Join(\"-\", list));",
    "o": [
      "a-c",
      "a-b-c",
      "b-c",
      "a-b"
    ]
  },
  {
    "q": "Which of the following is true about Dictionary<TKey, TValue>?",
    "o": [
      "It throws an exception when adding a duplicate key.",
      "It stores values as key-value-value triples.",
      "It allows indexing by value.",
      "It maintains insertion order by default."
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "ArrayList items = new ArrayList();\nitems.Add(\"x\");\nitems.Add(100);\nConsole.WriteLine(items[1]);",
    "o": [
      "100",
      "x",
      "1",
      "Error"
    ]
  },
  {
    "q": "Which LINQ method skips a specified number of elements and returns the remaining?",
    "o": [
      "Skip",
      "Take",
      "Remove",
      "Drop"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "List<int> nums = new List<int> { 2, 4, 6 };\nvar first = nums.FirstOrDefault(x => x > 5);\nConsole.WriteLine(first);",
    "o": [
      "6",
      "2",
      "0",
      "5"
    ]
  },
  {
    "q": "Which interface must be implemented to use foreach on a custom collection?",
    "o": [
      "IEnumerable",
      "IEnumerator",
      "IList",
      "ICloneable"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "IEnumerable<string> Messages()\n{\n    yield return \"Hello\";\n    yield return \"World\";\n}\nforeach (var msg in Messages())\n    Console.Write(msg + \" \");",
    "o": [
      "Hello World ",
      "World Hello ",
      "HelloWorld",
      "Error"
    ]
  },
  {
    "q": "Which method is used to retrieve a value from a Dictionary safely without throwing an exception?",
    "o": [
      "TryGetValue",
      "GetValueOrDefault",
      "GetItem",
      "Contains"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "List<int> values = new List<int> { 10, 20, 30 };\nvalues.Clear();\nConsole.WriteLine(values.Count);",
    "o": [
      "0",
      "3",
      "1",
      "NullReferenceException"
    ]
  },
  {
    "q": "Which of the following is a disadvantage of using ArrayList over List<T>?",
    "o": [
      "ArrayList does not provide type safety.",
      "ArrayList supports fewer methods than List<T>.",
      "ArrayList cannot be resized.",
      "ArrayList can only store primitive types."
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "List<string> colors = new List<string> { \"Red\", \"Green\", \"Blue\" };\ncolors[1] = \"Yellow\";\nConsole.WriteLine(colors[1]);",
    "o": [
      "Yellow",
      "Green",
      "Red",
      "Blue"
    ]
  },
  {
    "q": "What does the method `Distinct()` in LINQ return?",
    "o": [
      "A collection with duplicate elements removed.",
      "A sorted collection.",
      "A collection grouped by unique keys.",
      "The first element in a collection."
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "Dictionary<string, int> dict = new Dictionary<string, int>();\ndict.Add(\"x\", 10);\ndict.Add(\"y\", 20);\nConsole.WriteLine(dict.Count);",
    "o": [
      "2",
      "1",
      "0",
      "10"
    ]
  },
  {
    "q": "What is the role of the `yield break` statement in an iterator method?",
    "o": [
      "It ends the iteration immediately.",
      "It returns a null value.",
      "It skips to the next iteration.",
      "It restarts the loop."
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "List<int> numbers = new List<int> { 3, 6, 9 };\nvar doubled = numbers.Select(n => n * 2);\nConsole.WriteLine(string.Join(\",\", doubled));",
    "o": [
      "6,12,18",
      "3,6,9",
      "9,18,27",
      "1,2,3"
    ]
  },
  {
    "q": "Which LINQ method retrieves a specified number of elements from the beginning of a collection?",
    "o": [
      "Take",
      "Skip",
      "First",
      "Select"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "ArrayList arr = new ArrayList();\narr.Add(\"test\");\narr.Add(true);\nConsole.WriteLine(arr[0].GetType().Name);",
    "o": [
      "String",
      "Boolean",
      "Object",
      "Char"
    ]
  },
  {
    "q": "Which collection type maintains a key-value mapping with fast access by key?",
    "o": [
      "Dictionary<TKey, TValue>",
      "List<T>",
      "ArrayList",
      "Queue<T>"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "IEnumerable<int> Numbers()\n{\n    yield return 100;\n    yield return 200;\n}\nforeach (var num in Numbers())\n    Console.Write(num + \" \");",
    "o": [
      "100 200 ",
      "200 100 ",
      "100200",
      "Error"
    ]
  },
  {
    "q": "Which of the following collections is **not** type-safe in C#?",
    "o": [
      "ArrayList",
      "List<T>",
      "Dictionary<TKey, TValue>",
      "Queue<T>"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "var data = new Dictionary<int, string>();\ndata[1] = \"One\";\ndata[2] = \"Two\";\ndata[1] = \"Uno\";\nConsole.WriteLine(data[1]);",
    "o": [
      "Uno",
      "One",
      "Two",
      "Error"
    ]
  },
  {
    "q": "What will `Where` in LINQ return when used on a list?",
    "o": [
      "Elements that match a given condition.",
      "The first matching element.",
      "A sorted list of elements.",
      "An aggregated value of elements."
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "List<int> values = new List<int> { 4, 8, 12 };\nvalues.Insert(1, 6);\nConsole.WriteLine(string.Join(\",\", values));",
    "o": [
      "4,6,8,12",
      "4,8,6,12",
      "6,4,8,12",
      "4,8,12,6"
    ]
  },
  {
    "q": "What does `yield return` do in C#?",
    "o": [
      "Returns an element and pauses execution until the next iteration.",
      "Ends the method immediately.",
      "Returns all elements at once.",
      "Skips the current iteration."
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "ArrayList arr = new ArrayList();\narr.Add(5);\narr.Add(\"five\");\nConsole.WriteLine(arr.Count);",
    "o": [
      "2",
      "1",
      "0",
      "Error"
    ]
  },
  {
    "q": "Which method is used to check if a key exists in a Dictionary?",
    "o": [
      "ContainsKey",
      "Exists",
      "HasKey",
      "KeyExists"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "var names = new List<string> { \"Ana\", \"Bob\", \"Eve\" };\nvar result = names.Where(n => n.Contains(\"o\"));\nConsole.WriteLine(result.Count());",
    "o": [
      "1",
      "2",
      "3",
      "0"
    ]
  },
  {
    "q": "What interface must be implemented to create an iterator using `yield return`?",
    "o": [
      "IEnumerable",
      "IEnumerator",
      "IList",
      "ICollection"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "var list = new List<int> { 1, 2, 3, 4 };\nlist.RemoveAll(x => x % 2 == 0);\nConsole.WriteLine(string.Join(\" \", list));",
    "o": [
      "1 3",
      "2 4",
      "1 2 3",
      "1 2 3 4"
    ]
  },
  {
    "q": "What is the main advantage of using List<T> over ArrayList in C#?",
    "o": [
      "List<T> is strongly typed.",
      "List<T> consumes less memory.",
      "List<T> automatically sorts elements.",
      "List<T> supports only primitive types."
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "var fruits = new List<string> { \"Apple\", \"Banana\", \"Cherry\" };\nConsole.WriteLine(fruits.Contains(\"Banana\"));",
    "o": [
      "True",
      "False",
      "Banana",
      "Error"
    ]
  },
  {
    "q": "Which collection would be best suited for maintaining a queue of tasks in a first-in-first-out order?",
    "o": [
      "Queue<T>",
      "Stack<T>",
      "List<T>",
      "ArrayList"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "Dictionary<int, string> dict = new Dictionary<int, string>();\ndict.Add(10, \"Ten\");\nbool exists = dict.ContainsKey(10);\nConsole.WriteLine(exists);",
    "o": [
      "True",
      "False",
      "Ten",
      "Error"
    ]
  },
  {
    "q": "Which LINQ method is used to skip a specified number of elements from a collection?",
    "o": [
      "Skip",
      "Take",
      "Where",
      "Select"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "var list = new List<int> { 1, 2, 3, 4, 5 };\nvar sum = list.Where(x => x > 2).Sum();\nConsole.WriteLine(sum);",
    "o": [
      "12",
      "9",
      "15",
      "6"
    ]
  },
  {
    "q": "Which namespace contains the IEnumerable and IEnumerator interfaces used for iteration in C#?",
    "o": [
      "System.Collections",
      "System.Linq",
      "System.IO",
      "System.Data"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "ArrayList list = new ArrayList();\nlist.Add(42);\nlist.Add(\"forty-two\");\nConsole.WriteLine(list[1]);",
    "o": [
      "forty-two",
      "42",
      "Error",
      "1"
    ]
  },
  {
    "q": "Which of the following generic collections maintains unique keys and allows fast lookups?",
    "o": [
      "Dictionary<TKey, TValue>",
      "List<T>",
      "Stack<T>",
      "ArrayList"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "IEnumerable<int> GetEvenNumbers()\n{\n    yield return 2;\n    yield return 4;\n    yield return 6;\n}\nforeach (var num in GetEvenNumbers())\n{\n    Console.Write(num + \" \");\n}",
    "o": [
      "2 4 6 ",
      "6 4 2 ",
      "246",
      "Error"
    ]
  },
  {
    "q": "Which method would you use to find the number of elements in a List<T>?",
    "o": [
      "Count",
      "Length",
      "Size",
      "Capacity"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "var dict = new Dictionary<string, int> { {\"A\", 1}, {\"B\", 2} };\nConsole.WriteLine(dict[\"B\"]);",
    "o": [
      "2",
      "1",
      "B",
      "Error"
    ]
  },
  {
    "q": "What is the purpose of the `yield return` statement?",
    "o": [
      "It enables deferred execution of collection elements.",
      "It returns the entire collection at once.",
      "It pauses a method permanently.",
      "It exits the current method completely."
    ]
  },
  {
    "q": "Which collection class allows duplicate values but enforces unique keys?",
    "o": [
      "Dictionary<TKey, TValue>",
      "List<T>",
      "ArrayList",
      "HashSet<T>"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "var list = new List<string> { \"A\", \"B\", \"C\" };\nlist.Remove(\"B\");\nConsole.WriteLine(string.Join(\"-\", list));",
    "o": [
      "A-C",
      "A-B-C",
      "A-B",
      "C-B-A"
    ]
  },
  {
    "q": "Which LINQ method is used to transform each element in a sequence?",
    "o": [
      "Select",
      "Where",
      "OrderBy",
      "Aggregate"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "List<int> numbers = new List<int>();\nnumbers.Add(10);\nnumbers.Add(20);\nnumbers.Clear();\nConsole.WriteLine(numbers.Count);",
    "o": [
      "0",
      "2",
      "10",
      "NullReferenceException"
    ]
  },
  {
    "q": "Which feature of LINQ allows you to defer the execution of a query until the results are actually needed?",
    "o": [
      "Deferred execution",
      "Immediate execution",
      "Lazy loading",
      "Yield blocking"
    ]
  },
  {
    "q": "Which collection would be most suitable for implementing a last-in-first-out (LIFO) structure?",
    "o": [
      "Stack<T>",
      "Queue<T>",
      "List<T>",
      "Dictionary<TKey, TValue>"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "IEnumerable<int> GenerateNumbers()\n{\n    for (int i = 1; i <= 3; i++)\n        yield return i * i;\n}\n\nforeach (var num in GenerateNumbers())\n{\n    Console.Write(num + \" \");\n}",
    "o": [
      "1 4 9 ",
      "1 2 3 ",
      "2 4 6 ",
      "3 2 1 "
    ]
  },
  {
    "q": "Which of the following is true about Dictionary<TKey, TValue> in C#?",
    "o": [
      "It does not allow duplicate keys.",
      "It maintains the insertion order of keys.",
      "It allows duplicate keys but not duplicate values.",
      "It uses an array internally to store key-value pairs."
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "var names = new List<string> { \"Tom\", \"Sam\", \"Max\" };\nConsole.WriteLine(names[1]);",
    "o": [
      "Sam",
      "Tom",
      "Max",
      "1"
    ]
  },
  {
    "q": "Which LINQ method is used to filter elements based on a condition?",
    "o": [
      "Where",
      "Select",
      "OrderBy",
      "ToList"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "ArrayList arr = new ArrayList();\narr.Add(100);\narr.Add(\"Hello\");\nConsole.WriteLine(arr.Count);",
    "o": [
      "2",
      "1",
      "100",
      "Error"
    ]
  },
  {
    "q": "Which interface must a class implement to support `foreach` iteration with `yield return`?",
    "o": [
      "IEnumerable",
      "IEnumerator",
      "IComparable",
      "IDisposable"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "List<int> nums = new List<int> { 2, 4, 6 };\nvar doubled = nums.Select(x => x * 2);\nConsole.WriteLine(doubled.First());",
    "o": [
      "4",
      "2",
      "6",
      "12"
    ]
  },
  {
    "q": "Which method is used to remove all items from a List<T> in C#?",
    "o": [
      "Clear()",
      "DeleteAll()",
      "Remove()",
      "Empty()"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "Dictionary<string, int> grades = new Dictionary<string, int>();\ngrades[\"Math\"] = 90;\ngrades[\"English\"] = 85;\nConsole.WriteLine(grades[\"Math\"]);",
    "o": [
      "90",
      "85",
      "Math",
      "Error"
    ]
  },
  {
    "q": "Which of the following C# features enables lazy evaluation using an iterator block?",
    "o": [
      "yield",
      "async",
      "var",
      "readonly"
    ]
  },
  {
    "q": "Which LINQ method would return only the first matching element of a query?",
    "o": [
      "First",
      "Where",
      "Select",
      "Any"
    ]
  },
  {
    "q": "Which of the following types supports key-value pair storage in C#?",
    "o": [
      "Dictionary<TKey, TValue>",
      "List<T>",
      "ArrayList",
      "Stack<T>"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "List<int> nums = new List<int> { 1, 2, 3 };\nnums.Insert(1, 99);\nConsole.WriteLine(string.Join(\",\", nums));",
    "o": [
      "1,99,2,3",
      "99,1,2,3",
      "1,2,3,99",
      "1,2,99,3"
    ]
  },
  {
    "q": "Which collection would you use to store elements in a last-in, first-out order?",
    "o": [
      "Stack<T>",
      "Queue<T>",
      "List<T>",
      "Dictionary<T1, T2>"
    ]
  },
  {
    "q": "What does the `yield break` statement do in an iterator method?",
    "o": [
      "It ends the iteration immediately.",
      "It skips the current value.",
      "It pauses execution until resumed.",
      "It throws an exception."
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "var list = new List<string> { \"X\", \"Y\", \"Z\" };\nConsole.WriteLine(list.IndexOf(\"Y\"));",
    "o": [
      "1",
      "0",
      "2",
      "-1"
    ]
  },
  {
    "q": "Which LINQ method can be used to project elements into a new form?",
    "o": [
      "Select",
      "Where",
      "OrderBy",
      "Aggregate"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "var dict = new Dictionary<string, int>();\ndict.Add(\"A\", 1);\ndict.Add(\"B\", 2);\ndict.Remove(\"A\");\nConsole.WriteLine(dict.ContainsKey(\"A\"));",
    "o": [
      "False",
      "True",
      "1",
      "Error"
    ]
  },
  {
    "q": "Which of the following allows storing items of different data types?",
    "o": [
      "ArrayList",
      "List<T>",
      "Dictionary<TKey, TValue>",
      "Queue<T>"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "IEnumerable<int> Numbers()\n{\n    yield return 10;\n    yield return 20;\n}\n\nforeach (int n in Numbers())\n{\n    Console.Write(n + \" \");\n}",
    "o": [
      "10 20 ",
      "20 10 ",
      "10, 20",
      "Error"
    ]
  },
  {
    "q": "What happens if you try to access a key that does not exist in a Dictionary?",
    "o": [
      "KeyNotFoundException is thrown.",
      "Returns null.",
      "Returns 0.",
      "Adds the key automatically."
    ]
  },
  {
    "q": "Which of the following is a strongly typed collection in C#?",
    "o": [
      "List<int>",
      "ArrayList",
      "Hashtable",
      "Queue"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "List<string> fruits = new List<string> { \"Apple\", \"Banana\", \"Cherry\" };\nConsole.WriteLine(fruits[1]);",
    "o": [
      "Banana",
      "Apple",
      "Cherry",
      "1"
    ]
  },
  {
    "q": "Which collection should be used when key-value pairs are required and the keys are unique?",
    "o": [
      "Dictionary<TKey, TValue>",
      "List<T>",
      "Queue<T>",
      "Stack<T>"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "Dictionary<int, string> students = new Dictionary<int, string>();\nstudents.Add(1, \"Alice\");\nstudents.Add(2, \"Bob\");\nConsole.WriteLine(students[2]);",
    "o": [
      "Bob",
      "Alice",
      "2",
      "KeyNotFoundException"
    ]
  },
  {
    "q": "Which of the following is **not** a benefit of using generics in C#?",
    "o": [
      "They allow multiple inheritance",
      "They increase type safety",
      "They improve performance by avoiding boxing/unboxing",
      "They allow code reusability"
    ]
  },
  {
    "q": "What is the output of the following LINQ query?",
    "c": "List<int> numbers = new List<int> { 1, 2, 3, 4, 5 };\nvar evenNumbers = numbers.Where(n => n % 2 == 0);\nConsole.WriteLine(evenNumbers.Count());",
    "o": [
      "2",
      "3",
      "5",
      "0"
    ]
  },
  {
    "q": "Which namespace must be included to use LINQ methods like `Where`, `Select`, etc.?",
    "o": [
      "System.Linq",
      "System.Collections.Generic",
      "System.Data",
      "System.IO"
    ]
  },
  {
    "q": "What is the primary difference between `ArrayList` and `List<T>` in C#?",
    "o": [
      "ArrayList stores elements as objects, List<T> is type-safe",
      "List<T> is obsolete, ArrayList is preferred",
      "ArrayList performs better than List<T>",
      "ArrayList is thread-safe, List<T> is not"
    ]
  },
  {
    "q": "What keyword is used in C# to implement a custom iterator block?",
    "o": [
      "yield",
      "return",
      "break",
      "goto"
    ]
  },
  {
    "q": "What is the output of the following iterator method usage?",
    "c": "IEnumerable<int> GetNumbers()\n{\n    yield return 1;\n    yield return 2;\n    yield return 3;\n}\n\nforeach (int num in GetNumbers())\n{\n    Console.Write(num);\n}",
    "o": [
      "123",
      "321",
      "1 2 3",
      "An exception is thrown"
    ]
  },
  {
    "q": "Which collection allows storing elements of different data types but lacks type safety?",
    "o": [
      "ArrayList",
      "List<T>",
      "Dictionary<TKey, TValue>",
      "HashSet<T>"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "ArrayList items = new ArrayList();\nitems.Add(\"Hello\");\nitems.Add(100);\nConsole.WriteLine(items.Count);",
    "o": [
      "2",
      "1",
      "0",
      "Compile-time error"
    ]
  },
  {
    "q": "Which of the following is a generic collection designed for key-value pairs?",
    "o": [
      "Dictionary<string, int>",
      "List<int>",
      "ArrayList",
      "Stack<object>"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "List<int> nums = new List<int> { 1, 2, 3, 4 };\nnums.Remove(3);\nConsole.WriteLine(nums.Contains(3));",
    "o": [
      "False",
      "True",
      "3",
      "Error"
    ]
  },
  {
    "q": "Which LINQ method is used to filter elements based on a condition?",
    "o": [
      "Where",
      "Select",
      "OrderBy",
      "GroupBy"
    ]
  },
  {
    "q": "What is the output of this LINQ query?",
    "c": "List<string> names = new List<string> { \"Alice\", \"Bob\", \"Charlie\" };\nvar result = names.Where(n => n.StartsWith(\"C\"));\nConsole.WriteLine(result.First());",
    "o": [
      "Charlie",
      "Alice",
      "Bob",
      "C"
    ]
  },
  {
    "q": "Why is `List<T>` preferred over `ArrayList` in modern C#?",
    "o": [
      "Because `List<T>` is type-safe and avoids boxing",
      "Because `List<T>` has fewer methods",
      "Because `ArrayList` is faster",
      "Because `ArrayList` supports only integers"
    ]
  },
  {
    "q": "What is the purpose of the `yield return` statement?",
    "o": [
      "To return values one at a time in an iterator method",
      "To stop a method and exit immediately",
      "To return multiple values at once",
      "To pause the current thread"
    ]
  },
  {
    "q": "What is the output of the following iterator method?",
    "c": "IEnumerable<string> GetLetters()\n{\n    yield return \"A\";\n    yield return \"B\";\n    yield return \"C\";\n}\n\nforeach (var ch in GetLetters())\n    Console.Write(ch);",
    "o": [
      "ABC",
      "CBA",
      "A B C",
      "Error"
    ]
  },
  {
    "q": "Which of the following statements is true about LINQ?",
    "o": [
      "LINQ can be used to query both collections and databases",
      "LINQ is only available for SQL databases",
      "LINQ cannot be used with generic collections",
      "LINQ is available only in .NET Core"
    ]
  },
  {
    "q": "Which of the following collections requires casting when retrieving values?",
    "o": [
      "ArrayList",
      "List<T>",
      "Dictionary<TKey, TValue>",
      "HashSet<T>"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "ArrayList list = new ArrayList();\nlist.Add(10);\nlist.Add(\"ten\");\nConsole.WriteLine(list[1]);",
    "o": [
      "ten",
      "10",
      "1",
      "Error"
    ]
  },
  {
    "q": "What happens if you try to add a duplicate key to a Dictionary?",
    "o": [
      "It throws an exception",
      "It replaces the old value",
      "It stores both values",
      "It returns null"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "Dictionary<string, int> ageMap = new Dictionary<string, int>();\nageMap[\"Sam\"] = 30;\nageMap[\"Alex\"] = 25;\nConsole.WriteLine(ageMap.ContainsKey(\"Sam\"));",
    "o": [
      "True",
      "False",
      "30",
      "Error"
    ]
  },
  {
    "q": "Which LINQ method projects each element of a sequence into a new form?",
    "o": [
      "Select",
      "Where",
      "FirstOrDefault",
      "Any"
    ]
  },
  {
    "q": "What will be the output of the following code?",
    "c": "List<string> colors = new List<string> { \"Red\", \"Green\", \"Blue\" };\nvar result = colors.Select(c => c.ToUpper());\nforeach(var c in result) Console.Write(c + \" \");",
    "o": [
      "RED GREEN BLUE ",
      "red green blue ",
      "Red Green Blue ",
      "Error"
    ]
  },
  {
    "q": "Which interface is automatically implemented when using yield return?",
    "o": [
      "IEnumerable",
      "IDisposable",
      "IComparable",
      "IFormattable"
    ]
  },
  {
    "q": "Which of the following is true about yield return?",
    "o": [
      "It allows lazy evaluation",
      "It returns a full collection at once",
      "It must be used inside static methods",
      "It can only return strings"
    ]
  },
  {
    "q": "What is the output of this iterator block?",
    "c": "IEnumerable<int> Numbers()\n{\n    for (int i = 0; i < 3; i++)\n        yield return i;\n}\n\nforeach (var n in Numbers())\n    Console.Write(n + \" \");",
    "o": [
      "0 1 2 ",
      "1 2 3 ",
      "0 1 2 3 ",
      "3 2 1 0 "
    ]
  },
  {
    "q": "Which of the following allows duplicate values but unique keys?",
    "o": [
      "Dictionary<TKey, TValue>",
      "List<T>",
      "HashSet<T>",
      "Queue<T>"
    ]
  },
  {
    "q": "Which collection would you use to store elements in a type-safe way with fast lookups by key?",
    "o": [
      "Dictionary<TKey, TValue>",
      "ArrayList",
      "Queue<T>",
      "SortedList"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "var list = new List<int> { 10, 20, 30 };\nConsole.WriteLine(list[1]);",
    "o": [
      "20",
      "10",
      "30",
      "1"
    ]
  },
  {
    "q": "Which method is used to determine if a key exists in a Dictionary?",
    "o": [
      "ContainsKey",
      "HasKey",
      "Exists",
      "KeyExists"
    ]
  },
  {
    "q": "What is the result of this code?",
    "c": "Dictionary<string, string> capitals = new Dictionary<string, string>();\ncapitals.Add(\"France\", \"Paris\");\ncapitals.Add(\"Germany\", \"Berlin\");\nConsole.WriteLine(capitals[\"France\"]);",
    "o": [
      "Paris",
      "France",
      "Germany",
      "Error"
    ]
  },
  {
    "q": "Which of the following best describes the main benefit of using `List<T>` over `ArrayList`?",
    "o": [
      "Type safety and performance",
      "Less memory usage",
      "Better syntax",
      "Multithreading support"
    ]
  },
  {
    "q": "What will be printed by the following LINQ query?",
    "c": "List<int> nums = new List<int> { 5, 10, 15, 20 };\nvar result = nums.Where(n => n > 10);\nConsole.WriteLine(result.Count());",
    "o": [
      "2",
      "3",
      "4",
      "1"
    ]
  },
  {
    "q": "Which LINQ method checks if any element satisfies a condition?",
    "o": [
      "Any",
      "All",
      "Contains",
      "FirstOrDefault"
    ]
  },
  {
    "q": "What is the output of this code with `yield return`?",
    "c": "IEnumerable<int> CountUp()\n{\n    yield return 1;\n    yield return 2;\n    yield return 3;\n}\n\nforeach (var x in CountUp())\n    Console.Write(x);",
    "o": [
      "123",
      "321",
      "1 2 3",
      "Error"
    ]
  },
  {
    "q": "Which of the following is a correct declaration of a generic list containing strings?",
    "o": [
      "List<string> names = new List<string>();",
      "List names = new List<string>();",
      "ArrayList<string> names = new ArrayList<string>();",
      "List<T> names = new List<int>();"
    ]
  },
  {
    "q": "Which feature of LINQ enables deferred execution?",
    "o": [
      "IEnumerable<T>",
      "Select",
      "ToList",
      "Join"
    ]
  },
  {
    "q": "Which generic collection allows access to values using a unique key?",
    "o": [
      "Dictionary<TKey, TValue>",
      "List<T>",
      "Queue<T>",
      "ArrayList"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "List<string> fruits = new List<string> { \"Apple\", \"Banana\", \"Cherry\" };\nConsole.WriteLine(fruits.Contains(\"Banana\"));",
    "o": [
      "True",
      "False",
      "Banana",
      "1"
    ]
  },
  {
    "q": "Which collection is not type-safe and can hold any object type?",
    "o": [
      "ArrayList",
      "List<T>",
      "Dictionary<TKey, TValue>",
      "Queue<T>"
    ]
  },
  {
    "q": "What does the `yield return` statement do in C#?",
    "o": [
      "Returns an element one at a time without exiting the method",
      "Exits the method permanently",
      "Returns a complete collection immediately",
      "Stops the execution without returning"
    ]
  },
  {
    "q": "What is the output of this iterator function?",
    "c": "IEnumerable<int> EvenNumbers()\n{\n    for (int i = 0; i <= 4; i += 2)\n        yield return i;\n}\nforeach (var x in EvenNumbers()) Console.Write(x + \" \");",
    "o": [
      "0 2 4 ",
      "2 4 6 ",
      "1 3 5 ",
      "0 1 2 "
    ]
  },
  {
    "q": "Which LINQ method filters a collection based on a condition?",
    "o": [
      "Where",
      "Select",
      "OrderBy",
      "Count"
    ]
  },
  {
    "q": "What is the purpose of the `ToList()` method in a LINQ query?",
    "o": [
      "It executes the query immediately and converts the result to a List",
      "It sorts the collection",
      "It delays the execution of the query",
      "It filters the elements in-place"
    ]
  },
  {
    "q": "What will this code print?",
    "c": "var names = new List<string> { \"Anna\", \"Bob\", \"Cara\" };\nvar result = names.FirstOrDefault(n => n.StartsWith(\"C\"));\nConsole.WriteLine(result);",
    "o": [
      "Cara",
      "Anna",
      "Bob",
      "NullReferenceException"
    ]
  },
  {
    "q": "Which of the following can hold key-value pairs and maintain fast lookups?",
    "o": [
      "Dictionary<TKey, TValue>",
      "List<T>",
      "Stack<T>",
      "ArrayList"
    ]
  },
  {
    "q": "What is the default return type of an iterator using yield return?",
    "o": [
      "IEnumerable",
      "IList",
      "IEnumerator",
      "List"
    ]
  },
  {
    "q": "Which of the following allows storing values in a key-value structure with compile-time type checking?",
    "o": [
      "Dictionary<string, int>",
      "ArrayList",
      "Hashtable",
      "List<string>"
    ]
  },
  {
    "q": "What will this code output?",
    "c": "var list = new List<int> { 2, 4, 6, 8 };\nvar doubled = list.Select(x => x * 2);\nConsole.WriteLine(string.Join(\",\", doubled));",
    "o": [
      "4,8,12,16",
      "2,4,6,8",
      "1,2,3,4",
      "8,6,4,2"
    ]
  },
  {
    "q": "Which collection is not generic and requires boxing/unboxing for value types?",
    "o": [
      "ArrayList",
      "List<int>",
      "Dictionary<int, string>",
      "Queue<string>"
    ]
  },
  {
    "q": "Which LINQ method projects each element into a new form?",
    "o": [
      "Select",
      "Where",
      "Any",
      "Count"
    ]
  },
  {
    "q": "What will be the result of the following LINQ expression?",
    "c": "var numbers = new List<int> { 1, 2, 3, 4, 5 };\nvar even = numbers.Where(n => n % 2 == 0).ToList();\nConsole.WriteLine(even.Count);",
    "o": [
      "2",
      "3",
      "4",
      "5"
    ]
  },
  {
    "q": "Which keyword is required in a method to use `yield return`?",
    "o": [
      "IEnumerable",
      "async",
      "return",
      "public"
    ]
  },
  {
    "q": "What is the advantage of using generic collections like `List<T>` over `ArrayList`?",
    "o": [
      "Eliminates boxing and provides type safety",
      "Consumes more memory",
      "Slower performance for large data",
      "Only works with reference types"
    ]
  },
  {
    "q": "What will the following yield-based method produce?",
    "c": "IEnumerable<char> Letters()\n{\n    yield return 'A';\n    yield return 'B';\n    yield return 'C';\n}\nforeach (var c in Letters())\n    Console.Write(c + \" \");",
    "o": [
      "A B C ",
      "ABC",
      "C B A ",
      "Error"
    ]
  },
  {
    "q": "What is true about the `List<T>` collection in C#?",
    "o": [
      "It is a generic collection that allows resizing and indexing",
      "It only supports reference types",
      "It is slower than ArrayList",
      "It does not support LINQ"
    ]
  },
  {
    "q": "Which of the following statements will correctly declare a Dictionary with integer keys and string values?",
    "o": [
      "var data = new Dictionary<int, string>();",
      "var data = new Dictionary(string, int);",
      "Dictionary data = new Dictionary<string, int>();",
      "Dictionary<string> data = new Dictionary<string>();"
    ]
  },
  {
    "q": "What is the main drawback of using ArrayList in C#?",
    "o": [
      "It stores data as objects, which can cause boxing/unboxing for value types",
      "It supports only strings",
      "It is thread-safe by default",
      "It uses generics for type safety"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "var numbers = new List<int> { 1, 2, 3, 4 };\nvar result = numbers.Average();\nConsole.WriteLine(result);",
    "o": [
      "2.5",
      "10",
      "4",
      "1"
    ]
  },
  {
    "q": "Which collection would you use to associate students' roll numbers with their names?",
    "o": [
      "Dictionary<int, string>",
      "List<string>",
      "ArrayList",
      "Queue<string>"
    ]
  },
  {
    "q": "Which LINQ method returns true if any element in a collection matches the condition?",
    "o": [
      "Any",
      "Where",
      "All",
      "Select"
    ]
  },
  {
    "q": "What does this code print?",
    "c": "List<int> nums = new List<int> { 5, 3, 9, 1 };\nnums.Sort();\nConsole.WriteLine(nums[0]);",
    "o": [
      "1",
      "3",
      "5",
      "9"
    ]
  },
  {
    "q": "Which of the following supports deferred execution in C#?",
    "o": [
      "yield return",
      "return",
      "break",
      "async"
    ]
  },
  {
    "q": "What is the key benefit of using Dictionary<TKey, TValue> over List<T> when searching for an item?",
    "o": [
      "Faster lookup using keys",
      "Less memory usage",
      "Guaranteed order of items",
      "Better LINQ support"
    ]
  },
  {
    "q": "What will be the result of this code?",
    "c": "var dict = new Dictionary<string, int>();\ndict[\"One\"] = 1;\ndict[\"Two\"] = 2;\nConsole.WriteLine(dict.ContainsKey(\"Two\"));",
    "o": [
      "True",
      "False",
      "1",
      "2"
    ]
  },
  {
    "q": "Which method retrieves the first element that matches a condition or returns the default value?",
    "o": [
      "FirstOrDefault",
      "Where",
      "FindAll",
      "ToList"
    ]
  },
  {
    "q": "Which interface must a method return type implement to use `yield return`?",
    "o": [
      "IEnumerable",
      "IList",
      "IDisposable",
      "IQueryable"
    ]
  },
  {
    "q": "What is the correct way to add an element to a List<T> in C#?",
    "o": [
      "myList.Add(42);",
      "myList.InsertValue(42);",
      "Add(myList, 42);",
      "myList.Push(42);"
    ]
  },
  {
    "q": "What will the following code print?",
    "c": "var fruits = new List<string> { \"Apple\", \"Banana\", \"Cherry\" };\nConsole.WriteLine(fruits.Contains(\"Banana\"));",
    "o": [
      "True",
      "False",
      "\"Banana\"",
      "0"
    ]
  },
  {
    "q": "Which of the following statements about yield return is true?",
    "o": [
      "It allows iteration over a custom collection without building a full list in memory.",
      "It eagerly evaluates the entire collection before returning.",
      "It only works with arrays.",
      "It is used to terminate iteration early like 'break'."
    ]
  },
  {
    "q": "What will be the result of the following code?",
    "c": "var numbers = new List<int> { 1, 2, 3, 4 };\nvar even = numbers.FirstOrDefault(n => n % 2 == 0);\nConsole.WriteLine(even);",
    "o": [
      "2",
      "4",
      "1",
      "null"
    ]
  },
  {
    "q": "Which generic collection allows fast retrieval of values using a key?",
    "o": [
      "Dictionary<string, int>",
      "List<int>",
      "ArrayList",
      "Queue<string>"
    ]
  },
  {
    "q": "Which of the following LINQ methods would you use to skip the first 3 elements of a collection?",
    "o": [
      "Skip",
      "Take",
      "First",
      "OrderBy"
    ]
  },
  {
    "q": "What will be the output of the following code?",
    "c": "ArrayList list = new ArrayList();\nlist.Add(100);\nlist.Add(\"hello\");\nConsole.WriteLine(list[1]);",
    "o": [
      "hello",
      "100",
      "System.Int32",
      "Error"
    ]
  },
  {
    "q": "What is the return type of a method using yield return?",
    "o": [
      "IEnumerable or IEnumerator",
      "List<T>",
      "void",
      "Array"
    ]
  },
  {
    "q": "Which of these is a valid way to filter even numbers using LINQ?",
    "o": [
      "numbers.Where(n => n % 2 == 0);",
      "numbers.Filter(n => n % 2 == 0);",
      "Where(n => n % 2 == 0, numbers);",
      "Select(n => n % 2 == 0);"
    ]
  },
  {
    "q": "Which of the following collections maintains the order in which items were added and allows duplicates?",
    "o": [
      "List<int>",
      "Dictionary<string, int>",
      "HashSet<int>",
      "SortedDictionary<int, string>"
    ]
  },
  {
    "q": "Which generic collection should be used when you want to store key-value pairs with fast lookup by key?",
    "o": [
      "Dictionary<int, string>",
      "List<string>",
      "ArrayList",
      "Queue<string>"
    ]
  },
  {
    "q": "What does the following LINQ query return?",
    "c": "List<int> nums = new List<int> { 10, 15, 20, 25 };\nvar query = nums.Where(n => n > 15);\nConsole.WriteLine(query.Count());",
    "o": [
      "2",
      "3",
      "1",
      "0"
    ]
  },
  {
    "q": "What is a primary benefit of using List<T> over ArrayList in C#?",
    "o": [
      "Type safety with generics",
      "Faster indexing",
      "Less memory usage",
      "Thread safety"
    ]
  },
  {
    "q": "What is the result of this code?",
    "c": "var dict = new Dictionary<string, int> { {\"a\", 1}, {\"b\", 2} };\nConsole.WriteLine(dict[\"b\"]);",
    "o": [
      "2",
      "1",
      "b",
      "Error"
    ]
  },
  {
    "q": "Which method in LINQ would you use to create a new sequence by projecting each element into a new form?",
    "o": [
      "Select",
      "Where",
      "Aggregate",
      "Skip"
    ]
  },
  {
    "q": "Which of the following best describes the use of `yield return`?",
    "o": [
      "It allows creation of an iterator block that returns one item at a time.",
      "It creates a background thread for each item.",
      "It executes immediately and returns a list.",
      "It is used to break out of loops."
    ]
  },
  {
    "q": "What will this code output?",
    "c": "var names = new List<string> { \"Amy\", \"Bob\", \"Charlie\" };\nvar result = names.First();\nConsole.WriteLine(result);",
    "o": [
      "Amy",
      "Charlie",
      "Bob",
      "First"
    ]
  },
  {
    "q": "Which generic collection would you choose to prevent duplicate entries?",
    "o": [
      "HashSet<int>",
      "List<int>",
      "Dictionary<int, int>",
      "ArrayList"
    ]
  },
  {
    "q": "Which interface must a class implement to support the use of `foreach` and `yield return`?",
    "o": [
      "IEnumerable",
      "IDisposable",
      "ICloneable",
      "IFormatter"
    ]
  },
  {
    "q": "What will the following LINQ expression return?",
    "c": "List<int> values = new List<int> { 3, 6, 9 };\nvar result = values.Max();\nConsole.WriteLine(result);",
    "o": [
      "9",
      "6",
      "3",
      "0"
    ]
  },
  {
    "q": "Which method is used to check if a Dictionary contains a specific key?",
    "o": [
      "ContainsKey",
      "HasKey",
      "Exists",
      "FindKey"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "List<string> colors = new List<string> {\"Red\", \"Blue\", \"Green\"};\nConsole.WriteLine(colors.IndexOf(\"Green\"));",
    "o": [
      "2",
      "1",
      "3",
      "0"
    ]
  },
  {
    "q": "Which of the following is TRUE about ArrayList in C#?",
    "o": [
      "ArrayList can store elements of different data types.",
      "ArrayList is type-safe.",
      "ArrayList provides compile-time type checking.",
      "ArrayList is generic."
    ]
  },
  {
    "q": "What will be the output?",
    "c": "var numbers = new List<int> { 1, 2, 3, 4, 5 };\nvar result = numbers.Where(n => n > 3).ToList();\nConsole.WriteLine(result.Count);",
    "o": [
      "2",
      "3",
      "4",
      "5"
    ]
  },
  {
    "q": "Which LINQ method is used to group elements by a key?",
    "o": [
      "GroupBy",
      "Join",
      "Where",
      "SelectMany"
    ]
  },
  {
    "q": "Which method is used to remove a specific item from a List<T>?",
    "o": [
      "Remove",
      "Delete",
      "Pop",
      "ClearOne"
    ]
  },
  {
    "q": "What does this code output?",
    "c": "var dict = new Dictionary<int, string>();\ndict[1] = \"One\";\ndict[2] = \"Two\";\nConsole.WriteLine(dict.Count);",
    "o": [
      "2",
      "1",
      "0",
      "Error"
    ]
  },
  {
    "q": "Why is List<T> preferred over ArrayList in modern C# development?",
    "o": [
      "List<T> is type-safe and avoids boxing/unboxing.",
      "List<T> uses less memory in all cases.",
      "ArrayList has faster access time.",
      "ArrayList supports LINQ better."
    ]
  },
  {
    "q": "What is required to use LINQ methods like Where and Select?",
    "o": [
      "using System.Linq;",
      "using System.Collections;",
      "using System.Threading;",
      "using System.Data.Linq;"
    ]
  },
  {
    "q": "Which keyword is essential to implement a custom iterator in C#?",
    "o": [
      "yield",
      "return",
      "delegate",
      "async"
    ]
  },
  {
    "q": "Which of the following collections is not type-safe?",
    "o": [
      "ArrayList",
      "List<int>",
      "Dictionary<string, int>",
      "List<string>"
    ]
  },
  {
    "q": "What does this code print?",
    "c": "var list = new List<int> { 2, 4, 6, 8 };\nvar even = list.All(x => x % 2 == 0);\nConsole.WriteLine(even);",
    "o": [
      "True",
      "False",
      "0",
      "4"
    ]
  },
  {
    "q": "Which LINQ method would you use to filter elements?",
    "o": [
      "Where",
      "Select",
      "Aggregate",
      "Count"
    ]
  },
  {
    "q": "Which collection allows duplicate keys?",
    "o": [
      "None of the above",
      "Dictionary<TKey, TValue>",
      "SortedDictionary<TKey, TValue>",
      "List<T>"
    ]
  },
  {
    "q": "What does the following code return?",
    "c": "var nums = new List<int> { 1, 2, 3, 4 };\nvar query = from n in nums where n > 2 select n;\nConsole.WriteLine(query.Count());",
    "o": [
      "2",
      "3",
      "1",
      "4"
    ]
  },
  {
    "q": "Which of the following best describes the `yield return` statement in C#?",
    "o": [
      "It pauses the method execution and returns a value to the caller.",
      "It ends the method execution completely.",
      "It creates a thread-safe enumerable.",
      "It collects all results before returning."
    ]
  },
  {
    "q": "What will be printed?",
    "c": "var list = new List<string> { \"dog\", \"cat\", \"bat\" };\nvar result = list.FirstOrDefault(x => x.StartsWith(\"c\"));\nConsole.WriteLine(result);",
    "o": [
      "cat",
      "dog",
      "bat",
      "null"
    ]
  },
  {
    "q": "What is the correct way to declare a Dictionary in C# with string keys and int values?",
    "o": [
      "Dictionary<string, int> myDict = new Dictionary<string, int>();",
      "Dictionary myDict = new Dictionary(string, int);",
      "Dict<string, int> myDict = new Dict<string, int>();",
      "Dictionary myDict = new Dictionary<string, int>();"
    ]
  },
  {
    "q": "Which of the following statements about List<T> is true?",
    "o": [
      "List<T> can grow dynamically as new elements are added.",
      "List<T> must have a fixed size at initialization.",
      "List<T> cannot store value types.",
      "List<T> only works with strings."
    ]
  },
  {
    "q": "Which LINQ method returns only distinct elements?",
    "o": [
      "Distinct",
      "SelectMany",
      "First",
      "Take"
    ]
  },
  {
    "q": "What will be the result of the following code?",
    "c": "ArrayList list = new ArrayList();\nlist.Add(1);\nlist.Add(\"two\");\nConsole.WriteLine(list.Count);",
    "o": [
      "2",
      "1",
      "0",
      "Runtime error"
    ]
  },
  {
    "q": "Which collection is best for storing key-value pairs with unique keys?",
    "o": [
      "Dictionary<TKey, TValue>",
      "List<T>",
      "ArrayList",
      "Queue<T>"
    ]
  },
  {
    "q": "What is the output of this LINQ query?",
    "c": "var data = new List<int> { 10, 20, 30, 40 };\nvar result = data.Where(x => x > 25).ToList();\nConsole.WriteLine(result.Count);",
    "o": [
      "2",
      "1",
      "3",
      "0"
    ]
  },
  {
    "q": "Which keyword is used to implement a lazy iterator in C#?",
    "o": [
      "yield",
      "defer",
      "lazy",
      "return"
    ]
  },
  {
    "q": "What is a key difference between List<T> and ArrayList?",
    "o": [
      "List<T> is type-safe, ArrayList is not",
      "ArrayList is faster than List<T>",
      "List<T> can’t store value types",
      "ArrayList supports LINQ directly"
    ]
  },
  {
    "q": "Which of these LINQ methods transforms each element of a sequence?",
    "o": [
      "Select",
      "Where",
      "GroupBy",
      "FirstOrDefault"
    ]
  },
  {
    "q": "What will this code display?",
    "c": "Dictionary<string, int> ages = new Dictionary<string, int>();\nages[\"Alice\"] = 30;\nages[\"Bob\"] = 25;\nConsole.WriteLine(ages[\"Bob\"]);",
    "o": [
      "25",
      "30",
      "0",
      "Error"
    ]
  },
  {
    "q": "Which collection can grow dynamically and ensures type safety?",
    "o": [
      "List<T>",
      "Array",
      "ArrayList",
      "Stack"
    ]
  },
  {
    "q": "What happens when you use `yield return` in a method?",
    "o": [
      "The method returns an iterator one item at a time",
      "The method throws an exception",
      "The method blocks execution",
      "The method creates a background thread"
    ]
  },
  {
    "q": "Which LINQ method can be used to combine two collections based on a key?",
    "o": [
      "Join",
      "Select",
      "ToList",
      "Take"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "var list = new List<string> { \"apple\", \"banana\", \"cherry\" };\nvar result = list.Contains(\"banana\");\nConsole.WriteLine(result);",
    "o": [
      "True",
      "False",
      "banana",
      "Exception"
    ]
  },
  {
    "q": "Which of the following can store elements of different data types?",
    "o": [
      "ArrayList",
      "List<int>",
      "Dictionary<string, int>",
      "List<string>"
    ]
  },
  {
    "q": "What is the purpose of using generic collections in C#?",
    "o": [
      "To provide type safety and reduce boxing/unboxing",
      "To allow unsafe memory access",
      "To simplify inheritance",
      "To enable reflection"
    ]
  },
  {
    "q": "Which collection throws an exception when trying to add a duplicate key?",
    "o": [
      "Dictionary<TKey, TValue>",
      "List<T>",
      "ArrayList",
      "Queue<T>"
    ]
  },
  {
    "q": "What will be the result of the following LINQ operation?",
    "c": "var nums = new List<int> { 3, 6, 9, 12 };\nvar first = nums.FirstOrDefault(n => n > 10);\nConsole.WriteLine(first);",
    "o": [
      "12",
      "9",
      "3",
      "0"
    ]
  },
  {
    "q": "Which of the following methods can be used to iterate over a collection using `yield`?",
    "o": [
      "An iterator block using `yield return`",
      "A lambda expression",
      "A static method",
      "A constructor"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "ArrayList list = new ArrayList();\nlist.Add(10);\nlist.Add(\"text\");\nConsole.WriteLine(list[1]);",
    "o": [
      "text",
      "10",
      "ArrayList",
      "1"
    ]
  },
  {
    "q": "Which LINQ method retrieves the last element of a collection?",
    "o": [
      "Last",
      "First",
      "TakeLast",
      "SelectLast"
    ]
  },
  {
    "q": "Which statement about `yield` in C# is true?",
    "o": [
      "It allows creating custom iterators without creating a collection",
      "It terminates the method immediately",
      "It blocks the calling thread",
      "It converts a method into an async task"
    ]
  },
  {
    "q": "Which of the following LINQ methods returns a single transformed collection?",
    "o": [
      "Select",
      "Where",
      "First",
      "Any"
    ]
  },
  {
    "q": "What is the default capacity of a new List<T> when initialized without specifying size?",
    "o": [
      "0",
      "1",
      "10",
      "100"
    ]
  },
  {
    "q": "Which method checks if a Dictionary contains a specific key?",
    "o": [
      "ContainsKey",
      "CheckKey",
      "HasKey",
      "Exists"
    ]
  },
  {
    "q": "What will this code output?",
    "c": "var names = new List<string> { \"Anna\", \"Ben\", \"Chris\" };\nvar filtered = names.Where(n => n.StartsWith(\"B\"));\nConsole.WriteLine(filtered.First());",
    "o": [
      "Ben",
      "Anna",
      "Chris",
      "B"
    ]
  },
  {
    "q": "What does `yield return` do in an iterator method?",
    "o": [
      "Returns the next value in the sequence without exiting the method",
      "Immediately ends the method and returns the value",
      "Creates a new thread",
      "Returns an array of values"
    ]
  },
  {
    "q": "Which is the correct way to declare a generic List of integers?",
    "o": [
      "List<int> myList = new List<int>();",
      "List myList = new List<int>();",
      "ArrayList<int> myList = new ArrayList<int>();",
      "List myList = new List();"
    ]
  },
  {
    "q": "What will be printed by this code?",
    "c": "var data = new Dictionary<string, int>();\ndata.Add(\"A\", 1);\ndata.Add(\"B\", 2);\nConsole.WriteLine(data.Count);",
    "o": [
      "2",
      "1",
      "0",
      "Runtime Error"
    ]
  },
  {
    "q": "Which of the following is a benefit of using generic collections?",
    "o": [
      "Compile-time type checking",
      "Allows storing multiple data types in one collection",
      "Improves reflection performance",
      "Prevents memory leaks"
    ]
  },
  {
    "q": "Which method returns the first element of a sequence in LINQ?",
    "o": [
      "First",
      "Take",
      "SingleOrDefault",
      "FindFirst"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "ArrayList list = new ArrayList();\nlist.Add(5);\nlist.Add(10);\nConsole.WriteLine((int)list[1] + (int)list[0]);",
    "o": [
      "15",
      "10",
      "5",
      "0"
    ]
  },
  {
    "q": "Which collection automatically resizes as new elements are added and is type-safe?",
    "o": [
      "List<T>",
      "Array",
      "Hashtable",
      "ArrayList"
    ]
  },
  {
    "q": "Which namespace must be included to use generic collections like List<T> and Dictionary<TKey, TValue>?",
    "o": [
      "System.Collections.Generic",
      "System.Linq",
      "System.Data",
      "System.IO"
    ]
  },
  {
    "q": "What does the following code output?",
    "c": "var scores = new List<int> { 10, 20, 30 };\nvar avg = scores.Average();\nConsole.WriteLine(avg);",
    "o": [
      "20",
      "30",
      "10",
      "0"
    ]
  },
  {
    "q": "Which of the following is a key difference between ArrayList and List<T>?",
    "o": [
      "List<T> is type-safe, ArrayList is not",
      "ArrayList is faster than List<T>",
      "List<T> stores objects only",
      "ArrayList is a generic collection"
    ]
  },
  {
    "q": "Which LINQ query will correctly select all even numbers from a list?",
    "c": "var numbers = new List<int> { 1, 2, 3, 4, 5, 6 };\nvar evens = numbers.Where(n => n % 2 == 0);",
    "o": [
      "var evens = numbers.Where(n => n % 2 == 0);",
      "var evens = numbers.Select(n => n % 2 == 0);",
      "var evens = numbers.Find(n => n % 2 == 0);",
      "var evens = numbers.Filter(n => n % 2 == 0);"
    ]
  },
  {
    "q": "What will be printed?",
    "c": "Dictionary<string, string> capitals = new Dictionary<string, string>();\ncapitals[\"France\"] = \"Paris\";\ncapitals[\"Germany\"] = \"Berlin\";\nConsole.WriteLine(capitals[\"Germany\"]);",
    "o": [
      "Berlin",
      "Paris",
      "France",
      "Germany"
    ]
  },
  {
    "q": "What is a requirement when using Dictionary<TKey, TValue>?",
    "o": [
      "Keys must be unique",
      "Values must be strings",
      "Both keys and values must be strings",
      "Keys must be numeric"
    ]
  },
  {
    "q": "Which of the following methods uses `yield` correctly?",
    "c": "public static IEnumerable<int> GetEvenNumbers()\n{\n    for (int i = 0; i <= 5; i++)\n    {\n        if (i % 2 == 0)\n            yield return i;\n    }\n}",
    "o": [
      "It defines a lazy iterator",
      "It throws an exception",
      "It returns an array",
      "It blocks the main thread"
    ]
  },
  {
    "q": "Which LINQ method returns a new collection with transformed elements?",
    "o": [
      "Select",
      "Where",
      "First",
      "All"
    ]
  },
  {
    "q": "How can you safely retrieve a value from a Dictionary without risking a KeyNotFoundException?",
    "o": [
      "Use TryGetValue",
      "Use GetValue",
      "Use Contains",
      "Use FindValue"
    ]
  },
  {
    "q": "Which of the following correctly declares an iterator method in C#?",
    "o": [
      "public IEnumerable<int> GetSquares() { for(int i=1;i<=3;i++) yield return i*i; }",
      "public int[] GetSquares() { yield return 1; }",
      "public void GetSquares() { return; }",
      "public List<int> GetSquares() { yield break; }"
    ]
  },
  {
    "q": "What is the major limitation of using ArrayList in C#?",
    "o": [
      "It stores elements as objects, losing type safety",
      "It cannot store primitive data types",
      "It is read-only",
      "It requires manual memory management"
    ]
  },
  {
    "q": "What will be the output of the following code?",
    "c": "var list = new List<string> { \"a\", \"b\", \"c\" };\nConsole.WriteLine(list[1]);",
    "o": [
      "b",
      "a",
      "c",
      "1"
    ]
  },
  {
    "q": "Which method is used to add a new key-value pair to a Dictionary?",
    "o": [
      "Add",
      "Insert",
      "Append",
      "Put"
    ]
  },
  {
    "q": "What is the purpose of using generics like List<T> in C#?",
    "o": [
      "To ensure type safety at compile time",
      "To support inheritance",
      "To avoid using namespaces",
      "To increase runtime type casting"
    ]
  },
  {
    "q": "What does the following LINQ expression return?",
    "c": "var numbers = new List<int> { 1, 2, 3, 4 };\nvar query = numbers.FirstOrDefault(n => n > 2);\nConsole.WriteLine(query);",
    "o": [
      "3",
      "1",
      "2",
      "4"
    ]
  },
  {
    "q": "Which of the following is NOT a feature of List<T>?",
    "o": [
      "Allows heterogeneous elements",
      "Supports index-based access",
      "Supports LINQ queries",
      "Can be resized dynamically"
    ]
  },
  {
    "q": "What will the following yield-based iterator return?",
    "c": "public static IEnumerable<string> GetNames()\n{\n    yield return \"John\";\n    yield return \"Jane\";\n    yield return \"Jack\";\n}",
    "o": [
      "A sequence of strings: John, Jane, Jack",
      "Only the first name: John",
      "Null",
      "An error at runtime"
    ]
  },
  {
    "q": "Which LINQ method would you use to get the total number of elements in a collection?",
    "o": [
      "Count",
      "Select",
      "First",
      "Skip"
    ]
  },
  {
    "q": "What is required to use LINQ methods like Where, Select, and First?",
    "o": [
      "System.Linq namespace",
      "System.Text namespace",
      "System.Collections.Specialized",
      "System.Data.Linq.Mapping"
    ]
  },
  {
    "q": "Which of the following collections maintains insertion order and type safety?",
    "o": [
      "List<T>",
      "ArrayList",
      "Dictionary<TKey, TValue>",
      "Stack"
    ]
  },
  {
    "q": "Which collection provides better performance and type safety over ArrayList?",
    "o": [
      "List<T>",
      "Hashtable",
      "SortedList",
      "ArrayList"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "var dict = new Dictionary<string, int>();\ndict[\"a\"] = 100;\nConsole.WriteLine(dict.ContainsKey(\"a\"));",
    "o": [
      "True",
      "False",
      "100",
      "KeyNotFoundException"
    ]
  },
  {
    "q": "Which of the following is a valid way to declare a generic Dictionary?",
    "o": [
      "Dictionary<string, int> myDict = new Dictionary<string, int>();",
      "Dictionary myDict = new Dictionary<string, int>();",
      "Dictionary<int> myDict = new Dictionary<int>();",
      "var myDict = Dictionary<string, int>();"
    ]
  },
  {
    "q": "What is the purpose of 'yield return' in C#?",
    "o": [
      "To return elements one at a time using lazy evaluation",
      "To create parallel tasks",
      "To return multiple values from a method instantly",
      "To sort collections during iteration"
    ]
  },
  {
    "q": "What will be printed by this code?",
    "c": "var list = new List<int> { 10, 20, 30 };\nvar result = list.Where(x => x > 15).ToList();\nConsole.WriteLine(result.Count);",
    "o": [
      "2",
      "1",
      "3",
      "0"
    ]
  },
  {
    "q": "Which statement about ArrayList is true?",
    "o": [
      "It stores elements as object, which can lead to boxing/unboxing issues.",
      "It is a strongly typed collection.",
      "It performs better than List<T> in generic use cases.",
      "It can store only strings."
    ]
  },
  {
    "q": "Which LINQ method skips the first N elements in a sequence?",
    "o": [
      "Skip",
      "Take",
      "Select",
      "Where"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "public static IEnumerable<int> Numbers()\n{\n    yield return 1;\n    yield return 2;\n    yield return 3;\n}\n\nvar list = Numbers().ToList();\nConsole.WriteLine(list[1]);",
    "o": [
      "2",
      "1",
      "3",
      "0"
    ]
  },
  {
    "q": "Which namespace must be included to use List<T> and Dictionary<TKey, TValue>?",
    "o": [
      "System.Collections.Generic",
      "System.Linq",
      "System.Text",
      "System.Collections.Specialized"
    ]
  },
  {
    "q": "Which of the following will compile successfully?",
    "c": "List<string> names = new List<string>();\nnames.Add(\"Alice\");\nnames.Add(\"Bob\");",
    "o": [
      "All lines compile and execute successfully",
      "Compilation error due to missing namespace",
      "Cannot add elements to a generic list",
      "Add method is not defined for List<string>"
    ]
  },
  {
    "q": "Which method is used to check if a key exists in a Dictionary?",
    "o": [
      "ContainsKey",
      "HasKey",
      "Exists",
      "HasValue"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "var numbers = new List<int> { 1, 2, 3, 4 };\nvar even = numbers.Where(n => n % 2 == 0);\nConsole.WriteLine(even.Count());",
    "o": [
      "2",
      "4",
      "0",
      "1"
    ]
  },
  {
    "q": "Which of the following collections is non-generic?",
    "o": [
      "ArrayList",
      "List<int>",
      "Dictionary<string, int>",
      "Queue<string>"
    ]
  },
  {
    "q": "Which LINQ function projects each element into a new form?",
    "o": [
      "Select",
      "Where",
      "GroupBy",
      "OrderByDescending"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "List<string> fruits = new List<string> { \"Apple\", \"Banana\", \"Cherry\" };\nConsole.WriteLine(fruits[1]);",
    "o": [
      "Banana",
      "Apple",
      "Cherry",
      "1"
    ]
  },
  {
    "q": "What does 'yield return' do in an iterator block?",
    "o": [
      "Returns an element and pauses the method's state until the next iteration",
      "Returns all items in a list",
      "Exits the method immediately",
      "Skips the current iteration"
    ]
  },
  {
    "q": "Which code snippet correctly adds an item to an ArrayList?",
    "c": "ArrayList list = new ArrayList();\nlist.Add(\"hello\");",
    "o": [
      "Code runs correctly",
      "Add method does not exist",
      "Use AddItem instead",
      "ArrayList cannot store strings"
    ]
  },
  {
    "q": "Which statement is true about generic collections?",
    "o": [
      "They provide type safety and avoid boxing/unboxing.",
      "They can only store reference types.",
      "They are slower than non-generic collections.",
      "They can't be used with custom classes."
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "Dictionary<string, int> marks = new Dictionary<string, int>();\nmarks[\"John\"] = 85;\nmarks[\"Jane\"] = 92;\nConsole.WriteLine(marks[\"Jane\"]);",
    "o": [
      "92",
      "85",
      "John",
      "KeyNotFoundException"
    ]
  },
  {
    "q": "Which LINQ method returns a sorted sequence in ascending order?",
    "o": [
      "OrderBy",
      "OrderDescending",
      "Sort",
      "SortBy"
    ]
  },
  {
    "q": "Which generic collection allows key-value pair storage with fast lookup?",
    "o": [
      "Dictionary<TKey, TValue>",
      "List<T>",
      "Queue<T>",
      "ArrayList"
    ]
  },
  {
    "q": "What will the following code output?",
    "c": "var list = new List<string> { \"A\", \"B\", \"C\" };\nlist.Remove(\"B\");\nConsole.WriteLine(list.Count);",
    "o": [
      "2",
      "3",
      "1",
      "0"
    ]
  },
  {
    "q": "What is the benefit of using List<T> over ArrayList?",
    "o": [
      "List<T> provides type safety",
      "List<T> is slower",
      "List<T> is only for reference types",
      "List<T> can't use LINQ"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "var names = new List<string> { \"Alice\", \"Bob\", \"Charlie\" };\nvar result = names.FirstOrDefault(n => n.StartsWith(\"D\"));\nConsole.WriteLine(result == null ? \"None\" : result);",
    "o": [
      "None",
      "Alice",
      "Charlie",
      "D"
    ]
  },
  {
    "q": "Which of the following best describes the purpose of 'yield return'?",
    "o": [
      "It allows deferred execution and state preservation in iteration",
      "It exits a loop immediately",
      "It restarts the method from the beginning",
      "It executes LINQ queries"
    ]
  },
  {
    "q": "Which of the following operations is NOT valid on a Dictionary<TKey, TValue>?",
    "o": [
      "Accessing values by index position",
      "Checking for a key using ContainsKey",
      "Adding a key-value pair using Add()",
      "Iterating using foreach"
    ]
  },
  {
    "q": "What will be the output of this code?",
    "c": "var items = new List<int> { 10, 20, 30, 40 };\nvar filtered = items.Where(i => i > 25);\nConsole.WriteLine(filtered.Count());",
    "o": [
      "2",
      "1",
      "3",
      "4"
    ]
  },
  {
    "q": "Why might you prefer using a Dictionary instead of a List?",
    "o": [
      "Dictionaries provide faster lookups by key",
      "Lists use less memory",
      "Dictionaries are easier to iterate",
      "Lists allow storing duplicates"
    ]
  },
  {
    "q": "Which of the following can return results immediately using deferred execution?",
    "o": [
      "LINQ with yield return",
      "foreach loop with break",
      "Method with return keyword",
      "Immediate execution queries"
    ]
  },
  {
    "q": "What is the result of the following code?",
    "c": "ArrayList list = new ArrayList();\nlist.Add(10);\nlist.Add(\"hello\");\nConsole.WriteLine(list[1]);",
    "o": [
      "hello",
      "10",
      "ArrayList",
      "Exception"
    ]
  },
  {
    "q": "Which of the following is type-safe and avoids boxing/unboxing?",
    "o": [
      "List<int>",
      "ArrayList",
      "Hashtable",
      "Queue"
    ]
  },
  {
    "q": "What will this code output?",
    "c": "var dict = new Dictionary<string, int>();\ndict[\"apple\"] = 2;\ndict[\"banana\"] = 3;\nConsole.WriteLine(dict[\"apple\"]);",
    "o": [
      "2",
      "3",
      "apple",
      "banana"
    ]
  },
  {
    "q": "Which LINQ method returns the first element that matches a condition or the default value if none match?",
    "o": [
      "FirstOrDefault",
      "Select",
      "Where",
      "Any"
    ]
  },
  {
    "q": "What will be the output of this code?",
    "c": "List<string> colors = new List<string> { \"Red\", \"Green\", \"Blue\" };\nvar upper = colors.Select(c => c.ToUpper());\nConsole.WriteLine(string.Join(\", \", upper));",
    "o": [
      "RED, GREEN, BLUE",
      "Red, Green, Blue",
      "red, green, blue",
      "Error"
    ]
  },
  {
    "q": "Which collection allows duplicate keys?",
    "o": [
      "None of the above",
      "Dictionary<TKey, TValue>",
      "SortedDictionary<TKey, TValue>",
      "HashSet"
    ]
  },
  {
    "q": "What is the primary purpose of 'yield return'?",
    "o": [
      "To enable lazy evaluation in iterator blocks",
      "To break out of a loop",
      "To stop execution of a method",
      "To convert a list to an array"
    ]
  },
  {
    "q": "Which of the following collections is dynamically sized and accepts any data type?",
    "o": [
      "ArrayList",
      "Array",
      "Stack<T>",
      "Dictionary<TKey, TValue>"
    ]
  },
  {
    "q": "What will this code output?",
    "c": "IEnumerable<int> GetNumbers()\n{\n    yield return 1;\n    yield return 2;\n    yield return 3;\n}\n\nforeach(var n in GetNumbers())\n{\n    Console.Write(n + \" \");\n}",
    "o": [
      "1 2 3 ",
      "123",
      "Error",
      "0 1 2"
    ]
  },
  {
    "q": "Which LINQ method transforms each element of a collection?",
    "o": [
      "Select",
      "Where",
      "Aggregate",
      "FirstOrDefault"
    ]
  },
  {
    "q": "Which statement is true about Dictionary<TKey, TValue>?",
    "o": [
      "It does not maintain order of elements",
      "It allows duplicate keys",
      "It is not generic",
      "It throws no error on duplicate key insertion"
    ]
  },
  {
    "q": "Which of the following is a drawback of using ArrayList over List<T>?",
    "o": [
      "ArrayList requires boxing and unboxing for value types",
      "ArrayList supports only reference types",
      "ArrayList automatically sorts elements",
      "ArrayList doesn't allow null values"
    ]
  },
  {
    "q": "What does the following code output?",
    "c": "var list = new List<int> { 10, 20, 30 };\nvar result = list.FirstOrDefault(x => x > 25);\nConsole.WriteLine(result);",
    "o": [
      "30",
      "10",
      "20",
      "0"
    ]
  },
  {
    "q": "What is the primary difference between List<T> and ArrayList?",
    "o": [
      "List<T> is type-safe, ArrayList is not",
      "ArrayList is faster than List<T>",
      "List<T> doesn't allow duplicates, ArrayList does",
      "ArrayList stores values in stack, List<T> in heap"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "var names = new List<string> { \"Ann\", \"Bob\", \"Cathy\" };\nvar filtered = names.Where(n => n.StartsWith(\"B\"));\nConsole.WriteLine(filtered.Count());",
    "o": [
      "1",
      "2",
      "0",
      "3"
    ]
  },
  {
    "q": "Which method is used in LINQ to filter elements based on a condition?",
    "o": [
      "Where",
      "Select",
      "OrderBy",
      "Aggregate"
    ]
  },
  {
    "q": "What does the following code return?",
    "c": "List<int> numbers = new List<int> { 1, 2, 3, 4 };\nvar even = numbers.Where(n => n % 2 == 0);\nConsole.WriteLine(string.Join(\",\", even));",
    "o": [
      "2,4",
      "1,3",
      "1,2,3,4",
      "4"
    ]
  },
  {
    "q": "Which of the following collections maintains key-value pairs and does not allow duplicate keys?",
    "o": [
      "Dictionary<TKey, TValue>",
      "List<T>",
      "ArrayList",
      "Stack<T>"
    ]
  },
  {
    "q": "Which keyword is required to create an iterator block in C#?",
    "o": [
      "yield",
      "iterator",
      "lazy",
      "select"
    ]
  },
  {
    "q": "Which LINQ method projects each element of a sequence into a new form?",
    "o": [
      "Select",
      "Where",
      "GroupBy",
      "Join"
    ]
  },
  {
    "q": "What will this code output?",
    "c": "IEnumerable<int> Generate()\n{\n    yield return 10;\n    yield return 20;\n}\n\nforeach (var item in Generate())\n{\n    Console.Write(item + \" \");\n}",
    "o": [
      "10 20 ",
      "20 10 ",
      "10",
      "Error"
    ]
  },
  {
    "q": "What will be the output of this code?",
    "c": "var dict = new Dictionary<string, int>();\ndict[\"apple\"] = 3;\ndict[\"banana\"] = 5;\nConsole.WriteLine(dict[\"banana\"]);",
    "o": [
      "5",
      "3",
      "banana",
      "0"
    ]
  },
  {
    "q": "Which of these allows duplicate values but not duplicate keys?",
    "o": [
      "Dictionary<TKey, TValue>",
      "List<T>",
      "ArrayList",
      "Queue<T>"
    ]
  },
  {
    "q": "Which LINQ method returns the first element that matches a condition or a default value if none found?",
    "o": [
      "FirstOrDefault",
      "First",
      "Where",
      "Single"
    ]
  },
  {
    "q": "What will this code print?",
    "c": "var numbers = new List<int> { 1, 2, 3, 4, 5 };\nvar total = numbers.Aggregate((a, b) => a + b);\nConsole.WriteLine(total);",
    "o": [
      "15",
      "5",
      "1",
      "0"
    ]
  },
  {
    "q": "Which statement about List<T> is true?",
    "o": [
      "List<T> is a strongly-typed collection of objects accessible by index",
      "List<T> does not allow adding or removing items at runtime",
      "List<T> is only available in .NET 6 and above",
      "List<T> is slower than ArrayList in all cases"
    ]
  },
  {
    "q": "What does the 'yield return' keyword do in C#?",
    "o": [
      "It pauses the method and returns an element in an iterator",
      "It exits the method completely",
      "It throws an exception",
      "It compiles the method as static"
    ]
  },
  {
    "q": "What is the purpose of the 'Select' method in LINQ?",
    "o": [
      "It transforms each element of a collection",
      "It filters elements based on condition",
      "It removes duplicates",
      "It finds max value"
    ]
  },
  {
    "q": "Which of these can be used to store key-value pairs in C# generically?",
    "o": [
      "Dictionary<TKey, TValue>",
      "ArrayList",
      "List<T>",
      "Stack<T>"
    ]
  },
  {
    "q": "What will be the output of this iterator?",
    "c": "IEnumerable<int> GetEven()\n{\n    for (int i = 2; i <= 4; i += 2)\n    {\n        yield return i;\n    }\n}\nforeach (var n in GetEven())\n{\n    Console.Write(n + \" \");\n}",
    "o": [
      "2 4 ",
      "1 3 ",
      "2 3 4 ",
      "2 4 6 "
    ]
  },
  {
    "q": "Which collection would be most suitable for storing a dynamic, type-safe list of student names?",
    "o": [
      "List<string>",
      "ArrayList",
      "Dictionary<int, string>",
      "Stack<string>"
    ]
  },
  {
    "q": "Which of the following collections is non-generic and can store different types of objects?",
    "o": [
      "ArrayList",
      "List<int>",
      "Dictionary<string, int>",
      "Queue<string>"
    ]
  },
  {
    "q": "What is the benefit of using List<T> over ArrayList in C#?",
    "o": [
      "Type safety at compile time",
      "Faster performance in all cases",
      "Support for multiple data types in the same list",
      "Automatically sorts elements"
    ]
  },
  {
    "q": "What will be the output of this code?",
    "c": "var names = new List<string> { \"Alice\", \"Bob\", \"Charlie\" };\nConsole.WriteLine(names[1]);",
    "o": [
      "Bob",
      "Alice",
      "Charlie",
      "1"
    ]
  },
  {
    "q": "Which method is used in LINQ to filter elements of a collection?",
    "o": [
      "Where",
      "Select",
      "Aggregate",
      "Count"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "var items = new List<int> { 1, 2, 3 };\nforeach (var item in items)\n{\n    yield return item;\n}",
    "o": [
      "Compilation error: 'yield return' cannot be used in a 'foreach'",
      "1 2 3",
      "3 2 1",
      "Runtime exception"
    ]
  },
  {
    "q": "Which LINQ method would you use to transform each element of a collection?",
    "o": [
      "Select",
      "Where",
      "First",
      "ToList"
    ]
  },
  {
    "q": "Which of these is required to use LINQ features in a C# file?",
    "o": [
      "using System.Linq;",
      "using System.Generic;",
      "using Linq.Core;",
      "using System.Data.Linq;"
    ]
  },
  {
    "q": "Which is the correct way to declare a dictionary with string keys and int values?",
    "o": [
      "Dictionary<string, int> dict = new Dictionary<string, int>();",
      "Dictionary<int, string> dict = new Dictionary<>();",
      "var dict = new Dictionary<>();",
      "Dictionary<string> dict = new Dictionary<string>();"
    ]
  },
  {
    "q": "Which keyword is used to create an iterator block in C#?",
    "o": [
      "yield",
      "return",
      "async",
      "defer"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "List<int> numbers = new List<int> { 1, 2, 3, 4, 5 };\nvar result = numbers.Where(n => n % 2 == 0);\nforeach (var n in result) Console.Write(n + \" \");",
    "o": [
      "2 4 ",
      "1 3 5 ",
      "2 4 6 ",
      "1 2 3 4 5 "
    ]
  },
  {
    "q": "What is the key difference between Dictionary and List in C#?",
    "o": [
      "Dictionary stores data as key-value pairs",
      "List is faster than Dictionary in all cases",
      "List uses hashing to retrieve elements",
      "Dictionary allows duplicate keys"
    ]
  },
  {
    "q": "Which namespace must be included to use ArrayList in C#?",
    "o": [
      "System.Collections",
      "System.Linq",
      "System.Collections.Generic",
      "System.Array"
    ]
  },
  {
    "q": "What does the following code print?",
    "c": "ArrayList list = new ArrayList();\nlist.Add(\"hello\");\nlist.Add(123);\nConsole.WriteLine(list.Count);",
    "o": [
      "2",
      "0",
      "1",
      "Compile-time error"
    ]
  },
  {
    "q": "Which collection would you use to maintain insertion order and access elements by index?",
    "o": [
      "List<T>",
      "Dictionary<TKey, TValue>",
      "HashSet<T>",
      "SortedDictionary<TKey, TValue>"
    ]
  },
  {
    "q": "What does the following LINQ query do?\n`numbers.Where(n => n > 10)`",
    "o": [
      "Filters all numbers greater than 10",
      "Sorts the numbers in descending order",
      "Adds 10 to each number",
      "Returns only even numbers"
    ]
  },
  {
    "q": "What will be the output of the following code?",
    "c": "var fruits = new List<string> { \"apple\", \"banana\", \"cherry\" };\nConsole.WriteLine(fruits.Contains(\"banana\"));",
    "o": [
      "True",
      "False",
      "banana",
      "Compile-time error"
    ]
  },
  {
    "q": "Which of the following is a benefit of using generics like List<T>?",
    "o": [
      "Eliminates the need for casting",
      "Allows mixed data types",
      "Slower than non-generic collections",
      "Requires boxing and unboxing"
    ]
  },
  {
    "q": "Which keyword is required in a method to return items one at a time using an iterator?",
    "o": [
      "yield return",
      "return",
      "async return",
      "select"
    ]
  },
  {
    "q": "Which method can be used to retrieve the number of elements in a Dictionary?",
    "o": [
      "Count",
      "Length",
      "Size",
      "GetCount()"
    ]
  },
  {
    "q": "What is the correct way to get all the keys from a Dictionary<string, int>?",
    "o": [
      "myDict.Keys",
      "myDict.GetKeys()",
      "myDict.SelectKeys()",
      "myDict.KeyList()"
    ]
  },
  {
    "q": "Which of the following statements is true about List<T> in C#?",
    "o": [
      "List<T> provides type safety by storing elements of a specified type.",
      "List<T> allows storing elements of multiple unrelated types.",
      "List<T> is slower than ArrayList in type-safe operations.",
      "List<T> is defined in System.Collections."
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "List<int> numbers = new List<int> {1, 2, 3};\nnumbers.Add(4);\nConsole.WriteLine(numbers[3]);",
    "o": [
      "4",
      "3",
      "Index out of range",
      "0"
    ]
  },
  {
    "q": "Which collection would you use to associate student names with their roll numbers for quick lookup?",
    "o": [
      "Dictionary<int, string>",
      "List<string>",
      "ArrayList",
      "Queue<string>"
    ]
  },
  {
    "q": "What is the result of this LINQ query?",
    "c": "var list = new List<int> { 10, 20, 30, 40 };\nvar result = list.Where(x => x > 25);\nConsole.WriteLine(result.Count());",
    "o": [
      "2",
      "1",
      "3",
      "0"
    ]
  },
  {
    "q": "What is the key difference between ArrayList and List<T>?",
    "o": [
      "ArrayList is non-generic, while List<T> is generic and type-safe",
      "ArrayList is faster in all scenarios",
      "List<T> cannot grow dynamically",
      "ArrayList does not allow null values"
    ]
  },
  {
    "q": "Which statement about yield is correct in C#?",
    "o": [
      "yield return is used to return items one at a time from an iterator method.",
      "yield return immediately exits the method.",
      "yield can be used inside a class constructor.",
      "yield is used only with async methods."
    ]
  },
  {
    "q": "Which of the following is a correct way to create a Dictionary in C#?",
    "o": [
      "var dict = new Dictionary<string, int>();",
      "var dict = new Dictionary();",
      "Dictionary<string> dict = new Dictionary<string>();",
      "Dictionary<int> dict = new Dictionary<int>();"
    ]
  },
  {
    "q": "What is the use of Keys property in Dictionary<TKey, TValue>?",
    "o": [
      "It returns a collection containing all keys.",
      "It returns a collection of values.",
      "It sorts the dictionary keys.",
      "It removes all keys."
    ]
  },
  {
    "q": "What is the return type of a LINQ query using the `select` clause?",
    "o": [
      "IEnumerable<T>",
      "List<T>",
      "T[]",
      "Dictionary<T>"
    ]
  },
  {
    "q": "Which interface is typically implemented when using yield return?",
    "o": [
      "IEnumerable",
      "IDisposable",
      "ICollection",
      "IQueryable"
    ]
  },
  {
    "q": "Which C# collection is most suitable for storing a fixed-size list of heterogeneous elements?",
    "o": [
      "ArrayList",
      "List<int>",
      "Dictionary<string, int>",
      "Queue<string>"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "ArrayList list = new ArrayList();\nlist.Add(10);\nlist.Add(\"hello\");\nConsole.WriteLine(list.Count);",
    "o": [
      "2",
      "1",
      "10",
      "hello"
    ]
  },
  {
    "q": "Which method can be used to check if a key exists in a Dictionary<TKey, TValue>?",
    "o": [
      "ContainsKey",
      "Exists",
      "HasKey",
      "FindKey"
    ]
  },
  {
    "q": "What does the following LINQ expression return?",
    "c": "var names = new List<string> { \"John\", \"Jane\", \"Jack\" };\nvar result = names.Where(n => n.StartsWith(\"J\"));\nConsole.WriteLine(result.Count());",
    "o": [
      "3",
      "2",
      "1",
      "0"
    ]
  },
  {
    "q": "Which of the following collections is generic and ensures compile-time type safety?",
    "o": [
      "List<string>",
      "ArrayList",
      "Hashtable",
      "Queue"
    ]
  },
  {
    "q": "What is the purpose of using `yield return` in a method?",
    "o": [
      "To return a value without ending the method execution",
      "To return all values at once",
      "To throw an exception",
      "To pause a thread"
    ]
  },
  {
    "q": "Which of the following iterates over a collection using `yield return`?",
    "c": "public static IEnumerable<int> GetNumbers()\n{\n    yield return 1;\n    yield return 2;\n    yield return 3;\n}",
    "o": [
      "1, 2, 3",
      "123",
      "0, 1, 2",
      "Error"
    ]
  },
  {
    "q": "Which statement is true about LINQ in C#?",
    "o": [
      "LINQ allows querying collections using a SQL-like syntax.",
      "LINQ only works with databases.",
      "LINQ cannot be used with generic collections.",
      "LINQ does not support filtering operations."
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "var dict = new Dictionary<string, int>();\ndict[\"one\"] = 1;\ndict[\"two\"] = 2;\nConsole.WriteLine(dict[\"two\"]);",
    "o": [
      "2",
      "1",
      "two",
      "KeyNotFoundException"
    ]
  },
  {
    "q": "Which of the following collections maintain the order of insertion?",
    "o": [
      "List<T>",
      "Dictionary<TKey, TValue>",
      "HashSet<T>",
      "SortedDictionary<TKey, TValue>"
    ]
  },
  {
    "q": "Which collection allows storing key-value pairs where keys must be unique?",
    "o": [
      "Dictionary<TKey, TValue>",
      "List<T>",
      "ArrayList",
      "Queue<T>"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "List<int> numbers = new List<int> {1, 2, 3};\nnumbers.Add(4);\nConsole.WriteLine(numbers.Count);",
    "o": [
      "4",
      "3",
      "0",
      "1"
    ]
  },
  {
    "q": "Which of the following statements correctly initializes a generic dictionary?",
    "o": [
      "var dict = new Dictionary<string, int>();",
      "Dictionary dict = new Dictionary();",
      "var dict = new Dictionary();",
      "Dictionary<int> dict = new Dictionary<int>();"
    ]
  },
  {
    "q": "What does the following LINQ expression do?",
    "c": "var list = new List<string> { \"one\", \"two\", \"three\" };\nvar result = list.Select(s => s.ToUpper());",
    "o": [
      "Converts all elements to uppercase",
      "Removes lowercase letters",
      "Filters out short strings",
      "Throws a runtime error"
    ]
  },
  {
    "q": "Which feature allows lazy evaluation of sequences in C#?",
    "o": [
      "yield return",
      "ref return",
      "async return",
      "defer return"
    ]
  },
  {
    "q": "Which collection is most suitable for fast lookup by a key?",
    "o": [
      "Dictionary<TKey, TValue>",
      "List<T>",
      "ArrayList",
      "Stack<T>"
    ]
  },
  {
    "q": "What is the output of this code snippet?",
    "c": "ArrayList arr = new ArrayList();\narr.Add(100);\narr.Add(\"hello\");\narr.Remove(100);\nConsole.WriteLine(arr[0]);",
    "o": [
      "hello",
      "100",
      "0",
      "null"
    ]
  },
  {
    "q": "Which LINQ method is used to retrieve the first matching element?",
    "o": [
      "FirstOrDefault()",
      "Where()",
      "Select()",
      "Aggregate()"
    ]
  },
  {
    "q": "Which of the following is a benefit of using generic collections in C#?",
    "o": [
      "Type safety at compile time",
      "Less memory usage",
      "Ability to use non-generic data",
      "No need to define data type"
    ]
  },
  {
    "q": "Which keyword is used to implement a custom iterator?",
    "o": [
      "yield",
      "iterator",
      "loop",
      "return"
    ]
  },
  {
    "q": "Which collection should you use if you want to store elements in insertion order and access them by index?",
    "o": [
      "List<T>",
      "Dictionary<TKey, TValue>",
      "ArrayList",
      "HashSet<T>"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "Dictionary<string, int> scores = new Dictionary<string, int>();\nscores[\"Alice\"] = 90;\nConsole.WriteLine(scores[\"Alice\"]);",
    "o": [
      "90",
      "0",
      "Alice",
      "KeyNotFoundException"
    ]
  },
  {
    "q": "Which method is used in LINQ to filter a sequence based on a condition?",
    "o": [
      "Where()",
      "Select()",
      "OrderBy()",
      "GroupBy()"
    ]
  },
  {
    "q": "Which of the following allows storing objects of different types but sacrifices type safety?",
    "o": [
      "ArrayList",
      "List<T>",
      "Dictionary<TKey, TValue>",
      "Queue<T>"
    ]
  },
  {
    "q": "What is the result of executing the following code?",
    "c": "List<string> names = new List<string> { \"Tom\", \"Jerry\" };\nnames.Insert(1, \"Spike\");\nConsole.WriteLine(names[1]);",
    "o": [
      "Spike",
      "Tom",
      "Jerry",
      "Error"
    ]
  },
  {
    "q": "What does the 'yield return' statement do in C#?",
    "o": [
      "Returns elements one at a time using lazy evaluation",
      "Returns multiple values at once",
      "Breaks out of a loop",
      "Creates a list automatically"
    ]
  },
  {
    "q": "Which of the following collections resizes dynamically and is type-safe?",
    "o": [
      "List<T>",
      "ArrayList",
      "Array",
      "Hashtable"
    ]
  },
  {
    "q": "What will this LINQ expression return?",
    "c": "List<int> numbers = new List<int> { 1, 2, 3, 4 };\nvar evens = numbers.Where(n => n % 2 == 0);\nConsole.WriteLine(evens.Count());",
    "o": [
      "2",
      "4",
      "0",
      "1"
    ]
  },
  {
    "q": "Which interface must be implemented to support 'foreach' iteration in a custom class?",
    "o": [
      "IEnumerable",
      "IDisposable",
      "IComparer",
      "IEnumerator"
    ]
  },
  {
    "q": "What happens if you try to access a non-existent key in a Dictionary without checking its presence?",
    "o": [
      "It throws a KeyNotFoundException",
      "It returns null",
      "It returns 0",
      "It returns an empty string"
    ]
  },
  {
    "q": "What is the main disadvantage of using ArrayList over List<T> in C#?",
    "o": [
      "ArrayList is not type-safe",
      "ArrayList is faster than List<T>",
      "ArrayList uses less memory",
      "ArrayList doesn't support any methods"
    ]
  },
  {
    "q": "What does the following code output?",
    "c": "var list = new List<int> { 1, 2, 3 };\nlist.Remove(2);\nConsole.WriteLine(string.Join(\",\", list));",
    "o": [
      "1,3",
      "1,2,3",
      "2,3",
      "1,2"
    ]
  },
  {
    "q": "Which LINQ method is used to transform elements from one form to another?",
    "o": [
      "Select()",
      "Where()",
      "Aggregate()",
      "Count()"
    ]
  },
  {
    "q": "Which collection is best when you need key-value pair storage with fast lookups?",
    "o": [
      "Dictionary<TKey, TValue>",
      "List<T>",
      "ArrayList",
      "Queue<T>"
    ]
  },
  {
    "q": "What is the output of this code using yield?",
    "c": "IEnumerable<int> GetNumbers()\n{\n    yield return 1;\n    yield return 2;\n}\n\nforeach (var num in GetNumbers())\n    Console.Write(num);",
    "o": [
      "12",
      "1 2",
      "0",
      "Compile-time error"
    ]
  },
  {
    "q": "What will this LINQ expression return?",
    "c": "var names = new List<string> { \"Amy\", \"Bob\", \"Alex\" };\nvar filtered = names.Where(n => n.StartsWith(\"A\"));\nConsole.WriteLine(filtered.Count());",
    "o": [
      "2",
      "1",
      "0",
      "3"
    ]
  },
  {
    "q": "What is a key feature of generic collections in C#?",
    "o": [
      "They provide compile-time type safety",
      "They consume more memory",
      "They are limited to primitive types",
      "They automatically sort data"
    ]
  },
  {
    "q": "What happens when you try to add a duplicate key to a Dictionary?",
    "o": [
      "An exception is thrown",
      "The value is overwritten",
      "It replaces the first key silently",
      "The dictionary ignores the duplicate"
    ]
  },
  {
    "q": "What is the purpose of 'yield break;' in an iterator method?",
    "o": [
      "It stops the iteration",
      "It throws an exception",
      "It restarts the iteration",
      "It yields the last value"
    ]
  },
  {
    "q": "Which namespace must be imported to use LINQ in C#?",
    "o": [
      "System.Linq",
      "System.Linq.Expressions",
      "System.Collections",
      "System.Linq.Dynamic"
    ]
  },
  {
    "q": "What is the type of elements stored in a List<string>?",
    "o": [
      "string",
      "object",
      "char",
      "List"
    ]
  },
  {
    "q": "Which of the following will retrieve a value by key from a Dictionary<int, string>?",
    "c": "var dict = new Dictionary<int, string>();\ndict[1] = \"One\";\nConsole.WriteLine(____);",
    "o": [
      "dict[1]",
      "dict.Get(1)",
      "dict.GetValue(1)",
      "dict.get[1]"
    ]
  },
  {
    "q": "What will the following LINQ query return?",
    "c": "var numbers = new List<int> { 1, 2, 3, 4 };\nvar result = numbers.Where(n => n > 2);\nConsole.WriteLine(result.Count());",
    "o": [
      "2",
      "1",
      "3",
      "4"
    ]
  },
  {
    "q": "Which one is NOT a benefit of using generic collections?",
    "o": [
      "They increase runtime casting",
      "They provide compile-time type checking",
      "They reduce boxing and unboxing",
      "They improve performance"
    ]
  },
  {
    "q": "Which of the following can be used to add an element to an ArrayList?",
    "o": [
      "Add()",
      "Insert()",
      "Append()",
      "Push()"
    ]
  },
  {
    "q": "What is the purpose of using yield return in C#?",
    "o": [
      "To return values one at a time using an iterator",
      "To return multiple values at once",
      "To pause and resume a thread",
      "To return values asynchronously"
    ]
  },
  {
    "q": "What will this code print?",
    "c": "var list = new List<string> { \"A\", \"B\", \"C\" };\nlist.Insert(1, \"X\");\nConsole.WriteLine(string.Join(\"\", list));",
    "o": [
      "AXBC",
      "ABCX",
      "XABC",
      "ABXC"
    ]
  },
  {
    "q": "Which method is used in LINQ to filter elements based on a condition?",
    "o": [
      "Where()",
      "Select()",
      "OrderBy()",
      "Count()"
    ]
  },
  {
    "q": "What will this iterator yield?",
    "c": "IEnumerable<int> CountToThree()\n{\n    yield return 1;\n    yield return 2;\n    yield return 3;\n}",
    "o": [
      "1, 2, 3",
      "0, 1, 2",
      "3, 2, 1",
      "Only 3"
    ]
  },
  {
    "q": "Which of the following is used to declare a Dictionary with integer keys and string values?",
    "o": [
      "Dictionary<int, string>",
      "Dictionary<string, int>",
      "List<int, string>",
      "Hashtable<int, string>"
    ]
  },
  {
    "q": "Which collection allows storing elements of any type without type safety?",
    "o": [
      "ArrayList",
      "List<T>",
      "Dictionary<TKey, TValue>",
      "Queue<T>"
    ]
  },
  {
    "q": "Which of the following creates a generic list of integers?",
    "o": [
      "List<int> numbers = new List<int>();",
      "ArrayList numbers = new ArrayList<int>();",
      "List numbers = new List<int>();",
      "var numbers = new List();"
    ]
  },
  {
    "q": "What is the output of this code using LINQ?",
    "c": "var names = new List<string> { \"Tom\", \"Jerry\", \"Spike\" };\nvar result = names.First(n => n.StartsWith(\"J\"));\nConsole.WriteLine(result);",
    "o": [
      "Jerry",
      "Tom",
      "Spike",
      "J"
    ]
  },
  {
    "q": "Which method is used to check if a key exists in a Dictionary?",
    "o": [
      "ContainsKey()",
      "HasKey()",
      "KeyExists()",
      "FindKey()"
    ]
  },
  {
    "q": "What does the 'yield return' statement do in an iterator block?",
    "o": [
      "Returns a value and pauses execution",
      "Returns all values at once",
      "Terminates the method",
      "Skips to the next loop"
    ]
  },
  {
    "q": "What will this code output?",
    "c": "IEnumerable<int> GetEvens()\n{\n    for (int i = 0; i < 5; i++)\n        if (i % 2 == 0)\n            yield return i;\n}\n\nConsole.WriteLine(string.Join(\",\", GetEvens()));",
    "o": [
      "0,2,4",
      "1,3,5",
      "2,4",
      "0,1,2,3,4"
    ]
  },
  {
    "q": "Which method is used to transform each element in a LINQ query?",
    "o": [
      "Select()",
      "Where()",
      "ToList()",
      "Count()"
    ]
  },
  {
    "q": "Which collection automatically resizes and provides type safety for a specific type?",
    "o": [
      "List<T>",
      "ArrayList",
      "Array",
      "Stack"
    ]
  },
  {
    "q": "How do you add a key-value pair to a Dictionary?",
    "o": [
      "dict.Add(\"key\", \"value\");",
      "dict.Push(\"key\", \"value\");",
      "dict.Insert(\"key\", \"value\");",
      "dict.Put(\"key\", \"value\");"
    ]
  },
  {
    "q": "Which of the following queries selects all even numbers using LINQ?",
    "c": "var numbers = new List<int> { 1, 2, 3, 4, 5, 6 };\nvar evens = numbers._____;",
    "o": [
      "Where(n => n % 2 == 0)",
      "Select(n => n % 2 == 0)",
      "Filter(n => n % 2 == 0)",
      "FindAll(n => n % 2 == 0)"
    ]
  },
  {
    "q": "Which collection in C# is type-safe and resizable?",
    "o": [
      "List<T>",
      "ArrayList",
      "Hashtable",
      "Queue"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "var list = new List<string> { \"apple\", \"banana\", \"cherry\" };\nConsole.WriteLine(list[1]);",
    "o": [
      "banana",
      "apple",
      "cherry",
      "1"
    ]
  },
  {
    "q": "Which namespace must be included to use LINQ methods like Select and Where?",
    "o": [
      "System.Linq",
      "System.Collections.Generic",
      "System.Data",
      "System.Linq.Expressions"
    ]
  },
  {
    "q": "How do you define a Dictionary that maps string to int in C#?",
    "o": [
      "Dictionary<string, int> dict = new Dictionary<string, int>();",
      "Dictionary<int, string> dict = new Dictionary<>();",
      "var dict = new Dictionary(int, string);",
      "Dictionary<string> dict = new Dictionary<int>();"
    ]
  },
  {
    "q": "Which of the following collections is NOT generic?",
    "o": [
      "ArrayList",
      "List<int>",
      "Dictionary<string, int>",
      "Queue<double>"
    ]
  },
  {
    "q": "What is the purpose of the 'yield return' statement?",
    "o": [
      "To return each value one at a time in an iterator block",
      "To return multiple values at once",
      "To break out of a loop",
      "To exit a method and return a list"
    ]
  },
  {
    "q": "What is the result of this LINQ query?",
    "c": "var nums = new List<int> { 1, 2, 3, 4 };\nvar result = nums.Where(x => x > 2).ToList();\nConsole.WriteLine(result.Count);",
    "o": [
      "2",
      "1",
      "3",
      "4"
    ]
  },
  {
    "q": "Which LINQ method is used to sort elements in ascending order?",
    "o": [
      "OrderBy()",
      "Sort()",
      "Arrange()",
      "Ascending()"
    ]
  },
  {
    "q": "Which statement adds a value to a List in C#?",
    "o": [
      "list.Add(\"value\");",
      "list.Insert(\"value\");",
      "list.Push(\"value\");",
      "list.Append(\"value\");"
    ]
  },
  {
    "q": "What will be the output of this code?",
    "c": "IEnumerable<int> GetNumbers()\n{\n    yield return 5;\n    yield return 10;\n}\n\nforeach (var n in GetNumbers())\n{\n    Console.Write(n + \" \");\n}",
    "o": [
      "5 10 ",
      "10 5 ",
      "5",
      "10"
    ]
  },
  {
    "q": "What is the main difference between ArrayList and List<T> in C#?",
    "o": [
      "List<T> is type-safe, ArrayList is not",
      "ArrayList is faster than List<T>",
      "List<T> allows duplicate types, ArrayList does not",
      "ArrayList is generic, List<T> is not"
    ]
  },
  {
    "q": "What does the following LINQ expression return?",
    "c": "var data = new List<int> { 1, 2, 3, 4 };\nvar query = data.Select(x => x * 2);\nConsole.WriteLine(query.First());",
    "o": [
      "2",
      "1",
      "4",
      "8"
    ]
  },
  {
    "q": "Which method would you use to check if a key exists in a Dictionary?",
    "o": [
      "ContainsKey",
      "Exists",
      "HasKey",
      "Includes"
    ]
  },
  {
    "q": "What is required to iterate using 'yield return'?",
    "o": [
      "Method must return IEnumerable or IEnumerator",
      "The method must be async",
      "The method must return void",
      "The method must use ref parameters"
    ]
  },
  {
    "q": "Which method removes all elements from a List<T>?",
    "o": [
      "Clear()",
      "RemoveAll()",
      "DeleteAll()",
      "Purge()"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "var dict = new Dictionary<string, int>();\ndict[\"a\"] = 100;\ndict[\"b\"] = 200;\nConsole.WriteLine(dict[\"b\"]);",
    "o": [
      "200",
      "100",
      "0",
      "Exception"
    ]
  },
  {
    "q": "Which of the following allows deferred execution in C#?",
    "o": [
      "LINQ queries using IEnumerable",
      "LINQ queries using ToList()",
      "ForEach loop",
      "Array.Copy"
    ]
  },
  {
    "q": "What is the type of elements in an ArrayList?",
    "o": [
      "object",
      "int",
      "string",
      "T"
    ]
  },
  {
    "q": "Which of the following initializes a List of integers with values?",
    "o": [
      "var list = new List<int> { 10, 20, 30 };",
      "List<int> list = new List();",
      "List<T> list = { 10, 20 };",
      "List list = new List<int>(10, 20);"
    ]
  },
  {
    "q": "Which LINQ method returns a single element matching a condition or throws an error?",
    "o": [
      "Single()",
      "FirstOrDefault()",
      "Where()",
      "FindAll()"
    ]
  },
  {
    "q": "Which of the following collections does NOT provide type safety?",
    "o": [
      "ArrayList",
      "List<T>",
      "Dictionary<TKey, TValue>",
      "Queue<T>"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "List<string> fruits = new List<string> { \"Apple\", \"Banana\", \"Cherry\" };\nConsole.WriteLine(fruits[1]);",
    "o": [
      "Banana",
      "Apple",
      "Cherry",
      "IndexOutOfRangeException"
    ]
  },
  {
    "q": "What does the 'yield return' statement do in C#?",
    "o": [
      "It returns an element and pauses the method state for the next iteration",
      "It returns all elements of a collection at once",
      "It exits the loop immediately",
      "It converts IEnumerable to List"
    ]
  },
  {
    "q": "Which of the following is true about Dictionary<TKey, TValue>?",
    "o": [
      "Each key must be unique",
      "Each value must be unique",
      "Keys can be null",
      "It preserves insertion order"
    ]
  },
  {
    "q": "Which LINQ method returns all elements greater than 50 from a list?",
    "c": "List<int> numbers = new List<int> { 10, 60, 90, 30 };\nvar result = numbers._________;",
    "o": [
      "Where(n => n > 50)",
      "Select(n => n > 50)",
      "Find(n => n > 50)",
      "TakeWhile(n => n > 50)"
    ]
  },
  {
    "q": "Which method would you use to add a new item to a List<T>?",
    "o": [
      "Add()",
      "Insert()",
      "Push()",
      "Append()"
    ]
  },
  {
    "q": "What does this code return?",
    "c": "List<int> data = new List<int> { 1, 2, 3, 4 };\nvar even = data.Where(x => x % 2 == 0).ToList();\nConsole.WriteLine(even.Count);",
    "o": [
      "2",
      "1",
      "3",
      "4"
    ]
  },
  {
    "q": "Which namespace is required for using List<T>?",
    "o": [
      "System.Collections.Generic",
      "System.Linq",
      "System.Collections",
      "System.Text"
    ]
  },
  {
    "q": "Which LINQ method projects each element of a sequence into a new form?",
    "o": [
      "Select",
      "Where",
      "First",
      "OrderBy"
    ]
  },
  {
    "q": "What is the result of accessing a non-existent key in Dictionary without TryGetValue?",
    "o": [
      "It throws a KeyNotFoundException",
      "It returns null",
      "It returns 0",
      "It adds the key with a default value"
    ]
  },
  {
    "q": "Which of the following generic collections provides fast key-based lookup?",
    "o": [
      "Dictionary<TKey, TValue>",
      "List<T>",
      "ArrayList",
      "Queue<T>"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "ArrayList list = new ArrayList();\nlist.Add(1);\nlist.Add(\"hello\");\nConsole.WriteLine(list[1]);",
    "o": [
      "hello",
      "1",
      "System.Object",
      "Error"
    ]
  },
  {
    "q": "Which collection type allows storing only elements of a specific type, ensuring compile-time safety?",
    "o": [
      "List<T>",
      "ArrayList",
      "Hashtable",
      "Stack"
    ]
  },
  {
    "q": "Which of the following LINQ methods would you use to sort a list in ascending order?",
    "o": [
      "OrderBy",
      "Where",
      "Select",
      "GroupBy"
    ]
  },
  {
    "q": "What is the purpose of 'yield return' in C#?",
    "o": [
      "To return each value one at a time in an iterator block",
      "To return all values at once",
      "To break out of a loop",
      "To call another method"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "Dictionary<string, int> ages = new Dictionary<string, int>();\nages[\"Alice\"] = 25;\nConsole.WriteLine(ages.ContainsKey(\"Bob\"));",
    "o": [
      "False",
      "True",
      "25",
      "NullReferenceException"
    ]
  },
  {
    "q": "Which collection would you use to maintain insertion order and allow duplicates?",
    "o": [
      "List<T>",
      "Dictionary<TKey, TValue>",
      "HashSet<T>",
      "SortedDictionary<TKey, TValue>"
    ]
  },
  {
    "q": "Which interface must a method return type implement to use 'yield return'?",
    "o": [
      "IEnumerable",
      "IList",
      "IDisposable",
      "IEnumerator<T>"
    ]
  },
  {
    "q": "What is the benefit of using generic collections over non-generic collections?",
    "o": [
      "Type safety and better performance",
      "Ability to store any data type",
      "Smaller memory size",
      "They are automatically sorted"
    ]
  },
  {
    "q": "What is the output of the following LINQ query?",
    "c": "List<int> nums = new List<int> { 3, 6, 9 };\nvar query = nums.Select(n => n * 2);\nConsole.WriteLine(query.First());",
    "o": [
      "6",
      "3",
      "12",
      "9"
    ]
  },
  {
    "q": "Which collection is not type-safe and allows storing mixed types in C#?",
    "o": [
      "ArrayList",
      "List<int>",
      "Dictionary<string, int>",
      "Queue<string>"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "List<string> fruits = new List<string> { \"Apple\", \"Banana\", \"Cherry\" };\nConsole.WriteLine(fruits[1]);",
    "o": [
      "Banana",
      "Apple",
      "Cherry",
      "1"
    ]
  },
  {
    "q": "Which collection in C# stores items in key-value pairs and requires a unique key?",
    "o": [
      "Dictionary<TKey, TValue>",
      "List<T>",
      "ArrayList",
      "Queue<T>"
    ]
  },
  {
    "q": "Which of the following LINQ expressions retrieves all even numbers from a list?",
    "c": "List<int> nums = new List<int> { 1, 2, 3, 4, 5, 6 };\nvar evens = nums.Where(n => n % 2 == 0);",
    "o": [
      "nums.Where(n => n % 2 == 0)",
      "nums.Select(n => n % 2 == 0)",
      "nums.OrderBy(n => n % 2)",
      "nums.GroupBy(n => n % 2)"
    ]
  },
  {
    "q": "What is the purpose of the yield keyword in C#?",
    "o": [
      "To return values one at a time from an iterator method",
      "To exit a method early",
      "To define a lambda expression",
      "To stop the foreach loop"
    ]
  },
  {
    "q": "Which method is used in LINQ to count elements in a collection that meet a condition?",
    "o": [
      "Count()",
      "Sum()",
      "Select()",
      "First()"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "List<int> numbers = new List<int> { 1, 2, 3 };\nConsole.WriteLine(numbers.Contains(2));",
    "o": [
      "True",
      "False",
      "2",
      "1"
    ]
  },
  {
    "q": "Which statement best describes a benefit of generic collections over non-generic ones?",
    "o": [
      "They provide compile-time type checking",
      "They allow storing objects of multiple types",
      "They use more memory",
      "They are slower"
    ]
  },
  {
    "q": "What will the following LINQ query return?",
    "c": "List<string> names = new List<string> { \"Ana\", \"Ben\", \"Carl\" };\nvar result = names.First();",
    "o": [
      "Ana",
      "Ben",
      "Carl",
      "null"
    ]
  },
  {
    "q": "Which interface must be implemented to use a custom iterator with yield return?",
    "o": [
      "IEnumerable",
      "IDictionary",
      "ICollection",
      "IList"
    ]
  },
  {
    "q": "Which of the following allows storing key-value pairs with type safety in C#?",
    "o": [
      "Dictionary<string, int>",
      "ArrayList",
      "List<string>",
      "Tuple<string, int>"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "var list = new List<int> { 10, 20, 30 };\nConsole.WriteLine(list.IndexOf(20));",
    "o": [
      "1",
      "0",
      "2",
      "-1"
    ]
  },
  {
    "q": "Which collection should you use when you want to preserve insertion order and allow duplicates?",
    "o": [
      "List<T>",
      "Dictionary<TKey, TValue>",
      "HashSet<T>",
      "Stack<T>"
    ]
  },
  {
    "q": "What does the following LINQ query do?",
    "c": "var names = new List<string> { \"Tom\", \"Jerry\", \"Spike\" };\nvar result = names.Select(n => n.ToUpper());",
    "o": [
      "Converts each name to uppercase",
      "Sorts the names",
      "Filters out null names",
      "Removes duplicates"
    ]
  },
  {
    "q": "What is the key advantage of using `List<T>` over `ArrayList`?",
    "o": [
      "List<T> is type-safe and avoids boxing/unboxing",
      "List<T> consumes less memory",
      "List<T> can store different data types",
      "List<T> does not require generics"
    ]
  },
  {
    "q": "What does the `yield return` statement do in an iterator method?",
    "o": [
      "Returns the next element without exiting the method",
      "Stops the method execution permanently",
      "Returns all elements at once",
      "Returns a new thread"
    ]
  },
  {
    "q": "Which collection would be best for storing a list of names where you need fast look-up by a unique ID?",
    "o": [
      "Dictionary<int, string>",
      "List<string>",
      "ArrayList",
      "Queue<string>"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "Dictionary<string, int> stock = new Dictionary<string, int>();\nstock[\"apple\"] = 5;\nConsole.WriteLine(stock[\"apple\"]);",
    "o": [
      "5",
      "0",
      "null",
      "Error"
    ]
  },
  {
    "q": "Which LINQ method is used to get the first matching element from a collection?",
    "o": [
      "First()",
      "Select()",
      "Where()",
      "All()"
    ]
  },
  {
    "q": "In which scenario would you most likely use `yield return`?",
    "o": [
      "When implementing a custom iterator over a sequence",
      "When returning multiple values from a method",
      "When filtering a collection",
      "When serializing data"
    ]
  },
  {
    "q": "Which C# collection is not type-safe and can store any data type?",
    "o": [
      "ArrayList",
      "List<string>",
      "Dictionary<int, string>",
      "List<object>"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "List<string> items = new List<string>();\nitems.Add(\"pen\");\nitems.Add(\"pencil\");\nConsole.WriteLine(items.Count);",
    "o": [
      "2",
      "1",
      "0",
      "Compilation error"
    ]
  },
  {
    "q": "Which generic collection is used when you need fast retrieval by a key?",
    "o": [
      "Dictionary<TKey, TValue>",
      "List<T>",
      "ArrayList",
      "Queue<T>"
    ]
  },
  {
    "q": "Which LINQ method filters elements based on a condition?",
    "o": [
      "Where()",
      "Select()",
      "OrderBy()",
      "Aggregate()"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "var nums = new List<int> { 1, 2, 3, 4, 5 };\nvar even = nums.Where(n => n % 2 == 0);\nConsole.WriteLine(string.Join(\",\", even));",
    "o": [
      "2,4",
      "1,3,5",
      "1,2,3,4,5",
      "0"
    ]
  },
  {
    "q": "What is the benefit of using `List<T>` over a regular array?",
    "o": [
      "It provides dynamic resizing",
      "It consumes less memory",
      "It guarantees sorted order",
      "It only works with primitive types"
    ]
  },
  {
    "q": "What is the purpose of `yield return` in C#?",
    "o": [
      "To enable lazy evaluation of a collection",
      "To return multiple values at once",
      "To pause a thread",
      "To create anonymous methods"
    ]
  },
  {
    "q": "Which of the following statements correctly adds a new key-value pair to a Dictionary?",
    "c": "Dictionary<string, int> scores = new Dictionary<string, int>();",
    "o": [
      "scores[\"math\"] = 90;",
      "scores.Add(90, \"math\");",
      "scores = [\"math\"] + 90;",
      "scores(90) = \"math\";"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "ArrayList list = new ArrayList();\nlist.Add(1);\nlist.Add(\"two\");\nConsole.WriteLine(list[1]);",
    "o": [
      "two",
      "1",
      "Error",
      "0"
    ]
  },
  {
    "q": "Which LINQ method projects each element into a new form?",
    "o": [
      "Select()",
      "Where()",
      "First()",
      "Count()"
    ]
  },
  {
    "q": "Which collection should you use if you want to preserve insertion order and avoid duplicates?",
    "o": [
      "List<T>",
      "ArrayList",
      "Dictionary<TKey, TValue>",
      "SortedList"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "var list = new List<int> { 1, 2, 3 };\nlist.Insert(1, 99);\nConsole.WriteLine(list[1]);",
    "o": [
      "99",
      "1",
      "2",
      "3"
    ]
  },
  {
    "q": "Which method is used to check if a key exists in a Dictionary?",
    "o": [
      "ContainsKey",
      "Exists",
      "HasKey",
      "FindKey"
    ]
  },
  {
    "q": "What will the following LINQ query return?\n\n`var query = list.Where(x => x > 5).ToList();`",
    "o": [
      "All elements in 'list' greater than 5",
      "All elements equal to 5",
      "All elements less than or equal to 5",
      "Nothing, it throws an error"
    ]
  },
  {
    "q": "What is the benefit of using generic collections like List<T> over ArrayList?",
    "o": [
      "Type safety and better performance",
      "They are older and more compatible",
      "They support dynamic types",
      "They allow implicit casting"
    ]
  },
  {
    "q": "What does the `yield return` keyword enable in C#?",
    "o": [
      "Deferred execution of an iterator",
      "Returning multiple values at once",
      "Faster program compilation",
      "Multithreading with enumerators"
    ]
  },
  {
    "q": "Which of the following collections supports key-value pairs and is generic?",
    "o": [
      "Dictionary<TKey, TValue>",
      "ArrayList",
      "List<T>",
      "Queue"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "var numbers = new List<int> { 3, 6, 9 };\nvar query = numbers.Select(n => n * 2);\nConsole.WriteLine(string.Join(\",\", query));",
    "o": [
      "6,12,18",
      "3,6,9",
      "2,4,6",
      "1,2,3"
    ]
  },
  {
    "q": "Which LINQ method returns the first matching element or default value if none is found?",
    "o": [
      "FirstOrDefault()",
      "Single()",
      "Find()",
      "Where()"
    ]
  },
  {
    "q": "Which of the following allows lazy iteration of a custom collection?",
    "o": [
      "Implementing IEnumerable with yield return",
      "Using a static array",
      "Extending List<T>",
      "Using foreach over Dictionary"
    ]
  },
  {
    "q": "Which collection would you choose for fast lookup of items by a unique key?",
    "o": [
      "Dictionary<TKey, TValue>",
      "List<T>",
      "ArrayList",
      "Queue"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "ArrayList items = new ArrayList();\nitems.Add(10);\nitems.Add(\"text\");\nConsole.WriteLine(items[1]);",
    "o": [
      "text",
      "10",
      "System.Object",
      "Compilation Error"
    ]
  },
  {
    "q": "Which method is used in LINQ to project each element of a sequence into a new form?",
    "o": [
      "Select()",
      "Where()",
      "ToList()",
      "OrderBy()"
    ]
  },
  {
    "q": "Which of the following is a benefit of using `yield return` in a method?",
    "o": [
      "Enables lazy evaluation of a sequence",
      "Immediately executes the entire sequence",
      "Returns an array",
      "Improves compile time"
    ]
  },
  {
    "q": "What is the correct way to define a generic List of strings?",
    "o": [
      "List<string> names = new List<string>();",
      "List names = new List<string>();",
      "ArrayList<string> names = new ArrayList<string>();",
      "List<string> names = new List();"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "var numbers = new List<int> { 1, 2, 3, 4 };\nvar even = numbers.Where(n => n % 2 == 0);\nConsole.WriteLine(even.Count());",
    "o": [
      "2",
      "1",
      "3",
      "0"
    ]
  },
  {
    "q": "Which of the following supports non-generic, dynamically typed storage?",
    "o": [
      "ArrayList",
      "List<T>",
      "Dictionary<TKey, TValue>",
      "Queue<T>"
    ]
  },
  {
    "q": "What does the `First()` method in LINQ return?",
    "o": [
      "The first element of the sequence",
      "The last element of the sequence",
      "All matching elements",
      "The index of the first match"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "Dictionary<int, string> dict = new Dictionary<int, string>();\ndict[1] = \"One\";\ndict[2] = \"Two\";\nConsole.WriteLine(dict[2]);",
    "o": [
      "Two",
      "One",
      "1",
      "Error"
    ]
  },
  {
    "q": "Which keyword is necessary to create an iterator block in C#?",
    "o": [
      "yield",
      "return",
      "delegate",
      "async"
    ]
  },
  {
    "q": "Which collection in C# maintains insertion order and allows access by index?",
    "o": [
      "List<T>",
      "Dictionary<TKey, TValue>",
      "HashSet<T>",
      "Stack<T>"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "var list = new List<int> { 5, 10, 15 };\nvar result = list.Find(x => x > 7);\nConsole.WriteLine(result);",
    "o": [
      "10",
      "5",
      "15",
      "0"
    ]
  },
  {
    "q": "Which of the following collections is not type-safe?",
    "o": [
      "ArrayList",
      "List<T>",
      "Dictionary<TKey, TValue>",
      "Queue<T>"
    ]
  },
  {
    "q": "What does the `OrderByDescending` method in LINQ do?",
    "o": [
      "Sorts the sequence in descending order",
      "Filters out null values",
      "Groups items by key",
      "Projects new values"
    ]
  },
  {
    "q": "What will the following code print?",
    "c": "var dict = new Dictionary<string, int>();\ndict[\"apple\"] = 3;\ndict[\"banana\"] = 5;\nConsole.WriteLine(dict.ContainsKey(\"apple\"));",
    "o": [
      "True",
      "False",
      "3",
      "Error"
    ]
  },
  {
    "q": "Which LINQ method is used to combine two sequences into one?",
    "o": [
      "Concat()",
      "SelectMany()",
      "Join()",
      "GroupBy()"
    ]
  },
  {
    "q": "Which statement best describes `yield return` in an iterator block?",
    "o": [
      "It returns an element without finishing the method execution",
      "It exits the method completely",
      "It throws an exception",
      "It returns all elements at once"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "IEnumerable<int> GetNumbers()\n{\n    yield return 1;\n    yield return 2;\n    yield return 3;\n}\n\nforeach (var num in GetNumbers())\n    Console.Write(num);",
    "o": [
      "123",
      "321",
      "1 2 3",
      "Error"
    ]
  },
  {
    "q": "Which of the following is a generic collection in C#?",
    "o": [
      "Dictionary<string, int>",
      "ArrayList",
      "Hashtable",
      "SortedList"
    ]
  },
  {
    "q": "Which LINQ method is used to return a specific number of elements from the start of a sequence?",
    "o": [
      "Take()",
      "Skip()",
      "First()",
      "ToList()"
    ]
  },
  {
    "q": "Which of the following allows storing elements of any type but lacks type safety?",
    "o": [
      "ArrayList",
      "List<T>",
      "Dictionary<TKey, TValue>",
      "Queue<T>"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "List<string> names = new List<string> { \"Alice\", \"Bob\", \"Charlie\" };\nvar count = names.Count;\nConsole.WriteLine(count);",
    "o": [
      "3",
      "2",
      "1",
      "0"
    ]
  },
  {
    "q": "Which generic collection is best for storing key-value pairs?",
    "o": [
      "Dictionary<TKey, TValue>",
      "List<T>",
      "Queue<T>",
      "ArrayList"
    ]
  },
  {
    "q": "What is the purpose of `yield return` in C#?",
    "o": [
      "To return values one at a time from an iterator",
      "To exit a method permanently",
      "To immediately execute a LINQ query",
      "To pause a thread"
    ]
  },
  {
    "q": "What does the following code print?",
    "c": "List<int> nums = new List<int> { 1, 2, 3, 4 };\nvar result = nums.Where(x => x % 2 == 0).Sum();\nConsole.WriteLine(result);",
    "o": [
      "6",
      "4",
      "2",
      "10"
    ]
  },
  {
    "q": "Which method is used to add a key-value pair to a Dictionary?",
    "o": [
      "Add()",
      "Push()",
      "Append()",
      "Insert()"
    ]
  },
  {
    "q": "Which LINQ method filters a collection based on a condition?",
    "o": [
      "Where()",
      "Select()",
      "OrderBy()",
      "GroupBy()"
    ]
  },
  {
    "q": "What does the following code output?",
    "c": "Dictionary<string, int> scores = new Dictionary<string, int>();\nscores[\"Math\"] = 90;\nscores[\"Science\"] = 85;\nConsole.WriteLine(scores[\"Science\"]);",
    "o": [
      "85",
      "90",
      "0",
      "Error"
    ]
  },
  {
    "q": "Which collection would you use for a first-in, first-out data structure?",
    "o": [
      "Queue<T>",
      "Stack<T>",
      "List<T>",
      "ArrayList"
    ]
  },
  {
    "q": "Which of the following uses deferred execution in LINQ?",
    "o": [
      "IEnumerable<T>",
      "ToList()",
      "Count()",
      "Sum()"
    ]
  },
  {
    "q": "Which of the following is true about List<T> in C#?",
    "o": [
      "List<T> provides type safety at compile time.",
      "List<T> cannot store null values.",
      "List<T> is part of System.Collections namespace.",
      "List<T> can only store reference types."
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "var list = new List<int> { 2, 4, 6, 8 };\nConsole.WriteLine(list.Contains(4));",
    "o": [
      "True",
      "False",
      "4",
      "0"
    ]
  },
  {
    "q": "Why is Dictionary<TKey, TValue> preferred over Hashtable?",
    "o": [
      "It is type-safe and avoids boxing/unboxing.",
      "It consumes more memory.",
      "It allows duplicate keys.",
      "It sorts keys automatically."
    ]
  },
  {
    "q": "What will this LINQ query return?",
    "c": "var nums = new List<int> { 3, 5, 7, 9 };\nvar query = nums.FirstOrDefault(n => n > 5);\nConsole.WriteLine(query);",
    "o": [
      "7",
      "3",
      "9",
      "0"
    ]
  },
  {
    "q": "Which interface must a class implement to support 'yield return'?",
    "o": [
      "IEnumerable",
      "IDisposable",
      "ICollection",
      "IComparable"
    ]
  },
  {
    "q": "Which of the following can dynamically grow and shrink and is type-safe?",
    "o": [
      "List<T>",
      "ArrayList",
      "Array",
      "HashTable"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "var dict = new Dictionary<string, int> {\n  {\"one\", 1}, {\"two\", 2} };\nConsole.WriteLine(dict.ContainsKey(\"three\"));",
    "o": [
      "False",
      "True",
      "three",
      "Error"
    ]
  },
  {
    "q": "Which of the following C# keywords is used to return each element one at a time from a method?",
    "o": [
      "yield return",
      "return",
      "foreach",
      "select"
    ]
  },
  {
    "q": "Which LINQ method projects each element of a sequence into a new form?",
    "o": [
      "Select()",
      "Where()",
      "Aggregate()",
      "Skip()"
    ]
  },
  {
    "q": "What happens if you try to add a duplicate key in Dictionary<TKey, TValue>?",
    "o": [
      "An ArgumentException is thrown",
      "It updates the existing key",
      "It silently ignores the duplicate",
      "It adds both entries"
    ]
  },
  {
    "q": "What is a primary disadvantage of using ArrayList over List<T> in C#?",
    "o": [
      "ArrayList does not provide compile-time type safety.",
      "ArrayList consumes less memory.",
      "ArrayList sorts elements by default.",
      "ArrayList only stores primitive types."
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "var list = new List<string> { \"apple\", \"banana\", \"cherry\" };\nConsole.WriteLine(list[1]);",
    "o": [
      "banana",
      "apple",
      "cherry",
      "1"
    ]
  },
  {
    "q": "What does the 'yield return' keyword do in an iterator method?",
    "o": [
      "It pauses the method execution and returns a value to the caller.",
      "It returns all remaining items at once.",
      "It converts a collection to a query.",
      "It clears the current iterator state."
    ]
  },
  {
    "q": "Which of the following LINQ methods filters a collection based on a condition?",
    "o": [
      "Where()",
      "Select()",
      "First()",
      "Join()"
    ]
  },
  {
    "q": "What will be the output of the following code?",
    "c": "var data = new Dictionary<string, int>();\ndata[\"x\"] = 100;\nConsole.WriteLine(data[\"x\"]);",
    "o": [
      "100",
      "x",
      "0",
      "Error"
    ]
  },
  {
    "q": "Which generic collection allows fast lookup by key?",
    "o": [
      "Dictionary<TKey, TValue>",
      "List<T>",
      "ArrayList",
      "Queue<T>"
    ]
  },
  {
    "q": "Which of the following is a benefit of using List<T> over ArrayList?",
    "o": [
      "Type safety without casting",
      "Better performance on value types",
      "It has built-in sorting",
      "It uses less memory"
    ]
  },
  {
    "q": "What will the following LINQ query return?",
    "c": "var numbers = new List<int> { 1, 3, 5, 7 };\nvar result = numbers.Where(n => n > 3);\nConsole.WriteLine(result.Count());",
    "o": [
      "2",
      "1",
      "3",
      "4"
    ]
  },
  {
    "q": "Which interface must be implemented to create a custom iterator using yield?",
    "o": [
      "IEnumerable",
      "IList",
      "IComparable",
      "IDictionary"
    ]
  },
  {
    "q": "Which method would you use to find the first element in a list that matches a condition using LINQ?",
    "o": [
      "FirstOrDefault()",
      "OrderBy()",
      "Any()",
      "GroupBy()"
    ]
  },
  {
    "q": "Which of the following best describes the difference between List<T> and ArrayList in C#?",
    "o": [
      "List<T> is type-safe, while ArrayList stores elements as objects.",
      "List<T> uses more memory than ArrayList.",
      "ArrayList is generic, while List<T> is not.",
      "List<T> is slower than ArrayList in all cases."
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "var items = new ArrayList();\nitems.Add(1);\nitems.Add(\"text\");\nConsole.WriteLine(items[1]);",
    "o": [
      "text",
      "1",
      "System.Object",
      "Error"
    ]
  },
  {
    "q": "Which of these generic collections preserves key-value pairs?",
    "o": [
      "Dictionary<TKey, TValue>",
      "List<T>",
      "Queue<T>",
      "Stack<T>"
    ]
  },
  {
    "q": "What does the following code print?",
    "c": "var numbers = new List<int> { 2, 4, 6, 8 };\nvar even = numbers.Where(n => n % 2 == 0);\nConsole.WriteLine(even.Sum());",
    "o": [
      "20",
      "8",
      "0",
      "Error"
    ]
  },
  {
    "q": "Why is yield return useful in iterator methods?",
    "o": [
      "It allows lazy evaluation and avoids creating intermediate collections.",
      "It ensures thread safety.",
      "It sorts the elements before returning.",
      "It converts the collection to a Dictionary."
    ]
  },
  {
    "q": "What is the output of the following LINQ query?",
    "c": "var list = new List<string> { \"A\", \"B\", \"C\" };\nvar result = list.Select(x => x.ToLower());\nConsole.WriteLine(string.Join(\"\", result));",
    "o": [
      "abc",
      "ABC",
      "a b c",
      "Error"
    ]
  },
  {
    "q": "What is the purpose of Dictionary<TKey, TValue> in C#?",
    "o": [
      "To store values indexed by keys with fast lookup.",
      "To store values in sorted order automatically.",
      "To store only strings.",
      "To queue tasks for execution."
    ]
  },
  {
    "q": "Which of these LINQ methods transforms each element in a collection?",
    "o": [
      "Select()",
      "Where()",
      "Aggregate()",
      "GroupBy()"
    ]
  },
  {
    "q": "Which is a correct use of yield return?",
    "c": "public static IEnumerable<int> GetNumbers()\n{\n    yield return 1;\n    yield return 2;\n}",
    "o": [
      "Correct syntax for yielding integers.",
      "Invalid, 'yield' is not used with return.",
      "Should use 'return yield' instead.",
      "Only works with strings."
    ]
  },
  {
    "q": "What is required to iterate over a collection using foreach?",
    "o": [
      "The collection must implement IEnumerable or IEnumerable<T>.",
      "The collection must be an array.",
      "The collection must implement IComparable.",
      "The collection must be sorted."
    ]
  },
  {
    "q": "Which statement correctly adds a key-value pair to a Dictionary in C#?",
    "o": [
      "myDict.Add(\"id\", 123);",
      "myDict.insert(\"id\", 123);",
      "myDict.push(\"id\", 123);",
      "myDict.set(\"id\", 123);"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "List<string> names = new List<string> {\"Alice\", \"Bob\", \"Charlie\"};\nConsole.WriteLine(names[1]);",
    "o": [
      "Bob",
      "Alice",
      "Charlie",
      "Error"
    ]
  },
  {
    "q": "Which interface must a class implement to use yield return?",
    "o": [
      "IEnumerable",
      "IDisposable",
      "IComparer",
      "IFormattable"
    ]
  },
  {
    "q": "Which LINQ method filters elements based on a condition?",
    "o": [
      "Where",
      "Select",
      "OrderBy",
      "Aggregate"
    ]
  },
  {
    "q": "What happens if you try to access a non-existent key in a Dictionary using the indexer?",
    "o": [
      "A KeyNotFoundException is thrown.",
      "It returns null.",
      "It adds the key with a default value.",
      "The program exits silently."
    ]
  },
  {
    "q": "What is the purpose of the 'yield return' statement?",
    "o": [
      "To return elements one at a time from an iterator method.",
      "To return all elements as a list.",
      "To exit a method immediately.",
      "To pause a thread during execution."
    ]
  },
  {
    "q": "Which is true about List<T> in C#?",
    "o": [
      "It is a strongly-typed, resizable collection.",
      "It only holds object types.",
      "It is immutable.",
      "It cannot be used with foreach loops."
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "var list = new List<int> { 3, 6, 9 };\nvar result = list.FirstOrDefault(x => x > 5);\nConsole.WriteLine(result);",
    "o": [
      "6",
      "3",
      "9",
      "0"
    ]
  },
  {
    "q": "Which generic collection would you use for fast lookups with unique keys?",
    "o": [
      "Dictionary<TKey, TValue>",
      "List<T>",
      "Queue<T>",
      "Stack<T>"
    ]
  },
  {
    "q": "How does yield benefit performance in large data operations?",
    "o": [
      "It defers execution and uses less memory.",
      "It compiles code faster.",
      "It preloads all items for faster access.",
      "It runs code on multiple threads automatically."
    ]
  },
  {
    "q": "Which namespace must be included to use List<T> and Dictionary<TKey, TValue>?",
    "o": [
      "System.Collections.Generic",
      "System.Text",
      "System.IO",
      "System.Linq.Expressions"
    ]
  },
  {
    "q": "What does the following code output?",
    "c": "ArrayList list = new ArrayList();\nlist.Add(1);\nlist.Add(\"two\");\nConsole.WriteLine(list.Count);",
    "o": [
      "2",
      "1",
      "0",
      "Runtime Error"
    ]
  },
  {
    "q": "Why is List<T> preferred over ArrayList in modern C#?",
    "o": [
      "List<T> is type-safe and avoids boxing/unboxing.",
      "List<T> can store multiple data types.",
      "ArrayList performs better in all cases.",
      "List<T> doesn't require using System.Collections.Generic."
    ]
  },
  {
    "q": "What is the result of executing the following?",
    "c": "var data = new List<int> { 2, 4, 6 };\nvar even = data.Where(x => x % 2 == 0).ToList();\nConsole.WriteLine(even.Count);",
    "o": [
      "3",
      "2",
      "0",
      "1"
    ]
  },
  {
    "q": "What does the 'yield return' keyword do in C#?",
    "o": [
      "Returns an item and pauses execution until the next iteration.",
      "Returns all items in a collection immediately.",
      "Terminates the method execution completely.",
      "Stores the returned value in a database."
    ]
  },
  {
    "q": "Which collection is most suitable for retrieving a value using a key?",
    "o": [
      "Dictionary<TKey, TValue>",
      "List<T>",
      "ArrayList",
      "Queue<T>"
    ]
  },
  {
    "q": "What does this code print?",
    "c": "Dictionary<string, int> scores = new Dictionary<string, int>();\nscores[\"Alice\"] = 90;\nscores[\"Bob\"] = 85;\nConsole.WriteLine(scores[\"Bob\"]);",
    "o": [
      "85",
      "90",
      "Alice",
      "Bob"
    ]
  },
  {
    "q": "Which of the following supports deferred execution in LINQ?",
    "o": [
      "IEnumerable",
      "ArrayList",
      "List<T>",
      "Dictionary<T,K>"
    ]
  },
  {
    "q": "Which LINQ method transforms each item of a collection?",
    "o": [
      "Select",
      "Where",
      "OrderBy",
      "Aggregate"
    ]
  },
  {
    "q": "What happens if you enumerate a method that uses 'yield return'?",
    "o": [
      "It lazily evaluates and yields values one at a time.",
      "All values are stored in memory before returning.",
      "It causes a compile-time error.",
      "It blocks the thread until all values are returned."
    ]
  },
  {
    "q": "What type of elements can you store in a List<string> collection?",
    "o": [
      "Only string values",
      "Any data type",
      "Only numeric values",
      "Only objects"
    ]
  },
  {
    "q": "What will the following code output?",
    "c": "List<int> numbers = new List<int>() { 10, 20, 30 };\nConsole.WriteLine(numbers[1]);",
    "o": [
      "20",
      "10",
      "30",
      "1"
    ]
  },
  {
    "q": "Which of these is a key benefit of using Dictionary<TKey, TValue>?",
    "o": [
      "It allows fast lookup using keys.",
      "It maintains insertion order.",
      "It only stores string values.",
      "It is slower than List<T> for lookups."
    ]
  },
  {
    "q": "What does this LINQ query return?",
    "c": "var words = new List<string> { \"cat\", \"dog\", \"elephant\" };\nvar result = words.Where(w => w.Length > 3);\nConsole.WriteLine(result.Count());",
    "o": [
      "1",
      "2",
      "3",
      "0"
    ]
  },
  {
    "q": "Which collection type would be best for storing unique keys with associated values?",
    "o": [
      "Dictionary<TKey, TValue>",
      "List<T>",
      "ArrayList",
      "Queue<T>"
    ]
  },
  {
    "q": "What is the primary reason for using 'yield return' in an iterator block?",
    "o": [
      "To return values one at a time without creating an entire collection in memory",
      "To execute code in parallel",
      "To sort data before returning",
      "To pause the thread permanently"
    ]
  },
  {
    "q": "What is the result of the following code?",
    "c": "ArrayList list = new ArrayList();\nlist.Add(100);\nlist.Add(\"hello\");\nConsole.WriteLine(list[0]);",
    "o": [
      "100",
      "hello",
      "0",
      "Exception"
    ]
  },
  {
    "q": "Which LINQ method returns a single result from a collection, such as a sum or average?",
    "o": [
      "Aggregate",
      "Select",
      "Where",
      "ToList"
    ]
  },
  {
    "q": "How can you safely check if a key exists in a Dictionary before accessing it?",
    "o": [
      "Use the ContainsKey method",
      "Use the Find method",
      "Use an indexer directly",
      "Use the Where clause"
    ]
  },
  {
    "q": "Which interface must a method return to use 'yield return'?",
    "o": [
      "IEnumerable or IEnumerator",
      "IList or IList<T>",
      "IDictionary",
      "IQueryable"
    ]
  },
  {
    "q": "Which collection should you use if you want to store key-value pairs where keys are unique and lookups are fast?",
    "o": [
      "Dictionary<TKey, TValue>",
      "List<T>",
      "ArrayList",
      "Stack<T>"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "List<string> fruits = new List<string>() { \"apple\", \"banana\", \"cherry\" };\nConsole.WriteLine(fruits.Contains(\"banana\"));",
    "o": [
      "True",
      "False",
      "banana",
      "Exception"
    ]
  },
  {
    "q": "Why might using a generic List<T> be preferred over an ArrayList in C#?",
    "o": [
      "List<T> is type-safe and avoids boxing/unboxing.",
      "ArrayList is faster than List<T>.",
      "ArrayList supports LINQ directly.",
      "List<T> can only store primitive types."
    ]
  },
  {
    "q": "What does this LINQ statement do?\n\nvar even = numbers.Where(n => n % 2 == 0);",
    "o": [
      "Filters only even numbers from the 'numbers' collection",
      "Sorts the numbers in ascending order",
      "Converts numbers to strings",
      "Removes duplicates from numbers"
    ]
  },
  {
    "q": "Which of the following is a valid way to declare a Dictionary in C#?",
    "o": [
      "Dictionary<string, int> ages = new Dictionary<string, int>();",
      "Dictionary ages = new Dictionary();",
      "var ages = new Dictionary<string>();",
      "List<string, int> ages = new List<string, int>();"
    ]
  },
  {
    "q": "What will be printed by this code?",
    "c": "Dictionary<string, int> stock = new Dictionary<string, int>();\nstock[\"apple\"] = 10;\nConsole.WriteLine(stock[\"apple\"]);",
    "o": [
      "10",
      "apple",
      "0",
      "Exception"
    ]
  },
  {
    "q": "When using 'yield return', what happens each time the iterator is called?",
    "o": [
      "Execution resumes from where it left off",
      "Execution starts from the beginning of the method",
      "A full list is returned at once",
      "It returns null"
    ]
  },
  {
    "q": "Which LINQ method would you use to sort a collection in ascending order?",
    "o": [
      "OrderBy",
      "Select",
      "Where",
      "Aggregate"
    ]
  },
  {
    "q": "Which collection allows storing items of different types but lacks type safety?",
    "o": [
      "ArrayList",
      "List<T>",
      "Dictionary<TKey, TValue>",
      "Queue<T>"
    ]
  },
  {
    "q": "What is the role of IEnumerable<T> in C# collections?",
    "o": [
      "It enables iteration over a collection using foreach.",
      "It provides thread-safety for collections.",
      "It sorts the collection in memory.",
      "It stores only reference types."
    ]
  },
  {
    "q": "What is the main disadvantage of using ArrayList over List<T> in C#?",
    "o": [
      "ArrayList does not provide type safety.",
      "ArrayList is faster than List<T>.",
      "ArrayList cannot store objects.",
      "ArrayList only supports string values."
    ]
  },
  {
    "q": "What does this code output?",
    "c": "List<int> numbers = new List<int> { 1, 2, 3, 4 };\nvar doubled = numbers.Select(n => n * 2);\nConsole.WriteLine(doubled.First());",
    "o": [
      "2",
      "1",
      "4",
      "8"
    ]
  },
  {
    "q": "Which of the following collections does NOT require specifying a type parameter?",
    "o": [
      "ArrayList",
      "List<T>",
      "Dictionary<TKey, TValue>",
      "Queue<T>"
    ]
  },
  {
    "q": "What is the purpose of the 'yield return' statement in C#?",
    "o": [
      "It allows deferred execution and state preservation in iteration.",
      "It returns all values at once.",
      "It stops the method execution completely.",
      "It restarts the method from the beginning."
    ]
  },
  {
    "q": "What will this code print?",
    "c": "Dictionary<string, string> capitals = new Dictionary<string, string>();\ncapitals.Add(\"France\", \"Paris\");\nConsole.WriteLine(capitals.ContainsKey(\"France\"));",
    "o": [
      "True",
      "False",
      "Paris",
      "France"
    ]
  },
  {
    "q": "What LINQ method should be used to get the number of elements in a collection?",
    "o": [
      "Count()",
      "Select()",
      "Sum()",
      "First()"
    ]
  },
  {
    "q": "Which of the following best describes a benefit of using Dictionary<TKey, TValue>?",
    "o": [
      "It provides fast lookup using a key.",
      "It maintains order of insertion.",
      "It supports duplicate keys.",
      "It only stores values."
    ]
  },
  {
    "q": "Which of the following iterates over a collection using 'yield return'?",
    "c": "public static IEnumerable<int> GetEvens()\n{\n    for (int i = 0; i < 5; i++)\n    {\n        if (i % 2 == 0)\n            yield return i;\n    }\n}",
    "o": [
      "0 2 4",
      "1 3",
      "2 4 6",
      "0 1 2 3 4"
    ]
  },
  {
    "q": "What happens when you add an item to a List<T> that has reached its current capacity?",
    "o": [
      "The internal array is resized automatically.",
      "An exception is thrown.",
      "The item is ignored.",
      "The list must be cleared first."
    ]
  },
  {
    "q": "Which LINQ method returns the first element that satisfies a condition?",
    "o": [
      "First()",
      "Where()",
      "ToList()",
      "Count()"
    ]
  },
  {
    "q": "What is the output of this C# code?",
    "c": "var list = new List<string> {\"apple\", \"banana\", \"cherry\"};\nConsole.WriteLine(list[1]);",
    "o": [
      "banana",
      "apple",
      "cherry",
      "IndexOutOfRangeException"
    ]
  },
  {
    "q": "Which method is commonly used to filter a collection in LINQ?",
    "o": [
      "Where()",
      "Select()",
      "OrderBy()",
      "FirstOrDefault()"
    ]
  },
  {
    "q": "Why should you prefer List<T> over ArrayList in modern C# applications?",
    "o": [
      "List<T> is type-safe and avoids boxing/unboxing.",
      "List<T> is slower but more readable.",
      "ArrayList is faster with value types.",
      "ArrayList allows generic constraints."
    ]
  },
  {
    "q": "What is the result of executing this code?",
    "c": "Dictionary<int, string> dict = new Dictionary<int, string>();\ndict[1] = \"A\";\ndict[2] = \"B\";\ndict[1] = \"C\";\nConsole.WriteLine(dict[1]);",
    "o": [
      "C",
      "A",
      "B",
      "1"
    ]
  },
  {
    "q": "Which of the following statements about 'yield return' is TRUE?",
    "o": [
      "It enables the creation of custom iterators in a memory-efficient way.",
      "It immediately terminates iteration.",
      "It is used only inside async methods.",
      "It can only be used in static methods."
    ]
  },
  {
    "q": "Which LINQ operator projects each element of a sequence into a new form?",
    "o": [
      "Select()",
      "Where()",
      "Aggregate()",
      "GroupBy()"
    ]
  },
  {
    "q": "What does this iterator method return when enumerated?",
    "c": "public static IEnumerable<int> CountDown(int start) {\n    while (start > 0) {\n        yield return start--;\n    }\n}",
    "o": [
      "5 4 3 2 1",
      "1 2 3 4 5",
      "0 1 2 3 4 5",
      "Infinite loop"
    ]
  },
  {
    "q": "Which collection automatically resizes when elements are added beyond its capacity?",
    "o": [
      "List<T>",
      "Array",
      "Dictionary<TKey, TValue>",
      "Queue"
    ]
  },
  {
    "q": "What will be printed by this code?",
    "c": "List<int> nums = new List<int> { 1, 2, 3 };\nnums.Insert(1, 10);\nConsole.WriteLine(nums[1]);",
    "o": [
      "10",
      "1",
      "2",
      "3"
    ]
  },
  {
    "q": "Which of the following supports key-value pair storage with fast lookup?",
    "o": [
      "Dictionary<TKey, TValue>",
      "List<T>",
      "ArrayList",
      "Queue<T>"
    ]
  },
  {
    "q": "What will the following C# code output?",
    "c": "ArrayList arr = new ArrayList();\narr.Add(100);\narr.Add(\"hello\");\nConsole.WriteLine(arr[1]);",
    "o": [
      "hello",
      "100",
      "ArrayList",
      "TypeError"
    ]
  },
  {
    "q": "Which of the following allows storage of strongly typed key-value pairs?",
    "o": [
      "Dictionary<int, string>",
      "ArrayList",
      "List<int>",
      "Queue"
    ]
  },
  {
    "q": "What does the following code output?",
    "c": "List<int> numbers = new List<int> { 2, 4, 6 };\nnumbers.Remove(4);\nConsole.WriteLine(numbers.Count);",
    "o": [
      "2",
      "3",
      "4",
      "0"
    ]
  },
  {
    "q": "What is a primary disadvantage of using ArrayList in modern C# development?",
    "o": [
      "It is not type-safe and requires casting.",
      "It has slower performance than Dictionary.",
      "It does not support iteration.",
      "It cannot be resized."
    ]
  },
  {
    "q": "What will this code output?",
    "c": "var dict = new Dictionary<string, int> {\n    {\"one\", 1},\n    {\"two\", 2}\n};\nConsole.WriteLine(dict.ContainsKey(\"three\"));",
    "o": [
      "False",
      "True",
      "three",
      "0"
    ]
  },
  {
    "q": "Which keyword is used in C# to return elements one at a time from a method?",
    "o": [
      "yield",
      "return",
      "break",
      "async"
    ]
  },
  {
    "q": "Which LINQ method transforms a collection to another form?",
    "o": [
      "Select()",
      "Where()",
      "Count()",
      "Take()"
    ]
  },
  {
    "q": "What will this C# method return when enumerated?",
    "c": "public IEnumerable<string> GreetNames() {\n    yield return \"Alice\";\n    yield return \"Bob\";\n}",
    "o": [
      "Alice, Bob",
      "Bob, Alice",
      "Error",
      "Only Alice"
    ]
  },
  {
    "q": "Which collection would you use if you want to store values with unique string-based keys and quickly retrieve them?",
    "o": [
      "Dictionary<string, T>",
      "List<T>",
      "ArrayList",
      "Stack<T>"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "List<string> fruits = new List<string> { \"Apple\", \"Banana\", \"Cherry\" };\nvar result = fruits.Where(f => f.StartsWith(\"B\"));\nConsole.WriteLine(result.First());",
    "o": [
      "Banana",
      "Apple",
      "Cherry",
      "B"
    ]
  }
]