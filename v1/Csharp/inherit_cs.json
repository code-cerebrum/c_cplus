[
  {
    "q": "Which of the following best describes single inheritance in C#?",
    "o": [
      "A class inherits from one base class only.",
      "A class inherits from multiple base classes.",
      "Multiple classes inherit from a single base class in a chain.",
      "A class inherits and implements from multiple interfaces only."
    ]
  },
  {
    "q": "What will be the output of the following code?",
    "c": "class Animal {\n    public virtual void Speak() {\n        Console.WriteLine(\"Animal speaks\");\n    }\n}\n\nclass Dog : Animal {\n    public override void Speak() {\n        Console.WriteLine(\"Dog barks\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        Animal a = new Dog();\n        a.Speak();\n    }\n}",
    "o": [
      "Dog barks",
      "Animal speaks",
      "Compilation error",
      "Runtime error"
    ]
  },
  {
    "q": "Which of the following keywords is used to prevent a class from being inherited?",
    "o": [
      "sealed",
      "static",
      "abstract",
      "override"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "abstract class Shape {\n    public abstract void Draw();\n}\n\nclass Circle : Shape {\n    public override void Draw() {\n        Console.WriteLine(\"Drawing Circle\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        Shape s = new Circle();\n        s.Draw();\n    }\n}",
    "o": [
      "Drawing Circle",
      "Drawing Shape",
      "Circle",
      "Compilation error"
    ]
  },
  {
    "q": "Which statement is true about abstract classes in C#?",
    "o": [
      "They can contain both abstract and non-abstract methods.",
      "They cannot have any constructors.",
      "They can be instantiated directly.",
      "They cannot inherit from other classes."
    ]
  },
  {
    "q": "Which of the following is a correct way to implement an interface in C#?",
    "c": "interface IAnimal {\n    void Speak();\n}\n\nclass Dog : IAnimal {\n    public void Speak() {\n        Console.WriteLine(\"Woof\");\n    }\n}",
    "o": [
      "Correct implementation of an interface",
      "Incorrect, interface methods should be static",
      "Incorrect, interface should be inherited with ':'",
      "Incorrect, method name mismatch"
    ]
  },
  {
    "q": "What is the purpose of the 'virtual' keyword in a base class method?",
    "o": [
      "To allow derived classes to override the method",
      "To seal the method from overriding",
      "To define an interface method",
      "To make the method static"
    ]
  },
  {
    "q": "What will the following program print?",
    "c": "class A {\n    public void Display() {\n        Console.WriteLine(\"Class A\");\n    }\n}\n\nclass B : A {\n    public new void Display() {\n        Console.WriteLine(\"Class B\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        A obj = new B();\n        obj.Display();\n    }\n}",
    "o": [
      "Class A",
      "Class B",
      "Compilation Error",
      "Runtime Error"
    ]
  },
  {
    "q": "Which of the following is **not** true about sealed methods in C#?",
    "o": [
      "They can be overridden in derived classes.",
      "They prevent further overriding in subclasses.",
      "They must be used with the override keyword.",
      "They can only exist in derived classes."
    ]
  },
  {
    "q": "Which of the following best describes multilevel inheritance in C#?",
    "o": [
      "A class is derived from a derived class, forming a chain.",
      "Multiple base classes are inherited by a single class.",
      "A class implements multiple interfaces.",
      "A base class is inherited by multiple unrelated classes."
    ]
  },
  {
    "q": "Which concept allows a derived class to modify the behavior of a base class method?",
    "o": [
      "Method Overriding",
      "Method Hiding",
      "Constructor Overloading",
      "Interface Implementation"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "class Vehicle {\n    public virtual void Start() {\n        Console.WriteLine(\"Vehicle starts\");\n    }\n}\n\nclass Car : Vehicle {\n    public override void Start() {\n        Console.WriteLine(\"Car starts\");\n    }\n}\n\nclass SportsCar : Car {\n}\n\nclass Program {\n    static void Main() {\n        Vehicle v = new SportsCar();\n        v.Start();\n    }\n}",
    "o": [
      "Car starts",
      "Vehicle starts",
      "SportsCar starts",
      "Compilation error"
    ]
  },
  {
    "q": "Which of the following is TRUE about an abstract method in C#?",
    "o": [
      "It must be overridden in a non-abstract derived class.",
      "It can contain implementation logic.",
      "It can be sealed.",
      "It can be declared in an interface."
    ]
  },
  {
    "q": "What will the following code output?",
    "c": "abstract class Animal {\n    public abstract void MakeSound();\n}\n\nclass Cat : Animal {\n    public override void MakeSound() {\n        Console.WriteLine(\"Meow\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        Animal a = new Cat();\n        a.MakeSound();\n    }\n}",
    "o": [
      "Meow",
      "Cat",
      "Animal",
      "Compilation error"
    ]
  },
  {
    "q": "Which of the following best explains an interface in C#?",
    "o": [
      "A contract that defines method signatures without implementation.",
      "A class with only static methods.",
      "A class that canâ€™t be inherited.",
      "A class that must contain at least one abstract method."
    ]
  },
  {
    "q": "What happens if a method in a base class is marked sealed?",
    "o": [
      "It cannot be overridden in any derived class.",
      "It must be abstract.",
      "It becomes an interface method.",
      "It can only be used in static classes."
    ]
  },
  {
    "q": "What will this program print?",
    "c": "class Parent {\n    public virtual void Show() {\n        Console.WriteLine(\"Parent\");\n    }\n}\n\nclass Child : Parent {\n    public sealed override void Show() {\n        Console.WriteLine(\"Child\");\n    }\n}\n\nclass GrandChild : Child {\n    // public override void Show() { Console.WriteLine(\"GrandChild\"); } // Uncommenting this causes an error\n}\n\nclass Program {\n    static void Main() {\n        Parent obj = new Child();\n        obj.Show();\n    }\n}",
    "o": [
      "Child",
      "Parent",
      "GrandChild",
      "Compilation error"
    ]
  },
  {
    "q": "Which of the following is NOT a characteristic of interfaces in C#?",
    "o": [
      "They can contain fields.",
      "They can be implemented by multiple classes.",
      "They support multiple inheritance.",
      "They define method signatures only."
    ]
  },
  {
    "q": "What will be the output of this program using multilevel inheritance?",
    "c": "class A {\n    public virtual void Print() {\n        Console.WriteLine(\"A\");\n    }\n}\n\nclass B : A {\n    public override void Print() {\n        Console.WriteLine(\"B\");\n    }\n}\n\nclass C : B {\n    public override void Print() {\n        Console.WriteLine(\"C\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        A obj = new C();\n        obj.Print();\n    }\n}",
    "o": [
      "C",
      "A",
      "B",
      "Compilation error"
    ]
  },
  {
    "q": "In C#, why would you use the 'sealed' keyword with a class?",
    "o": [
      "To prevent the class from being inherited.",
      "To allow partial inheritance.",
      "To allow only one child class.",
      "To make the class abstract."
    ]
  },
  {
    "q": "Which keyword is used in C# to prevent further overriding of a method in derived classes?",
    "o": [
      "sealed",
      "final",
      "const",
      "override"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "class A {\n    public virtual void Show() {\n        Console.WriteLine(\"A\");\n    }\n}\n\nclass B : A {\n    public override void Show() {\n        Console.WriteLine(\"B\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        A obj = new B();\n        obj.Show();\n    }\n}",
    "o": [
      "B",
      "A",
      "Compilation error",
      "No output"
    ]
  },
  {
    "q": "Which of the following statements about interfaces in C# is correct?",
    "o": [
      "A class can implement multiple interfaces.",
      "A class can inherit multiple classes and interfaces.",
      "Interfaces can contain constructors.",
      "Interfaces must contain at least one abstract method."
    ]
  },
  {
    "q": "What is the purpose of using an abstract class instead of an interface in C#?",
    "o": [
      "To provide default behavior that can be shared across derived classes.",
      "To enforce multiple inheritance.",
      "To create static members only.",
      "To avoid implementation in base classes."
    ]
  },
  {
    "q": "What will be printed by this code snippet?",
    "c": "abstract class Animal {\n    public abstract void Speak();\n    public void Eat() {\n        Console.WriteLine(\"Eating...\");\n    }\n}\n\nclass Dog : Animal {\n    public override void Speak() {\n        Console.WriteLine(\"Bark\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        Dog d = new Dog();\n        d.Speak();\n        d.Eat();\n    }\n}",
    "o": [
      "Bark\nEating...",
      "Eating...\nBark",
      "Bark",
      "Eating..."
    ]
  },
  {
    "q": "Which of these keywords is used to define a method that can be overridden in a derived class?",
    "o": [
      "virtual",
      "sealed",
      "static",
      "override"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "class A {\n    public void Display() {\n        Console.WriteLine(\"A\");\n    }\n}\n\nclass B : A {\n    public new void Display() {\n        Console.WriteLine(\"B\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        A obj = new B();\n        obj.Display();\n    }\n}",
    "o": [
      "A",
      "B",
      "Compilation error",
      "Runtime error"
    ]
  },
  {
    "q": "What will the following code produce as output?",
    "c": "interface IShape {\n    void Draw();\n}\n\nclass Circle : IShape {\n    public void Draw() {\n        Console.WriteLine(\"Drawing Circle\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        IShape shape = new Circle();\n        shape.Draw();\n    }\n}",
    "o": [
      "Drawing Circle",
      "Circle",
      "Drawing Shape",
      "Compilation error"
    ]
  },
  {
    "q": "Which of the following best describes multilevel inheritance in C#?",
    "o": [
      "A class inherits from a class which itself is derived from another class.",
      "A class inherits from multiple base classes.",
      "Multiple classes inherit from one interface.",
      "Multiple interfaces inherit from one class."
    ]
  },
  {
    "q": "What is the result of this sealed method usage?",
    "c": "class A {\n    public virtual void Print() {\n        Console.WriteLine(\"A\");\n    }\n}\n\nclass B : A {\n    public sealed override void Print() {\n        Console.WriteLine(\"B\");\n    }\n}\n\nclass C : B {\n    // public override void Print() => Console.WriteLine(\"C\"); // Illegal\n}\n\nclass Program {\n    static void Main() {\n        A a = new B();\n        a.Print();\n    }\n}",
    "o": [
      "B",
      "A",
      "C",
      "Compilation error"
    ]
  },
  {
    "q": "In C#, what will happen if a class inherits from another class and no constructor is explicitly defined in the derived class?",
    "o": [
      "The base class constructor is called automatically.",
      "Compilation fails due to missing constructor.",
      "The object cannot be created.",
      "The derived class constructor is called with null values."
    ]
  },
  {
    "q": "What is the output of this C# code?",
    "c": "class Animal {\n    public virtual void Sound() {\n        Console.WriteLine(\"Animal Sound\");\n    }\n}\n\nclass Dog : Animal {\n    public override void Sound() {\n        Console.WriteLine(\"Bark\");\n    }\n}\n\nclass Puppy : Dog {\n}\n\nclass Program {\n    static void Main() {\n        Puppy p = new Puppy();\n        p.Sound();\n    }\n}",
    "o": [
      "Bark",
      "Animal Sound",
      "Puppy Sound",
      "Compilation error"
    ]
  },
  {
    "q": "Which statement is true about an abstract class in C#?",
    "o": [
      "An abstract class can contain both abstract and non-abstract members.",
      "An abstract class cannot contain any implementation.",
      "An abstract class must implement all interface methods.",
      "An abstract class can be instantiated directly."
    ]
  },
  {
    "q": "What is the purpose of marking a class as `sealed` in C#?",
    "o": [
      "To prevent it from being inherited.",
      "To make it abstract.",
      "To enforce overriding only.",
      "To allow partial implementation."
    ]
  },
  {
    "q": "What is the output of this C# code?",
    "c": "abstract class Shape {\n    public abstract int Area();\n}\n\nclass Square : Shape {\n    int side = 5;\n    public override int Area() {\n        return side * side;\n    }\n}\n\nclass Program {\n    static void Main() {\n        Shape s = new Square();\n        Console.WriteLine(s.Area());\n    }\n}",
    "o": [
      "25",
      "5",
      "0",
      "Compilation error"
    ]
  },
  {
    "q": "Which of these is allowed in C# interfaces?",
    "o": [
      "Methods without implementation (prior to C# 8.0).",
      "Private fields.",
      "Static constructors.",
      "Destructors."
    ]
  },
  {
    "q": "Which of the following scenarios demonstrates multilevel inheritance?",
    "o": [
      "Class A is inherited by B, and B is inherited by C.",
      "Class A implements two interfaces.",
      "Class A and B both inherit from class C.",
      "Class A and B inherit from interface I."
    ]
  },
  {
    "q": "Which modifier is used to allow a method to be overridden in a derived class?",
    "o": [
      "virtual",
      "override",
      "sealed",
      "static"
    ]
  },
  {
    "q": "What is the output of this C# code?",
    "c": "interface IMovable {\n    void Move();\n}\n\nclass Vehicle : IMovable {\n    public void Move() {\n        Console.WriteLine(\"Vehicle is moving\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        IMovable v = new Vehicle();\n        v.Move();\n    }\n}",
    "o": [
      "Vehicle is moving",
      "Moving...",
      "Interface method called",
      "Compilation error"
    ]
  },
  {
    "q": "What will happen if you try to override a sealed method in C#?",
    "o": [
      "A compile-time error occurs.",
      "It overrides normally.",
      "It throws a runtime exception.",
      "It is ignored silently."
    ]
  },
  {
    "q": "In C#, what is the term for when a derived class inherits from a class that itself inherits from another class?",
    "o": [
      "Multilevel Inheritance",
      "Multiple Inheritance",
      "Hierarchical Inheritance",
      "Hybrid Inheritance"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "class A {\n    public virtual void Show() {\n        Console.WriteLine(\"Class A\");\n    }\n}\n\nclass B : A {\n    public override void Show() {\n        Console.WriteLine(\"Class B\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        A obj = new B();\n        obj.Show();\n    }\n}",
    "o": [
      "Class B",
      "Class A",
      "Class AB",
      "Compilation Error"
    ]
  },
  {
    "q": "Which keyword is used in C# to prevent a class from being inherited?",
    "o": [
      "sealed",
      "static",
      "abstract",
      "override"
    ]
  },
  {
    "q": "What will happen if you try to instantiate an abstract class in C#?",
    "o": [
      "You will get a compile-time error.",
      "The abstract class is converted into a normal class automatically.",
      "The object is created successfully.",
      "It throws a runtime exception."
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "abstract class Animal {\n    public abstract void Speak();\n}\n\nclass Cat : Animal {\n    public override void Speak() {\n        Console.WriteLine(\"Meow\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        Animal a = new Cat();\n        a.Speak();\n    }\n}",
    "o": [
      "Meow",
      "Animal",
      "Cat",
      "Compilation Error"
    ]
  },
  {
    "q": "Which statement is true about method overriding in C#?",
    "o": [
      "The base method must be marked as virtual, abstract, or override.",
      "You can override any method regardless of modifiers.",
      "Private methods can be overridden.",
      "The override method must be static."
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "interface IShape {\n    void Draw();\n}\n\nclass Circle : IShape {\n    public void Draw() {\n        Console.WriteLine(\"Drawing Circle\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        IShape shape = new Circle();\n        shape.Draw();\n    }\n}",
    "o": [
      "Drawing Circle",
      "Draw",
      "Shape Interface",
      "Compilation Error"
    ]
  },
  {
    "q": "Which of the following is true about a sealed method in C#?",
    "o": [
      "It cannot be overridden in any derived class.",
      "It can be hidden using the 'new' keyword.",
      "It must be abstract.",
      "It can only exist inside an interface."
    ]
  },
  {
    "q": "What is the correct way to define a class that implements two interfaces in C#?",
    "o": [
      "class MyClass : IFirst, ISecond",
      "class MyClass implements IFirst, ISecond",
      "class MyClass inherits IFirst, ISecond",
      "class MyClass :: IFirst, ISecond"
    ]
  },
  {
    "q": "What is the output of this C# code?",
    "c": "class Base {\n    public virtual void Display() {\n        Console.WriteLine(\"Base Display\");\n    }\n}\n\nclass Derived : Base {\n    public sealed override void Display() {\n        Console.WriteLine(\"Derived Display\");\n    }\n}\n\nclass MoreDerived : Derived {\n    // public override void Display() { Console.WriteLine(\"MoreDerived Display\"); }\n}\n\nclass Program {\n    static void Main() {\n        Derived d = new Derived();\n        d.Display();\n    }\n}",
    "o": [
      "Derived Display",
      "Base Display",
      "MoreDerived Display",
      "Compilation Error"
    ]
  },
  {
    "q": "Which type of inheritance involves a class deriving from another derived class?",
    "o": [
      "Multilevel Inheritance",
      "Single Inheritance",
      "Multiple Inheritance",
      "Hybrid Inheritance"
    ]
  },
  {
    "q": "What is the output of this C# program?",
    "c": "class A {\n    public void Print() {\n        Console.WriteLine(\"A\");\n    }\n}\n\nclass B : A {\n}\n\nclass Program {\n    static void Main() {\n        B b = new B();\n        b.Print();\n    }\n}",
    "o": [
      "A",
      "B",
      "Print",
      "Compilation Error"
    ]
  },
  {
    "q": "Which keyword is used to indicate that a method can be overridden in C#?",
    "o": [
      "virtual",
      "override",
      "sealed",
      "base"
    ]
  },
  {
    "q": "Which of these correctly defines a class that cannot be inherited?",
    "o": [
      "sealed class MyClass {}",
      "class MyClass : sealed {}",
      "abstract sealed class MyClass {}",
      "static class MyClass : sealed {}"
    ]
  },
  {
    "q": "What is the output of the following program?",
    "c": "abstract class Vehicle {\n    public abstract void Move();\n}\n\nclass Bike : Vehicle {\n    public override void Move() {\n        Console.WriteLine(\"Bike is moving\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        Vehicle v = new Bike();\n        v.Move();\n    }\n}",
    "o": [
      "Bike is moving",
      "Vehicle is moving",
      "Move",
      "Compilation Error"
    ]
  },
  {
    "q": "Which keyword is used to implement an interface in C#?",
    "o": [
      ":",
      "implements",
      "interface",
      "inherits"
    ]
  },
  {
    "q": "What happens if you attempt to override a non-virtual method in a derived class?",
    "o": [
      "A compile-time error occurs",
      "It is overridden anyway",
      "It is hidden automatically",
      "It causes a runtime exception"
    ]
  },
  {
    "q": "What will be the output of this program?",
    "c": "class Parent {\n    public virtual void Show() {\n        Console.WriteLine(\"Parent\");\n    }\n}\n\nclass Child : Parent {\n    public override void Show() {\n        Console.WriteLine(\"Child\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        Parent obj = new Child();\n        obj.Show();\n    }\n}",
    "o": [
      "Child",
      "Parent",
      "Show",
      "Compilation Error"
    ]
  },
  {
    "q": "Which of the following is true about abstract classes in C#?",
    "o": [
      "They cannot be instantiated directly.",
      "They must contain at least one abstract method.",
      "They can implement interfaces implicitly.",
      "They can only contain static methods."
    ]
  },
  {
    "q": "Which modifier prevents a method from being overridden further in derived classes?",
    "o": [
      "sealed",
      "readonly",
      "static",
      "abstract"
    ]
  },
  {
    "q": "Which concept allows a derived class to modify the behavior of a base class method using the 'override' keyword?",
    "o": [
      "Method Overriding",
      "Method Hiding",
      "Constructor Overloading",
      "Interface Implementation"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "class Base {\n    public virtual void Display() {\n        Console.WriteLine(\"Base\");\n    }\n}\n\nclass Derived : Base {\n    public new void Display() {\n        Console.WriteLine(\"Derived\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        Base obj = new Derived();\n        obj.Display();\n    }\n}",
    "o": [
      "Base",
      "Derived",
      "Compilation Error",
      "Runtime Error"
    ]
  },
  {
    "q": "In C#, which type of class must be inherited and cannot be instantiated directly?",
    "o": [
      "Abstract Class",
      "Static Class",
      "Sealed Class",
      "Concrete Class"
    ]
  },
  {
    "q": "What is the purpose of a sealed method in C#?",
    "o": [
      "To prevent the method from being overridden in further derived classes",
      "To allow method overriding in all derived classes",
      "To create a virtual method",
      "To make a method abstract"
    ]
  },
  {
    "q": "Which of the following best describes the use of interfaces in C#?",
    "o": [
      "They define a contract that implementing classes must fulfill.",
      "They provide default implementation for all methods.",
      "They can have private constructors.",
      "They can be instantiated using the 'new' keyword."
    ]
  },
  {
    "q": "What will be the output of the following code?",
    "c": "interface IAnimal {\n    void Speak();\n}\n\nclass Dog : IAnimal {\n    public void Speak() {\n        Console.WriteLine(\"Woof\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        IAnimal animal = new Dog();\n        animal.Speak();\n    }\n}",
    "o": [
      "Woof",
      "Speak",
      "Dog",
      "Compilation Error"
    ]
  },
  {
    "q": "Which type of inheritance involves a derived class inheriting from a base class, which itself is derived from another class?",
    "o": [
      "Multilevel Inheritance",
      "Multiple Inheritance",
      "Hierarchical Inheritance",
      "Cyclic Inheritance"
    ]
  },
  {
    "q": "What will the following C# code output?",
    "c": "abstract class Shape {\n    public abstract void Draw();\n}\n\nclass Circle : Shape {\n    public override void Draw() {\n        Console.WriteLine(\"Drawing Circle\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        Shape s = new Circle();\n        s.Draw();\n    }\n}",
    "o": [
      "Drawing Circle",
      "Shape",
      "Circle",
      "Compilation Error"
    ]
  },
  {
    "q": "Which keyword prevents a class from being inherited?",
    "o": [
      "sealed",
      "abstract",
      "private",
      "static"
    ]
  },
  {
    "q": "Which statement is true about single inheritance in C#?",
    "o": [
      "A class can inherit from only one base class.",
      "A class can inherit from multiple base classes directly.",
      "C# does not support inheritance.",
      "Single inheritance is achieved using interfaces only."
    ]
  },
  {
    "q": "Which of the following is true about multilevel inheritance in C#?",
    "o": [
      "It allows a class to inherit from a class that already inherits from another class.",
      "It allows a class to implement multiple interfaces.",
      "It allows a class to inherit from two or more base classes directly.",
      "It prevents further inheritance."
    ]
  },
  {
    "q": "What is the output of the following C# program?",
    "c": "class A {\n    public virtual void Speak() {\n        Console.WriteLine(\"Class A\");\n    }\n}\n\nclass B : A {\n    public override void Speak() {\n        Console.WriteLine(\"Class B\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        A obj = new B();\n        obj.Speak();\n    }\n}",
    "o": [
      "Class B",
      "Class A",
      "Speak",
      "Compilation Error"
    ]
  },
  {
    "q": "Which of the following is NOT allowed in a sealed class?",
    "o": [
      "Inheritance by another class",
      "Instantiation using the new keyword",
      "Defining methods",
      "Accessing members"
    ]
  },
  {
    "q": "Which method declaration indicates that the method must be overridden in derived classes?",
    "o": [
      "public abstract void Display();",
      "public sealed void Display() {}",
      "public void Display() {}",
      "public virtual void Display() {}"
    ]
  },
  {
    "q": "What will be the output of this code snippet?",
    "c": "abstract class Animal {\n    public abstract void Sound();\n}\n\nclass Cat : Animal {\n    public override void Sound() {\n        Console.WriteLine(\"Meow\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        Animal a = new Cat();\n        a.Sound();\n    }\n}",
    "o": [
      "Meow",
      "Sound",
      "Cat",
      "Compilation Error"
    ]
  },
  {
    "q": "What keyword is used to indicate that a method cannot be overridden further?",
    "o": [
      "sealed",
      "final",
      "const",
      "protected"
    ]
  },
  {
    "q": "What is the role of the 'interface' in C#?",
    "o": [
      "To define a contract without implementation",
      "To provide default behavior to derived classes",
      "To replace abstract classes",
      "To inherit from multiple classes"
    ]
  },
  {
    "q": "What will the following program print?",
    "c": "interface ILogger {\n    void Log(string message);\n}\n\nclass FileLogger : ILogger {\n    public void Log(string message) {\n        Console.WriteLine(\"Logging to file: \" + message);\n    }\n}\n\nclass Program {\n    static void Main() {\n        ILogger logger = new FileLogger();\n        logger.Log(\"Hello\");\n    }\n}",
    "o": [
      "Logging to file: Hello",
      "Log",
      "FileLogger",
      "Compilation Error"
    ]
  },
  {
    "q": "Which of the following demonstrates single inheritance in C#?",
    "o": [
      "class B : A {}",
      "class B : A, C {}",
      "class B : IInterface {}",
      "class B : sealed {}"
    ]
  },
  {
    "q": "Which statement about overriding is true?",
    "o": [
      "The method in the base class must be marked as virtual or abstract.",
      "You can override any method by default.",
      "Use 'sealed' to enable overriding.",
      "Overriding is not allowed in C#."
    ]
  },
  {
    "q": "In C#, what is the purpose of marking a method as 'virtual'?",
    "o": [
      "It allows derived classes to override the method.",
      "It prevents the method from being overridden.",
      "It makes the method static.",
      "It hides the base class method."
    ]
  },
  {
    "q": "What will be the output of the following code?",
    "c": "class Parent {\n    public virtual void Show() {\n        Console.WriteLine(\"Parent\");\n    }\n}\n\nclass Child : Parent {\n    public new void Show() {\n        Console.WriteLine(\"Child\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        Parent p = new Child();\n        p.Show();\n    }\n}",
    "o": [
      "Parent",
      "Child",
      "Show",
      "Compilation Error"
    ]
  },
  {
    "q": "Which keyword is used to implement multiple inheritance in C#?",
    "o": [
      "interface",
      "class",
      "sealed",
      "virtual"
    ]
  },
  {
    "q": "What will happen if a non-abstract class fails to implement all methods of an interface it claims to implement?",
    "o": [
      "It will result in a compile-time error.",
      "It will throw a runtime exception.",
      "It will compile but not work correctly.",
      "It will implement methods with default values."
    ]
  },
  {
    "q": "Which of the following correctly defines a multilevel inheritance?",
    "c": "class A {}\nclass B : A {}\nclass C : B {}",
    "o": [
      "A â†’ B â†’ C",
      "C â†’ B â†’ A",
      "A â†’ C â†’ B",
      "B â†’ C â†’ A"
    ]
  },
  {
    "q": "Which of the following is true about abstract classes in C#?",
    "o": [
      "They can contain both implemented and abstract methods.",
      "They cannot have constructors.",
      "They cannot be inherited.",
      "They must be static."
    ]
  },
  {
    "q": "Which of the following prevents further inheritance of a class?",
    "o": [
      "sealed",
      "final",
      "const",
      "readonly"
    ]
  },
  {
    "q": "What will be the output of this C# code?",
    "c": "abstract class Shape {\n    public abstract double Area();\n}\n\nclass Circle : Shape {\n    public override double Area() {\n        return 3.14 * 5 * 5;\n    }\n}\n\nclass Program {\n    static void Main() {\n        Shape s = new Circle();\n        Console.WriteLine(s.Area());\n    }\n}",
    "o": [
      "78.5",
      "25",
      "3.14",
      "0"
    ]
  },
  {
    "q": "What happens when you mark an override method with 'sealed'?",
    "o": [
      "It prevents further overriding of that method.",
      "It hides the method from derived classes.",
      "It makes the method abstract.",
      "It allows the method to be static."
    ]
  },
  {
    "q": "Which of these C# declarations is valid when implementing an interface?",
    "o": [
      "class MyClass : IMyInterface {}",
      "class MyClass implements IMyInterface {}",
      "class MyClass inherit IMyInterface {}",
      "class MyClass with IMyInterface {}"
    ]
  },
  {
    "q": "Which of the following allows a class to inherit implementation from one base class and contract from multiple interfaces in C#?",
    "o": [
      "Single class inheritance with multiple interface implementation",
      "Multiple class inheritance",
      "Multilevel interface inheritance only",
      "Abstract class with another abstract class"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "class A {\n    public virtual void Greet() {\n        Console.WriteLine(\"Hello from A\");\n    }\n}\n\nclass B : A {\n    public override void Greet() {\n        Console.WriteLine(\"Hello from B\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        A obj = new B();\n        obj.Greet();\n    }\n}",
    "o": [
      "Hello from B",
      "Hello from A",
      "Compilation error",
      "Runtime error"
    ]
  },
  {
    "q": "Which of the following is NOT true about abstract classes in C#?",
    "o": [
      "They cannot be instantiated directly.",
      "They can have constructors.",
      "They can contain static methods.",
      "They must implement all interface members."
    ]
  },
  {
    "q": "What does the 'sealed' keyword do when applied to a method?",
    "o": [
      "It prevents further overriding of the method.",
      "It hides the base class version of the method.",
      "It marks the method as virtual.",
      "It makes the method static."
    ]
  },
  {
    "q": "What will be printed by this code?",
    "c": "interface IWalk {\n    void Walk();\n}\n\nabstract class Animal {\n    public abstract void Speak();\n}\n\nclass Dog : Animal, IWalk {\n    public override void Speak() {\n        Console.WriteLine(\"Bark\");\n    }\n    public void Walk() {\n        Console.WriteLine(\"Dog walking\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        Dog d = new Dog();\n        d.Speak();\n        d.Walk();\n    }\n}",
    "o": [
      "Bark\nDog walking",
      "Dog walking\nBark",
      "Animal speaking\nDog walking",
      "Compilation error"
    ]
  },
  {
    "q": "In multilevel inheritance, a class is derived from:",
    "o": [
      "A class which is itself derived from another class",
      "Two or more base classes directly",
      "An interface only",
      "A sealed class"
    ]
  },
  {
    "q": "Which of the following is true about C# interfaces?",
    "o": [
      "They can be used to implement multiple inheritance.",
      "They can contain constructors.",
      "They can be instantiated.",
      "They must be marked as abstract."
    ]
  },
  {
    "q": "What will be the result of this code?",
    "c": "class A {\n    public void Display() {\n        Console.WriteLine(\"A's Display\");\n    }\n}\n\nclass B : A {\n    public new void Display() {\n        Console.WriteLine(\"B's Display\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        A obj = new B();\n        obj.Display();\n    }\n}",
    "o": [
      "A's Display",
      "B's Display",
      "Display",
      "Runtime error"
    ]
  },
  {
    "q": "What is the correct use of 'override' in C#?",
    "o": [
      "To provide a new implementation of a virtual method in a derived class",
      "To hide a base class method",
      "To inherit multiple base classes",
      "To create a sealed class"
    ]
  },
  {
    "q": "Which of the following best describes a sealed class?",
    "o": [
      "A class that cannot be inherited",
      "A class that has only static methods",
      "A class that cannot be instantiated",
      "A class that can only implement interfaces"
    ]
  },
  {
    "q": "Which keyword allows a method in a derived class to replace a base class method in C#?",
    "o": [
      "override",
      "sealed",
      "new",
      "abstract"
    ]
  },
  {
    "q": "What is the output of this code snippet?",
    "c": "class Animal {\n    public virtual void Sound() {\n        Console.WriteLine(\"Some sound\");\n    }\n}\n\nclass Cat : Animal {\n    public override void Sound() {\n        Console.WriteLine(\"Meow\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        Animal a = new Cat();\n        a.Sound();\n    }\n}",
    "o": [
      "Meow",
      "Some sound",
      "Sound",
      "Compilation error"
    ]
  },
  {
    "q": "Which of these statements about abstract classes is true?",
    "o": [
      "An abstract class can have both abstract and non-abstract methods.",
      "An abstract class can be instantiated directly.",
      "An abstract class cannot contain fields.",
      "All methods in an abstract class must be virtual."
    ]
  },
  {
    "q": "What will be the result of this code?",
    "c": "interface IDrive {\n    void Start();\n}\n\nclass Vehicle : IDrive {\n    public void Start() {\n        Console.WriteLine(\"Vehicle started\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        IDrive car = new Vehicle();\n        car.Start();\n    }\n}",
    "o": [
      "Vehicle started",
      "Start",
      "Drive",
      "Compilation error"
    ]
  },
  {
    "q": "What does the 'new' keyword do when used with a method in a derived class?",
    "o": [
      "Hides the base class method with a new implementation.",
      "Marks the method as abstract.",
      "Prevents overriding the method.",
      "Creates a sealed version of the method."
    ]
  },
  {
    "q": "What kind of inheritance is this?\n\n`class A { }\n class B : A { }\n class C : B { }`",
    "o": [
      "Multilevel inheritance",
      "Multiple inheritance",
      "Hybrid inheritance",
      "Interface-based inheritance"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "abstract class Shape {\n    public abstract void Draw();\n}\n\nclass Circle : Shape {\n    public override void Draw() {\n        Console.WriteLine(\"Drawing Circle\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        Shape s = new Circle();\n        s.Draw();\n    }\n}",
    "o": [
      "Drawing Circle",
      "Drawing Shape",
      "Shape",
      "Compilation error"
    ]
  },
  {
    "q": "Why might a class be marked as 'sealed' in C#?",
    "o": [
      "To prevent it from being inherited",
      "To allow multiple inheritance",
      "To implement multiple interfaces",
      "To make all methods static"
    ]
  },
  {
    "q": "Which of the following allows runtime polymorphism?",
    "o": [
      "Method overriding using virtual and override",
      "Method overloading",
      "Static methods",
      "Constructors"
    ]
  },
  {
    "q": "Which combination allows multiple inheritance-like behavior in C#?",
    "o": [
      "Single class inheritance + multiple interfaces",
      "Sealed class inheritance + virtual methods",
      "Abstract class + sealed method",
      "Multiple constructors in a single class"
    ]
  },
  {
    "q": "Which keyword is used to prevent a class from being inherited in C#?",
    "o": [
      "sealed",
      "abstract",
      "virtual",
      "readonly"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "class A {\n    public virtual void Display() {\n        Console.WriteLine(\"Class A\");\n    }\n}\n\nclass B : A {\n    public new void Display() {\n        Console.WriteLine(\"Class B\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        A obj = new B();\n        obj.Display();\n    }\n}",
    "o": [
      "Class A",
      "Class B",
      "Runtime Error",
      "Compilation Error"
    ]
  },
  {
    "q": "Which statement about interfaces in C# is true?",
    "o": [
      "Interfaces can contain only method signatures and no implementations (prior to C# 8.0).",
      "Interfaces can be instantiated directly.",
      "Interfaces can have constructors.",
      "Interfaces cannot be implemented by abstract classes."
    ]
  },
  {
    "q": "What is the main purpose of the 'abstract' keyword in a class definition?",
    "o": [
      "To indicate that the class cannot be instantiated and may contain incomplete methods.",
      "To restrict method overriding.",
      "To allow multiple inheritance.",
      "To seal the class."
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "class Animal {\n    public virtual void MakeSound() {\n        Console.WriteLine(\"Animal sound\");\n    }\n}\n\nclass Dog : Animal {\n    public override void MakeSound() {\n        Console.WriteLine(\"Bark\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        Animal a = new Dog();\n        a.MakeSound();\n    }\n}",
    "o": [
      "Bark",
      "Animal sound",
      "Sound",
      "Compilation Error"
    ]
  },
  {
    "q": "Which of the following is NOT true about method overriding in C#?",
    "o": [
      "Overriding method must use 'override' keyword and base method must be 'virtual' or 'abstract'.",
      "Method signatures must match for overriding.",
      "Overriding method can change the access modifier to more restrictive.",
      "You can override a method only in a derived class."
    ]
  },
  {
    "q": "What is the output of this code snippet?",
    "c": "abstract class Appliance {\n    public abstract void Start();\n}\n\nclass Fan : Appliance {\n    public override void Start() {\n        Console.WriteLine(\"Fan Started\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        Appliance a = new Fan();\n        a.Start();\n    }\n}",
    "o": [
      "Fan Started",
      "Start",
      "Appliance",
      "Compilation error"
    ]
  },
  {
    "q": "Which combination allows polymorphism through inheritance?",
    "o": [
      "Virtual method in base class and override in derived class",
      "Static method in base and derived class",
      "Private methods in both classes",
      "Use of sealed methods"
    ]
  },
  {
    "q": "Which of the following is valid for multilevel inheritance?",
    "o": [
      "class C : B {}\nclass B : A {}",
      "class A : B, C {}",
      "class A {}\nclass B : A, C {}",
      "class A : abstract B {}"
    ]
  },
  {
    "q": "Why might you seal a method in C#?",
    "o": [
      "To prevent further overriding of the method in derived classes",
      "To allow method overloading",
      "To make the method abstract",
      "To enforce interface implementation"
    ]
  },
  {
    "q": "Which feature allows a derived class to modify the behavior of a method defined in its base class?",
    "o": [
      "Method Overriding",
      "Method Hiding",
      "Method Overloading",
      "Encapsulation"
    ]
  },
  {
    "q": "What will be the output of the following code?",
    "c": "class Base {\n    public virtual void Show() {\n        Console.WriteLine(\"Base class\");\n    }\n}\n\nclass Derived : Base {\n    public sealed override void Show() {\n        Console.WriteLine(\"Derived class\");\n    }\n}\n\nclass SubDerived : Derived {\n    // public override void Show() { } // Not allowed\n}\n\nclass Program {\n    static void Main() {\n        Base obj = new Derived();\n        obj.Show();\n    }\n}",
    "o": [
      "Derived class",
      "Base class",
      "Compilation error",
      "Runtime exception"
    ]
  },
  {
    "q": "Which of the following best defines an abstract class in C#?",
    "o": [
      "A class that cannot be instantiated and can contain abstract methods.",
      "A class with only static methods.",
      "A class that cannot be inherited.",
      "A class that implements all methods of an interface."
    ]
  },
  {
    "q": "What is the output of this code snippet?",
    "c": "interface IShape {\n    void Draw();\n}\n\nclass Circle : IShape {\n    public void Draw() {\n        Console.WriteLine(\"Drawing Circle\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        IShape shape = new Circle();\n        shape.Draw();\n    }\n}",
    "o": [
      "Drawing Circle",
      "Draw",
      "IShape",
      "Compilation Error"
    ]
  },
  {
    "q": "Which keyword is required to override a base class method in a derived class?",
    "o": [
      "override",
      "virtual",
      "new",
      "sealed"
    ]
  },
  {
    "q": "What happens if you try to inherit a sealed class in C#?",
    "o": [
      "Compilation error",
      "Runtime error",
      "It works fine",
      "Only virtual methods are inherited"
    ]
  },
  {
    "q": "Which is true about interfaces in C#?",
    "o": [
      "A class can implement multiple interfaces",
      "A class can inherit multiple interfaces and classes",
      "An interface can have fields",
      "Interfaces are instantiated directly"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "class Parent {\n    public void Show() {\n        Console.WriteLine(\"Parent\");\n    }\n}\n\nclass Child : Parent {\n    public new void Show() {\n        Console.WriteLine(\"Child\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        Parent obj = new Child();\n        obj.Show();\n    }\n}",
    "o": [
      "Parent",
      "Child",
      "Compilation error",
      "Runtime error"
    ]
  },
  {
    "q": "Which of the following is a valid reason to use multilevel inheritance?",
    "o": [
      "To create a hierarchical relationship between classes",
      "To prevent overriding of base class methods",
      "To avoid abstract class implementation",
      "To allow a class to inherit from multiple base classes"
    ]
  },
  {
    "q": "Which access modifier allows a method to be overridden in a derived class?",
    "o": [
      "protected",
      "private",
      "internal",
      "sealed"
    ]
  },
  {
    "q": "Which of the following keywords is used to prevent a class from being inherited in C#?",
    "o": [
      "sealed",
      "final",
      "static",
      "readonly"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "abstract class Animal {\n    public abstract void Speak();\n}\n\nclass Dog : Animal {\n    public override void Speak() {\n        Console.WriteLine(\"Bark\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        Animal a = new Dog();\n        a.Speak();\n    }\n}",
    "o": [
      "Bark",
      "Speak",
      "Dog",
      "Animal"
    ]
  },
  {
    "q": "Which of these statements about interfaces is correct?",
    "o": [
      "Interfaces can only contain method signatures and properties.",
      "Interfaces can contain fields.",
      "Interfaces can be instantiated.",
      "Interfaces support inheritance of classes."
    ]
  },
  {
    "q": "What is the output of this code snippet?",
    "c": "class A {\n    public virtual void Display() {\n        Console.WriteLine(\"A\");\n    }\n}\n\nclass B : A {\n    public override void Display() {\n        Console.WriteLine(\"B\");\n    }\n}\n\nclass C : B {\n    public override void Display() {\n        Console.WriteLine(\"C\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        A obj = new C();\n        obj.Display();\n    }\n}",
    "o": [
      "C",
      "B",
      "A",
      "Compilation Error"
    ]
  },
  {
    "q": "What will happen if you try to override a non-virtual method in C#?",
    "o": [
      "Compilation error",
      "Method will be overridden silently",
      "Method will be hidden",
      "Runtime exception"
    ]
  },
  {
    "q": "Which of the following is true about abstract classes in C#?",
    "o": [
      "They can contain both abstract and non-abstract methods.",
      "They cannot contain constructors.",
      "They cannot inherit from another class.",
      "They must be static."
    ]
  },
  {
    "q": "Which keyword is used to implement polymorphism using virtual and override methods?",
    "o": [
      "virtual",
      "sealed",
      "abstract",
      "new"
    ]
  },
  {
    "q": "Which of the following is an example of multilevel inheritance?",
    "c": "class A {}\nclass B : A {}\nclass C : B {}",
    "o": [
      "class C : B",
      "class B : A",
      "class A : Object",
      "class A : C"
    ]
  },
  {
    "q": "What is the correct way to stop a method from being overridden in a subclass?",
    "o": [
      "Mark it as sealed",
      "Mark it as private",
      "Mark it as abstract",
      "Mark it as static"
    ]
  },
  {
    "q": "Which of the following statements about polymorphism is correct?",
    "o": [
      "It allows methods to have different implementations in different classes.",
      "It requires sealed classes.",
      "It prevents method overriding.",
      "It can only be achieved through method overloading."
    ]
  },
  {
    "q": "Which keyword is used to allow a method to be overridden in derived classes?",
    "o": [
      "virtual",
      "override",
      "sealed",
      "abstract"
    ]
  },
  {
    "q": "What will be the output of this code?",
    "c": "class Parent {\n    public void Show() {\n        Console.WriteLine(\"Parent Show\");\n    }\n}\n\nclass Child : Parent {\n    public void Show() {\n        Console.WriteLine(\"Child Show\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        Parent p = new Child();\n        p.Show();\n    }\n}",
    "o": [
      "Parent Show",
      "Child Show",
      "Compilation Error",
      "Runtime Error"
    ]
  },
  {
    "q": "Which concept allows a base class reference to call derived class methods?",
    "o": [
      "Polymorphism",
      "Encapsulation",
      "Abstraction",
      "Overloading"
    ]
  },
  {
    "q": "What does a sealed class in C# prevent?",
    "o": [
      "It cannot be inherited",
      "It cannot contain methods",
      "It cannot override methods",
      "It cannot implement interfaces"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "abstract class Shape {\n    public abstract void Draw();\n}\n\nclass Circle : Shape {\n    public override void Draw() {\n        Console.WriteLine(\"Drawing Circle\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        Shape s = new Circle();\n        s.Draw();\n    }\n}",
    "o": [
      "Drawing Circle",
      "Circle",
      "Drawing Shape",
      "Shape"
    ]
  },
  {
    "q": "Which of the following best describes an interface in C#?",
    "o": [
      "A contract that defines method signatures without implementation",
      "A class that contains only static methods",
      "A sealed class with abstract methods",
      "A base class that cannot be inherited"
    ]
  },
  {
    "q": "In C#, which keyword is used to override a virtual method from a base class?",
    "o": [
      "override",
      "virtual",
      "new",
      "sealed"
    ]
  },
  {
    "q": "What will be the result of this code?",
    "c": "class A {\n    public virtual void Display() {\n        Console.WriteLine(\"A Display\");\n    }\n}\n\nclass B : A {\n    public override void Display() {\n        Console.WriteLine(\"B Display\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        A obj = new B();\n        obj.Display();\n    }\n}",
    "o": [
      "B Display",
      "A Display",
      "Display",
      "Runtime Error"
    ]
  },
  {
    "q": "Which of the following is NOT true about abstract classes?",
    "o": [
      "They can be instantiated directly.",
      "They can contain constructors.",
      "They can include non-abstract methods.",
      "They must be inherited."
    ]
  },
  {
    "q": "What does the 'new' keyword do when redefining a method in a derived class?",
    "o": [
      "Hides the base class method without overriding it",
      "Overrides the base class method",
      "Makes the method static",
      "Makes the class abstract"
    ]
  },
  {
    "q": "Which access modifier allows a derived class to access a member but restricts access outside the inheritance chain?",
    "o": [
      "protected",
      "private",
      "public",
      "internal"
    ]
  },
  {
    "q": "What will be the output of this code snippet?",
    "c": "class Animal {\n    public virtual void Speak() {\n        Console.WriteLine(\"Animal speaks\");\n    }\n}\n\nclass Dog : Animal {\n    public sealed override void Speak() {\n        Console.WriteLine(\"Dog barks\");\n    }\n}\n\nclass Puppy : Dog {\n    // Attempting override here will cause an error\n}\n\nclass Program {\n    static void Main() {\n        Animal a = new Dog();\n        a.Speak();\n    }\n}",
    "o": [
      "Dog barks",
      "Animal speaks",
      "Compilation Error",
      "Puppy barks"
    ]
  },
  {
    "q": "Which of the following is true about interfaces in C#?",
    "o": [
      "They cannot contain any implementation before C# 8.0.",
      "They can have constructors.",
      "They can be instantiated directly.",
      "They can have access modifiers for methods."
    ]
  },
  {
    "q": "In multilevel inheritance, a class inherits from another class which itself inherits from a base class. Which statement best describes this?",
    "o": [
      "Derived class gets all properties and behaviors of both base and intermediate classes.",
      "Only the base class's members are inherited.",
      "The intermediate class is ignored.",
      "Polymorphism is not supported."
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "interface IShape {\n    void Draw();\n}\n\nabstract class Polygon : IShape {\n    public abstract void Draw();\n}\n\nclass Triangle : Polygon {\n    public override void Draw() {\n        Console.WriteLine(\"Drawing Triangle\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        IShape shape = new Triangle();\n        shape.Draw();\n    }\n}",
    "o": [
      "Drawing Triangle",
      "Triangle",
      "Polygon",
      "Drawing Shape"
    ]
  },
  {
    "q": "Which of the following prevents further inheritance of a class in C#?",
    "o": [
      "sealed",
      "final",
      "static",
      "abstract"
    ]
  },
  {
    "q": "Which scenario best demonstrates method overriding?",
    "o": [
      "A derived class redefines a virtual method from its base class.",
      "A class has multiple methods with the same name but different parameters.",
      "A method is hidden using the `new` keyword.",
      "An interface method is implemented in a class."
    ]
  },
  {
    "q": "What happens when you mark a method as `sealed override`?",
    "o": [
      "It prevents further overriding in derived classes.",
      "It hides the base class method.",
      "It turns the method into an abstract method.",
      "It converts the class into a static class."
    ]
  },
  {
    "q": "Which line would throw a compilation error?",
    "c": "abstract class Base {\n    public abstract void Show();\n}\n\nclass Derived : Base {\n    public void Show() {\n        Console.WriteLine(\"Hello\");\n    }\n}",
    "o": [
      "public void Show() {",
      "Console.WriteLine(\"Hello\");",
      "abstract void Show();",
      "class Derived : Base {"
    ]
  },
  {
    "q": "Which keyword must be used to *explicitly* implement an interface method?",
    "o": [
      "interfaceName.methodName",
      "override",
      "base",
      "sealed"
    ]
  },
  {
    "q": "Which keyword is used to enable method overriding in C#?",
    "o": [
      "virtual",
      "override",
      "sealed",
      "static"
    ]
  },
  {
    "q": "What is the output of this code snippet?",
    "c": "class Vehicle {\n    public virtual void Start() {\n        Console.WriteLine(\"Vehicle starting\");\n    }\n}\n\nclass Car : Vehicle {\n    public override void Start() {\n        Console.WriteLine(\"Car starting\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        Vehicle v = new Car();\n        v.Start();\n    }\n}",
    "o": [
      "Car starting",
      "Vehicle starting",
      "Compilation Error",
      "Start"
    ]
  },
  {
    "q": "Which of the following C# class declarations prevents other classes from inheriting from it?",
    "o": [
      "sealed class MyClass",
      "final class MyClass",
      "static class MyClass",
      "protected class MyClass"
    ]
  },
  {
    "q": "What is true about abstract classes in C#?",
    "o": [
      "They cannot be instantiated directly.",
      "They must contain at least one abstract method.",
      "They cannot have constructors.",
      "They must implement all methods of interfaces."
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "abstract class Shape {\n    public abstract void Display();\n}\n\nclass Square : Shape {\n    public override void Display() {\n        Console.WriteLine(\"Square shape\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        Shape s = new Square();\n        s.Display();\n    }\n}",
    "o": [
      "Square shape",
      "Shape",
      "Compilation error",
      "Display"
    ]
  },
  {
    "q": "Which of these best describes polymorphism in C#?",
    "o": [
      "The ability to call the same method on different objects and get different results",
      "Reusing code from another class",
      "Storing data in a base class",
      "Hiding a method in a derived class"
    ]
  },
  {
    "q": "In which scenario would you use the `interface` keyword instead of `abstract class`?",
    "o": [
      "When multiple inheritance is needed",
      "When implementation of methods is mandatory",
      "When static methods are required",
      "When you need constructors"
    ]
  },
  {
    "q": "What is the correct way to prevent method overriding in a derived class?",
    "o": [
      "Use the sealed keyword on the method",
      "Declare the method as static",
      "Remove the virtual keyword",
      "Make the class abstract"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "class Base {\n    public virtual void Greet() {\n        Console.WriteLine(\"Hello from Base\");\n    }\n}\n\nclass Derived : Base {\n    public new void Greet() {\n        Console.WriteLine(\"Hello from Derived\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        Base obj = new Derived();\n        obj.Greet();\n    }\n}",
    "o": [
      "Hello from Base",
      "Hello from Derived",
      "Compilation Error",
      "Nothing"
    ]
  },
  {
    "q": "What is the main purpose of the `override` keyword?",
    "o": [
      "To provide a new implementation of a virtual method in a derived class",
      "To call the base class method directly",
      "To declare a method as sealed",
      "To hide a method from the base class"
    ]
  },
  {
    "q": "What will happen if a class implements two interfaces that have a method with the same signature?",
    "o": [
      "The class must explicitly implement at least one of the methods to avoid ambiguity.",
      "Compilation fails due to method conflict.",
      "Only one method will be inherited.",
      "The class cannot implement both interfaces."
    ]
  },
  {
    "q": "Which C# feature allows treating objects of different derived types through a common base reference?",
    "o": [
      "Polymorphism",
      "Encapsulation",
      "Inheritance",
      "Composition"
    ]
  },
  {
    "q": "What will the following code output?",
    "c": "class A {\n    public virtual void Print() {\n        Console.WriteLine(\"A\");\n    }\n}\nclass B : A {\n    public override void Print() {\n        Console.WriteLine(\"B\");\n    }\n}\nclass C : B {\n    public override void Print() {\n        Console.WriteLine(\"C\");\n    }\n}\nclass Program {\n    static void Main() {\n        A obj = new C();\n        obj.Print();\n    }\n}",
    "o": [
      "C",
      "A",
      "B",
      "Compilation Error"
    ]
  },
  {
    "q": "Which statement is TRUE about method hiding in C#?",
    "o": [
      "The `new` keyword is used to hide a method in the base class.",
      "The `override` keyword hides base methods.",
      "Method hiding works only with interfaces.",
      "It replaces the method in the base class during runtime."
    ]
  },
  {
    "q": "What is required to override a method from a base class?",
    "o": [
      "The base method must be marked `virtual`, and the derived method must be marked `override`.",
      "The base method must be marked `override`.",
      "The derived method must be marked `new`.",
      "The base class must be sealed."
    ]
  },
  {
    "q": "Why would you use an abstract class instead of an interface?",
    "o": [
      "To provide common base functionality to multiple derived classes.",
      "To enforce method signatures only.",
      "Because interfaces support constructors.",
      "Because abstract classes can be instantiated."
    ]
  },
  {
    "q": "What will be printed?",
    "c": "interface IDisplay {\n    void Show();\n}\n\nclass Monitor : IDisplay {\n    public void Show() {\n        Console.WriteLine(\"Showing monitor\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        IDisplay d = new Monitor();\n        d.Show();\n    }\n}",
    "o": [
      "Showing monitor",
      "Monitor",
      "Display",
      "Compilation Error"
    ]
  },
  {
    "q": "Which combination is invalid in C#?",
    "o": [
      "sealed abstract class",
      "abstract class with abstract method",
      "sealed class with virtual method",
      "class implementing multiple interfaces"
    ]
  },
  {
    "q": "What happens if you try to override a non-virtual method?",
    "o": [
      "Compiler error occurs.",
      "Runtime error occurs.",
      "The base method is replaced.",
      "The derived method is ignored silently."
    ]
  },
  {
    "q": "What does the keyword `base` refer to in a derived class?",
    "o": [
      "It allows access to members of the base class.",
      "It creates a new instance of the base class.",
      "It seals the base class method.",
      "It hides the base class property."
    ]
  },
  {
    "q": "Which of the following correctly defines a sealed method in C#?",
    "o": [
      "public sealed override void Display()",
      "public sealed virtual void Display()",
      "sealed void Display()",
      "override sealed void Display()"
    ]
  },
  {
    "q": "What is the primary reason to mark a class as `sealed` in C#?",
    "o": [
      "To prevent it from being inherited.",
      "To improve memory efficiency.",
      "To allow partial implementation.",
      "To enable polymorphism."
    ]
  },
  {
    "q": "Consider the following code. What is the output?",
    "c": "class Animal {\n    public virtual void Sound() {\n        Console.WriteLine(\"Generic Animal Sound\");\n    }\n}\nclass Dog : Animal {\n    public override void Sound() {\n        Console.WriteLine(\"Bark\");\n    }\n}\nclass Program {\n    static void Main() {\n        Animal a = new Dog();\n        a.Sound();\n    }\n}",
    "o": [
      "Bark",
      "Generic Animal Sound",
      "Dog",
      "Animal"
    ]
  },
  {
    "q": "What is true about an abstract class in C#?",
    "o": [
      "It cannot be instantiated directly.",
      "It must have at least one abstract method.",
      "It can only contain abstract methods.",
      "It must implement all interface methods."
    ]
  },
  {
    "q": "What is the correct way to override a method in a derived class?",
    "o": [
      "Use the `override` keyword and ensure the base method is `virtual`.",
      "Use the `new` keyword regardless of base method definition.",
      "Use the `sealed` keyword in the derived method.",
      "No keyword is needed; just redefine the method."
    ]
  },
  {
    "q": "Which of the following best demonstrates multilevel inheritance?",
    "o": [
      "class A {}\nclass B : A {}\nclass C : B {}",
      "class A {}\nclass B : A {}\nclass C : A {}",
      "class A {}\nclass B {}\nclass C : A, B {}",
      "class A {}\nclass B : A {}\ninterface C : B {}"
    ]
  },
  {
    "q": "What happens if a class inherits from an abstract class but does not implement all abstract methods?",
    "o": [
      "The class must also be marked as abstract.",
      "The program runs with warnings.",
      "The compiler automatically provides default implementation.",
      "It results in a runtime exception."
    ]
  },
  {
    "q": "Which of the following allows multiple inheritance in C#?",
    "o": [
      "Interfaces",
      "Abstract classes",
      "Sealed classes",
      "Static classes"
    ]
  },
  {
    "q": "What is the purpose of the `virtual` keyword in a base class method?",
    "o": [
      "To allow derived classes to override the method.",
      "To hide the method from derived classes.",
      "To prevent the method from being overridden.",
      "To mark the method as abstract."
    ]
  },
  {
    "q": "Given this code, what will be the output?",
    "c": "abstract class Shape {\n    public abstract double Area();\n}\nclass Circle : Shape {\n    public override double Area() {\n        return 3.14 * 5 * 5;\n    }\n}\nclass Program {\n    static void Main() {\n        Shape s = new Circle();\n        Console.WriteLine(s.Area());\n    }\n}",
    "o": [
      "78.5",
      "25",
      "3.14",
      "0"
    ]
  },
  {
    "q": "Which of the following keywords is used to prevent a class from being inherited in C#?",
    "o": [
      "sealed",
      "abstract",
      "static",
      "override"
    ]
  },
  {
    "q": "Which concept allows a derived class to provide a specific implementation of a method already defined in its base class?",
    "o": [
      "Method overriding",
      "Method overloading",
      "Abstraction",
      "Encapsulation"
    ]
  },
  {
    "q": "What is the output of this C# code?",
    "c": "class A {\n    public virtual void Show() {\n        Console.WriteLine(\"A\");\n    }\n}\nclass B : A {\n    public override void Show() {\n        Console.WriteLine(\"B\");\n    }\n}\nclass Program {\n    static void Main() {\n        A obj = new B();\n        obj.Show();\n    }\n}",
    "o": [
      "B",
      "A",
      "AB",
      "Error"
    ]
  },
  {
    "q": "Which of these allows the definition of a method without implementation in C#?",
    "o": [
      "Abstract method",
      "Virtual method",
      "Sealed method",
      "Static method"
    ]
  },
  {
    "q": "What is the purpose of the `interface` keyword in C#?",
    "o": [
      "To define a contract that implementing classes must follow.",
      "To create a sealed class.",
      "To restrict inheritance.",
      "To override a method."
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "interface ILogger {\n    void Log(string msg);\n}\nclass ConsoleLogger : ILogger {\n    public void Log(string msg) {\n        Console.WriteLine(msg);\n    }\n}\nclass Program {\n    static void Main() {\n        ILogger logger = new ConsoleLogger();\n        logger.Log(\"Hello\");\n    }\n}",
    "o": [
      "Hello",
      "ILogger",
      "ConsoleLogger",
      "Log"
    ]
  },
  {
    "q": "Which of the following is true about multilevel inheritance in C#?",
    "o": [
      "A class can inherit from a class that already inherits from another class.",
      "A class can inherit from multiple classes.",
      "C# does not support multilevel inheritance.",
      "It is the same as multiple inheritance."
    ]
  },
  {
    "q": "Which of these class definitions will NOT compile?",
    "c": "sealed class Base {}\nclass Derived : Base {}",
    "o": [
      "Compilation error: Cannot derive from sealed class",
      "Compiles and runs fine",
      "Runtime error only",
      "Works only if Base is abstract"
    ]
  },
  {
    "q": "Which statement about abstract classes is correct?",
    "o": [
      "They can contain both abstract and non-abstract methods.",
      "They can be instantiated directly.",
      "They cannot contain any method implementation.",
      "They must be sealed."
    ]
  },
  {
    "q": "What does the `base` keyword refer to in a derived class?",
    "o": [
      "It refers to the parent class.",
      "It refers to the current instance.",
      "It refers to the namespace.",
      "It refers to the derived class constructor."
    ]
  },
  {
    "q": "In single inheritance, how many base classes can a class inherit from in C#?",
    "o": [
      "One",
      "Two",
      "Unlimited",
      "Zero"
    ]
  },
  {
    "q": "Which keyword is used to allow a method to be overridden in a derived class?",
    "o": [
      "virtual",
      "sealed",
      "base",
      "abstract"
    ]
  },
  {
    "q": "What will be the output of this code?",
    "c": "class Animal {\n    public virtual void Sound() {\n        Console.WriteLine(\"Animal sound\");\n    }\n}\nclass Dog : Animal {\n    public override void Sound() {\n        Console.WriteLine(\"Bark\");\n    }\n}\nclass Program {\n    static void Main() {\n        Animal a = new Dog();\n        a.Sound();\n    }\n}",
    "o": [
      "Bark",
      "Animal sound",
      "Bark Animal",
      "Error"
    ]
  },
  {
    "q": "Which of the following statements about abstract classes is true?",
    "o": [
      "They can have both defined and undefined methods.",
      "They can be instantiated directly.",
      "They must not have any method body.",
      "They cannot be inherited."
    ]
  },
  {
    "q": "What is the role of a sealed method in C#?",
    "o": [
      "It prevents further overriding of the method.",
      "It makes the method accessible only inside the class.",
      "It hides the method from derived classes.",
      "It makes the method virtual by default."
    ]
  },
  {
    "q": "What will the following program print?",
    "c": "abstract class Shape {\n    public abstract void Draw();\n}\nclass Circle : Shape {\n    public override void Draw() {\n        Console.WriteLine(\"Drawing Circle\");\n    }\n}\nclass Program {\n    static void Main() {\n        Shape s = new Circle();\n        s.Draw();\n    }\n}",
    "o": [
      "Drawing Circle",
      "Shape",
      "Circle",
      "Error"
    ]
  },
  {
    "q": "Which of these is true about interfaces in C#?",
    "o": [
      "They cannot contain implementation code.",
      "They can have fields.",
      "They can be instantiated directly.",
      "They inherit from classes."
    ]
  },
  {
    "q": "Which of the following will result in a compilation error?",
    "c": "sealed class Vehicle {}\nclass Car : Vehicle {}",
    "o": [
      "Car cannot inherit from sealed class Vehicle",
      "Car must override base methods",
      "Vehicle must be abstract",
      "Car must implement an interface"
    ]
  },
  {
    "q": "What is multilevel inheritance?",
    "o": [
      "A class inherits from a class which itself inherits from another class.",
      "A class inherits from multiple base classes.",
      "A class contains multiple constructors.",
      "A class overrides multiple methods."
    ]
  },
  {
    "q": "How can you call a base class constructor from a derived class in C#?",
    "o": [
      "Using the base keyword",
      "Using the this keyword",
      "By directly calling the constructor",
      "By using override"
    ]
  },
  {
    "q": "What is the key difference between abstract classes and interfaces in C#?",
    "o": [
      "Abstract classes can have fields, interfaces cannot.",
      "Interfaces support constructors.",
      "Interfaces can contain method bodies only.",
      "Abstract classes cannot be inherited."
    ]
  },
  {
    "q": "Which keyword is used in C# to prevent a class from being inherited?",
    "o": [
      "sealed",
      "private",
      "abstract",
      "static"
    ]
  },
  {
    "q": "What will be the output of this code?",
    "c": "class Parent {\n    public virtual void Show() {\n        Console.WriteLine(\"Parent class\");\n    }\n}\nclass Child : Parent {\n    public new void Show() {\n        Console.WriteLine(\"Child class\");\n    }\n}\nclass Program {\n    static void Main() {\n        Parent obj = new Child();\n        obj.Show();\n    }\n}",
    "o": [
      "Parent class",
      "Child class",
      "ParentChild",
      "Compile-time error"
    ]
  },
  {
    "q": "In C#, which keyword allows a derived class to override a method from its base class?",
    "o": [
      "override",
      "abstract",
      "sealed",
      "interface"
    ]
  },
  {
    "q": "What will happen if a class inherits from an abstract class and does not implement all abstract methods?",
    "o": [
      "The derived class must be declared abstract.",
      "The code will compile successfully.",
      "The class becomes static.",
      "The compiler will ignore the missing methods."
    ]
  },
  {
    "q": "Which of the following is true about multilevel inheritance in C#?",
    "o": [
      "A class inherits from a class which itself inherits from another class.",
      "A class inherits from two or more base classes.",
      "Only abstract classes can be used in multilevel inheritance.",
      "It is not allowed in C#."
    ]
  },
  {
    "q": "What does this code demonstrate?",
    "c": "interface IShape {\n    void Draw();\n}\nclass Circle : IShape {\n    public void Draw() {\n        Console.WriteLine(\"Drawing Circle\");\n    }\n}",
    "o": [
      "Implementing an interface",
      "Abstract class with implementation",
      "Method hiding",
      "Sealed method"
    ]
  },
  {
    "q": "Which of these ensures that a method cannot be overridden in a derived class?",
    "o": [
      "sealed",
      "override",
      "base",
      "virtual"
    ]
  },
  {
    "q": "What is the result of trying to instantiate an abstract class directly?",
    "o": [
      "Compiler error",
      "Runtime exception",
      "It returns null",
      "It works if methods are implemented"
    ]
  },
  {
    "q": "What keyword must be used when a base class method is declared virtual and the derived class wants to provide its own version?",
    "o": [
      "override",
      "virtual",
      "sealed",
      "abstract"
    ]
  },
  {
    "q": "Which of the following best describes single inheritance in C#?",
    "o": [
      "A class inherits from only one base class.",
      "A class inherits from multiple base classes.",
      "A class inherits from both a class and an interface.",
      "A class is inherited by multiple derived classes."
    ]
  },
  {
    "q": "What will be the output of the following code?",
    "c": "abstract class Animal {\n    public abstract void Speak();\n}\nclass Dog : Animal {\n    public override void Speak() {\n        Console.WriteLine(\"Bark\");\n    }\n}\nclass Program {\n    static void Main() {\n        Animal myDog = new Dog();\n        myDog.Speak();\n    }\n}",
    "o": [
      "Bark",
      "Animal",
      "Error",
      "null"
    ]
  },
  {
    "q": "What does it mean when a method is declared 'virtual' in a base class?",
    "o": [
      "It can be overridden by a derived class.",
      "It cannot be accessed outside the base class.",
      "It must be overridden in every derived class.",
      "It is automatically sealed."
    ]
  },
  {
    "q": "Which of these classes cannot be inherited in C#?",
    "o": [
      "A sealed class",
      "An abstract class",
      "A public class",
      "A static class"
    ]
  },
  {
    "q": "What does the following code demonstrate?",
    "c": "class Vehicle {\n    public virtual void Start() {\n        Console.WriteLine(\"Vehicle starting...\");\n    }\n}\nclass Car : Vehicle {\n    public override void Start() {\n        Console.WriteLine(\"Car starting...\");\n    }\n}",
    "o": [
      "Method overriding",
      "Constructor chaining",
      "Method hiding",
      "Interface implementation"
    ]
  },
  {
    "q": "Which statement is true about interfaces in C#?",
    "o": [
      "Interfaces cannot contain implementation in C# (before version 8.0).",
      "Interfaces can have fields.",
      "You can instantiate an interface directly.",
      "Interfaces can inherit from classes."
    ]
  },
  {
    "q": "Which of the following keywords is used to stop further overriding of a method?",
    "o": [
      "sealed",
      "base",
      "new",
      "override"
    ]
  },
  {
    "q": "What is multilevel inheritance?",
    "o": [
      "A derived class inherits from another derived class.",
      "Two classes inherit from one base class.",
      "One class inherits from multiple classes.",
      "A class implements multiple interfaces."
    ]
  },
  {
    "q": "What will be the output of this code?",
    "c": "class Base {\n    public virtual void Show() {\n        Console.WriteLine(\"Base\");\n    }\n}\nclass Derived : Base {\n    public override void Show() {\n        Console.WriteLine(\"Derived\");\n    }\n}\nclass MoreDerived : Derived {\n    public override void Show() {\n        Console.WriteLine(\"MoreDerived\");\n    }\n}\nclass Program {\n    static void Main() {\n        Base obj = new MoreDerived();\n        obj.Show();\n    }\n}",
    "o": [
      "MoreDerived",
      "Derived",
      "Base",
      "Compile-time Error"
    ]
  },
  {
    "q": "Which keyword must be used to allow a method to be overridden in child classes?",
    "o": [
      "virtual",
      "override",
      "sealed",
      "abstract"
    ]
  },
  {
    "q": "What is the purpose of the 'abstract' keyword in a class definition in C#?",
    "o": [
      "To declare a class that cannot be instantiated but can be inherited",
      "To create a class with sealed methods",
      "To declare a class that must override all methods",
      "To restrict a class from being inherited"
    ]
  },
  {
    "q": "What will be the output of this code?",
    "c": "class Animal {\n    public virtual void MakeSound() {\n        Console.WriteLine(\"Animal sound\");\n    }\n}\nclass Dog : Animal {\n    public override void MakeSound() {\n        Console.WriteLine(\"Bark\");\n    }\n}\nclass Program {\n    static void Main() {\n        Animal obj = new Dog();\n        obj.MakeSound();\n    }\n}",
    "o": [
      "Bark",
      "Animal sound",
      "Dog",
      "Compile-time error"
    ]
  },
  {
    "q": "Which of the following is true about interfaces in C#?",
    "o": [
      "A class can implement multiple interfaces",
      "A class can inherit multiple interfaces and classes",
      "Interfaces can have constructors",
      "Interfaces can have private methods"
    ]
  },
  {
    "q": "What happens when a method is marked as sealed in a derived class?",
    "o": [
      "It prevents further overriding of that method in subclasses",
      "It prevents access to the method outside the class",
      "It makes the method abstract",
      "It hides the method from base class"
    ]
  },
  {
    "q": "Which of the following best demonstrates multilevel inheritance in C#?",
    "c": "class A {}\nclass B : A {}\nclass C : B {}",
    "o": [
      "Class C inherits from Class B, which inherits from Class A",
      "Class A inherits from Class B, which inherits from Class C",
      "All classes inherit from each other",
      "C# does not support multilevel inheritance"
    ]
  },
  {
    "q": "Which keyword is used to override a virtual method in C#?",
    "o": [
      "override",
      "virtual",
      "sealed",
      "abstract"
    ]
  },
  {
    "q": "What does the following code demonstrate?",
    "c": "interface IShape {\n    void Draw();\n}\nclass Circle : IShape {\n    public void Draw() {\n        Console.WriteLine(\"Drawing Circle\");\n    }\n}",
    "o": [
      "Implementation of an interface",
      "Multilevel inheritance",
      "Method hiding",
      "Use of abstract class"
    ]
  },
  {
    "q": "Which of the following statements is true about sealed classes in C#?",
    "o": [
      "They cannot be inherited",
      "They cannot contain virtual methods",
      "They must be static",
      "They can only be inherited once"
    ]
  },
  {
    "q": "What is the main difference between an abstract class and an interface in C#?",
    "o": [
      "An abstract class can have fields and constructors, an interface cannot",
      "An interface can have access modifiers, an abstract class cannot",
      "Interfaces can have implementation but abstract classes cannot",
      "Abstract classes cannot contain non-abstract methods"
    ]
  },
  {
    "q": "What will be printed when the following code is run?",
    "c": "class Base {\n    public virtual void Greet() {\n        Console.WriteLine(\"Hello from Base\");\n    }\n}\nclass Child : Base {\n    public sealed override void Greet() {\n        Console.WriteLine(\"Hello from Child\");\n    }\n}\nclass GrandChild : Child {\n    // public override void Greet() {} // This will cause an error\n}\nclass Program {\n    static void Main() {\n        Base obj = new Child();\n        obj.Greet();\n    }\n}",
    "o": [
      "Hello from Child",
      "Hello from Base",
      "Compile-time Error",
      "Nothing"
    ]
  },
  {
    "q": "Which type of inheritance does the following code demonstrate?",
    "c": "class Vehicle {}\nclass Car : Vehicle {}\nclass SportsCar : Car {}",
    "o": [
      "Multilevel Inheritance",
      "Single Inheritance",
      "Multiple Inheritance",
      "Hybrid Inheritance"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "abstract class Shape {\n    public abstract void Draw();\n}\nclass Circle : Shape {\n    public override void Draw() {\n        Console.WriteLine(\"Drawing Circle\");\n    }\n}\nclass Program {\n    static void Main() {\n        Shape shape = new Circle();\n        shape.Draw();\n    }\n}",
    "o": [
      "Drawing Circle",
      "Drawing Shape",
      "Compile-time Error",
      "No output"
    ]
  },
  {
    "q": "Which of the following is a characteristic of abstract classes in C#?",
    "o": [
      "They can have both abstract and non-abstract methods",
      "They must implement all methods of an interface",
      "They cannot have constructors",
      "They cannot be inherited"
    ]
  },
  {
    "q": "What happens when you try to inherit from a sealed class?",
    "o": [
      "Compile-time error",
      "Runtime exception",
      "The class is inherited normally",
      "The class becomes abstract"
    ]
  },
  {
    "q": "Which of the following correctly overrides a virtual method in C#?",
    "c": "class Base {\n    public virtual void Show() {\n        Console.WriteLine(\"Base\");\n    }\n}\nclass Derived : Base {\n    public override void Show() {\n        Console.WriteLine(\"Derived\");\n    }\n}",
    "o": [
      "public override void Show()",
      "public void override Show()",
      "override public void Show()",
      "virtual override void Show()"
    ]
  },
  {
    "q": "Which of the following best describes a sealed method in C#?",
    "o": [
      "A method that cannot be overridden further in derived classes",
      "A method that cannot be called from outside the class",
      "A method that is automatically static",
      "A method that must be implemented in derived classes"
    ]
  },
  {
    "q": "Which of the following is NOT true about interfaces in C#?",
    "o": [
      "Interfaces can have instance fields",
      "A class can implement multiple interfaces",
      "Interfaces can be used to achieve abstraction",
      "Interfaces can be inherited by other interfaces"
    ]
  },
  {
    "q": "What is the result of the following code?",
    "c": "interface ILogger {\n    void Log(string message);\n}\nclass ConsoleLogger : ILogger {\n    public void Log(string message) {\n        Console.WriteLine(message);\n    }\n}\nclass Program {\n    static void Main() {\n        ILogger logger = new ConsoleLogger();\n        logger.Log(\"Log this!\");\n    }\n}",
    "o": [
      "Log this!",
      "ILogger",
      "ConsoleLogger",
      "Compile error"
    ]
  },
  {
    "q": "Which keyword is used to prevent further inheritance of a class in C#?",
    "o": [
      "sealed",
      "abstract",
      "override",
      "readonly"
    ]
  },
  {
    "q": "What does the following code demonstrate?",
    "c": "class A {\n    public virtual void Print() {\n        Console.WriteLine(\"A\");\n    }\n}\nclass B : A {\n    public override void Print() {\n        Console.WriteLine(\"B\");\n    }\n}\nclass C : B {\n    public override void Print() {\n        Console.WriteLine(\"C\");\n    }\n}",
    "o": [
      "Method overriding with multilevel inheritance",
      "Method hiding with single inheritance",
      "Interface-based polymorphism",
      "Abstract method implementation"
    ]
  },
  {
    "q": "Which keyword allows a derived class to override a base class method in C#?",
    "o": [
      "virtual",
      "override",
      "base",
      "sealed"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "class Animal {\n    public virtual void Speak() {\n        Console.WriteLine(\"Animal speaks\");\n    }\n}\nclass Dog : Animal {\n    public override void Speak() {\n        Console.WriteLine(\"Dog barks\");\n    }\n}\nclass Program {\n    static void Main() {\n        Animal a = new Dog();\n        a.Speak();\n    }\n}",
    "o": [
      "Dog barks",
      "Animal speaks",
      "Animal Dog",
      "Compile error"
    ]
  },
  {
    "q": "Which of the following is true about abstract classes in C#?",
    "o": [
      "They cannot be instantiated directly",
      "They must contain only abstract methods",
      "They cannot have any constructors",
      "They must implement an interface"
    ]
  },
  {
    "q": "What happens when a class inherits from a sealed class?",
    "o": [
      "Compilation error occurs",
      "The program runs but skips inheritance",
      "The sealed class behaves like an interface",
      "Only static methods are inherited"
    ]
  },
  {
    "q": "Which keyword is used to indicate that a method cannot be overridden in derived classes?",
    "o": [
      "sealed",
      "override",
      "final",
      "static"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "interface IMovable {\n    void Move();\n}\nclass Robot : IMovable {\n    public void Move() {\n        Console.WriteLine(\"Robot moves\");\n    }\n}\nclass Program {\n    static void Main() {\n        IMovable m = new Robot();\n        m.Move();\n    }\n}",
    "o": [
      "Robot moves",
      "IMovable",
      "Move called",
      "Compile error"
    ]
  },
  {
    "q": "Which of the following statements is TRUE about interfaces in C#?",
    "o": [
      "They define a contract that implementing classes must follow",
      "They can contain implementation code",
      "They can inherit from a class",
      "They must contain only fields"
    ]
  },
  {
    "q": "Which of the following is an example of single inheritance?",
    "c": "class Person {}\nclass Student : Person {}",
    "o": [
      "Student inherits from Person only",
      "Student inherits from multiple classes",
      "Person inherits from Student",
      "Student is an interface"
    ]
  },
  {
    "q": "How can polymorphism be achieved in C#?",
    "o": [
      "Using virtual and override methods",
      "Using only constructors",
      "Using private fields",
      "Using sealed classes"
    ]
  },
  {
    "q": "Which class modifier prevents a class from being inherited?",
    "o": [
      "sealed",
      "abstract",
      "static",
      "partial"
    ]
  },
  {
    "q": "Which concept allows a child class to access members of a parent class in C#?",
    "o": [
      "Inheritance",
      "Encapsulation",
      "Polymorphism",
      "Abstraction"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "class Base {\n    public void Display() {\n        Console.WriteLine(\"Base Class\");\n    }\n}\nclass Derived : Base {}\n\nclass Program {\n    static void Main() {\n        Derived obj = new Derived();\n        obj.Display();\n    }\n}",
    "o": [
      "Base Class",
      "Derived Class",
      "Compilation Error",
      "Display"
    ]
  },
  {
    "q": "Which keyword is used in C# to override a method in a derived class?",
    "o": [
      "override",
      "virtual",
      "new",
      "base"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "abstract class Shape {\n    public abstract void Draw();\n}\n\nclass Circle : Shape {\n    public override void Draw() {\n        Console.WriteLine(\"Drawing Circle\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        Shape s = new Circle();\n        s.Draw();\n    }\n}",
    "o": [
      "Drawing Circle",
      "Circle",
      "Drawing Shape",
      "Compilation Error"
    ]
  },
  {
    "q": "Which of the following statements is true about interfaces in C#?",
    "o": [
      "A class can implement multiple interfaces",
      "An interface can contain fields",
      "Interfaces can have constructors",
      "A class can inherit from multiple interfaces and classes simultaneously"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "class A {\n    public virtual void Show() {\n        Console.WriteLine(\"A\");\n    }\n}\n\nclass B : A {\n    public override void Show() {\n        Console.WriteLine(\"B\");\n    }\n}\n\nclass C : B {}\n\nclass Program {\n    static void Main() {\n        A obj = new C();\n        obj.Show();\n    }\n}",
    "o": [
      "B",
      "A",
      "C",
      "Compile-time error"
    ]
  },
  {
    "q": "What happens if a non-abstract class fails to implement all members of an interface?",
    "o": [
      "It causes a compilation error",
      "It runs with default implementations",
      "It is treated as an abstract class",
      "It throws a runtime exception"
    ]
  },
  {
    "q": "Which of the following defines multilevel inheritance in C#?",
    "o": [
      "Class A â†’ Class B : A â†’ Class C : B",
      "Class A : Class B, Class C",
      "Class A : Interface B, Interface C",
      "Class A inherits Class B and Interface C"
    ]
  },
  {
    "q": "Which of the following modifiers prevents further method overriding in C#?",
    "o": [
      "sealed",
      "static",
      "private",
      "readonly"
    ]
  },
  {
    "q": "Which feature allows a subclass to provide a specific implementation of a method already defined in its superclass?",
    "o": [
      "Method Overriding",
      "Method Hiding",
      "Method Overloading",
      "Encapsulation"
    ]
  },
  {
    "q": "Which keyword in C# allows a class to be inherited from another class?",
    "o": [
      ":",
      "->",
      "extends",
      "inherits"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "class Animal {\n    public virtual void Speak() {\n        Console.WriteLine(\"Animal sound\");\n    }\n}\nclass Dog : Animal {\n    public override void Speak() {\n        Console.WriteLine(\"Bark\");\n    }\n}\nclass Program {\n    static void Main() {\n        Animal a = new Dog();\n        a.Speak();\n    }\n}",
    "o": [
      "Bark",
      "Animal sound",
      "Dog",
      "Speak"
    ]
  },
  {
    "q": "Which statement best describes polymorphism in C#?",
    "o": [
      "It allows methods to behave differently based on the object calling them",
      "It restricts a method to a single behavior",
      "It hides class members",
      "It binds data with methods"
    ]
  },
  {
    "q": "What is the output of this code using multilevel inheritance?",
    "c": "class A {\n    public virtual void Show() { Console.WriteLine(\"Class A\"); }\n}\nclass B : A {\n    public override void Show() { Console.WriteLine(\"Class B\"); }\n}\nclass C : B {}\nclass Program {\n    static void Main() {\n        A obj = new C();\n        obj.Show();\n    }\n}",
    "o": [
      "Class B",
      "Class A",
      "Class C",
      "Compile-time error"
    ]
  },
  {
    "q": "Which of the following is true about abstract classes in C#?",
    "o": [
      "They cannot be instantiated directly",
      "They can contain only abstract methods",
      "They cannot have constructors",
      "They must be static"
    ]
  },
  {
    "q": "What happens if a class marked as sealed is inherited?",
    "o": [
      "Compilation error occurs",
      "It works normally",
      "It becomes an interface",
      "It causes runtime exception"
    ]
  },
  {
    "q": "Which code demonstrates correct implementation of an interface?",
    "c": "interface IShape {\n    void Draw();\n}\nclass Circle : IShape {\n    public void Draw() {\n        Console.WriteLine(\"Drawing Circle\");\n    }\n}",
    "o": [
      "The implementation is valid and will compile",
      "Interfaces cannot be implemented in classes",
      "Draw must be static",
      "Circle should be abstract"
    ]
  },
  {
    "q": "Which keyword is used to indicate a method that can be overridden in C#?",
    "o": [
      "virtual",
      "override",
      "sealed",
      "abstract"
    ]
  },
  {
    "q": "Which of the following is NOT allowed in C# inheritance?",
    "o": [
      "Multiple inheritance with classes",
      "Multilevel inheritance",
      "Interface implementation",
      "Base class reference holding derived object"
    ]
  },
  {
    "q": "What is the result of this code?",
    "c": "class Vehicle {\n    public virtual void Start() => Console.WriteLine(\"Vehicle started\");\n}\nclass Car : Vehicle {\n    public sealed override void Start() => Console.WriteLine(\"Car started\");\n}\nclass SportsCar : Car {\n    // public override void Start() => Console.WriteLine(\"SportsCar started\");\n}\n\n// Uncommenting the method in SportsCar will cause:\n",
    "o": [
      "Compilation error because sealed method cannot be overridden",
      "Output will be 'SportsCar started'",
      "Output will be 'Vehicle started'",
      "No output will be generated"
    ]
  },
  {
    "q": "Which of the following best describes single inheritance in C#?",
    "o": [
      "A class inherits from one base class only",
      "A class inherits from multiple base classes",
      "A class inherits from an interface and a base class",
      "A class inherits only static methods"
    ]
  },
  {
    "q": "What will the following code output?",
    "c": "class Base {\n    public void Display() {\n        Console.WriteLine(\"Base class\");\n    }\n}\nclass Derived : Base {}\nclass Program {\n    static void Main() {\n        Derived d = new Derived();\n        d.Display();\n    }\n}",
    "o": [
      "Base class",
      "Derived class",
      "Display",
      "Nothing"
    ]
  },
  {
    "q": "What is required when a class implements an interface in C#?",
    "o": [
      "It must implement all members of the interface",
      "It can ignore optional methods",
      "It can override interface methods",
      "It must be marked as sealed"
    ]
  },
  {
    "q": "Which keyword prevents further inheritance of a class?",
    "o": [
      "sealed",
      "static",
      "abstract",
      "private"
    ]
  },
  {
    "q": "What is the output of this program using abstract class?",
    "c": "abstract class Shape {\n    public abstract void Draw();\n}\nclass Square : Shape {\n    public override void Draw() {\n        Console.WriteLine(\"Drawing Square\");\n    }\n}\nclass Program {\n    static void Main() {\n        Shape s = new Square();\n        s.Draw();\n    }\n}",
    "o": [
      "Drawing Square",
      "Drawing Shape",
      "Draw",
      "Compilation Error"
    ]
  },
  {
    "q": "Which feature allows a derived class to change the behavior of a base class method?",
    "o": [
      "Method overriding",
      "Method hiding",
      "Encapsulation",
      "Constructor chaining"
    ]
  },
  {
    "q": "What is the effect of marking a method as `sealed` in a derived class?",
    "o": [
      "It prevents further overriding of that method",
      "It makes the method static",
      "It hides the base method",
      "It makes the method abstract"
    ]
  },
  {
    "q": "Which of the following correctly demonstrates interface implementation?",
    "c": "interface IPlayable {\n    void Play();\n}\nclass Game : IPlayable {\n    public void Play() {\n        Console.WriteLine(\"Game is running\");\n    }\n}",
    "o": [
      "The implementation is valid and will compile successfully",
      "Interfaces must use override keyword",
      "Play should be abstract",
      "Game must also be an interface"
    ]
  },
  {
    "q": "Which inheritance type is shown in this example?\nclass A {}\nclass B : A {}\nclass C : B {}",
    "o": [
      "Multilevel inheritance",
      "Multiple inheritance",
      "Single inheritance",
      "Hybrid inheritance"
    ]
  },
  {
    "q": "What does the following code demonstrate?",
    "c": "class Parent {\n    public virtual void Show() => Console.WriteLine(\"Parent\");\n}\nclass Child : Parent {\n    public override void Show() => Console.WriteLine(\"Child\");\n}\nclass Program {\n    static void Main() {\n        Parent obj = new Child();\n        obj.Show();\n    }\n}",
    "o": [
      "Runtime polymorphism",
      "Compile-time polymorphism",
      "Method hiding",
      "Abstract method call"
    ]
  },
  {
    "q": "Which of the following statements about abstract classes is correct?",
    "o": [
      "Abstract classes cannot be instantiated directly",
      "Abstract classes must be sealed",
      "Abstract classes can only contain abstract methods",
      "You can create an object of an abstract class"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "class Animal {\n    public virtual void Speak() {\n        Console.WriteLine(\"Animal speaks\");\n    }\n}\nclass Dog : Animal {\n    public override void Speak() {\n        Console.WriteLine(\"Dog barks\");\n    }\n}\nclass Program {\n    static void Main() {\n        Animal a = new Dog();\n        a.Speak();\n    }\n}",
    "o": [
      "Dog barks",
      "Animal speaks",
      "Dog speaks",
      "Error"
    ]
  },
  {
    "q": "Which keyword is used to allow a method to be overridden in C#?",
    "o": [
      "virtual",
      "sealed",
      "abstract",
      "override"
    ]
  },
  {
    "q": "What happens if you try to inherit a sealed class?",
    "o": [
      "Compiler throws an error",
      "It compiles but fails at runtime",
      "It behaves like an abstract class",
      "The derived class cannot call base methods"
    ]
  },
  {
    "q": "Which line demonstrates multilevel inheritance?",
    "c": "class A {}\nclass B : A {}\nclass C : B {}",
    "o": [
      "class C : B {}",
      "class B : A {}",
      "class A {}",
      "None of the above"
    ]
  },
  {
    "q": "Which of the following is NOT true about interfaces in C#?",
    "o": [
      "Interfaces can contain implementation of methods",
      "Interfaces can be inherited",
      "A class can implement multiple interfaces",
      "Interfaces cannot have constructors"
    ]
  },
  {
    "q": "What is the purpose of the 'override' keyword?",
    "o": [
      "To provide a new implementation of a virtual or abstract method",
      "To hide a base class method",
      "To inherit multiple base classes",
      "To make a method static"
    ]
  },
  {
    "q": "What will the following code print?",
    "c": "abstract class Printer {\n    public abstract void Print();\n}\nclass LaserPrinter : Printer {\n    public override void Print() {\n        Console.WriteLine(\"Printing with LaserPrinter\");\n    }\n}\nclass Program {\n    static void Main() {\n        Printer p = new LaserPrinter();\n        p.Print();\n    }\n}",
    "o": [
      "Printing with LaserPrinter",
      "Printing with Printer",
      "LaserPrinter",
      "Compile-time error"
    ]
  },
  {
    "q": "Which of the following scenarios shows polymorphism in C#?",
    "o": [
      "Calling overridden method using base class reference",
      "Declaring multiple constructors",
      "Having static methods in a class",
      "Using the same method name in different classes"
    ]
  },
  {
    "q": "Why would you use a sealed method in a class?",
    "o": [
      "To prevent it from being overridden in derived classes",
      "To mark it as abstract",
      "To allow only internal access",
      "To make it private"
    ]
  },
  {
    "q": "In C#, what is true about method overriding?",
    "o": [
      "The method must be marked as virtual in the base class and override in the derived class",
      "You can override any method without using virtual keyword",
      "Overriding works only with private methods",
      "Method overriding is only possible using static methods"
    ]
  },
  {
    "q": "What will the following code print?",
    "c": "class Vehicle {\n    public virtual void Start() {\n        Console.WriteLine(\"Vehicle starts\");\n    }\n}\nclass Car : Vehicle {\n    public override void Start() {\n        Console.WriteLine(\"Car starts\");\n    }\n}\nclass Program {\n    static void Main() {\n        Vehicle v = new Car();\n        v.Start();\n    }\n}",
    "o": [
      "Car starts",
      "Vehicle starts",
      "Car",
      "Runtime error"
    ]
  },
  {
    "q": "Which of the following correctly defines a multilevel inheritance structure in C#?",
    "o": [
      "class A {}\nclass B : A {}\nclass C : B {}",
      "class A : B {}\nclass B {}\nclass C : A {}",
      "class A {}\nclass B {}\nclass C : A, B {}",
      "class A {}\nclass B : C {}\nclass C : A {}"
    ]
  },
  {
    "q": "Which of the following statements about sealed classes is TRUE?",
    "o": [
      "A sealed class cannot be inherited",
      "A sealed class cannot contain any methods",
      "A sealed class can only be used in static methods",
      "A sealed class must be abstract"
    ]
  },
  {
    "q": "What is the purpose of an abstract method in an abstract class?",
    "o": [
      "To force derived classes to implement the method",
      "To prevent method overriding",
      "To allow instantiation of the class",
      "To seal the method"
    ]
  },
  {
    "q": "What will be the output of the following code?",
    "c": "interface IShape {\n    void Draw();\n}\nclass Circle : IShape {\n    public void Draw() {\n        Console.WriteLine(\"Drawing Circle\");\n    }\n}\nclass Program {\n    static void Main() {\n        IShape shape = new Circle();\n        shape.Draw();\n    }\n}",
    "o": [
      "Drawing Circle",
      "Drawing Shape",
      "Circle",
      "Error"
    ]
  },
  {
    "q": "Which of the following is a correct use of the 'sealed' keyword?",
    "o": [
      "To prevent a method from being overridden in a derived class",
      "To make a method virtual",
      "To make a class abstract",
      "To allow multiple inheritance"
    ]
  },
  {
    "q": "Which of these allows C# to achieve runtime polymorphism?",
    "o": [
      "Method overriding",
      "Method overloading",
      "Static classes",
      "Interfaces with default methods"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "abstract class Base {\n    public abstract void Display();\n}\nclass Derived : Base {\n    public override void Display() {\n        Console.WriteLine(\"Derived Display\");\n    }\n}\nclass Program {\n    static void Main() {\n        Base obj = new Derived();\n        obj.Display();\n    }\n}",
    "o": [
      "Derived Display",
      "Base Display",
      "Display",
      "Compile-time error"
    ]
  },
  {
    "q": "Which is true regarding interfaces in C#?",
    "o": [
      "They define a contract without implementation",
      "They can have constructors",
      "They can contain private methods only",
      "They must inherit from a base class"
    ]
  },
  {
    "q": "Which keyword in C# is used to allow a method to be overridden in a derived class?",
    "o": [
      "virtual",
      "override",
      "sealed",
      "abstract"
    ]
  },
  {
    "q": "What will the output be?",
    "c": "class Animal {\n    public virtual void Speak() {\n        Console.WriteLine(\"Animal speaks\");\n    }\n}\nclass Dog : Animal {\n    public override void Speak() {\n        Console.WriteLine(\"Dog barks\");\n    }\n}\nclass Program {\n    static void Main() {\n        Animal pet = new Dog();\n        pet.Speak();\n    }\n}",
    "o": [
      "Dog barks",
      "Animal speaks",
      "Dog",
      "Error"
    ]
  },
  {
    "q": "What is true about abstract classes in C#?",
    "o": [
      "They cannot be instantiated directly",
      "They cannot contain any non-abstract methods",
      "They must be static",
      "They are used only for value types"
    ]
  },
  {
    "q": "What will be printed by the code?",
    "c": "interface IWorker {\n    void Work();\n}\nclass Developer : IWorker {\n    public void Work() {\n        Console.WriteLine(\"Writing code\");\n    }\n}\nclass Program {\n    static void Main() {\n        IWorker w = new Developer();\n        w.Work();\n    }\n}",
    "o": [
      "Writing code",
      "Work",
      "Developer",
      "Compile error"
    ]
  },
  {
    "q": "Which of these is an example of multilevel inheritance in C#?",
    "o": [
      "class A {}\nclass B : A {}\nclass C : B {}",
      "class A {}\nclass B : A, C {}",
      "class A : B {}\nclass C : A {}",
      "class A {}\nclass B {}\nclass C : A, B {}"
    ]
  },
  {
    "q": "What is the purpose of the 'sealed' keyword in a method declaration?",
    "o": [
      "To prevent the method from being overridden in derived classes",
      "To declare the method as virtual",
      "To mark the method as abstract",
      "To allow multiple inheritance"
    ]
  },
  {
    "q": "What will be the output?",
    "c": "abstract class Shape {\n    public abstract void Draw();\n}\nclass Square : Shape {\n    public override void Draw() {\n        Console.WriteLine(\"Drawing Square\");\n    }\n}\nclass Program {\n    static void Main() {\n        Shape s = new Square();\n        s.Draw();\n    }\n}",
    "o": [
      "Drawing Square",
      "Square",
      "Shape",
      "Error"
    ]
  },
  {
    "q": "Which of the following correctly defines an interface in C#?",
    "o": [
      "interface IExample { void Show(); }",
      "interface IExample { public void Show(); }",
      "class IExample { void Show(); }",
      "abstract class IExample { void Show(); }"
    ]
  },
  {
    "q": "Which scenario best demonstrates polymorphism?",
    "o": [
      "Calling the same method on different objects with different behaviors",
      "Calling multiple methods in a single class",
      "Using the same variable name in different methods",
      "Declaring multiple constructors"
    ]
  },
  {
    "q": "Which keyword is used to implement an interface in C#?",
    "o": [
      "interface",
      "inherit",
      "virtual",
      "sealed"
    ]
  },
  {
    "q": "Which C# keyword is used to prevent further inheritance of a class?",
    "o": [
      "sealed",
      "static",
      "private",
      "protected"
    ]
  },
  {
    "q": "What will be the output of this C# code?",
    "c": "class Base {\n    public virtual void Display() {\n        Console.WriteLine(\"Base class\");\n    }\n}\nclass Derived : Base {\n    public new void Display() {\n        Console.WriteLine(\"Derived class\");\n    }\n}\nclass Program {\n    static void Main() {\n        Base obj = new Derived();\n        obj.Display();\n    }\n}",
    "o": [
      "Base class",
      "Derived class",
      "Error",
      "Nothing"
    ]
  },
  {
    "q": "Which statement about interfaces in C# is true?",
    "o": [
      "Interfaces can contain only method signatures and properties without implementation (until C# 8.0)",
      "Interfaces can have constructors",
      "Interfaces are instantiated using the new keyword",
      "Interfaces cannot be inherited"
    ]
  },
  {
    "q": "What is printed when the following code runs?",
    "c": "abstract class Animal {\n    public abstract void MakeSound();\n}\nclass Cat : Animal {\n    public override void MakeSound() {\n        Console.WriteLine(\"Meow\");\n    }\n}\nclass Program {\n    static void Main() {\n        Animal a = new Cat();\n        a.MakeSound();\n    }\n}",
    "o": [
      "Meow",
      "Animal",
      "Cat",
      "Error"
    ]
  },
  {
    "q": "What type of inheritance is represented by the following code?\n\nclass A {}\nclass B : A {}\nclass C : B {}",
    "o": [
      "Multilevel Inheritance",
      "Multiple Inheritance",
      "Hierarchical Inheritance",
      "Hybrid Inheritance"
    ]
  },
  {
    "q": "Which modifier is used to override a base class method in the derived class?",
    "o": [
      "override",
      "new",
      "virtual",
      "abstract"
    ]
  },
  {
    "q": "What will the output be?",
    "c": "class Vehicle {\n    public virtual void Start() {\n        Console.WriteLine(\"Vehicle started\");\n    }\n}\nclass Car : Vehicle {\n    public sealed override void Start() {\n        Console.WriteLine(\"Car started\");\n    }\n}\nclass SportsCar : Car {\n    // public override void Start() => Error: sealed method\n}",
    "o": [
      "Car started",
      "Vehicle started",
      "SportsCar started",
      "Error"
    ]
  },
  {
    "q": "Which is a valid declaration of an abstract class?",
    "o": [
      "abstract class Shape { public abstract void Draw(); }",
      "class Shape { abstract void Draw(); }",
      "abstract class Shape { void Draw(); }",
      "shape abstract class { void Draw(); }"
    ]
  },
  {
    "q": "Why would you use a sealed method in C#?",
    "o": [
      "To prevent it from being overridden in derived classes",
      "To make the method abstract",
      "To hide the method from other assemblies",
      "To create multiple versions of the method"
    ]
  },
  {
    "q": "Which keyword combination allows a derived class to redefine a base class method?",
    "o": [
      "virtual in base, override in derived",
      "sealed in base, override in derived",
      "override in base, virtual in derived",
      "new in base, override in derived"
    ]
  },
  {
    "q": "What is the correct way to declare a class that implements an interface in C#?",
    "o": [
      "class Dog : IAnimal",
      "class Dog implements IAnimal",
      "class Dog inherits IAnimal",
      "class Dog :: IAnimal"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "interface IWalkable {\n    void Walk();\n}\nclass Human : IWalkable {\n    public void Walk() {\n        Console.WriteLine(\"Human walking\");\n    }\n}\nclass Program {\n    static void Main() {\n        IWalkable w = new Human();\n        w.Walk();\n    }\n}",
    "o": [
      "Human walking",
      "IWalkable walking",
      "Interface cannot be instantiated",
      "Error"
    ]
  },
  {
    "q": "Which keyword is used in C# to define a method that must be overridden in a derived class?",
    "o": [
      "abstract",
      "sealed",
      "virtual",
      "override"
    ]
  },
  {
    "q": "What is the role of the 'base' keyword in method overriding?",
    "o": [
      "It allows calling the base class method from the derived class",
      "It makes the method abstract",
      "It seals the method",
      "It hides the base class method"
    ]
  },
  {
    "q": "What will the following code print?",
    "c": "class Parent {\n    public virtual void Show() {\n        Console.WriteLine(\"Parent\");\n    }\n}\nclass Child : Parent {\n    public override void Show() {\n        Console.WriteLine(\"Child\");\n    }\n}\nclass Program {\n    static void Main() {\n        Parent p = new Child();\n        p.Show();\n    }\n}",
    "o": [
      "Child",
      "Parent",
      "Error",
      "Nothing"
    ]
  },
  {
    "q": "Which of the following best describes multilevel inheritance in C#?",
    "o": [
      "A class inherits from a class, which in turn inherits from another class",
      "A class inherits from multiple base classes",
      "An interface inherits from a class",
      "A method calls another method in its body"
    ]
  },
  {
    "q": "Which keyword combination is used to define and override a polymorphic method in C#?",
    "o": [
      "virtual in base, override in derived",
      "override in base, new in derived",
      "sealed in base, abstract in derived",
      "static in base, new in derived"
    ]
  },
  {
    "q": "What will be the output?",
    "c": "abstract class Shape {\n    public abstract void Draw();\n}\nclass Circle : Shape {\n    public override void Draw() {\n        Console.WriteLine(\"Drawing Circle\");\n    }\n}\nclass Program {\n    static void Main() {\n        Shape s = new Circle();\n        s.Draw();\n    }\n}",
    "o": [
      "Drawing Circle",
      "Drawing Shape",
      "Error",
      "Circle Shape"
    ]
  },
  {
    "q": "Why can't a sealed class be inherited in C#?",
    "o": [
      "Because 'sealed' restricts further derivation",
      "Because it's marked as static",
      "Because it's abstract",
      "Because it implements an interface"
    ]
  },
  {
    "q": "What is the purpose of an interface in C#?",
    "o": [
      "To define a contract that implementing classes must follow",
      "To create reusable code blocks",
      "To allow inheritance from multiple classes",
      "To encapsulate method logic"
    ]
  },
  {
    "q": "Which of the following supports single inheritance in C#?",
    "o": [
      "A class inheriting from one base class",
      "A class inheriting from two interfaces",
      "A class inheriting from two classes",
      "A class with no parent"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "class A {\n    public virtual void Show() {\n        Console.WriteLine(\"A\");\n    }\n}\nclass B : A {\n    public override void Show() {\n        Console.WriteLine(\"B\");\n    }\n}\nclass C : B {\n    public override void Show() {\n        Console.WriteLine(\"C\");\n    }\n}\nclass Program {\n    static void Main() {\n        A obj = new C();\n        obj.Show();\n    }\n}",
    "o": [
      "C",
      "B",
      "A",
      "Error"
    ]
  },
  {
    "q": "What does marking a class as `sealed` do in C#?",
    "o": [
      "Prevents the class from being inherited",
      "Allows the class to override virtual methods",
      "Makes all its methods final",
      "Enforces implementation of an interface"
    ]
  },
  {
    "q": "Which statement is true about interfaces in C#?",
    "o": [
      "They cannot contain implementation code (except default interface methods from C# 8.0)",
      "They can be instantiated directly",
      "They can inherit from classes",
      "They must always be sealed"
    ]
  },
  {
    "q": "What is required in a derived class if the base class has an abstract method?",
    "o": [
      "The derived class must override the abstract method",
      "The derived class must declare itself as abstract",
      "The method can be skipped",
      "The derived class must seal the method"
    ]
  },
  {
    "q": "Which of the following code snippets correctly demonstrates interface implementation?",
    "c": "interface IFlyable {\n    void Fly();\n}\nclass Bird : IFlyable {\n    public void Fly() {\n        Console.WriteLine(\"Bird is flying\");\n    }\n}",
    "o": [
      "Bird implements IFlyable correctly",
      "Bird must use override for Fly",
      "Interface methods can be private",
      "Fly method cannot be void"
    ]
  },
  {
    "q": "Why would you use a virtual method in a base class?",
    "o": [
      "To allow derived classes to override its behavior",
      "To prevent the method from being overridden",
      "To define an abstract method",
      "To enforce the methodâ€™s execution"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "class Animal {\n    public virtual void Speak() {\n        Console.WriteLine(\"Animal sound\");\n    }\n}\nclass Dog : Animal {\n    public new void Speak() {\n        Console.WriteLine(\"Dog barks\");\n    }\n}\nclass Program {\n    static void Main() {\n        Animal a = new Dog();\n        a.Speak();\n    }\n}",
    "o": [
      "Animal sound",
      "Dog barks",
      "Error",
      "No output"
    ]
  },
  {
    "q": "Which combination is invalid in C#?",
    "o": [
      "A sealed class trying to be inherited",
      "A class implementing multiple interfaces",
      "A class overriding a virtual method",
      "An abstract class with a concrete method"
    ]
  },
  {
    "q": "What is the correct way to prevent a derived class from overriding a method?",
    "o": [
      "Mark the method as sealed",
      "Make the method private",
      "Remove the virtual keyword",
      "Make the class abstract"
    ]
  },
  {
    "q": "Which keyword is used to define a method in the base class that can be overridden in derived classes?",
    "o": [
      "virtual",
      "sealed",
      "abstract",
      "override"
    ]
  },
  {
    "q": "What will be the output of the following code?",
    "c": "class Base {\n    public virtual void Display() {\n        Console.WriteLine(\"Base Display\");\n    }\n}\nclass Derived : Base {\n    public override void Display() {\n        Console.WriteLine(\"Derived Display\");\n    }\n}\nclass Program {\n    static void Main() {\n        Base obj = new Derived();\n        obj.Display();\n    }\n}",
    "o": [
      "Derived Display",
      "Base Display",
      "Error",
      "Nothing will be printed"
    ]
  },
  {
    "q": "Which of the following best defines an abstract class?",
    "o": [
      "A class that cannot be instantiated and may contain abstract methods",
      "A class that must be sealed",
      "A class with only static members",
      "A class with no constructor"
    ]
  },
  {
    "q": "What does the `sealed` keyword prevent in C#?",
    "o": [
      "Inheritance of the class or overriding of the method",
      "Method overloading",
      "Use of interfaces",
      "Calling base class constructors"
    ]
  },
  {
    "q": "Which of the following allows multiple inheritance in C#?",
    "o": [
      "Implementing multiple interfaces",
      "Inheriting multiple classes",
      "Using multiple constructors",
      "Declaring multiple base classes"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "interface IShape {\n    void Draw();\n}\nabstract class Shape : IShape {\n    public abstract void Draw();\n}\nclass Circle : Shape {\n    public override void Draw() {\n        Console.WriteLine(\"Drawing Circle\");\n    }\n}\nclass Program {\n    static void Main() {\n        Shape shape = new Circle();\n        shape.Draw();\n    }\n}",
    "o": [
      "Drawing Circle",
      "Drawing Shape",
      "Error",
      "Nothing"
    ]
  },
  {
    "q": "Which of the following methods can be declared inside an interface in C# (C# 8.0 and above)?",
    "o": [
      "Default methods with implementation",
      "Constructors",
      "Static methods only",
      "Private methods only"
    ]
  },
  {
    "q": "What will be the result of this code snippet?",
    "c": "class Parent {\n    public virtual void Show() {\n        Console.WriteLine(\"Parent\");\n    }\n    public virtual void Greet() {\n        Console.WriteLine(\"Hello\");\n    }\n}\nclass Child : Parent {\n    public sealed override void Show() {\n        Console.WriteLine(\"Child\");\n    }\n    public override void Greet() {\n        Console.WriteLine(\"Hi\");\n    }\n}\nclass GrandChild : Child {\n    // public override void Show() { } // Not allowed\n    public override void Greet() {\n        Console.WriteLine(\"Hey\");\n    }\n}",
    "o": [
      "Show cannot be overridden in GrandChild due to sealed",
      "Greet cannot be overridden again",
      "This code will throw runtime error",
      "Nothing will be printed"
    ]
  },
  {
    "q": "Which statement is true about abstract methods in C#?",
    "o": [
      "They must be overridden in a derived non-abstract class",
      "They can have a body",
      "They can be static",
      "They can be private"
    ]
  },
  {
    "q": "What will happen if a class does not implement all methods of an interface it inherits?",
    "o": [
      "It must be declared abstract",
      "It will compile successfully anyway",
      "It can still be instantiated",
      "It will automatically inherit from Object"
    ]
  },
  {
    "q": "Which of the following best describes single inheritance in C#?",
    "o": [
      "A class inherits from only one base class",
      "A class inherits from multiple base classes",
      "A class implements multiple interfaces",
      "A class cannot inherit any members"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "class Animal {\n    public virtual void Speak() {\n        Console.WriteLine(\"Animal speaks\");\n    }\n}\n\nclass Dog : Animal {\n    public override void Speak() {\n        Console.WriteLine(\"Dog barks\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        Animal myDog = new Dog();\n        myDog.Speak();\n    }\n}",
    "o": [
      "Dog barks",
      "Animal speaks",
      "Compilation error",
      "Runtime error"
    ]
  },
  {
    "q": "Which keyword in C# is used to prevent a class from being inherited?",
    "o": [
      "sealed",
      "final",
      "static",
      "private"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "abstract class Shape {\n    public abstract void Draw();\n}\n\nclass Circle : Shape {\n    public override void Draw() {\n        Console.WriteLine(\"Drawing Circle\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        Shape shape = new Circle();\n        shape.Draw();\n    }\n}",
    "o": [
      "Drawing Circle",
      "Drawing Shape",
      "Runtime error",
      "Compilation error"
    ]
  },
  {
    "q": "Which of the following correctly defines an interface in C#?",
    "o": [
      "interface IShape { void Draw(); }",
      "interface IShape() { void Draw(); }",
      "class IShape { void Draw(); }",
      "struct IShape { void Draw(); }"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "class Base {\n    public void Display() {\n        Console.WriteLine(\"Base Display\");\n    }\n}\n\nclass Derived : Base {\n    public new void Display() {\n        Console.WriteLine(\"Derived Display\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        Base obj = new Derived();\n        obj.Display();\n    }\n}",
    "o": [
      "Base Display",
      "Derived Display",
      "Compilation error",
      "Runtime error"
    ]
  },
  {
    "q": "Which of the following allows polymorphism in C#?",
    "o": [
      "virtual and override methods",
      "readonly fields",
      "const variables",
      "static constructors"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "class A {\n    public virtual void Show() {\n        Console.WriteLine(\"A.Show()\");\n    }\n}\n\nclass B : A {\n    public override void Show() {\n        Console.WriteLine(\"B.Show()\");\n    }\n}\n\nclass C : B {\n    public override void Show() {\n        Console.WriteLine(\"C.Show()\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        A obj = new C();\n        obj.Show();\n    }\n}",
    "o": [
      "C.Show()",
      "B.Show()",
      "A.Show()",
      "Compilation error"
    ]
  },
  {
    "q": "Which of the following allows a derived class to override a base class method in C#?",
    "o": [
      "The method in the base class must be marked as virtual",
      "The method in the base class must be marked as sealed",
      "The method in the base class must be marked as static",
      "The method in the base class must be marked as abstract"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "class Parent {\n    public virtual void Show() {\n        Console.WriteLine(\"Parent\");\n    }\n}\n\nclass Child : Parent {\n    public override void Show() {\n        Console.WriteLine(\"Child\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        Parent p = new Child();\n        p.Show();\n    }\n}",
    "o": [
      "Child",
      "Parent",
      "Compilation error",
      "Runtime error"
    ]
  },
  {
    "q": "Which of the following statements about abstract classes in C# is correct?",
    "o": [
      "An abstract class cannot be instantiated directly",
      "An abstract class must contain only abstract methods",
      "An abstract class cannot contain fields",
      "An abstract class cannot have a constructor"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "interface IDevice {\n    void Start();\n}\n\nclass Printer : IDevice {\n    public void Start() {\n        Console.WriteLine(\"Printer starting\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        IDevice device = new Printer();\n        device.Start();\n    }\n}",
    "o": [
      "Printer starting",
      "Device starting",
      "Compilation error",
      "Runtime error"
    ]
  },
  {
    "q": "Which of the following best describes a sealed method in C#?",
    "o": [
      "It prevents further overriding in derived classes",
      "It cannot be called from other classes",
      "It is automatically private",
      "It can only be called once"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "class Base {\n    public virtual void Greet() {\n        Console.WriteLine(\"Hello from Base\");\n    }\n}\n\nclass Mid : Base {\n    public override void Greet() {\n        Console.WriteLine(\"Hello from Mid\");\n    }\n}\n\nclass Final : Mid {\n    public override void Greet() {\n        Console.WriteLine(\"Hello from Final\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        Base obj = new Final();\n        obj.Greet();\n    }\n}",
    "o": [
      "Hello from Final",
      "Hello from Mid",
      "Hello from Base",
      "Compilation error"
    ]
  },
  {
    "q": "Which of the following is true about interfaces in C#?",
    "o": [
      "A class can implement multiple interfaces",
      "A class can inherit from multiple classes",
      "Interfaces can contain field members",
      "Interfaces cannot contain method declarations"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "class A {\n    public virtual void Display() {\n        Console.WriteLine(\"A\");\n    }\n}\n\nclass B : A {\n    public sealed override void Display() {\n        Console.WriteLine(\"B\");\n    }\n}\n\nclass C : B {\n    // public override void Display() { Console.WriteLine(\"C\"); } // This line would cause an error\n}\n\nclass Program {\n    static void Main() {\n        A obj = new B();\n        obj.Display();\n    }\n}",
    "o": [
      "B",
      "A",
      "C",
      "Compilation error"
    ]
  },
  {
    "q": "Which of the following is true about multilevel inheritance in C#?",
    "o": [
      "A derived class can act as a base class for another class",
      "Only two levels of inheritance are allowed",
      "C# does not support multilevel inheritance",
      "Only interfaces can use multilevel inheritance"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "abstract class Vehicle {\n    public abstract void Start();\n}\n\nclass Car : Vehicle {\n    public override void Start() {\n        Console.WriteLine(\"Car started\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        Vehicle v = new Car();\n        v.Start();\n    }\n}",
    "o": [
      "Car started",
      "Vehicle started",
      "Compilation error",
      "Runtime error"
    ]
  },
  {
    "q": "What happens if you try to override a non-virtual method in C#?",
    "o": [
      "Compilation error",
      "The method is overridden successfully",
      "Runtime error occurs",
      "It is treated as a virtual method"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "interface ILogger {\n    void Log(string message);\n}\n\nclass ConsoleLogger : ILogger {\n    public void Log(string message) {\n        Console.WriteLine(\"Log: \" + message);\n    }\n}\n\nclass Program {\n    static void Main() {\n        ILogger logger = new ConsoleLogger();\n        logger.Log(\"Hello World\");\n    }\n}",
    "o": [
      "Log: Hello World",
      "ConsoleLogger: Hello World",
      "ILogger: Hello World",
      "Compilation error"
    ]
  },
  {
    "q": "Which modifier must be used in the base class to allow method overriding in a derived class?",
    "o": [
      "virtual",
      "override",
      "sealed",
      "static"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "class A {\n    public virtual void Message() {\n        Console.WriteLine(\"A's message\");\n    }\n}\n\nclass B : A {\n    public override void Message() {\n        Console.WriteLine(\"B's message\");\n    }\n}\n\nclass C : B {\n    public override void Message() {\n        Console.WriteLine(\"C's message\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        A obj = new C();\n        obj.Message();\n    }\n}",
    "o": [
      "C's message",
      "B's message",
      "A's message",
      "Compilation error"
    ]
  },
  {
    "q": "Which of the following can be used to stop a method from being overridden further in the inheritance chain?",
    "o": [
      "sealed",
      "readonly",
      "const",
      "override"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "class Parent {\n    public void Show() {\n        Console.WriteLine(\"Parent Show\");\n    }\n}\n\nclass Child : Parent {\n    public new void Show() {\n        Console.WriteLine(\"Child Show\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        Parent obj = new Child();\n        obj.Show();\n    }\n}",
    "o": [
      "Parent Show",
      "Child Show",
      "Compilation error",
      "Runtime error"
    ]
  },
  {
    "q": "Which of the following statements about method overriding in C# is true?",
    "o": [
      "The base class method must be marked with 'virtual' and the derived class method with 'override'",
      "Any method in a derived class automatically overrides the base class method",
      "The 'override' keyword is optional when overriding",
      "A method marked as 'sealed' must be overridden"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "class Animal {\n    public virtual void MakeSound() {\n        Console.WriteLine(\"Some sound\");\n    }\n}\n\nclass Cat : Animal {\n    public override void MakeSound() {\n        Console.WriteLine(\"Meow\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        Animal a = new Cat();\n        a.MakeSound();\n    }\n}",
    "o": [
      "Meow",
      "Some sound",
      "Compilation error",
      "Animal sound"
    ]
  },
  {
    "q": "Which of the following is **not** allowed in an abstract class?",
    "o": [
      "Creating an instance of the abstract class",
      "Having non-abstract methods",
      "Using constructors",
      "Having access modifiers on members"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "interface IMovable {\n    void Move();\n}\n\nclass Robot : IMovable {\n    public void Move() {\n        Console.WriteLine(\"Robot moving\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        IMovable m = new Robot();\n        m.Move();\n    }\n}",
    "o": [
      "Robot moving",
      "Moving...",
      "Compilation error",
      "IMovable.Move"
    ]
  },
  {
    "q": "Which of the following statements about sealed classes is correct?",
    "o": [
      "A sealed class cannot be inherited",
      "A sealed class cannot contain methods",
      "A sealed class must be static",
      "A sealed class can only implement interfaces"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "class X {\n    public virtual void Show() {\n        Console.WriteLine(\"X\");\n    }\n}\n\nclass Y : X {\n    public override void Show() {\n        Console.WriteLine(\"Y\");\n    }\n}\n\nclass Z : Y {\n    public override void Show() {\n        Console.WriteLine(\"Z\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        X obj = new Y();\n        obj.Show();\n    }\n}",
    "o": [
      "Y",
      "Z",
      "X",
      "Compilation error"
    ]
  },
  {
    "q": "Which of the following keywords is used in C# to inherit from a base class?",
    "o": [
      ":",
      "extends",
      "inherits",
      "base"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "class A {\n    public virtual void Print() {\n        Console.WriteLine(\"Class A\");\n    }\n}\n\nclass B : A {\n    public sealed override void Print() {\n        Console.WriteLine(\"Class B\");\n    }\n}\n\nclass C : B {\n    // public override void Print() { Console.WriteLine(\"Class C\"); } // Not allowed\n}\n\nclass Program {\n    static void Main() {\n        A obj = new B();\n        obj.Print();\n    }\n}",
    "o": [
      "Class B",
      "Class A",
      "Class C",
      "Compilation error"
    ]
  },
  {
    "q": "Which keyword is used to prevent a class from being inherited in C#?",
    "o": [
      "sealed",
      "static",
      "final",
      "private"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "abstract class Shape {\n    public abstract void Draw();\n}\n\nclass Circle : Shape {\n    public override void Draw() {\n        Console.WriteLine(\"Drawing Circle\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        Shape shape = new Circle();\n        shape.Draw();\n    }\n}",
    "o": [
      "Drawing Circle",
      "Drawing Shape",
      "Compilation error",
      "Runtime error"
    ]
  },
  {
    "q": "Which of the following is true about interface members in C#?",
    "o": [
      "All interface members are implicitly public and abstract",
      "Interface methods can have default implementations",
      "Interface fields can be declared",
      "Interface members can be protected"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "class A {\n    public virtual void Print() {\n        Console.WriteLine(\"A\");\n    }\n}\n\nclass B : A {\n    public new void Print() {\n        Console.WriteLine(\"B\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        A obj = new B();\n        obj.Print();\n    }\n}",
    "o": [
      "A",
      "B",
      "Compilation error",
      "Runtime error"
    ]
  },
  {
    "q": "In C#, what will happen if a class inherits from two interfaces that have a method with the same signature?",
    "o": [
      "The class must implement the method only once",
      "It results in a compilation error",
      "It must inherit only one of the interfaces",
      "Method name must be changed in one interface"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "class Base {\n    public virtual void Speak() {\n        Console.WriteLine(\"Base speaking\");\n    }\n}\n\nclass Derived : Base {\n    public override void Speak() {\n        Console.WriteLine(\"Derived speaking\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        Base b = new Derived();\n        b.Speak();\n    }\n}",
    "o": [
      "Derived speaking",
      "Base speaking",
      "Compilation error",
      "Derived"
    ]
  },
  {
    "q": "Which of the following statements about virtual methods is correct?",
    "o": [
      "A virtual method can be overridden in any derived class",
      "Virtual methods must be static",
      "Virtual methods cannot have access modifiers",
      "A virtual method must be sealed"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "class Vehicle {\n    public virtual void Run() {\n        Console.WriteLine(\"Vehicle is running\");\n    }\n}\n\nclass Bike : Vehicle {\n    public override void Run() {\n        Console.WriteLine(\"Bike is running\");\n    }\n}\n\nclass Scooter : Bike {}\n\nclass Program {\n    static void Main() {\n        Vehicle v = new Scooter();\n        v.Run();\n    }\n}",
    "o": [
      "Bike is running",
      "Vehicle is running",
      "Scooter is running",
      "Compilation error"
    ]
  },
  {
    "q": "Which of the following statements best describes single inheritance in C#?",
    "o": [
      "A class inherits from one base class only",
      "A class inherits from multiple base classes",
      "A class cannot inherit from another class",
      "A class can only inherit from interfaces"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "class BaseClass {\n    public void Show() {\n        Console.WriteLine(\"Base Show\");\n    }\n}\n\nclass DerivedClass : BaseClass {\n    public void Display() {\n        Console.WriteLine(\"Derived Display\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        DerivedClass obj = new DerivedClass();\n        obj.Show();\n        obj.Display();\n    }\n}",
    "o": [
      "Base Show\nDerived Display",
      "Derived Display\nBase Show",
      "Compilation error",
      "Base Show"
    ]
  },
  {
    "q": "Which keyword is used in C# to override a virtual method from a base class?",
    "o": [
      "override",
      "new",
      "base",
      "sealed"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "abstract class Animal {\n    public abstract void Speak();\n}\n\nclass Dog : Animal {\n    public override void Speak() {\n        Console.WriteLine(\"Bark\");\n    }\n}\n\nclass Cat : Animal {\n    public override void Speak() {\n        Console.WriteLine(\"Meow\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        Animal animal = new Dog();\n        animal.Speak();\n    }\n}",
    "o": [
      "Bark",
      "Meow",
      "Speak",
      "Compilation error"
    ]
  },
  {
    "q": "Which of the following is TRUE about abstract classes in C#?",
    "o": [
      "They cannot be instantiated directly",
      "They must be sealed",
      "They cannot have any methods",
      "They cannot have constructors"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "class Base {\n    public virtual void Greet() {\n        Console.WriteLine(\"Hello from Base\");\n    }\n}\n\nclass Derived : Base {\n    public sealed override void Greet() {\n        Console.WriteLine(\"Hello from Derived\");\n    }\n}\n\nclass SubDerived : Derived {\n    // public override void Greet() { Console.WriteLine(\"Hello from SubDerived\"); } // Not allowed\n}\n\nclass Program {\n    static void Main() {\n        Base b = new Derived();\n        b.Greet();\n    }\n}",
    "o": [
      "Hello from Derived",
      "Hello from Base",
      "Compilation error",
      "Runtime error"
    ]
  },
  {
    "q": "Which of the following is allowed in a C# interface?",
    "o": [
      "Declaring methods without implementation",
      "Defining private fields",
      "Using constructors",
      "Implementing access modifiers"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "interface IWorker {\n    void Work();\n}\n\nclass Employee : IWorker {\n    public void Work() {\n        Console.WriteLine(\"Employee working\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        IWorker w = new Employee();\n        w.Work();\n    }\n}",
    "o": [
      "Employee working",
      "Worker working",
      "Compilation error",
      "Runtime error"
    ]
  },
  {
    "q": "Which of the following best describes multilevel inheritance in C#?",
    "o": [
      "A class is derived from a class which is also derived from another class",
      "A class implements multiple interfaces",
      "A class derives from two or more base classes",
      "A class inherits from a sealed class"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "class A {\n    public virtual void Show() {\n        Console.WriteLine(\"A\");\n    }\n}\n\nclass B : A {\n    public override void Show() {\n        Console.WriteLine(\"B\");\n    }\n}\n\nclass C : B {}\n\nclass Program {\n    static void Main() {\n        A obj = new C();\n        obj.Show();\n    }\n}",
    "o": [
      "B",
      "A",
      "C",
      "Compilation error"
    ]
  },
  {
    "q": "Which keyword is used in C# to stop further overriding of a method in derived classes?",
    "o": [
      "sealed",
      "final",
      "override",
      "static"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "interface IShape {\n    void Draw();\n}\n\nabstract class Shape : IShape {\n    public abstract void Draw();\n}\n\nclass Rectangle : Shape {\n    public override void Draw() {\n        Console.WriteLine(\"Drawing Rectangle\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        IShape shape = new Rectangle();\n        shape.Draw();\n    }\n}",
    "o": [
      "Drawing Rectangle",
      "Drawing Shape",
      "Drawing IShape",
      "Compilation error"
    ]
  },
  {
    "q": "Which of the following is a valid reason to use an abstract class over an interface in C#?",
    "o": [
      "To provide some common method implementations",
      "To allow multiple inheritance",
      "To enforce sealed behavior",
      "To prevent the use of constructors"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "class Vehicle {\n    public virtual void Start() {\n        Console.WriteLine(\"Vehicle started\");\n    }\n}\n\nclass Car : Vehicle {\n    public override void Start() {\n        Console.WriteLine(\"Car started\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        Vehicle v = new Car();\n        v.Start();\n    }\n}",
    "o": [
      "Car started",
      "Vehicle started",
      "Start",
      "Compilation error"
    ]
  },
  {
    "q": "Which of the following is TRUE about interfaces in C#?",
    "o": [
      "Interfaces support multiple inheritance",
      "Interfaces can have constructors",
      "Interfaces can contain private methods",
      "Interfaces cannot be inherited"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "class A {\n    public virtual void Display() {\n        Console.WriteLine(\"A\");\n    }\n}\n\nclass B : A {\n    public new void Display() {\n        Console.WriteLine(\"B\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        A a = new B();\n        a.Display();\n    }\n}",
    "o": [
      "A",
      "B",
      "AB",
      "Compilation error"
    ]
  },
  {
    "q": "Which of the following is required to override a method in a derived class in C#?",
    "o": [
      "The method in the base class must be marked as virtual",
      "The method must be static in the base class",
      "The method must be private in the base class",
      "The method must be abstract in the base class"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "class Parent {\n    public virtual void Show() {\n        Console.WriteLine(\"Parent\");\n    }\n}\n\nclass Child : Parent {\n    public override void Show() {\n        Console.WriteLine(\"Child\");\n    }\n}\n\nclass GrandChild : Child {}\n\nclass Program {\n    static void Main() {\n        Parent obj = new GrandChild();\n        obj.Show();\n    }\n}",
    "o": [
      "Child",
      "Parent",
      "GrandChild",
      "Compilation error"
    ]
  },
  {
    "q": "Which of the following modifiers prevents a method from being further overridden in a derived class?",
    "o": [
      "sealed",
      "override",
      "abstract",
      "virtual"
    ]
  },
  {
    "q": "What is the purpose of using 'new' keyword in method declaration in a derived class?",
    "o": [
      "To hide the base class method intentionally",
      "To override the base class method",
      "To call the base class constructor",
      "To make the method abstract"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "abstract class Printer {\n    public abstract void Print();\n}\n\nclass LaserPrinter : Printer {\n    public override void Print() {\n        Console.WriteLine(\"Laser printing...\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        Printer p = new LaserPrinter();\n        p.Print();\n    }\n}",
    "o": [
      "Laser printing...",
      "Inkjet printing...",
      "Printer",
      "Compilation error"
    ]
  },
  {
    "q": "In which of the following scenarios would you prefer using an abstract class over an interface in C#?",
    "o": [
      "When you want to provide some default behavior along with abstraction",
      "When multiple inheritance is necessary",
      "When all members must be implemented by the subclass",
      "When you want to restrict object creation"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "class X {\n    public virtual void Test() {\n        Console.WriteLine(\"X\");\n    }\n}\n\nclass Y : X {\n    public override void Test() {\n        Console.WriteLine(\"Y\");\n    }\n}\n\nclass Z : Y {\n    public new void Test() {\n        Console.WriteLine(\"Z\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        X obj = new Z();\n        obj.Test();\n    }\n}",
    "o": [
      "Y",
      "Z",
      "X",
      "Compilation error"
    ]
  },
  {
    "q": "Which of the following statements is TRUE about sealed classes in C#?",
    "o": [
      "A sealed class cannot be inherited",
      "A sealed class must be abstract",
      "A sealed class must implement an interface",
      "A sealed class cannot contain methods"
    ]
  },
  {
    "q": "Which of the following class declarations prevents further inheritance?",
    "o": [
      "sealed class Logger",
      "static class Logger",
      "abstract class Logger",
      "readonly class Logger"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "class Animal {\n    public virtual void Speak() {\n        Console.WriteLine(\"Animal sound\");\n    }\n}\n\nclass Dog : Animal {\n    public override void Speak() {\n        Console.WriteLine(\"Bark\");\n    }\n}\n\nclass Puppy : Dog {}\n\nclass Program {\n    static void Main() {\n        Animal pet = new Puppy();\n        pet.Speak();\n    }\n}",
    "o": [
      "Bark",
      "Animal sound",
      "Puppy sound",
      "Compilation error"
    ]
  },
  {
    "q": "Which keyword in C# is used to provide a new implementation for a method hiding the base method?",
    "o": [
      "new",
      "override",
      "sealed",
      "base"
    ]
  },
  {
    "q": "What happens when a class implements multiple interfaces that define the same method signature?",
    "o": [
      "The class must provide one implementation for the method",
      "The class cannot implement both interfaces",
      "The compiler throws an ambiguity error",
      "Only one interface can be implemented at a time"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "interface IPlayable {\n    void Play();\n}\n\ninterface IStoppable {\n    void Stop();\n}\n\nclass Media : IPlayable, IStoppable {\n    public void Play() {\n        Console.WriteLine(\"Playing\");\n    }\n    public void Stop() {\n        Console.WriteLine(\"Stopped\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        IPlayable m = new Media();\n        m.Play();\n    }\n}",
    "o": [
      "Playing",
      "Stopped",
      "Compilation error",
      "Nothing is printed"
    ]
  },
  {
    "q": "Which of the following statements about method overriding in C# is FALSE?",
    "o": [
      "A non-virtual method cannot be overridden",
      "The method signature must match exactly",
      "An overridden method can be sealed",
      "Override methods must be static"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "abstract class Shape {\n    public abstract void Draw();\n    public void Info() {\n        Console.WriteLine(\"Shape Info\");\n    }\n}\n\nclass Circle : Shape {\n    public override void Draw() {\n        Console.WriteLine(\"Drawing Circle\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        Shape s = new Circle();\n        s.Draw();\n        s.Info();\n    }\n}",
    "o": [
      "Drawing Circle\nShape Info",
      "Shape Info\nDrawing Circle",
      "Drawing Circle",
      "Compilation error"
    ]
  },
  {
    "q": "Which of the following scenarios best justifies using a sealed method?",
    "o": [
      "To prevent further overriding of a critical method in subclass",
      "To avoid the need for method implementation",
      "To hide the method from the base class",
      "To allow multiple overrides of the same method"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "class A {\n    public virtual void Display() {\n        Console.WriteLine(\"Class A\");\n    }\n}\n\nclass B : A {\n    public sealed override void Display() {\n        Console.WriteLine(\"Class B\");\n    }\n}\n\nclass C : B {\n    // public override void Display() {} // Not allowed\n}\n\nclass Program {\n    static void Main() {\n        A obj = new C();\n        obj.Display();\n    }\n}",
    "o": [
      "Class B",
      "Class A",
      "Compilation error",
      "Class C"
    ]
  },
  {
    "q": "Which of the following best defines the use of the 'sealed' keyword in a method declaration?",
    "o": [
      "It prevents the method from being overridden in any further derived class",
      "It hides the base class method using a new implementation",
      "It allows multiple inheritance for a class",
      "It automatically makes the method static"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "abstract class Writer {\n    public abstract void Write();\n}\n\nclass Pen : Writer {\n    public override void Write() {\n        Console.WriteLine(\"Writing with a Pen\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        Writer w = new Pen();\n        w.Write();\n    }\n}",
    "o": [
      "Writing with a Pen",
      "Writer",
      "Compilation error",
      "Pen"
    ]
  },
  {
    "q": "Which of the following is TRUE about abstract methods in C#?",
    "o": [
      "They must be overridden in non-abstract derived classes",
      "They can have a body in the base class",
      "They must be static",
      "They can be private"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "class Base {\n    public virtual void Print() {\n        Console.WriteLine(\"Base\");\n    }\n}\n\nclass Derived : Base {\n    public new void Print() {\n        Console.WriteLine(\"Derived\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        Base b = new Derived();\n        b.Print();\n    }\n}",
    "o": [
      "Base",
      "Derived",
      "Compilation error",
      "BaseDerived"
    ]
  },
  {
    "q": "Which keyword allows a derived class to call a base class constructor?",
    "o": [
      "base",
      "super",
      "this",
      "new"
    ]
  },
  {
    "q": "Which of the following is TRUE about C# interfaces?",
    "o": [
      "They can be implemented by multiple classes",
      "They can contain method implementations",
      "They can be instantiated directly",
      "They can only contain static members"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "interface IAnimal {\n    void Sound();\n}\n\nclass Dog : IAnimal {\n    public void Sound() {\n        Console.WriteLine(\"Bark\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        IAnimal animal = new Dog();\n        animal.Sound();\n    }\n}",
    "o": [
      "Bark",
      "Sound",
      "Animal",
      "Compilation error"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "class Vehicle {\n    public virtual void Start() {\n        Console.WriteLine(\"Vehicle started\");\n    }\n}\n\nclass Car : Vehicle {\n    public override void Start() {\n        Console.WriteLine(\"Car started\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        Vehicle v = new Car();\n        v.Start();\n    }\n}",
    "o": [
      "Car started",
      "Vehicle started",
      "Compilation error",
      "Runtime error"
    ]
  },
  {
    "q": "Which of the following statements about interfaces in C# is CORRECT?",
    "o": [
      "A class can implement multiple interfaces",
      "An interface can inherit from a class",
      "An interface can contain instance fields",
      "An interface must contain at least one method"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "abstract class Account {\n    public abstract void Deposit();\n}\n\nclass Savings : Account {\n    public override void Deposit() {\n        Console.WriteLine(\"Savings deposit\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        Account acc = new Savings();\n        acc.Deposit();\n    }\n}",
    "o": [
      "Savings deposit",
      "Account deposit",
      "Compilation error",
      "Deposit"
    ]
  },
  {
    "q": "Which of the following keywords is used to prevent a class from being inherited?",
    "o": [
      "sealed",
      "abstract",
      "readonly",
      "base"
    ]
  },
  {
    "q": "In a class hierarchy, which method can be overridden in a derived class?",
    "o": [
      "Only methods marked as virtual, abstract, or already overridden",
      "All public methods",
      "Only private methods",
      "Only static methods"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "class Animal {\n    public void Speak() {\n        Console.WriteLine(\"Generic sound\");\n    }\n}\n\nclass Cat : Animal {\n    public new void Speak() {\n        Console.WriteLine(\"Meow\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        Animal a = new Cat();\n        a.Speak();\n    }\n}",
    "o": [
      "Generic sound",
      "Meow",
      "Compilation error",
      "Runtime error"
    ]
  },
  {
    "q": "What is a key difference between abstract classes and interfaces in C#?",
    "o": [
      "Abstract classes can contain fields and implemented methods",
      "Interfaces can have constructors",
      "Interfaces can be instantiated",
      "Abstract classes must be static"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "interface IShape {\n    void Draw();\n}\n\nclass Rectangle : IShape {\n    public void Draw() {\n        Console.WriteLine(\"Drawing Rectangle\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        IShape shape = new Rectangle();\n        shape.Draw();\n    }\n}",
    "o": [
      "Drawing Rectangle",
      "Draw",
      "IShape",
      "Compilation error"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "class A {\n    public virtual void Show() {\n        Console.WriteLine(\"A\");\n    }\n}\n\nclass B : A {\n    public override void Show() {\n        Console.WriteLine(\"B\");\n    }\n}\n\nclass C : B {\n    public override void Show() {\n        Console.WriteLine(\"C\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        A obj = new C();\n        obj.Show();\n    }\n}",
    "o": [
      "C",
      "B",
      "A",
      "Compilation error"
    ]
  },
  {
    "q": "Which of the following is TRUE about the use of the 'override' keyword?",
    "o": [
      "It is used to override a virtual or abstract method from a base class",
      "It is used to hide a method from the base class",
      "It creates a new method unrelated to the base class method",
      "It can be used with static methods"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "interface IPrint {\n    void Print();\n}\n\nclass Document : IPrint {\n    public void Print() {\n        Console.WriteLine(\"Document printing\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        IPrint item = new Document();\n        item.Print();\n    }\n}",
    "o": [
      "Document printing",
      "Print",
      "IPrint",
      "Compilation error"
    ]
  },
  {
    "q": "What happens if a non-abstract class inherits an abstract class but does not implement all abstract members?",
    "o": [
      "A compilation error occurs",
      "The program runs normally",
      "The base class methods are automatically called",
      "The compiler treats it as an interface"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "class Base {\n    public virtual void Info() {\n        Console.WriteLine(\"Base Info\");\n    }\n}\n\nclass Derived : Base {\n    public sealed override void Info() {\n        Console.WriteLine(\"Derived Info\");\n    }\n}\n\nclass SubDerived : Derived {\n    // public override void Info() {} // Not allowed\n}\n\nclass Program {\n    static void Main() {\n        Base b = new SubDerived();\n        b.Info();\n    }\n}",
    "o": [
      "Derived Info",
      "Base Info",
      "Compilation error",
      "Runtime error"
    ]
  },
  {
    "q": "Which of the following is NOT a valid characteristic of an interface in C#?",
    "o": [
      "Interfaces can have constructors",
      "Interfaces can be inherited",
      "Interfaces can contain method signatures",
      "Interfaces can be implemented by multiple classes"
    ]
  },
  {
    "q": "Which keyword is used to call the base class constructor explicitly in a derived class?",
    "o": [
      "base",
      "super",
      "this",
      "override"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "class Parent {\n    public void Work() {\n        Console.WriteLine(\"Parent working\");\n    }\n}\n\nclass Child : Parent {\n    public new void Work() {\n        Console.WriteLine(\"Child working\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        Parent obj = new Child();\n        obj.Work();\n    }\n}",
    "o": [
      "Parent working",
      "Child working",
      "Compilation error",
      "Runtime error"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "class Animal {\n    public virtual void MakeSound() {\n        Console.WriteLine(\"Animal sound\");\n    }\n}\n\nclass Dog : Animal {\n    public override void MakeSound() {\n        Console.WriteLine(\"Bark\");\n    }\n}\n\nclass Puppy : Dog {}\n\nclass Program {\n    static void Main() {\n        Animal a = new Puppy();\n        a.MakeSound();\n    }\n}",
    "o": [
      "Bark",
      "Animal sound",
      "Puppy",
      "Compilation error"
    ]
  },
  {
    "q": "Which of the following correctly describes method hiding in C#?",
    "o": [
      "A derived class declares a method with the same name using the 'new' keyword",
      "A derived class overrides a virtual method",
      "A derived class declares the base method again without any keyword",
      "It is not supported in C#"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "abstract class Device {\n    public abstract void Operate();\n}\n\nclass Printer : Device {\n    public override void Operate() {\n        Console.WriteLine(\"Printing...\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        Device d = new Printer();\n        d.Operate();\n    }\n}",
    "o": [
      "Printing...",
      "Device",
      "Operate",
      "Compilation error"
    ]
  },
  {
    "q": "What happens if you attempt to override a non-virtual method in C#?",
    "o": [
      "A compilation error occurs",
      "The base method is automatically hidden",
      "The override is ignored at runtime",
      "The override works as expected"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "interface ILogger {\n    void Log();\n}\n\nclass FileLogger : ILogger {\n    public void Log() {\n        Console.WriteLine(\"Logging to file\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        ILogger logger = new FileLogger();\n        logger.Log();\n    }\n}",
    "o": [
      "Logging to file",
      "FileLogger",
      "ILogger",
      "Compilation error"
    ]
  },
  {
    "q": "Which of the following is TRUE about sealed classes in C#?",
    "o": [
      "They cannot be inherited",
      "They can be abstract",
      "They can only contain static members",
      "They must override all base methods"
    ]
  },
  {
    "q": "Which of the following correctly defines a multilevel inheritance structure?",
    "o": [
      "Class A â†’ Class B â†’ Class C",
      "Class A & Class B inherit Class C",
      "Class A implements two interfaces",
      "Class A inherits an interface"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "class Alpha {\n    public virtual void Display() {\n        Console.WriteLine(\"Alpha\");\n    }\n}\n\nclass Beta : Alpha {\n    public override void Display() {\n        Console.WriteLine(\"Beta\");\n    }\n}\n\nclass Gamma : Beta {\n    public new void Display() {\n        Console.WriteLine(\"Gamma\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        Alpha obj = new Gamma();\n        obj.Display();\n    }\n}",
    "o": [
      "Beta",
      "Gamma",
      "Alpha",
      "Compilation error"
    ]
  },
  {
    "q": "Which of the following statements about abstract classes is correct?",
    "o": [
      "Abstract classes cannot be instantiated directly",
      "Abstract classes must contain only abstract methods",
      "Abstract classes cannot have constructors",
      "Abstract classes cannot implement interfaces"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "abstract class Shape {\n    public abstract void Draw();\n    public void Display() {\n        Console.WriteLine(\"Display Shape\");\n    }\n}\n\nclass Circle : Shape {\n    public override void Draw() {\n        Console.WriteLine(\"Draw Circle\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        Shape s = new Circle();\n        s.Draw();\n        s.Display();\n    }\n}",
    "o": [
      "Draw Circle\nDisplay Shape",
      "Display Shape\nDraw Circle",
      "Draw Circle",
      "Compilation error"
    ]
  },
  {
    "q": "Which of the following is TRUE about a method marked as `sealed override`?",
    "o": [
      "It canâ€™t be further overridden in derived classes",
      "It hides the base class implementation",
      "It allows abstract behavior in derived classes",
      "It must be declared in an interface"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "class Person {\n    public virtual void Greet() {\n        Console.WriteLine(\"Hello from Person\");\n    }\n}\n\nclass Student : Person {\n    public override void Greet() {\n        Console.WriteLine(\"Hello from Student\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        Person p = new Student();\n        p.Greet();\n    }\n}",
    "o": [
      "Hello from Student",
      "Hello from Person",
      "Greet",
      "Compilation error"
    ]
  },
  {
    "q": "What will happen if a derived class does not implement all interface methods?",
    "o": [
      "The class must be marked as abstract",
      "It will compile without error",
      "The interface will be ignored",
      "The compiler will automatically implement them"
    ]
  },
  {
    "q": "Which of the following correctly explains the use of the `base` keyword?",
    "o": [
      "It allows access to members of the base class",
      "It is used to override base class methods",
      "It marks a class as the base class",
      "It restricts inheritance"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "class Engine {\n    public void Start() {\n        Console.WriteLine(\"Engine starts\");\n    }\n}\n\nclass Car : Engine {\n    public new void Start() {\n        Console.WriteLine(\"Car starts\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        Engine e = new Car();\n        e.Start();\n    }\n}",
    "o": [
      "Engine starts",
      "Car starts",
      "Compilation error",
      "Runtime error"
    ]
  },
  {
    "q": "Which of the following C# features supports polymorphism?",
    "o": [
      "Virtual and overridden methods",
      "Static constructors",
      "Readonly fields",
      "Partial classes"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "class Vehicle {\n    public virtual void Start() {\n        Console.WriteLine(\"Vehicle started\");\n    }\n}\n\nclass Bike : Vehicle {\n    public override void Start() {\n        Console.WriteLine(\"Bike started\");\n    }\n}\n\nclass Scooter : Bike {}\n\nclass Program {\n    static void Main() {\n        Vehicle v = new Scooter();\n        v.Start();\n    }\n}",
    "o": [
      "Bike started",
      "Vehicle started",
      "Scooter started",
      "Compilation error"
    ]
  },
  {
    "q": "Which of the following is TRUE about virtual methods in C#?",
    "o": [
      "They allow derived classes to override the base class implementation",
      "They must be implemented in every derived class",
      "They cannot have access modifiers",
      "They are used only in abstract classes"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "interface IMovable {\n    void Move();\n}\n\nclass Robot : IMovable {\n    public void Move() {\n        Console.WriteLine(\"Robot is moving\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        IMovable m = new Robot();\n        m.Move();\n    }\n}",
    "o": [
      "Robot is moving",
      "Move",
      "IMovable",
      "Compilation error"
    ]
  },
  {
    "q": "Which statement is FALSE regarding sealed methods in C#?",
    "o": [
      "They can be further overridden in derived classes",
      "They are used to stop further overriding",
      "They must override a virtual method",
      "They require the method to be marked override first"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "abstract class Base {\n    public abstract void Show();\n}\n\nclass Mid : Base {\n    public override void Show() {\n        Console.WriteLine(\"Mid Show\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        Base b = new Mid();\n        b.Show();\n    }\n}",
    "o": [
      "Mid Show",
      "Base",
      "Show",
      "Compilation error"
    ]
  },
  {
    "q": "What is required for a class to implement an interface?",
    "o": [
      "All interface members must be implemented",
      "Only one member must be implemented",
      "It must be abstract",
      "It must use the 'virtual' keyword"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "class Parent {\n    public void Display() {\n        Console.WriteLine(\"Parent Display\");\n    }\n}\n\nclass Child : Parent {\n    public new void Display() {\n        Console.WriteLine(\"Child Display\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        Child c = new Child();\n        ((Parent)c).Display();\n    }\n}",
    "o": [
      "Parent Display",
      "Child Display",
      "Compilation error",
      "Runtime error"
    ]
  },
  {
    "q": "Which of the following can be declared as both abstract and virtual in C#?",
    "o": [
      "Methods only",
      "Classes only",
      "Properties only",
      "Constructors only"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "class Base {\n    public virtual void Show() {\n        Console.WriteLine(\"Base Show\");\n    }\n}\n\nclass Derived : Base {\n    public sealed override void Show() {\n        Console.WriteLine(\"Derived Show\");\n    }\n}\n\nclass MoreDerived : Derived {\n    // public override void Show() { Console.WriteLine(\"MoreDerived Show\"); } // Not allowed\n}\n\nclass Program {\n    static void Main() {\n        Base b = new Derived();\n        b.Show();\n    }\n}",
    "o": [
      "Derived Show",
      "Base Show",
      "Compilation error",
      "MoreDerived Show"
    ]
  },
  {
    "q": "Which of the following is TRUE about abstract methods in C#?",
    "o": [
      "They must be overridden in derived non-abstract classes",
      "They can contain a method body",
      "They can be static",
      "They can be sealed"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "interface IShape {\n    void Draw();\n}\n\nabstract class Shape : IShape {\n    public abstract void Draw();\n}\n\nclass Square : Shape {\n    public override void Draw() {\n        Console.WriteLine(\"Draw Square\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        IShape shape = new Square();\n        shape.Draw();\n    }\n}",
    "o": [
      "Draw Square",
      "Draw Shape",
      "IShape",
      "Compilation error"
    ]
  },
  {
    "q": "Which statement is FALSE regarding interfaces in C#?",
    "o": [
      "Interfaces can contain method implementations (prior to C# 8.0)",
      "Interfaces support multiple inheritance",
      "Interfaces can be inherited by classes",
      "A class can implement multiple interfaces"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "class Animal {\n    public virtual void Sound() {\n        Console.WriteLine(\"Some sound\");\n    }\n}\n\nclass Cat : Animal {\n    public override void Sound() {\n        Console.WriteLine(\"Meow\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        Animal a = new Cat();\n        a.Sound();\n    }\n}",
    "o": [
      "Meow",
      "Some sound",
      "Animal",
      "Compilation error"
    ]
  },
  {
    "q": "What happens when a class inherits from a sealed class?",
    "o": [
      "A compile-time error is generated",
      "It compiles but throws a runtime exception",
      "The sealed modifier is ignored",
      "It results in undefined behavior"
    ]
  },
  {
    "q": "Which keyword combination is used to prevent a method from being overridden again?",
    "o": [
      "sealed override",
      "override new",
      "sealed new",
      "override final"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "class A {\n    public virtual void Display() {\n        Console.WriteLine(\"Class A\");\n    }\n}\n\nclass B : A {\n    public override void Display() {\n        Console.WriteLine(\"Class B\");\n    }\n}\n\nclass C : B {\n    public override void Display() {\n        Console.WriteLine(\"Class C\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        A obj = new C();\n        obj.Display();\n    }\n}",
    "o": [
      "Class C",
      "Class B",
      "Class A",
      "Compilation error"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "class Animal {\n    public void Speak() {\n        Console.WriteLine(\"Animal speaks\");\n    }\n}\n\nclass Dog : Animal {\n    public void Speak() {\n        Console.WriteLine(\"Dog barks\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        Animal a = new Dog();\n        a.Speak();\n    }\n}",
    "o": [
      "Animal speaks",
      "Dog barks",
      "Compilation error",
      "Runtime error"
    ]
  },
  {
    "q": "Which of the following best describes multilevel inheritance in C#?",
    "o": [
      "A class inherits from a class, which in turn inherits from another class",
      "A class implements multiple interfaces",
      "A class inherits from multiple base classes",
      "A class inherits and implements at the same time"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "abstract class Device {\n    public abstract void Start();\n}\n\nclass Printer : Device {\n    public override void Start() {\n        Console.WriteLine(\"Printer starting\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        Device d = new Printer();\n        d.Start();\n    }\n}",
    "o": [
      "Printer starting",
      "Device starting",
      "Compilation error",
      "Start"
    ]
  },
  {
    "q": "Which keyword is used to explicitly hide a base class method in C#?",
    "o": [
      "new",
      "override",
      "sealed",
      "base"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "interface ILogger {\n    void Log();\n}\n\nclass ConsoleLogger : ILogger {\n    public void Log() {\n        Console.WriteLine(\"Logging to console\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        ILogger logger = new ConsoleLogger();\n        logger.Log();\n    }\n}",
    "o": [
      "Logging to console",
      "ILogger",
      "ConsoleLogger",
      "Compilation error"
    ]
  },
  {
    "q": "What is the purpose of the sealed class modifier in C#?",
    "o": [
      "To prevent further inheritance",
      "To ensure all methods are static",
      "To mark a class as an interface",
      "To allow partial implementation"
    ]
  },
  {
    "q": "Which of the following is valid for method overriding in C#?",
    "o": [
      "Base method must be marked as virtual or abstract",
      "Derived method must use the new keyword",
      "Only private methods can be overridden",
      "Overridden methods can have different parameter types"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "class X {\n    public virtual void Show() {\n        Console.WriteLine(\"X Show\");\n    }\n}\n\nclass Y : X {\n    public override void Show() {\n        Console.WriteLine(\"Y Show\");\n    }\n}\n\nclass Z : Y {\n    public override void Show() {\n        Console.WriteLine(\"Z Show\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        X obj = new Z();\n        obj.Show();\n    }\n}",
    "o": [
      "Z Show",
      "Y Show",
      "X Show",
      "Compilation error"
    ]
  },
  {
    "q": "Which of the following is a correct use of an abstract class in C#?",
    "o": [
      "An abstract class can define both abstract and non-abstract members",
      "An abstract class must implement all interface methods",
      "An abstract class can be instantiated directly",
      "An abstract class cannot contain fields"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "class Base {\n    public virtual void Show() {\n        Console.WriteLine(\"Base class\");\n    }\n}\n\nclass Derived : Base {\n    public override void Show() {\n        Console.WriteLine(\"Derived class\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        Base obj = new Derived();\n        obj.Show();\n    }\n}",
    "o": [
      "Derived class",
      "Base class",
      "Show",
      "Compilation error"
    ]
  },
  {
    "q": "What does the 'sealed' keyword do when used on a method?",
    "o": [
      "Prevents further overriding in derived classes",
      "Marks the method for garbage collection",
      "Makes the method abstract",
      "Allows overriding only in interfaces"
    ]
  },
  {
    "q": "Which of the following scenarios demonstrates method hiding in C#?",
    "o": [
      "A derived class defines a method with the same name and signature using the 'new' keyword",
      "A base class method is marked abstract and overridden in the derived class",
      "A virtual method is overridden using the override keyword",
      "A sealed method is declared in a derived class"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "class A {\n    public virtual void Display() {\n        Console.WriteLine(\"A Display\");\n    }\n}\n\nclass B : A {\n    public sealed override void Display() {\n        Console.WriteLine(\"B Display\");\n    }\n}\n\nclass C : B {\n    // public override void Display() { Console.WriteLine(\"C Display\"); } // Not allowed\n}\n\nclass Program {\n    static void Main() {\n        A obj = new B();\n        obj.Display();\n    }\n}",
    "o": [
      "B Display",
      "A Display",
      "C Display",
      "Compilation error"
    ]
  },
  {
    "q": "Which of the following allows multiple inheritance of behavior in C#?",
    "o": [
      "Interfaces",
      "Abstract classes",
      "Sealed classes",
      "Static classes"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "abstract class Transport {\n    public abstract void Move();\n}\n\nclass Car : Transport {\n    public override void Move() {\n        Console.WriteLine(\"Car is moving\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        Transport t = new Car();\n        t.Move();\n    }\n}",
    "o": [
      "Car is moving",
      "Transport moving",
      "Move",
      "Compilation error"
    ]
  },
  {
    "q": "In C#, what happens if a class implements an interface but does not define all of its members?",
    "o": [
      "The class must be declared abstract",
      "The program throws a runtime exception",
      "The interface members are ignored",
      "The compiler automatically fills in default implementations"
    ]
  },
  {
    "q": "Which of the following is TRUE about virtual methods in C#?",
    "o": [
      "They allow derived classes to override the method's behavior",
      "They are required in all classes that use inheritance",
      "They can only be defined inside interfaces",
      "They cannot be overridden in sealed classes"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "class A {\n    public virtual void Print() {\n        Console.WriteLine(\"A\");\n    }\n}\n\nclass B : A {\n    public new void Print() {\n        Console.WriteLine(\"B\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        A obj = new B();\n        obj.Print();\n    }\n}",
    "o": [
      "A",
      "B",
      "AB",
      "Compilation error"
    ]
  },
  {
    "q": "Which of the following statements about abstract classes in C# is correct?",
    "o": [
      "An abstract class cannot be instantiated directly",
      "An abstract class must contain only abstract methods",
      "An abstract class cannot have a constructor",
      "Abstract classes can only inherit from interfaces"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "interface IAnimal {\n    void Speak();\n}\n\nclass Dog : IAnimal {\n    public void Speak() {\n        Console.WriteLine(\"Woof\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        IAnimal a = new Dog();\n        a.Speak();\n    }\n}",
    "o": [
      "Woof",
      "Speak",
      "IAnimal",
      "Compilation error"
    ]
  },
  {
    "q": "What is the purpose of marking a method as `sealed` in an overridden method?",
    "o": [
      "To prevent further overriding in derived classes",
      "To hide the method from derived classes",
      "To make the method abstract",
      "To force all derived classes to override it"
    ]
  },
  {
    "q": "What will be the output of the following code?",
    "c": "class A {\n    public A() {\n        Console.WriteLine(\"A constructor\");\n    }\n}\n\nclass B : A {\n    public B() {\n        Console.WriteLine(\"B constructor\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        B b = new B();\n    }\n}",
    "o": [
      "A constructor\nB constructor",
      "B constructor\nA constructor",
      "Only B constructor",
      "Only A constructor"
    ]
  },
  {
    "q": "Which of the following is TRUE about sealed classes in C#?",
    "o": [
      "They cannot be inherited",
      "They cannot implement interfaces",
      "They must be abstract",
      "They must have at least one virtual method"
    ]
  },
  {
    "q": "Which of the following best describes interface inheritance in C#?",
    "o": [
      "A class can inherit multiple interfaces",
      "A class can inherit only one interface",
      "An interface can only inherit from one other interface",
      "An interface must contain method implementations"
    ]
  },
  {
    "q": "Which of the following best explains why we use virtual methods in C#?",
    "o": [
      "To allow derived classes to override the behavior of a base class method",
      "To hide a method in the base class",
      "To mark a method as sealed",
      "To implement interfaces"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "class Parent {\n    public virtual void Show() {\n        Console.WriteLine(\"Parent\");\n    }\n}\n\nclass Child : Parent {\n    public override void Show() {\n        Console.WriteLine(\"Child\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        Parent p = new Child();\n        p.Show();\n    }\n}",
    "o": [
      "Child",
      "Parent",
      "ChildParent",
      "Compilation error"
    ]
  },
  {
    "q": "Which keyword is required to override a method from the base class?",
    "o": [
      "override",
      "virtual",
      "sealed",
      "abstract"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "abstract class Writer {\n    public abstract void Write();\n}\n\nclass HtmlWriter : Writer {\n    public override void Write() {\n        Console.WriteLine(\"Writing HTML\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        Writer w = new HtmlWriter();\n        w.Write();\n    }\n}",
    "o": [
      "Writing HTML",
      "Writer",
      "Write",
      "Compilation error"
    ]
  },
  {
    "q": "Which statement about interfaces in C# is correct?",
    "o": [
      "A class can implement multiple interfaces",
      "Interfaces can contain implementation code",
      "Interfaces can be instantiated directly",
      "An interface cannot be inherited by another interface"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "class A {\n    public virtual void Display() {\n        Console.WriteLine(\"A\");\n    }\n}\n\nclass B : A {\n    public sealed override void Display() {\n        Console.WriteLine(\"B\");\n    }\n}\n\nclass C : B {\n    // public override void Display() { Console.WriteLine(\"C\"); } // Illegal\n}\n\nclass Program {\n    static void Main() {\n        A obj = new B();\n        obj.Display();\n    }\n}",
    "o": [
      "B",
      "A",
      "C",
      "Compilation error"
    ]
  },
  {
    "q": "Which of the following correctly defines a sealed class?",
    "o": [
      "sealed class Logger { }",
      "public class sealed Logger { }",
      "class Logger : sealed { }",
      "abstract sealed class Logger { }"
    ]
  },
  {
    "q": "What is the purpose of marking a class as abstract in C#?",
    "o": [
      "To prevent instantiation and enforce method implementation in derived classes",
      "To allow multiple inheritance",
      "To seal the class for inheritance",
      "To provide static methods only"
    ]
  },
  {
    "q": "Which of the following is true about multilevel inheritance in C#?",
    "o": [
      "A class can inherit from a class that itself inherits from another class",
      "C# does not support multilevel inheritance",
      "Only interfaces support multilevel inheritance",
      "Multilevel inheritance requires abstract classes"
    ]
  },
  {
    "q": "What will be the output of the following code?",
    "c": "class A {\n    public A() {\n        Console.WriteLine(\"A Constructor\");\n    }\n}\nclass B : A {\n    public B() {\n        Console.WriteLine(\"B Constructor\");\n    }\n}\nclass C : B {\n    public C() {\n        Console.WriteLine(\"C Constructor\");\n    }\n}\nclass Program {\n    static void Main() {\n        C obj = new C();\n    }\n}",
    "o": [
      "A Constructor\nB Constructor\nC Constructor",
      "C Constructor\nB Constructor\nA Constructor",
      "C Constructor",
      "A Constructor\nC Constructor"
    ]
  },
  {
    "q": "Which statement is true about method overriding in C#?",
    "o": [
      "The method in the base class must be marked as virtual to be overridden",
      "Overriding a non-virtual method is allowed",
      "The override keyword is optional",
      "Only private methods can be overridden"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "class Animal {\n    public virtual void Sound() {\n        Console.WriteLine(\"Generic sound\");\n    }\n}\nclass Dog : Animal {\n    public override void Sound() {\n        Console.WriteLine(\"Bark\");\n    }\n}\nclass Program {\n    static void Main() {\n        Animal a = new Dog();\n        a.Sound();\n    }\n}",
    "o": [
      "Bark",
      "Generic sound",
      "Sound",
      "Compilation error"
    ]
  },
  {
    "q": "Which of the following keywords prevents a method from being overridden in any subclass?",
    "o": [
      "sealed",
      "override",
      "virtual",
      "readonly"
    ]
  },
  {
    "q": "Which of the following is TRUE about interfaces in C#?",
    "o": [
      "An interface cannot contain any implementation prior to C# 8.0",
      "Interfaces can be instantiated directly",
      "Interfaces must inherit from a base class",
      "Interfaces can contain private fields"
    ]
  },
  {
    "q": "What will be the result of the following code execution?",
    "c": "interface IDevice {\n    void Start();\n}\nclass Phone : IDevice {\n    public void Start() {\n        Console.WriteLine(\"Phone starting\");\n    }\n}\nclass Program {\n    static void Main() {\n        IDevice device = new Phone();\n        device.Start();\n    }\n}",
    "o": [
      "Phone starting",
      "IDevice",
      "Start",
      "Compilation error"
    ]
  },
  {
    "q": "Which of the following is correct regarding sealed classes?",
    "o": [
      "They cannot be used as base classes",
      "They must be abstract",
      "They can only contain static methods",
      "They can only inherit from interfaces"
    ]
  },
  {
    "q": "Which of the following correctly demonstrates single inheritance in C#?",
    "o": [
      "class B : A { }",
      "class B, A { }",
      "class B inherits A { }",
      "class B : A, C { }"
    ]
  },
  {
    "q": "What will be the output of the following code?",
    "c": "abstract class Shape {\n    public abstract void Draw();\n}\n\nclass Circle : Shape {\n    public override void Draw() {\n        Console.WriteLine(\"Drawing Circle\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        Shape s = new Circle();\n        s.Draw();\n    }\n}",
    "o": [
      "Drawing Circle",
      "Circle",
      "Shape",
      "Compilation Error"
    ]
  },
  {
    "q": "Which keyword ensures that a method can be overridden in C#?",
    "o": [
      "virtual",
      "sealed",
      "override",
      "abstract"
    ]
  },
  {
    "q": "Which of the following correctly defines an interface in C#?",
    "o": [
      "interface IReadable { void Read(); }",
      "interface IReadable() { void Read(); }",
      "class IReadable { void Read(); }",
      "abstract IReadable { void Read(); }"
    ]
  },
  {
    "q": "What will be printed by the following program?",
    "c": "class Base {\n    public virtual void Greet() {\n        Console.WriteLine(\"Hello from Base\");\n    }\n}\n\nclass Derived : Base {\n    public override void Greet() {\n        Console.WriteLine(\"Hello from Derived\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        Base obj = new Derived();\n        obj.Greet();\n    }\n}",
    "o": [
      "Hello from Derived",
      "Hello from Base",
      "Hello from BaseDerived",
      "Compilation Error"
    ]
  },
  {
    "q": "Which of the following is true about a sealed method?",
    "o": [
      "It cannot be further overridden in any derived class",
      "It must be abstract",
      "It must be static",
      "It must be private"
    ]
  },
  {
    "q": "What is the result of this code execution?",
    "c": "interface ILogger {\n    void Log();\n}\n\nclass FileLogger : ILogger {\n    public void Log() {\n        Console.WriteLine(\"Logging to file\");\n    }\n}\n\nclass Program {\n    static void Main() {\n        ILogger logger = new FileLogger();\n        logger.Log();\n    }\n}",
    "o": [
      "Logging to file",
      "ILogger",
      "Log",
      "Compilation Error"
    ]
  },
  {
    "q": "Which of the following statements about multilevel inheritance is correct?",
    "o": [
      "It allows a class to inherit from a class that already inherits another class",
      "It is not allowed in C#",
      "It only works with interfaces",
      "It must use sealed classes"
    ]
  },
  {
    "q": "Which of the following scenarios best represents multilevel inheritance in C#?",
    "o": [
      "Class C inherits from B, and B inherits from A",
      "Class A and B both inherit from the same base class",
      "Class A inherits from multiple classes",
      "Class A implements multiple interfaces"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "class A {\n    public virtual void Display() {\n        Console.WriteLine(\"Class A\");\n    }\n}\nclass B : A {\n    public override void Display() {\n        Console.WriteLine(\"Class B\");\n    }\n}\nclass C : B { }\nclass Program {\n    static void Main() {\n        A obj = new C();\n        obj.Display();\n    }\n}",
    "o": [
      "Class B",
      "Class A",
      "Class C",
      "Compilation Error"
    ]
  },
  {
    "q": "Which of these modifiers prevents a class from being inherited?",
    "o": [
      "sealed",
      "private",
      "static",
      "override"
    ]
  },
  {
    "q": "Which of the following statements about abstract classes is true?",
    "o": [
      "Abstract classes can contain both abstract and concrete methods",
      "Abstract classes cannot have constructors",
      "All methods in an abstract class must be abstract",
      "Abstract classes can be instantiated directly"
    ]
  },
  {
    "q": "What will the following code print?",
    "c": "interface IShape {\n    void Area();\n}\nclass Square : IShape {\n    public void Area() {\n        Console.WriteLine(\"Area of Square\");\n    }\n}\nclass Program {\n    static void Main() {\n        IShape shape = new Square();\n        shape.Area();\n    }\n}",
    "o": [
      "Area of Square",
      "IShape",
      "Square",
      "Compilation error"
    ]
  },
  {
    "q": "What is the purpose of the 'override' keyword in C#?",
    "o": [
      "To redefine a virtual method from a base class",
      "To hide a method from the base class",
      "To seal a method from further overriding",
      "To define an interface method"
    ]
  },
  {
    "q": "Which of the following best describes interface inheritance?",
    "o": [
      "A class implements one or more interfaces and provides method definitions",
      "A class inherits method bodies from interfaces",
      "Interfaces can inherit from classes",
      "Interfaces cannot be used in inheritance"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "class Alpha {\n    public virtual void Speak() {\n        Console.WriteLine(\"Alpha\");\n    }\n}\nclass Beta : Alpha {\n    public override void Speak() {\n        Console.WriteLine(\"Beta\");\n    }\n}\nclass Gamma : Beta {\n    public override void Speak() {\n        base.Speak();\n        Console.WriteLine(\"Gamma\");\n    }\n}\nclass Program {\n    static void Main() {\n        Alpha obj = new Gamma();\n        obj.Speak();\n    }\n}",
    "o": [
      "Beta\nGamma",
      "Gamma",
      "Alpha\nGamma",
      "Beta"
    ]
  },
  {
    "q": "Which of the following correctly demonstrates method overriding in C#?",
    "o": [
      "A derived class defines a method with the same signature as a virtual method in the base class using the override keyword",
      "A derived class redefines a static method from the base class",
      "A derived class hides a method using the new keyword",
      "A base class defines a private method and the derived class defines the same"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "abstract class Transport {\n    public abstract void Move();\n}\nclass Car : Transport {\n    public override void Move() {\n        Console.WriteLine(\"Car is moving\");\n    }\n}\nclass Program {\n    static void Main() {\n        Transport t = new Car();\n        t.Move();\n    }\n}",
    "o": [
      "Car is moving",
      "Transport is moving",
      "Move",
      "Compilation Error"
    ]
  },
  {
    "q": "Which of the following statements is correct about sealed methods?",
    "o": [
      "They cannot be overridden in any further derived class",
      "They must be declared in a sealed class",
      "They can only be used with interfaces",
      "They must be static"
    ]
  },
  {
    "q": "Which of the following is valid multilevel inheritance syntax in C#?",
    "o": [
      "class C : B { } // B already inherits A",
      "class C : B, A { }",
      "class C inherits B inherits A",
      "class C -> B -> A"
    ]
  },
  {
    "q": "What will the following code print?",
    "c": "interface IAnimal {\n    void MakeSound();\n}\nclass Dog : IAnimal {\n    public void MakeSound() {\n        Console.WriteLine(\"Bark\");\n    }\n}\nclass Program {\n    static void Main() {\n        IAnimal animal = new Dog();\n        animal.MakeSound();\n    }\n}",
    "o": [
      "Bark",
      "Dog",
      "MakeSound",
      "Compilation Error"
    ]
  },
  {
    "q": "Which of the following keywords is used to prevent further inheritance of a class?",
    "o": [
      "sealed",
      "final",
      "private",
      "static"
    ]
  },
  {
    "q": "What is the purpose of the abstract keyword in C#?",
    "o": [
      "To define a method without implementation that must be overridden in a derived class",
      "To create sealed methods",
      "To implement interface methods",
      "To mark a method as virtual"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "class A {\n    public virtual void Show() {\n        Console.WriteLine(\"A\");\n    }\n}\nclass B : A {\n    public sealed override void Show() {\n        Console.WriteLine(\"B\");\n    }\n}\nclass C : B {\n    // public override void Show() { Console.WriteLine(\"C\"); } // Not allowed\n}\nclass Program {\n    static void Main() {\n        A obj = new C();\n        obj.Show();\n    }\n}",
    "o": [
      "B",
      "C",
      "A",
      "Compilation Error"
    ]
  },
  {
    "q": "Which of the following correctly implements an interface method in C#?",
    "o": [
      "public class Printer : IDevice { public void Print() { Console.WriteLine(\"Printing...\"); } }",
      "public class Printer : IDevice { void Print(); }",
      "public interface Printer : IDevice { void Print(); }",
      "public class Printer implements IDevice { void Print(); }"
    ]
  },
  {
    "q": "What will the following code output?",
    "c": "class A {\n    public virtual void Display() { Console.WriteLine(\"A Display\"); }\n}\nclass B : A {\n    public override void Display() { Console.WriteLine(\"B Display\"); }\n}\nclass Program {\n    static void Main() {\n        A obj = new B();\n        obj.Display();\n    }\n}",
    "o": [
      "B Display",
      "A Display",
      "Display",
      "Compilation Error"
    ]
  },
  {
    "q": "Which of the following is true about abstract methods in C#?",
    "o": [
      "They must be overridden in a derived class",
      "They can have a body in the abstract class",
      "They can be private",
      "They cannot be declared in abstract classes"
    ]
  },
  {
    "q": "Which keyword is used to define that a class cannot be inherited?",
    "o": [
      "sealed",
      "override",
      "abstract",
      "readonly"
    ]
  },
  {
    "q": "What will be printed by the following code?",
    "c": "class Vehicle {\n    public virtual void Start() { Console.WriteLine(\"Vehicle Starting\"); }\n}\nclass Car : Vehicle {\n    public override void Start() { Console.WriteLine(\"Car Starting\"); }\n}\nclass ElectricCar : Car {\n    public new void Start() { Console.WriteLine(\"Electric Car Starting\"); }\n}\nclass Program {\n    static void Main() {\n        Vehicle v = new ElectricCar();\n        v.Start();\n    }\n}",
    "o": [
      "Car Starting",
      "Electric Car Starting",
      "Vehicle Starting",
      "Compilation Error"
    ]
  },
  {
    "q": "Which of the following allows multiple inheritance of behavior in C#?",
    "o": [
      "Implementing multiple interfaces",
      "Inheriting from multiple classes",
      "Using multiple sealed classes",
      "Defining multiple base classes"
    ]
  },
  {
    "q": "Which of the following is true about a method declared as sealed?",
    "o": [
      "It cannot be overridden in any subclass",
      "It must be abstract",
      "It must be static",
      "It can only be used in interfaces"
    ]
  },
  {
    "q": "What will the following program output?",
    "c": "abstract class Notification {\n    public abstract void Alert();\n}\nclass EmailNotification : Notification {\n    public override void Alert() {\n        Console.WriteLine(\"Email Alert\");\n    }\n}\nclass Program {\n    static void Main() {\n        Notification n = new EmailNotification();\n        n.Alert();\n    }\n}",
    "o": [
      "Email Alert",
      "Notification Alert",
      "Alert",
      "Compilation Error"
    ]
  },
  {
    "q": "Which of the following keywords is required to allow a method to be overridden in C#?",
    "o": [
      "virtual",
      "override",
      "sealed",
      "abstract"
    ]
  },
  {
    "q": "What will be the output of this code?",
    "c": "class Base {\n    public virtual void Show() {\n        Console.WriteLine(\"Base Show\");\n    }\n}\nclass Derived : Base {\n    public override void Show() {\n        Console.WriteLine(\"Derived Show\");\n    }\n}\nclass Program {\n    static void Main() {\n        Base b = new Derived();\n        b.Show();\n    }\n}",
    "o": [
      "Derived Show",
      "Base Show",
      "Show",
      "Compilation Error"
    ]
  },
  {
    "q": "Which of the following best describes a sealed class?",
    "o": [
      "A class that cannot be inherited",
      "A class that cannot be instantiated",
      "A class that must be abstract",
      "A class that only implements interfaces"
    ]
  },
  {
    "q": "What is true about a class that implements an interface?",
    "o": [
      "It must implement all members of the interface",
      "It can skip implementing optional methods",
      "It inherits the methods' bodies automatically",
      "It must be declared abstract"
    ]
  },
  {
    "q": "What does the following code output?",
    "c": "abstract class Animal {\n    public abstract void Speak();\n}\nclass Dog : Animal {\n    public override void Speak() {\n        Console.WriteLine(\"Woof\");\n    }\n}\nclass Program {\n    static void Main() {\n        Animal a = new Dog();\n        a.Speak();\n    }\n}",
    "o": [
      "Woof",
      "Speak",
      "Dog",
      "Compilation Error"
    ]
  },
  {
    "q": "Which of the following allows a derived class to replace a base class implementation?",
    "o": [
      "Overriding a virtual method",
      "Declaring a method as static",
      "Hiding a method with the new keyword",
      "Using a constructor"
    ]
  },
  {
    "q": "What is the effect of declaring a method as sealed in a class?",
    "o": [
      "It prevents further overriding of that method in derived classes",
      "It forces all derived classes to override it",
      "It makes the method abstract",
      "It hides the base class method"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "class Parent {\n    public virtual void Info() {\n        Console.WriteLine(\"Parent Info\");\n    }\n}\nclass Child : Parent {\n    public override void Info() {\n        Console.WriteLine(\"Child Info\");\n    }\n}\nclass GrandChild : Child { }\nclass Program {\n    static void Main() {\n        Parent p = new GrandChild();\n        p.Info();\n    }\n}",
    "o": [
      "Child Info",
      "Parent Info",
      "GrandChild Info",
      "Compilation Error"
    ]
  },
  {
    "q": "Which of the following C# features enables run-time polymorphism?",
    "o": [
      "Method overriding using virtual and override keywords",
      "Method overloading within the same class",
      "Using multiple constructors",
      "Operator overloading"
    ]
  },
  {
    "q": "What is the output of this C# program?",
    "c": "class A {\n    public virtual void Print() { Console.WriteLine(\"A\"); }\n}\nclass B : A {\n    public override void Print() { Console.WriteLine(\"B\"); }\n}\nclass C : B { }\nclass Program {\n    static void Main() {\n        A obj = new C();\n        obj.Print();\n    }\n}",
    "o": [
      "B",
      "A",
      "C",
      "Print"
    ]
  },
  {
    "q": "Which of the following is true about interfaces in C#?",
    "o": [
      "They can be implemented by multiple unrelated classes",
      "They can contain field definitions",
      "They can have constructors",
      "They must inherit from abstract classes"
    ]
  },
  {
    "q": "What does the 'sealed' keyword do when applied to a method?",
    "o": [
      "Prevents the method from being overridden further in derived classes",
      "Prevents the method from being overloaded",
      "Allows only one usage of the method in inheritance",
      "Forces the method to be implemented in the current class"
    ]
  },
  {
    "q": "What is the result of this code snippet?",
    "c": "interface IMessage {\n    void Send();\n}\nclass Email : IMessage {\n    public void Send() {\n        Console.WriteLine(\"Sending Email\");\n    }\n}\nclass Program {\n    static void Main() {\n        IMessage msg = new Email();\n        msg.Send();\n    }\n}",
    "o": [
      "Sending Email",
      "Email",
      "IMessage",
      "Compilation Error"
    ]
  },
  {
    "q": "Which of the following is valid for multilevel inheritance in C#?",
    "o": [
      "A class derives from another derived class",
      "A class inherits from multiple base classes",
      "A class inherits from two interfaces with the same method",
      "Two classes inherit from the same base class"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "class Base {\n    public virtual void Greet() { Console.WriteLine(\"Hello from Base\"); }\n}\nclass Mid : Base {\n    public sealed override void Greet() { Console.WriteLine(\"Hello from Mid\"); }\n}\nclass Final : Mid {\n    // public override void Greet() => Console.WriteLine(\"Hello from Final\"); // Not allowed\n}\nclass Program {\n    static void Main() {\n        Base b = new Final();\n        b.Greet();\n    }\n}",
    "o": [
      "Hello from Mid",
      "Hello from Final",
      "Hello from Base",
      "Compilation Error"
    ]
  },
  {
    "q": "Why would you use an abstract class instead of an interface?",
    "o": [
      "To provide some shared implementation while enforcing method overrides",
      "To avoid method overriding",
      "To allow multiple inheritance of base class",
      "Because interfaces cannot be used with inheritance"
    ]
  },
  {
    "q": "Which of the following correctly defines a sealed class in C#?",
    "o": [
      "sealed class Logger { }",
      "abstract sealed class Logger { }",
      "class sealed Logger { }",
      "Logger sealed class { }"
    ]
  },
  {
    "q": "What is the output of the following C# code?",
    "c": "class Animal {\n    public virtual void Speak() {\n        Console.WriteLine(\"Animal sound\");\n    }\n}\nclass Dog : Animal {\n    public override void Speak() {\n        Console.WriteLine(\"Bark\");\n    }\n}\nclass Program {\n    static void Main() {\n        Animal a = new Dog();\n        a.Speak();\n    }\n}",
    "o": [
      "Bark",
      "Animal sound",
      "Speak",
      "Dog"
    ]
  },
  {
    "q": "Which of the following best describes method overriding in C#?",
    "o": [
      "Redefining a base class virtual method in a derived class using 'override'",
      "Writing a method with the same name but different parameters",
      "Creating a static version of an inherited method",
      "Declaring a method abstract in a concrete class"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "abstract class Shape {\n    public abstract void Draw();\n}\nclass Circle : Shape {\n    public override void Draw() {\n        Console.WriteLine(\"Drawing Circle\");\n    }\n}\nclass Program {\n    static void Main() {\n        Shape s = new Circle();\n        s.Draw();\n    }\n}",
    "o": [
      "Drawing Circle",
      "Circle",
      "Draw",
      "Compilation Error"
    ]
  },
  {
    "q": "What will happen if a class inherits from a sealed class?",
    "o": [
      "A compile-time error will occur",
      "The class will become sealed too",
      "The program will throw a runtime exception",
      "The method of the base class will become virtual"
    ]
  },
  {
    "q": "Which keyword is used in a base class to allow a method to be overridden?",
    "o": [
      "virtual",
      "sealed",
      "override",
      "base"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "interface IPlay {\n    void Start();\n}\nclass Game : IPlay {\n    public void Start() {\n        Console.WriteLine(\"Game started\");\n    }\n}\nclass Program {\n    static void Main() {\n        IPlay p = new Game();\n        p.Start();\n    }\n}",
    "o": [
      "Game started",
      "Start",
      "Game",
      "Compilation Error"
    ]
  },
  {
    "q": "Which of the following statements is TRUE about abstract classes in C#?",
    "o": [
      "An abstract class can have both abstract and concrete methods",
      "An abstract class must only contain abstract methods",
      "An abstract class cannot contain constructors",
      "You can create an instance of an abstract class"
    ]
  },
  {
    "q": "Which statement is correct regarding multilevel inheritance in C#?",
    "o": [
      "A derived class can act as a base class for another class",
      "C# does not support multilevel inheritance",
      "Multilevel inheritance is only possible with interfaces",
      "It requires the base class to be abstract"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "class A {\n    public virtual void Display() {\n        Console.WriteLine(\"A\");\n    }\n}\nclass B : A {\n    public override void Display() {\n        Console.WriteLine(\"B\");\n    }\n}\nclass C : B { }\nclass Program {\n    static void Main() {\n        A obj = new C();\n        obj.Display();\n    }\n}",
    "o": [
      "B",
      "A",
      "C",
      "Display"
    ]
  },
  {
    "q": "Which of the following is true about the 'override' keyword in C#?",
    "o": [
      "It is used to provide a new implementation of a virtual method in a derived class",
      "It is used to hide a method from the base class",
      "It makes a method abstract in the base class",
      "It prevents a method from being overridden"
    ]
  },
  {
    "q": "What does the following code print?",
    "c": "abstract class Base {\n    public abstract void Work();\n}\nclass Worker : Base {\n    public override void Work() {\n        Console.WriteLine(\"Working hard\");\n    }\n}\nclass Program {\n    static void Main() {\n        Base b = new Worker();\n        b.Work();\n    }\n}",
    "o": [
      "Working hard",
      "Worker",
      "Work",
      "Base"
    ]
  },
  {
    "q": "Which of the following is NOT true about interfaces in C#?",
    "o": [
      "Interfaces can contain constructors",
      "Interfaces can be inherited by classes",
      "Interfaces only contain method declarations",
      "A class can implement multiple interfaces"
    ]
  },
  {
    "q": "What happens when you mark a method as 'sealed override'?",
    "o": [
      "It cannot be overridden further in any subclass",
      "It must be overridden in the current class",
      "It is a compile-time error",
      "It becomes an abstract method"
    ]
  },
  {
    "q": "What is the output of this program?",
    "c": "interface IPrinter {\n    void Print();\n}\nclass Document : IPrinter {\n    public void Print() {\n        Console.WriteLine(\"Printing Document\");\n    }\n}\nclass Program {\n    static void Main() {\n        IPrinter p = new Document();\n        p.Print();\n    }\n}",
    "o": [
      "Printing Document",
      "Document",
      "Print",
      "Interface"
    ]
  },
  {
    "q": "Why would a developer use a sealed class?",
    "o": [
      "To prevent other classes from inheriting it",
      "To force all methods to be virtual",
      "To create abstract methods",
      "To allow multiple inheritance"
    ]
  },
  {
    "q": "Which of the following is required to override a method in a derived class?",
    "o": [
      "The base class method must be marked as 'virtual'",
      "The method must be private in the base class",
      "The derived class must be abstract",
      "The base class must implement an interface"
    ]
  },
  {
    "q": "What is the output of the following program?",
    "c": "class Vehicle {\n    public virtual void Start() {\n        Console.WriteLine(\"Vehicle started\");\n    }\n}\nclass Car : Vehicle {\n    public override void Start() {\n        Console.WriteLine(\"Car started\");\n    }\n}\nclass Program {\n    static void Main() {\n        Vehicle v = new Car();\n        v.Start();\n    }\n}",
    "o": [
      "Car started",
      "Vehicle started",
      "Start",
      "Program"
    ]
  },
  {
    "q": "Which statement about abstract classes is true?",
    "o": [
      "They can have both abstract and non-abstract methods",
      "They cannot have any method implementation",
      "They can be instantiated directly",
      "They are always static"
    ]
  },
  {
    "q": "What is the role of the 'sealed' keyword when applied to a class?",
    "o": [
      "It prevents other classes from inheriting it",
      "It makes the class abstract",
      "It hides the class from reflection",
      "It prevents method overloading"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "interface IShape {\n    void Draw();\n}\nclass Rectangle : IShape {\n    public void Draw() {\n        Console.WriteLine(\"Drawing Rectangle\");\n    }\n}\nclass Program {\n    static void Main() {\n        IShape shape = new Rectangle();\n        shape.Draw();\n    }\n}",
    "o": [
      "Drawing Rectangle",
      "Rectangle",
      "Shape",
      "Draw"
    ]
  },
  {
    "q": "What does it mean when a method is marked with 'override sealed'?",
    "o": [
      "It cannot be overridden by further derived classes",
      "It must be overridden again in a subclass",
      "It is hidden from derived classes",
      "It is implicitly abstract"
    ]
  },
  {
    "q": "Which keyword is used to allow polymorphic behavior in C#?",
    "o": [
      "virtual",
      "static",
      "sealed",
      "readonly"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "abstract class Base {\n    public abstract void Log();\n}\nclass Derived : Base {\n    public override void Log() {\n        Console.WriteLine(\"Logging from Derived\");\n    }\n}\nclass Program {\n    static void Main() {\n        Base b = new Derived();\n        b.Log();\n    }\n}",
    "o": [
      "Logging from Derived",
      "Base",
      "Derived",
      "Log"
    ]
  },
  {
    "q": "Which of the following statements about interfaces in C# is correct?",
    "o": [
      "A class can implement multiple interfaces",
      "A class can inherit multiple interfaces and classes",
      "An interface can contain fields",
      "Interfaces can be instantiated directly"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "class A {\n    public virtual void Show() {\n        Console.WriteLine(\"A\");\n    }\n}\nclass B : A {\n    public override void Show() {\n        Console.WriteLine(\"B\");\n    }\n}\nclass C : B {\n    public new void Show() {\n        Console.WriteLine(\"C\");\n    }\n}\nclass Program {\n    static void Main() {\n        A obj = new C();\n        obj.Show();\n    }\n}",
    "o": [
      "B",
      "C",
      "A",
      "Compilation Error"
    ]
  },
  {
    "q": "Which keyword combination prevents a method from being further overridden?",
    "o": [
      "sealed override",
      "override sealed",
      "sealed virtual",
      "final override"
    ]
  },
  {
    "q": "What is the purpose of marking a method as 'virtual' in a base class?",
    "o": [
      "To allow derived classes to override the method",
      "To prevent the method from being inherited",
      "To create an interface",
      "To implement static polymorphism"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "abstract class Report {\n    public abstract void Generate();\n}\nclass SalesReport : Report {\n    public override void Generate() {\n        Console.WriteLine(\"Sales Report Generated\");\n    }\n}\nclass Program {\n    static void Main() {\n        Report r = new SalesReport();\n        r.Generate();\n    }\n}",
    "o": [
      "Sales Report Generated",
      "Report",
      "Generate",
      "Compilation Error"
    ]
  },
  {
    "q": "Which of these is true regarding abstract classes?",
    "o": [
      "They cannot be instantiated directly",
      "They cannot contain implemented methods",
      "They must inherit from interfaces",
      "They must be sealed"
    ]
  },
  {
    "q": "What will be the result if you try to inherit from a sealed class?",
    "o": [
      "A compile-time error will occur",
      "A runtime exception will be thrown",
      "The derived class will become sealed",
      "The compiler will generate a warning"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "interface IAnimal {\n    void MakeSound();\n}\nclass Dog : IAnimal {\n    public void MakeSound() {\n        Console.WriteLine(\"Woof\");\n    }\n}\nclass Program {\n    static void Main() {\n        IAnimal a = new Dog();\n        a.MakeSound();\n    }\n}",
    "o": [
      "Woof",
      "Dog",
      "MakeSound",
      "Bark"
    ]
  },
  {
    "q": "What is one key difference between abstract classes and interfaces in C#?",
    "o": [
      "Abstract classes can have fields, interfaces cannot",
      "Interfaces can contain constructors, abstract classes cannot",
      "Interfaces support multiple inheritance, abstract classes do not",
      "Abstract classes cannot have any implemented methods"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "class A {\n    public virtual void Show() {\n        Console.WriteLine(\"Class A\");\n    }\n}\nclass B : A {\n    public override void Show() {\n        Console.WriteLine(\"Class B\");\n    }\n}\nclass C : B {\n    public override void Show() {\n        Console.WriteLine(\"Class C\");\n    }\n}\nclass Program {\n    static void Main() {\n        A obj = new C();\n        obj.Show();\n    }\n}",
    "o": [
      "Class C",
      "Class B",
      "Class A",
      "Show"
    ]
  },
  {
    "q": "Which of the following is a characteristic of method overriding?",
    "o": [
      "The method signatures must match exactly",
      "The method must be marked as static in the base class",
      "The return type must always be void",
      "Only private methods can be overridden"
    ]
  },
  {
    "q": "What will the following code print?",
    "c": "abstract class Message {\n    public abstract void Print();\n}\nclass TextMessage : Message {\n    public override void Print() {\n        Console.WriteLine(\"Text Message\");\n    }\n}\nclass Program {\n    static void Main() {\n        Message msg = new TextMessage();\n        msg.Print();\n    }\n}",
    "o": [
      "Text Message",
      "Message",
      "Print",
      "Text"
    ]
  },
  {
    "q": "Which of these is NOT allowed in C#?",
    "o": [
      "Inheriting from more than one class",
      "Implementing multiple interfaces",
      "Using sealed with override",
      "Overriding a virtual method"
    ]
  },
  {
    "q": "What does the 'sealed' keyword do when applied to a class?",
    "o": [
      "Prevents any other class from inheriting it",
      "Forces derived classes to override all methods",
      "Makes all members static",
      "Marks a method for overriding"
    ]
  },
  {
    "q": "What is the output of this program?",
    "c": "interface ILogger {\n    void Log();\n}\nclass FileLogger : ILogger {\n    public void Log() {\n        Console.WriteLine(\"Logging to file\");\n    }\n}\nclass Program {\n    static void Main() {\n        ILogger logger = new FileLogger();\n        logger.Log();\n    }\n}",
    "o": [
      "Logging to file",
      "FileLogger",
      "Log",
      "ILogger"
    ]
  },
  {
    "q": "What happens if a derived class fails to override an abstract method?",
    "o": [
      "The derived class must also be marked abstract",
      "The program will compile but throw an error at runtime",
      "The method will be ignored in execution",
      "The compiler will automatically generate a default implementation"
    ]
  },
  {
    "q": "What is the correct way to prevent a method from being overridden in further derived classes?",
    "o": [
      "Use 'sealed' with the override keyword",
      "Declare the method as static",
      "Mark the method as abstract",
      "Remove the 'virtual' keyword"
    ]
  },
  {
    "q": "What is the output of this C# program?",
    "c": "class Parent {\n    public virtual void Display() {\n        Console.WriteLine(\"Parent class\");\n    }\n}\nclass Child : Parent {\n    public override void Display() {\n        Console.WriteLine(\"Child class\");\n    }\n}\nclass Program {\n    static void Main() {\n        Parent obj = new Child();\n        obj.Display();\n    }\n}",
    "o": [
      "Child class",
      "Parent class",
      "Display",
      "Compile error"
    ]
  },
  {
    "q": "Which of the following is true about interfaces in C#?",
    "o": [
      "Interfaces cannot contain any implementation in C# versions before 8.0",
      "Interfaces can have constructors",
      "Interfaces support access modifiers for methods",
      "Interfaces are instantiated directly"
    ]
  },
  {
    "q": "What will be the output of the code?",
    "c": "sealed class FinalClass {\n    public void Show() {\n        Console.WriteLine(\"This is a sealed class\");\n    }\n}\nclass Program {\n    static void Main() {\n        FinalClass fc = new FinalClass();\n        fc.Show();\n    }\n}",
    "o": [
      "This is a sealed class",
      "FinalClass",
      "Show",
      "Compilation error"
    ]
  },
  {
    "q": "Which of the following statements about multilevel inheritance is correct?",
    "o": [
      "It involves a class deriving from a class which is itself a derived class",
      "It is not supported in C#",
      "It requires all classes to be abstract",
      "It only works with interfaces"
    ]
  },
  {
    "q": "What will be the output?",
    "c": "abstract class Animal {\n    public abstract void Speak();\n}\nclass Dog : Animal {\n    public override void Speak() {\n        Console.WriteLine(\"Bark\");\n    }\n}\nclass Program {\n    static void Main() {\n        Animal a = new Dog();\n        a.Speak();\n    }\n}",
    "o": [
      "Bark",
      "Animal",
      "Dog",
      "Speak"
    ]
  },
  {
    "q": "Which modifier must be used in the base class to allow derived classes to override a method?",
    "o": [
      "virtual",
      "sealed",
      "abstract",
      "override"
    ]
  },
  {
    "q": "What is true about a class that implements an interface?",
    "o": [
      "It must provide implementation for all members of the interface",
      "It must be marked abstract",
      "It must inherit from another interface",
      "It can implement only one interface at a time"
    ]
  },
  {
    "q": "Which of the following allows polymorphic behavior in C#?",
    "o": [
      "Method overriding using virtual and override keywords",
      "Using sealed methods",
      "Declaring constructors private",
      "Declaring variables as static"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "class A {\n    public virtual void Show() {\n        Console.WriteLine(\"A\");\n    }\n}\nclass B : A {\n    public sealed override void Show() {\n        Console.WriteLine(\"B\");\n    }\n}\nclass C : B {\n    // public override void Show() => Console.WriteLine(\"C\"); // Not allowed\n}\nclass Program {\n    static void Main() {\n        A obj = new B();\n        obj.Show();\n    }\n}",
    "o": [
      "B",
      "C",
      "A",
      "Compilation error"
    ]
  },
  {
    "q": "Which keyword is used to define an abstract method in C#?",
    "o": [
      "abstract",
      "virtual",
      "override",
      "sealed"
    ]
  },
  {
    "q": "What happens if a derived class does not implement all members of an interface it inherits?",
    "o": [
      "The derived class must be declared abstract",
      "It will compile with warnings",
      "The interface is ignored",
      "The missing members are automatically added"
    ]
  },
  {
    "q": "What is the output of the following program?",
    "c": "interface IShape {\n    void Draw();\n}\nclass Circle : IShape {\n    public void Draw() {\n        Console.WriteLine(\"Drawing Circle\");\n    }\n}\nclass Program {\n    static void Main() {\n        IShape shape = new Circle();\n        shape.Draw();\n    }\n}",
    "o": [
      "Drawing Circle",
      "Circle",
      "Draw",
      "Shape"
    ]
  },
  {
    "q": "Which of the following is a valid reason to use a sealed class?",
    "o": [
      "To prevent further inheritance and enhance security",
      "To allow multiple inheritance",
      "To enable method overloading",
      "To define custom exceptions"
    ]
  },
  {
    "q": "What is the output of this program?",
    "c": "class Base {\n    public virtual void Print() {\n        Console.WriteLine(\"Base\");\n    }\n}\nclass Derived : Base {\n    public override void Print() {\n        Console.WriteLine(\"Derived\");\n    }\n}\nclass MoreDerived : Derived {\n    public new void Print() {\n        Console.WriteLine(\"MoreDerived\");\n    }\n}\nclass Program {\n    static void Main() {\n        Base obj = new MoreDerived();\n        obj.Print();\n    }\n}",
    "o": [
      "Derived",
      "MoreDerived",
      "Base",
      "Print"
    ]
  },
  {
    "q": "Which of the following correctly describes method hiding in C#?",
    "o": [
      "The derived method hides the base method using the 'new' keyword",
      "The derived method replaces the base method automatically",
      "It overrides the base method",
      "The method is marked as sealed"
    ]
  },
  {
    "q": "Which keyword in C# is used to indicate that a method can be overridden in a derived class?",
    "o": [
      "virtual",
      "override",
      "sealed",
      "abstract"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "class Base {\n    public virtual void Greet() {\n        Console.WriteLine(\"Hello from Base\");\n    }\n}\nclass Sub : Base {\n    public override void Greet() {\n        Console.WriteLine(\"Hello from Sub\");\n    }\n}\nclass Program {\n    static void Main() {\n        Base b = new Sub();\n        b.Greet();\n    }\n}",
    "o": [
      "Hello from Sub",
      "Hello from Base",
      "Greet",
      "Sub"
    ]
  },
  {
    "q": "Which of the following is NOT allowed in C#?",
    "o": [
      "Multiple class inheritance",
      "Multilevel inheritance",
      "Method overriding",
      "Interface implementation"
    ]
  },
  {
    "q": "What is the correct use of the 'sealed' keyword in C#?",
    "o": [
      "To prevent further inheritance of a class or overriding of a method",
      "To mark a method as abstract",
      "To create a constant field",
      "To indicate a method is overloaded"
    ]
  },
  {
    "q": "What will the following code print?",
    "c": "abstract class Animal {\n    public abstract void Sound();\n}\nclass Cat : Animal {\n    public override void Sound() {\n        Console.WriteLine(\"Meow\");\n    }\n}\nclass Program {\n    static void Main() {\n        Animal a = new Cat();\n        a.Sound();\n    }\n}",
    "o": [
      "Meow",
      "Sound",
      "Animal",
      "Cat"
    ]
  },
  {
    "q": "Which of these statements is true about interfaces in C#?",
    "o": [
      "Interfaces define method signatures without implementations (prior to C# 8.0)",
      "Interfaces can have fields",
      "Interfaces cannot be inherited",
      "Interfaces are sealed by default"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "class Parent {\n    public virtual void Print() {\n        Console.WriteLine(\"Parent\");\n    }\n}\nclass Child : Parent {\n    public new void Print() {\n        Console.WriteLine(\"Child\");\n    }\n}\nclass Program {\n    static void Main() {\n        Parent p = new Child();\n        p.Print();\n    }\n}",
    "o": [
      "Parent",
      "Child",
      "Print",
      "Compile error"
    ]
  },
  {
    "q": "What is required of a class that inherits from an abstract class in C#?",
    "o": [
      "It must implement all abstract members unless it is also abstract",
      "It must override all non-virtual methods",
      "It must be marked sealed",
      "It cannot define its own methods"
    ]
  }
]