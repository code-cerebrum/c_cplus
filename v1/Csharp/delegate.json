[
  {
    "q": "What is a delegate in C#?",
    "o": [
      "A type that represents references to methods with a particular parameter list and return type.",
      "A variable used to store classes.",
      "An access modifier for class methods.",
      "A special type of loop in C#."
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "c": "delegate void MyDelegate(string msg);\n\nclass Program\n{\n    static void Greet(string message)\n    {\n        Console.WriteLine(\"Hello \" + message);\n    }\n\n    static void Main()\n    {\n        MyDelegate del = Greet;\n        del(\"John\");\n    }\n}",
    "o": [
      "Hello John",
      "Hi John",
      "Greet John",
      "Compile-time error"
    ]
  },
  {
    "q": "Which of the following is a valid way to declare an event in C#?",
    "o": [
      "public event EventHandler MyEvent;",
      "public Event MyEvent;",
      "event void MyEvent;",
      "void event MyEvent;"
    ]
  },
  {
    "q": "What is the output of the following code snippet demonstrating multicast delegates?",
    "c": "delegate void PrintMessage();\n\nclass Program\n{\n    static void Hello() => Console.WriteLine(\"Hello\");\n    static void World() => Console.WriteLine(\"World\");\n\n    static void Main()\n    {\n        PrintMessage p = Hello;\n        p += World;\n        p();\n    }\n}",
    "o": [
      "Hello\nWorld",
      "World\nHello",
      "HelloWorld",
      "Only Hello"
    ]
  },
  {
    "q": "What is an anonymous method in C#?",
    "o": [
      "A method without a name, defined using the delegate keyword.",
      "A method without a return type.",
      "A method without parameters.",
      "A method declared inside another method."
    ]
  },
  {
    "q": "Which of the following syntax correctly uses a lambda expression in C#?",
    "o": [
      "(x, y) => x + y",
      "x =>> x + y",
      "(x, y) :=> x + y",
      "lambda(x, y) => x + y"
    ]
  },
  {
    "q": "What will be the output of the following code using a lambda expression?",
    "c": "using System;\n\nclass Program\n{\n    delegate int Operation(int x, int y);\n\n    static void Main()\n    {\n        Operation add = (a, b) => a + b;\n        Console.WriteLine(add(3, 4));\n    }\n}",
    "o": [
      "7",
      "34",
      "3",
      "Compile-time error"
    ]
  },
  {
    "q": "Which statement about multicast delegates is correct?",
    "o": [
      "They can hold references to more than one method.",
      "They can hold only one method at a time.",
      "They are only used with events.",
      "They cannot return any value."
    ]
  },
  {
    "q": "What is the purpose of an event handler in C#?",
    "o": [
      "To define a method that will be called when an event is raised.",
      "To create a new event.",
      "To delete an existing event.",
      "To prevent the event from executing."
    ]
  },
  {
    "q": "What is the output of the following code with an anonymous method?",
    "c": "delegate void ShowMessage(string msg);\n\nclass Program\n{\n    static void Main()\n    {\n        ShowMessage show = delegate(string name)\n        {\n            Console.WriteLine(\"Hi \" + name);\n        };\n\n        show(\"Alex\");\n    }\n}",
    "o": [
      "Hi Alex",
      "Hello Alex",
      "Welcome Alex",
      "Hi"
    ]
  },
  {
    "q": "Which keyword is used to define a delegate in C#?",
    "o": [
      "delegate",
      "function",
      "event",
      "handler"
    ]
  },
  {
    "q": "What will the following code print?",
    "c": "delegate void Notify();\n\nclass Program {\n    static void First() => Console.WriteLine(\"First\");\n    static void Second() => Console.WriteLine(\"Second\");\n\n    static void Main() {\n        Notify notify = First;\n        notify += Second;\n        notify();\n    }\n}",
    "o": [
      "First\nSecond",
      "Second\nFirst",
      "First",
      "Second"
    ]
  },
  {
    "q": "Which of the following best describes a multicast delegate?",
    "o": [
      "A delegate that holds references to multiple methods.",
      "A delegate that can only be used once.",
      "A delegate that must return a value.",
      "A delegate used only with static methods."
    ]
  },
  {
    "q": "How are events typically used in C#?",
    "o": [
      "To notify subscribed methods when something of interest occurs.",
      "To create threads.",
      "To pause program execution.",
      "To handle file input/output."
    ]
  },
  {
    "q": "Which of the following is a correct lambda expression syntax for squaring a number?",
    "o": [
      "x => x * x",
      "(x) => x * x",
      "() => x * x",
      "x :=> x * x"
    ]
  },
  {
    "q": "What is the output of this lambda-based delegate example?",
    "c": "using System;\n\nclass Program {\n    delegate bool CheckEven(int number);\n    static void Main() {\n        CheckEven isEven = n => n % 2 == 0;\n        Console.WriteLine(isEven(4));\n    }\n}",
    "o": [
      "True",
      "False",
      "0",
      "4"
    ]
  },
  {
    "q": "What is a key feature of anonymous methods in C#?",
    "o": [
      "They don’t require a name and can be assigned directly to a delegate.",
      "They must always return void.",
      "They must have the same name as the delegate.",
      "They cannot be used as event handlers."
    ]
  },
  {
    "q": "Which of the following can be used as an event handler method signature in C#?",
    "o": [
      "void Handler(object sender, EventArgs e)",
      "int Handler()",
      "void Handler()",
      "Handler(object e)"
    ]
  },
  {
    "q": "What will be printed by the following code?",
    "c": "delegate int Calc(int x);\n\nclass Program {\n    static void Main() {\n        Calc square = delegate(int num) { return num * num; };\n        Console.WriteLine(square(6));\n    }\n}",
    "o": [
      "36",
      "6",
      "12",
      "Compile-time error"
    ]
  },
  {
    "q": "What is the advantage of using lambda expressions over anonymous methods?",
    "o": [
      "Lambda expressions are more concise and readable.",
      "Lambda expressions support only static methods.",
      "Anonymous methods allow more control than lambda expressions.",
      "Lambda expressions require more memory."
    ]
  },
  {
    "q": "What is the main requirement for a method to be assigned to a delegate?",
    "o": [
      "It must have the same signature as the delegate.",
      "It must be static.",
      "It must return void.",
      "It must have no parameters."
    ]
  },
  {
    "q": "What is the output of the following multicast delegate code?",
    "c": "delegate void Notify();\n\nclass Program {\n    static void A() => Console.Write(\"A \");\n    static void B() => Console.Write(\"B \");\n\n    static void Main() {\n        Notify notify = A;\n        notify += B;\n        notify += A;\n        notify();\n    }\n}",
    "o": [
      "A B A ",
      "A A B ",
      "B A A ",
      "A B "
    ]
  },
  {
    "q": "Which of the following is NOT true about events in C#?",
    "o": [
      "Events can be invoked directly from outside the class where they are declared.",
      "Events are based on delegates.",
      "Events help implement the observer pattern.",
      "Events are typically used in UI programming."
    ]
  },
  {
    "q": "Which syntax correctly declares a delegate that takes an int and returns a bool?",
    "o": [
      "public delegate bool Check(int value);",
      "bool delegate Check(int value);",
      "delegate Check bool(int value);",
      "delegate int Check(bool value);"
    ]
  },
  {
    "q": "What will the following lambda expression return?",
    "c": "Func<int, int, int> multiply = (x, y) => x * y;\nConsole.WriteLine(multiply(3, 5));",
    "o": [
      "15",
      "8",
      "35",
      "0"
    ]
  },
  {
    "q": "How are events different from delegates in C#?",
    "o": [
      "Events provide a layer of encapsulation and cannot be invoked outside the declaring class.",
      "Delegates cannot refer to multiple methods.",
      "Events cannot use anonymous methods.",
      "Delegates are only used in console applications."
    ]
  },
  {
    "q": "What is the output of this code involving an event handler?",
    "c": "class Button {\n    public event EventHandler Click;\n    public void SimulateClick() {\n        Click?.Invoke(this, EventArgs.Empty);\n    }\n}\n\nclass Program {\n    static void Main() {\n        Button btn = new Button();\n        btn.Click += (s, e) => Console.WriteLine(\"Clicked!\");\n        btn.SimulateClick();\n    }\n}",
    "o": [
      "Clicked!",
      "Click",
      "Error",
      "Nothing"
    ]
  },
  {
    "q": "Which of the following is true about anonymous methods in C#?",
    "o": [
      "They are defined using the `delegate` keyword without a method name.",
      "They cannot capture variables from the outer scope.",
      "They must be static.",
      "They are obsolete and replaced by lambda expressions."
    ]
  },
  {
    "q": "What happens if a multicast delegate has a return type and multiple methods are attached?",
    "o": [
      "Only the return value of the last method is returned.",
      "It throws an exception.",
      "All return values are combined.",
      "The first method’s return value is used."
    ]
  },
  {
    "q": "Which delegate type would you use for an event that doesn’t require any event data?",
    "o": [
      "EventHandler",
      "Func<T>",
      "Action<T>",
      "Predicate<T>"
    ]
  },
  {
    "q": "What will happen if an event has no subscribers and is invoked?",
    "o": [
      "Nothing happens; it safely returns without error.",
      "It throws a NullReferenceException.",
      "It logs a warning.",
      "It calls a default handler."
    ]
  },
  {
    "q": "Which of the following best describes the purpose of lambda expressions in C#?",
    "o": [
      "They provide a concise way to define anonymous functions.",
      "They replace all delegates.",
      "They can only be used inside loops.",
      "They are used for handling exceptions."
    ]
  },
  {
    "q": "What does the following code output?",
    "c": "delegate int Calculate(int x);\n\nclass Program {\n    static void Main() {\n        Calculate calc = delegate(int x) { return x + 10; };\n        Console.WriteLine(calc(5));\n    }\n}",
    "o": [
      "15",
      "10",
      "5",
      "Compile-time error"
    ]
  },
  {
    "q": "Which of these is a correct way to use an inline lambda for checking even numbers?",
    "o": [
      "x => x % 2 == 0",
      "x -> x % 2 == 0",
      "(x) :=> x % 2 == 0",
      "x := x % 2 == 0"
    ]
  },
  {
    "q": "What is required to attach a method to an event?",
    "o": [
      "The method must match the event delegate’s signature.",
      "The method must be static.",
      "The method must have a return type of string.",
      "The method must have only one parameter."
    ]
  },
  {
    "q": "Which line correctly declares an event based on a delegate?",
    "o": [
      "public event Action MyEvent;",
      "event void MyEvent();",
      "public delegate event MyEvent;",
      "Action event MyEvent;"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "delegate void Show();\n\nclass Program {\n    static void Hello() => Console.Write(\"Hello \");\n    static void World() => Console.Write(\"World\");\n\n    static void Main() {\n        Show show = Hello;\n        show += World;\n        show();\n    }\n}",
    "o": [
      "Hello World",
      "World Hello",
      "Hello",
      "World"
    ]
  },
  {
    "q": "Which delegate type is built into .NET and represents a method with no parameters and no return value?",
    "o": [
      "Action",
      "Func",
      "EventHandler",
      "Predicate"
    ]
  },
  {
    "q": "What is the main benefit of using multicast delegates?",
    "o": [
      "They allow multiple methods to be invoked with a single delegate call.",
      "They return multiple values from each method.",
      "They run methods in parallel threads.",
      "They reduce memory usage."
    ]
  },
  {
    "q": "Which syntax correctly attaches an anonymous method to an event?",
    "c": "public event EventHandler MyEvent;\n\n// Attach anonymous method:",
    "o": [
      "MyEvent += delegate(object sender, EventArgs e) { Console.WriteLine(\"Handled\"); };",
      "MyEvent = delegate { Console.WriteLine(\"Handled\"); };",
      "delegate(object sender, EventArgs e) => Console.WriteLine(\"Handled\");",
      "MyEvent -> Console.WriteLine(\"Handled\");"
    ]
  },
  {
    "q": "What is a multicast delegate in C#?",
    "o": [
      "A delegate that holds references to more than one method.",
      "A delegate that can only point to methods in a single class.",
      "A delegate that runs on multiple threads.",
      "A delegate that can return multiple values."
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "delegate void Display();\n\nclass Program {\n    static void Msg1() => Console.Write(\"One \");\n    static void Msg2() => Console.Write(\"Two \");\n\n    static void Main() {\n        Display d = Msg1;\n        d += Msg2;\n        d -= Msg1;\n        d();\n    }\n}",
    "o": [
      "Two ",
      "One Two ",
      "One ",
      "Compile-time error"
    ]
  },
  {
    "q": "Which of the following best describes how to unsubscribe a method from an event?",
    "o": [
      "Use the -= operator with the method name.",
      "Use the delete keyword.",
      "Use the RemoveHandler function.",
      "Use the unsubscribe() method."
    ]
  },
  {
    "q": "Which of the following is a valid use of a lambda expression?",
    "o": [
      "Func<int, int> square = x => x * x;",
      "Func<int, int> square = (x) -> x * x;",
      "Func<int, int> square = lambda x: x * x;",
      "Func<int, int> square = x := x * x;"
    ]
  },
  {
    "q": "What does the following lambda do?\n`Func<string, int> getLength = s => s.Length;`",
    "o": [
      "Returns the length of the input string.",
      "Converts a string to an integer.",
      "Always returns 0.",
      "Returns the number of words in the string."
    ]
  },
  {
    "q": "Which statement about anonymous methods is TRUE?",
    "o": [
      "Anonymous methods can access variables from the enclosing scope.",
      "Anonymous methods must be static.",
      "Anonymous methods cannot be passed as parameters.",
      "Anonymous methods are not supported in C# anymore."
    ]
  },
  {
    "q": "What is the output of this code snippet?",
    "c": "delegate int Operation(int x, int y);\n\nclass Program {\n    static void Main() {\n        Operation op = (int a, int b) => a - b;\n        Console.WriteLine(op(10, 4));\n    }\n}",
    "o": [
      "6",
      "14",
      "-6",
      "0"
    ]
  },
  {
    "q": "What is a key difference between delegates and events in C#?",
    "o": [
      "Delegates can be invoked directly, events cannot from outside their class.",
      "Events can be assigned new values directly, delegates cannot.",
      "Events support async by default, delegates do not.",
      "Delegates are used only in WPF applications."
    ]
  },
  {
    "q": "Which of the following delegate types takes no parameters and returns nothing?",
    "o": [
      "Action",
      "Func",
      "Predicate",
      "EventHandler"
    ]
  },
  {
    "q": "What is the result of the following code?",
    "c": "delegate void Notify();\n\nclass Program {\n    static void Main() {\n        Notify notify = null;\n        notify += () => Console.Write(\"Hi \");\n        notify += () => Console.Write(\"there!\");\n        notify();\n    }\n}",
    "o": [
      "Hi there!",
      "there! Hi ",
      "Hi ",
      "null"
    ]
  },
  {
    "q": "What keyword is used to define an event in C#?",
    "o": [
      "event",
      "delegate",
      "handler",
      "trigger"
    ]
  },
  {
    "q": "What will this code output?",
    "c": "delegate string Formatter(string s);\n\nclass Program {\n    static void Main() {\n        Formatter f = delegate(string s) { return s.ToUpper(); };\n        Console.WriteLine(f(\"hello\"));\n    }\n}",
    "o": [
      "HELLO",
      "hello",
      "Hello",
      "Compile-time error"
    ]
  },
  {
    "q": "Which delegate type in .NET returns a value and takes one or more input parameters?",
    "o": [
      "Func",
      "Action",
      "Predicate",
      "EventHandler"
    ]
  },
  {
    "q": "What is a lambda expression in C#?",
    "o": [
      "A shorthand syntax for writing anonymous methods.",
      "A type of event handler.",
      "A predefined delegate.",
      "A method that must be static."
    ]
  },
  {
    "q": "Which of the following is NOT true about multicast delegates?",
    "o": [
      "They can return multiple values from all subscribed methods.",
      "They invoke multiple methods in the order they were added.",
      "They support the + and - operators for subscription and unsubscription.",
      "They are commonly used in event handling."
    ]
  },
  {
    "q": "What is the output of this code snippet?",
    "c": "delegate void Greet();\n\nclass Program {\n    static void SayHi() => Console.Write(\"Hi \");\n    static void SayBye() => Console.Write(\"Bye\");\n\n    static void Main() {\n        Greet g = SayHi;\n        g += SayBye;\n        g += SayHi;\n        g();\n    }\n}",
    "o": [
      "Hi ByeHi ",
      "Bye Hi Hi ",
      "Hi Hi Bye",
      "Compile-time error"
    ]
  },
  {
    "q": "Which of the following is the correct lambda syntax to add two numbers?",
    "o": [
      "(a, b) => a + b",
      "a, b => a + b",
      "a => b => a + b",
      "(a, b) -> a + b"
    ]
  },
  {
    "q": "What is the return type of a lambda used with the Func<string, int> delegate?",
    "o": [
      "int",
      "string",
      "void",
      "bool"
    ]
  },
  {
    "q": "Which one of these is a limitation of anonymous methods compared to named methods?",
    "o": [
      "Cannot use unsafe code inside them.",
      "Cannot be reused in multiple places.",
      "Cannot capture variables from outer scopes.",
      "Cannot be declared inside a class."
    ]
  },
  {
    "q": "Which of these correctly subscribes a method to an event named `OnClick`?",
    "o": [
      "OnClick += MyHandler;",
      "OnClick(MyHandler);",
      "OnClick = MyHandler;",
      "MyHandler += OnClick;"
    ]
  },
  {
    "q": "Which of the following delegate declarations is valid in C#?",
    "o": [
      "public delegate void NotifyUser(string message);",
      "public delegate NotifyUser void(string message);",
      "delegate string voidNotify(message);",
      "delegate = void NotifyUser(string);"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "delegate int MathOp(int x, int y);\n\nclass Program {\n    static void Main() {\n        MathOp add = (a, b) => a + b;\n        MathOp mul = (a, b) => a * b;\n        MathOp op = add + mul;\n        Console.WriteLine(op(2, 3));\n    }\n}",
    "o": [
      "6",
      "5",
      "Compilation Error",
      "9"
    ]
  },
  {
    "q": "Which delegate type is best suited for representing a method that returns a boolean and takes a single parameter?",
    "o": [
      "Predicate<T>",
      "Action<T>",
      "Func<T>",
      "EventHandler<T>"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "delegate void Show();\n\nclass Program {\n    static void Main() {\n        Show s = delegate { Console.Write(\"Hello\"); };\n        s();\n    }\n}",
    "o": [
      "Hello",
      "hello",
      "Compile-time error",
      "null"
    ]
  },
  {
    "q": "What is a key feature of multicast delegates in C#?",
    "o": [
      "They execute all subscribed methods in order.",
      "They always return an array of results.",
      "They are only used in Windows Forms.",
      "They support asynchronous invocation only."
    ]
  },
  {
    "q": "Which of the following best describes an event in C#?",
    "o": [
      "A type-safe wrapper around delegates that prevents direct invocation from outside.",
      "A method that runs periodically based on a timer.",
      "A property that listens to variable changes.",
      "An asynchronous delegate execution block."
    ]
  },
  {
    "q": "Which of the following is a correct lambda expression to check if a number is even?",
    "o": [
      "x => x % 2 == 0",
      "(int x) => return x % 2 == 0",
      "(x) => x % 2 === 0",
      "lambda x: x % 2 == 0"
    ]
  },
  {
    "q": "What is the output of this code snippet?",
    "c": "delegate void MyDel();\n\nclass Program {\n    static void Main() {\n        MyDel d = () => Console.Write(\"A\");\n        d += () => Console.Write(\"B\");\n        d();\n    }\n}",
    "o": [
      "AB",
      "BA",
      "A",
      "B"
    ]
  },
  {
    "q": "What does the 'event' keyword do in C#?",
    "o": [
      "Restricts the invocation of delegate from outside the declaring class.",
      "Creates a new thread to handle events.",
      "Forces garbage collection after event handling.",
      "Marks the method as event-safe for static contexts."
    ]
  },
  {
    "q": "Which of the following uses an anonymous method correctly?",
    "o": [
      "Action greet = delegate() { Console.WriteLine(\"Hi\"); };",
      "Action greet = def() { Console.WriteLine(\"Hi\"); };",
      "Func greet = delegate Console.WriteLine(\"Hi\");",
      "delegate greet() => Console.WriteLine(\"Hi\");"
    ]
  },
  {
    "q": "Which of the following best describes a multicast delegate?",
    "o": [
      "A delegate that can reference more than one method at a time",
      "A delegate that returns multiple values",
      "A delegate that can be used only in GUI applications",
      "A delegate that automatically runs asynchronously"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "delegate void Notify();\n\nclass Program {\n    static void A() => Console.Write(\"A \");\n    static void B() => Console.Write(\"B \");\n\n    static void Main() {\n        Notify n = A;\n        n += B;\n        n += A;\n        n();\n    }\n}",
    "o": [
      "A B A ",
      "B A A ",
      "A A B ",
      "Compile-time error"
    ]
  },
  {
    "q": "Which syntax creates an anonymous method that takes an integer and returns its square?",
    "o": [
      "Func<int, int> square = delegate(int x) { return x * x; };",
      "Func<int, int> square = new delegate(int x) { return x * x; };",
      "Func<int, int> square = (int x) => return x * x;",
      "Func<int, int> square = lambda(int x): x * x;"
    ]
  },
  {
    "q": "Which is true about events in C#?",
    "o": [
      "Only the class that declares the event can raise it",
      "Any class can raise any event it subscribes to",
      "Events can only be used with async methods",
      "Events must always return a value"
    ]
  },
  {
    "q": "Which of the following is a valid use of a lambda expression?",
    "o": [
      "Func<int, int, int> add = (x, y) => x + y;",
      "Func<int, int, int> add = (x, y) => { x + y };",
      "Func<int, int> add => (x, y) => x + y;",
      "Func add = lambda x, y: x + y;"
    ]
  },
  {
    "q": "What will the following program print?",
    "c": "delegate string Formatter(string s);\n\nclass Program {\n    static void Main() {\n        Formatter format = s => s.ToLower();\n        Console.WriteLine(format(\"HELLO\"));\n    }\n}",
    "o": [
      "hello",
      "HELLO",
      "Hello",
      "Compile-time error"
    ]
  },
  {
    "q": "What is the purpose of the `+=` operator when working with events?",
    "o": [
      "It adds a new event handler (subscriber) to the event",
      "It triggers the event",
      "It overrides existing handlers",
      "It removes a subscriber from the event"
    ]
  },
  {
    "q": "Which delegate type would you use for a method that takes no parameters and returns nothing?",
    "o": [
      "Action",
      "Func",
      "Predicate",
      "EventHandler"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "delegate bool Check(int n);\n\nclass Program {\n    static void Main() {\n        Check isEven = x => x % 2 == 0;\n        Console.Write(isEven(4));\n    }\n}",
    "o": [
      "True",
      "False",
      "Compile-time error",
      "0"
    ]
  },
  {
    "q": "Which of the following allows capturing outer variables in C#?",
    "o": [
      "Anonymous methods and lambda expressions",
      "Only named methods",
      "Only anonymous methods",
      "Only lambda expressions"
    ]
  },
  {
    "q": "What is the benefit of using events instead of exposing delegates directly?",
    "o": [
      "Events provide encapsulation and prevent unwanted invocation outside the declaring class.",
      "Events allow direct access to all methods in the invocation list.",
      "Events are faster than delegates.",
      "Events automatically execute in a separate thread."
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "delegate void MyDelegate();\n\nclass Program {\n    static void First() { Console.Write(\"First \"); }\n    static void Second() { Console.Write(\"Second \"); }\n    static void Main() {\n        MyDelegate d = First;\n        d += Second;\n        d -= First;\n        d();\n    }\n}",
    "o": [
      "Second ",
      "First Second ",
      "First ",
      "Compile-time error"
    ]
  },
  {
    "q": "Which lambda expression syntax is correct for a method that takes no arguments and returns 100?",
    "o": [
      "() => 100",
      "(int x) => return 100",
      "lambda => 100",
      "Func() => 100"
    ]
  },
  {
    "q": "Which of the following statements about anonymous methods is TRUE?",
    "o": [
      "Anonymous methods can access outer variables defined in the enclosing method.",
      "Anonymous methods must have a return value.",
      "Anonymous methods are not type-safe.",
      "Anonymous methods cannot be assigned to delegates."
    ]
  },
  {
    "q": "What will the following code print?",
    "c": "delegate int Operation(int x);\n\nclass Program {\n    static void Main() {\n        int factor = 5;\n        Operation op = delegate(int n) { return n * factor; };\n        Console.WriteLine(op(2));\n    }\n}",
    "o": [
      "10",
      "7",
      "5",
      "2"
    ]
  },
  {
    "q": "In C#, which type can be used when a method takes one input and returns a result?",
    "o": [
      "Func<T, TResult>",
      "Action<T>",
      "Predicate<T>",
      "EventHandler<T>"
    ]
  },
  {
    "q": "Which of the following is a correct way to declare a multicast delegate?",
    "o": [
      "delegate void LogMessage(string message);",
      "delegate string Multicast(int a, int b);",
      "delegate = void Log(string msg);",
      "Func Log(string) => void;"
    ]
  },
  {
    "q": "What happens if a multicast delegate has multiple return values?",
    "o": [
      "Only the return value from the last method in the invocation list is returned.",
      "All return values are stored in a list.",
      "It throws a runtime error.",
      "It returns the average of the values."
    ]
  },
  {
    "q": "Which feature allows you to write inline functions without explicitly naming them?",
    "o": [
      "Lambda expressions",
      "Multicast delegates",
      "Events",
      "Indexer methods"
    ]
  },
  {
    "q": "Which of the following is true about the 'Action' delegate in C#?",
    "o": [
      "It represents a method that returns void.",
      "It requires at least one parameter.",
      "It must return a value.",
      "It cannot be used with lambda expressions."
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "delegate void MyAction();\n\nclass Program {\n    static void Main() {\n        MyAction act = delegate { Console.Write(\"Hello \"); };\n        act += () => Console.Write(\"World\");\n        act();\n    }\n}",
    "o": [
      "Hello World",
      "World Hello",
      "Hello",
      "Compile-time error"
    ]
  },
  {
    "q": "Which of the following best describes a lambda expression in C#?",
    "o": [
      "An anonymous function that can be used to create delegates or expression tree types",
      "A type of loop used for iteration",
      "A method that runs only on compile time",
      "A class that stores parameters and results"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "delegate int MathOp(int a, int b);\n\nclass Program {\n    static void Main() {\n        MathOp add = (x, y) => x + y;\n        Console.WriteLine(add(3, 4));\n    }\n}",
    "o": [
      "7",
      "12",
      "34",
      "Compile-time error"
    ]
  },
  {
    "q": "Which of the following keywords is used to define an event in C#?",
    "o": [
      "event",
      "delegate",
      "handler",
      "subscribe"
    ]
  },
  {
    "q": "What is a correct use of an anonymous method?",
    "o": [
      "delegate(string msg) { Console.WriteLine(msg); }",
      "lambda(string msg) => Console.WriteLine(msg);",
      "anonymous(string msg): Console.WriteLine(msg);",
      "(string msg) -> { Console.WriteLine(msg); };"
    ]
  },
  {
    "q": "Which of the following can a delegate encapsulate?",
    "o": [
      "Any method with a matching signature and return type",
      "Only static methods",
      "Only methods with no parameters",
      "Only public methods"
    ]
  },
  {
    "q": "Which delegate type is best suited for a method that returns a boolean value and takes one parameter?",
    "o": [
      "Predicate<T>",
      "Action<T>",
      "Func<T>",
      "EventHandler<T>"
    ]
  },
  {
    "q": "What will this code print?",
    "c": "delegate void Task();\n\nclass Program {\n    static void Work() => Console.Write(\"Work \");\n    static void Play() => Console.Write(\"Play\");\n    static void Main() {\n        Task t = Work;\n        t += Play;\n        t.Invoke();\n    }\n}",
    "o": [
      "Work Play",
      "Play Work",
      "Work",
      "Compile-time error"
    ]
  },
  {
    "q": "Which statement is true about lambda expressions and variable capturing?",
    "o": [
      "Lambda expressions can capture and use local variables from the enclosing method.",
      "Lambda expressions cannot access any outer variables.",
      "Lambda expressions are limited to static contexts only.",
      "Lambda expressions cannot contain expressions."
    ]
  },
  {
    "q": "What is the role of the EventHandler delegate in .NET?",
    "o": [
      "It represents a method that handles an event without returning a value.",
      "It represents a method that returns a boolean value.",
      "It is used only in WPF applications.",
      "It can only be used with system-defined events."
    ]
  },
  {
    "q": "What does a multicast delegate return when it contains multiple methods with return values?",
    "o": [
      "Only the return value of the last method invoked",
      "A collection of all return values",
      "The average of all return values",
      "The return value of the first method only"
    ]
  },
  {
    "q": "Which syntax correctly uses a lambda expression to square a number in C#?",
    "o": [
      "x => x * x",
      "(x) => { return x ** 2; }",
      "square(x) => x*x",
      "lambda x: x * x"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "delegate void Notify();\n\nclass Program {\n    static void A() => Console.Write(\"A \");\n    static void B() => Console.Write(\"B \");\n    static void Main() {\n        Notify n = A;\n        n += B;\n        n += A;\n        n();\n    }\n}",
    "o": [
      "A B A ",
      "B A A ",
      "A A B ",
      "A B "
    ]
  },
  {
    "q": "Which of the following statements is true about C# events?",
    "o": [
      "Events can only be invoked from within the class that declares them.",
      "Events can be directly invoked from outside the declaring class.",
      "Events do not require delegates.",
      "Events cannot use multicast delegates."
    ]
  },
  {
    "q": "Which of the following is a valid declaration of an anonymous method in C#?",
    "o": [
      "delegate(int x) { Console.WriteLine(x); }",
      "anonymous(int x) { Console.WriteLine(x); }",
      "lambda(int x) => Console.WriteLine(x);",
      "Func(x) { return x; };"
    ]
  },
  {
    "q": "What will this code output?",
    "c": "delegate string Greet(string name);\n\nclass Program {\n    static void Main() {\n        Greet g = (string n) => \"Hi, \" + n;\n        Console.WriteLine(g(\"Eve\"));\n    }\n}",
    "o": [
      "Hi, Eve",
      "Hello Eve",
      "Welcome, Eve",
      "Eve"
    ]
  },
  {
    "q": "Which delegate type is used for a method that takes no parameters and returns void?",
    "o": [
      "Action",
      "Func",
      "Predicate",
      "EventHandler"
    ]
  },
  {
    "q": "What is the purpose of the '+=' operator when working with events in C#?",
    "o": [
      "To subscribe a method to the event",
      "To raise the event manually",
      "To assign a single handler replacing existing ones",
      "To unsubscribe from an event"
    ]
  },
  {
    "q": "Which of the following is true about anonymous methods and lambda expressions?",
    "o": [
      "Both can access variables from the outer method scope",
      "Only lambda expressions can be assigned to delegates",
      "Anonymous methods must be named",
      "Lambda expressions cannot be passed as parameters"
    ]
  },
  {
    "q": "What happens if a delegate invocation list contains a null reference?",
    "o": [
      "A NullReferenceException is thrown at runtime",
      "The compiler automatically removes null entries",
      "The delegate skips the null method silently",
      "It causes a compile-time error"
    ]
  },
  {
    "q": "Which of the following best describes a multicast delegate?",
    "o": [
      "A delegate that holds references to more than one method",
      "A delegate that executes methods in multiple threads",
      "A delegate that can subscribe to events from multiple classes",
      "A delegate that returns multiple values"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "delegate void LogHandler(string message);\n\nclass Program {\n    static void Info(string msg) => Console.Write(\"Info: \" + msg + \" \");\n    static void Warn(string msg) => Console.Write(\"Warn: \" + msg);\n\n    static void Main() {\n        LogHandler log = Info;\n        log += Warn;\n        log(\"Disk almost full\");\n    }\n}",
    "o": [
      "Info: Disk almost full Warn: Disk almost full",
      "Warn: Disk almost full Info: Disk almost full",
      "Disk almost full",
      "Only Info: Disk almost full"
    ]
  },
  {
    "q": "Which of these is the correct way to declare and invoke a lambda expression that doubles a number?",
    "o": [
      "Func<int, int> doubler = x => x * 2; Console.WriteLine(doubler(4));",
      "Func<int, int> doubler(x) = x * 2; Console.WriteLine(doubler(4));",
      "double x => x * 2; Console.WriteLine(x);",
      "int x => return x * 2;"
    ]
  },
  {
    "q": "Why are delegates important in event handling?",
    "o": [
      "They define the signature of the method that can respond to an event",
      "They store event logs",
      "They are required for object instantiation",
      "They are used to manage memory in event handlers"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "delegate int Compute(int x);\n\nclass Program {\n    static void Main() {\n        Compute square = delegate(int n) { return n * n; };\n        Console.WriteLine(square(6));\n    }\n}",
    "o": [
      "36",
      "12",
      "6",
      "Compile-time error"
    ]
  },
  {
    "q": "Which of the following is NOT true about lambda expressions?",
    "o": [
      "They can define statements using multiple lines without braces",
      "They can capture variables from the outer scope",
      "They can be passed as arguments to functions",
      "They can be assigned to compatible delegate types"
    ]
  },
  {
    "q": "What is the purpose of `EventHandler<TEventArgs>` in C#?",
    "o": [
      "To define event handlers that use custom event data",
      "To handle exceptions during event execution",
      "To enforce event handler naming conventions",
      "To create threads for event processing"
    ]
  },
  {
    "q": "Which scenario best demonstrates the use of an anonymous method?",
    "o": [
      "When a method body is small and only used once",
      "When you need reflection to invoke methods",
      "When the method has to be named and reused",
      "When the method is defined inside another class"
    ]
  },
  {
    "q": "What will this code print?",
    "c": "delegate void Printer(string msg);\n\nclass Program {\n    static void Main() {\n        Printer p = m => Console.WriteLine(\"Message: \" + m);\n        p(\"Hello C#\");\n    }\n}",
    "o": [
      "Message: Hello C#",
      "Hello C#",
      "msg",
      "Printer: Hello C#"
    ]
  },
  {
    "q": "Which of the following is true about removing a method from a delegate chain?",
    "o": [
      "Use the '-=' operator with the method name",
      "Use the 'delete' keyword",
      "Delegates cannot be modified once assigned",
      "Use RemoveHandler() method"
    ]
  },
  {
    "q": "Which of the following statements about delegates in C# is TRUE?",
    "o": [
      "Delegates are type-safe function pointers",
      "Delegates cannot refer to static methods",
      "Delegates must always return void",
      "Delegates can only be used with events"
    ]
  },
  {
    "q": "What will the following code output?",
    "c": "delegate int Operation(int x);\n\nclass Program {\n    static int Triple(int x) => x * 3;\n\n    static void Main() {\n        Operation op = Triple;\n        Console.WriteLine(op(4));\n    }\n}",
    "o": [
      "12",
      "7",
      "8",
      "Compile-time error"
    ]
  },
  {
    "q": "Which of the following correctly creates an anonymous method in C#?",
    "o": [
      "delegate(int x) { return x * x; }",
      "lambda(int x) { return x * x; }",
      "(int x) -> x * x;",
      "def x: return x * x"
    ]
  },
  {
    "q": "Which C# feature allows you to assign multiple methods to a single delegate?",
    "o": [
      "Multicast delegate",
      "Generic delegate",
      "Anonymous method",
      "Func delegate"
    ]
  },
  {
    "q": "What will this code display?",
    "c": "delegate void Notify();\n\nclass Program {\n    static void A() => Console.Write(\"A \");\n    static void B() => Console.Write(\"B \");\n\n    static void Main() {\n        Notify notify = A;\n        notify += B;\n        notify();\n    }\n}",
    "o": [
      "A B ",
      "B A ",
      "A A ",
      "B B "
    ]
  },
  {
    "q": "In the context of events, what does the `event` keyword in C# do?",
    "o": [
      "Prevents clients from resetting the delegate",
      "Automatically adds the handler method",
      "Subscribes the delegate to all existing events",
      "Raises the event immediately"
    ]
  },
  {
    "q": "Which of these best represents a lambda that checks if a number is even?",
    "o": [
      "x => x % 2 == 0",
      "x => x * 2 == 0",
      "(x) -> return x % 2 == 0",
      "lambda x: x % 2 == 0"
    ]
  },
  {
    "q": "What is the correct way to declare a custom event?",
    "o": [
      "public event EventHandler MyEvent;",
      "delegate void MyEvent();",
      "event void MyEvent();",
      "Event MyEvent();"
    ]
  },
  {
    "q": "Why might you choose to use an anonymous method over a regular named method?",
    "o": [
      "To keep logic concise and localized",
      "To reuse code across classes",
      "To increase compile-time performance",
      "To avoid event subscription"
    ]
  },
  {
    "q": "What will be the output of this code snippet?",
    "c": "event EventHandler MyEvent;\n\nvoid TriggerEvent() {\n    MyEvent?.Invoke(this, EventArgs.Empty);\n}\n\nstatic void Main() {\n    Program p = new Program();\n    p.MyEvent += (s, e) => Console.WriteLine(\"Event triggered\");\n    p.TriggerEvent();\n}",
    "o": [
      "Event triggered",
      "null",
      "Compile-time error",
      "Event not triggered"
    ]
  },
  {
    "q": "Which keyword is used to define an event in C#?",
    "o": [
      "event",
      "delegate",
      "handler",
      "trigger"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "delegate void Message();\n\nclass Test {\n    static void Hello() => Console.Write(\"Hello \");\n    static void World() => Console.Write(\"World\");\n\n    static void Main() {\n        Message msg = Hello;\n        msg += World;\n        msg();\n    }\n}",
    "o": [
      "Hello World",
      "World Hello",
      "Hello",
      "World"
    ]
  },
  {
    "q": "Which delegate type is built-in and returns a value?",
    "o": [
      "Func<>",
      "Action<>",
      "Predicate<>",
      "VoidFunc<>"
    ]
  },
  {
    "q": "Which of the following is a correct lambda expression that takes two parameters and returns their sum?",
    "o": [
      "(x, y) => x + y",
      "(x, y) => return x + y",
      "lambda x, y: x + y",
      "x + y => x"
    ]
  },
  {
    "q": "What is a characteristic of multicast delegates?",
    "o": [
      "They invoke multiple methods in the order they were added",
      "They always return a boolean value",
      "They can only reference one method",
      "They raise an exception if multiple methods are assigned"
    ]
  },
  {
    "q": "What will the following code print?",
    "c": "delegate string Formatter(string input);\n\nclass Program {\n    static void Main() {\n        Formatter shout = delegate(string s) { return s.ToUpper() + \"!\"; };\n        Console.WriteLine(shout(\"hello\"));\n    }\n}",
    "o": [
      "HELLO!",
      "hello!",
      "HELLO",
      "hello"
    ]
  },
  {
    "q": "Which of the following is TRUE about anonymous methods in C#?",
    "o": [
      "They are defined using the 'delegate' keyword without a name",
      "They require a named method to be declared first",
      "They cannot be assigned to delegates",
      "They are the same as lambda expressions"
    ]
  },
  {
    "q": "Which built-in delegate returns a boolean value based on a condition?",
    "o": [
      "Predicate<>",
      "Func<>",
      "Action<>",
      "Eval<>"
    ]
  },
  {
    "q": "What is the purpose of the null-conditional operator (?.) when invoking events?",
    "o": [
      "To ensure the event has subscribers before invoking",
      "To unsubscribe an event",
      "To delay execution until all handlers return",
      "To ignore the event call"
    ]
  },
  {
    "q": "What is the result of this lambda expression?\n\n`Func<int, int, int> multiply = (a, b) => a * b;`\n`Console.WriteLine(multiply(3, 4));`",
    "o": [
      "12",
      "7",
      "1",
      "34"
    ]
  },
  {
    "q": "What is the main benefit of using lambda expressions in C#?",
    "o": [
      "They provide a concise way to represent anonymous methods",
      "They reduce runtime execution",
      "They replace the need for classes",
      "They automatically handle exceptions"
    ]
  },
  {
    "q": "What will be printed when the following C# code runs?",
    "c": "delegate int MathOp(int x);\n\nclass Program {\n    static void Main() {\n        MathOp square = x => x * x;\n        Console.WriteLine(square(6));\n    }\n}",
    "o": [
      "36",
      "12",
      "6",
      "Compile-time error"
    ]
  },
  {
    "q": "Which of the following is required to raise an event?",
    "o": [
      "Invoke the delegate with `?.Invoke()` or directly if not null",
      "Define a method with the same name as the event",
      "Call the event handler without instantiating",
      "Assign `null` to the event and raise it"
    ]
  },
  {
    "q": "Which of the following is a valid multicast delegate behavior?",
    "o": [
      "It executes all assigned methods in order",
      "It stores only the last assigned method",
      "It throws an exception when multiple methods are assigned",
      "It disables return values from all methods"
    ]
  },
  {
    "q": "What does the following code output?",
    "c": "delegate void Greet();\n\nclass Program {\n    static void Hello() => Console.Write(\"Hi \");\n    static void World() => Console.WriteLine(\"World\");\n\n    static void Main() {\n        Greet greet = Hello;\n        greet += World;\n        greet();\n    }\n}",
    "o": [
      "Hi World",
      "World Hi",
      "Hi",
      "World"
    ]
  },
  {
    "q": "Which syntax correctly represents a lambda expression that takes no parameters and returns 100?",
    "o": [
      "() => 100",
      "() => return 100",
      "[] => 100",
      "lambda => 100"
    ]
  },
  {
    "q": "What will the following C# code output?",
    "c": "delegate string MessageFormatter(string name);\n\nclass Program {\n    static void Main() {\n        MessageFormatter formatter = delegate(string name) {\n            return $\"Hello, {name}!\";\n        };\n        Console.WriteLine(formatter(\"Sam\"));\n    }\n}",
    "o": [
      "Hello, Sam!",
      "Hello Sam!",
      "Hi Sam!",
      "Sam"
    ]
  },
  {
    "q": "Why are events preferred over public delegates in C#?",
    "o": [
      "Events restrict invocation to the declaring class only",
      "Events allow automatic return types",
      "Events bypass the need for delegates",
      "Events work only with static methods"
    ]
  },
  {
    "q": "Which delegate type should be used when the method returns void and accepts one string parameter?",
    "o": [
      "Action<string>",
      "Func<string>",
      "Predicate<string>",
      "EventHandler<string>"
    ]
  },
  {
    "q": "Which of the following is a key limitation of multicast delegates?",
    "o": [
      "Only the return value from the last method is retained",
      "Only one method can be invoked",
      "All methods must return void",
      "They can't use lambda expressions"
    ]
  },
  {
    "q": "Which of the following correctly defines a delegate that returns a boolean and takes an integer?",
    "o": [
      "delegate bool CheckNumber(int num);",
      "bool delegate CheckNumber(int num);",
      "delegate int CheckNumber(bool num);",
      "CheckNumber(bool num) => delegate;"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "delegate void Log();\n\nclass Program {\n    static void Info() => Console.Write(\"Info \");\n    static void Warning() => Console.Write(\"Warning \");\n\n    static void Main() {\n        Log log = Info;\n        log += Warning;\n        log();\n    }\n}",
    "o": [
      "Info Warning ",
      "Warning Info ",
      "Info ",
      "Warning "
    ]
  },
  {
    "q": "Which statement best describes an anonymous method in C#?",
    "o": [
      "A method without a name, defined using the 'delegate' keyword",
      "A method defined without a return type",
      "A method defined outside a class",
      "A static method that takes no parameters"
    ]
  },
  {
    "q": "How do lambda expressions benefit C# programming?",
    "o": [
      "They simplify writing inline methods or expressions",
      "They remove the need for all delegates",
      "They replace event handlers",
      "They enforce strict return types"
    ]
  },
  {
    "q": "What is the result of the following code?",
    "c": "Func<int, int> doubleIt = x => x * 2;\nConsole.WriteLine(doubleIt(7));",
    "o": [
      "14",
      "7",
      "2",
      "0"
    ]
  },
  {
    "q": "Which of the following is TRUE about event handlers in C#?",
    "o": [
      "They are methods attached to an event to handle it when it is raised",
      "They must return a string",
      "They can only be static methods",
      "They must have the same name as the event"
    ]
  },
  {
    "q": "Which delegate type is typically used with events that use no custom event arguments?",
    "o": [
      "EventHandler",
      "Func<>",
      "Predicate<>",
      "Action<>"
    ]
  },
  {
    "q": "What will this C# code output?",
    "c": "delegate int Calculate(int a, int b);\n\nclass Program {\n    static void Main() {\n        Calculate calc = (a, b) => a + b;\n        Console.WriteLine(calc(4, 6));\n    }\n}",
    "o": [
      "10",
      "46",
      "4",
      "6"
    ]
  },
  {
    "q": "Which syntax correctly removes a method from a multicast delegate?",
    "o": [
      "delegateInstance -= MethodName;",
      "delegateInstance.remove(MethodName);",
      "remove delegateInstance.MethodName;",
      "delegateInstance.delete(MethodName);"
    ]
  },
  {
    "q": "What is required for a class to publish an event in C#?",
    "o": [
      "Declare a delegate and an event based on that delegate",
      "Only declare a public method",
      "Use the override keyword",
      "Inherit from EventBase class"
    ]
  },
  {
    "q": "What is a multicast delegate in C#?",
    "o": [
      "A delegate that holds references to more than one method",
      "A delegate that can be used across multiple classes",
      "A delegate that returns multiple values",
      "A delegate that handles events in multiple threads"
    ]
  },
  {
    "q": "Which of the following is a valid lambda expression in C#?",
    "o": [
      "x => x * x",
      "x -> x * x",
      "(int x) => { return x * x; }",
      "(x) => x * x;"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "delegate void Notify();\n\nclass Program {\n    static void Greet() => Console.Write(\"Hello \");\n    static void Bye() => Console.Write(\"Goodbye\");\n\n    static void Main() {\n        Notify notify = Greet;\n        notify += Bye;\n        notify();\n    }\n}",
    "o": [
      "Hello Goodbye",
      "Goodbye Hello",
      "Hello",
      "Goodbye"
    ]
  },
  {
    "q": "What is the purpose of the 'event' keyword in C#?",
    "o": [
      "To restrict delegate access so only the declaring class can invoke it",
      "To define a new thread-safe delegate",
      "To allow delegates to return values",
      "To create a static method"
    ]
  },
  {
    "q": "Which of the following correctly defines an anonymous method?",
    "o": [
      "delegate(int x) { return x + 1; }",
      "function(int x) => x + 1;",
      "(int x) -> { return x + 1; }",
      "lambda(int x) => x + 1;"
    ]
  },
  {
    "q": "What will this code output?",
    "c": "delegate int Transformer(int x);\n\nclass Program {\n    static void Main() {\n        Transformer square = delegate(int n) { return n * n; };\n        Console.WriteLine(square(3));\n    }\n}",
    "o": [
      "9",
      "6",
      "3",
      "1"
    ]
  },
  {
    "q": "Which of the following is true about lambda expressions in C#?",
    "o": [
      "They can be used to create inline methods without defining a full method body",
      "They must always be assigned to a delegate",
      "They cannot be used with LINQ",
      "They must have parentheses even if they take one parameter"
    ]
  },
  {
    "q": "Which signature is correct for an event handler method in C#?",
    "o": [
      "void Handler(object sender, EventArgs e)",
      "EventHandler Handler(EventArgs e, object sender)",
      "void Handler(string message)",
      "Handler(object, EventArgs)"
    ]
  },
  {
    "q": "Which is a correct way to invoke an event safely?",
    "o": [
      "MyEvent?.Invoke(this, EventArgs.Empty);",
      "if(MyEvent != null) MyEvent();",
      "Invoke(MyEvent);",
      "MyEvent();"
    ]
  },
  {
    "q": "What is the return type of a delegate that uses 'Action<string>'?",
    "o": [
      "void",
      "string",
      "bool",
      "object"
    ]
  },
  {
    "q": "Which of the following correctly declares a delegate in C#?",
    "o": [
      "public delegate int Operation(int x, int y);",
      "delegate Operation(int x, int y);",
      "function Operation(int x, int y);",
      "int delegate Operation(x, y);"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "delegate void DisplayMessage();\n\nclass Test {\n    static void Hello() => Console.Write(\"Hello \");\n    static void World() => Console.Write(\"World\");\n\n    static void Main() {\n        DisplayMessage msg = Hello;\n        msg += World;\n        msg();\n    }\n}",
    "o": [
      "Hello World",
      "World Hello",
      "Hello",
      "World"
    ]
  },
  {
    "q": "What distinguishes an event from a delegate in C#?",
    "o": [
      "Only the class that declares an event can raise it",
      "Events cannot be subscribed to using +=",
      "Delegates cannot be multicast",
      "Events can return values"
    ]
  },
  {
    "q": "What does the following lambda expression return?\n`(a, b) => a * b`",
    "o": [
      "The product of a and b",
      "The sum of a and b",
      "The division of a by b",
      "A boolean value"
    ]
  },
  {
    "q": "Which syntax correctly assigns an anonymous method to a delegate?",
    "o": [
      "MyDelegate d = delegate(int x) { return x + 5; };",
      "MyDelegate d = (int x) -> x + 5;",
      "MyDelegate d = new AnonymousMethod(x => x + 5);",
      "MyDelegate d = delegate => { x + 5; };"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "delegate string Formatter(string input);\n\nclass Program {\n    static void Main() {\n        Formatter f = s => s.ToUpper();\n        Console.WriteLine(f(\"hello\"));\n    }\n}",
    "o": [
      "HELLO",
      "hello",
      "Hello",
      "Syntax Error"
    ]
  },
  {
    "q": "Which of the following statements about anonymous methods is true?",
    "o": [
      "They allow inline method definitions without a separate method name",
      "They cannot access variables from the outer method",
      "They are only used with LINQ",
      "They always return void"
    ]
  },
  {
    "q": "Which delegate type would you use if your method returns nothing and takes no parameters?",
    "o": [
      "Action",
      "Func",
      "Predicate",
      "EventHandler"
    ]
  },
  {
    "q": "How do you unsubscribe from a C# event?",
    "o": [
      "Using the '-=' operator",
      "Using the 'delete' keyword",
      "Calling event.Unsubscribe()",
      "Setting the event to null"
    ]
  },
  {
    "q": "What is the benefit of multicast delegates?",
    "o": [
      "They can call multiple methods in sequence",
      "They increase memory performance",
      "They avoid method overloading",
      "They support multiple return values"
    ]
  },
  {
    "q": "Which of the following delegates can return a value in C#?",
    "o": [
      "Func<int, int, int>",
      "Action<int, int>",
      "EventHandler",
      "Predicate<string>"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "delegate bool Check(int n);\n\nclass Program {\n    static void Main() {\n        Check isEven = delegate(int n) { return n % 2 == 0; };\n        Console.WriteLine(isEven(4));\n    }\n}",
    "o": [
      "True",
      "False",
      "0",
      "Even"
    ]
  },
  {
    "q": "Which of the following is used to declare an event in a class?",
    "o": [
      "public event EventHandler Clicked;",
      "event Clicked EventHandler;",
      "delegate Clicked EventHandler;",
      "public EventHandler as Clicked;"
    ]
  },
  {
    "q": "What does this lambda expression do?\n`x => x.StartsWith(\"A\")`",
    "o": [
      "Returns true if the string starts with 'A'",
      "Converts the string to uppercase",
      "Checks if string contains 'A'",
      "Returns the first character of string"
    ]
  },
  {
    "q": "Which of the following statements about multicast delegates is true?",
    "o": [
      "They execute all subscribed methods in order",
      "They can only reference one method",
      "They return a list of values",
      "They are used for asynchronous execution only"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "delegate void Notify();\n\nclass Demo {\n    static void A() => Console.Write(\"A\");\n    static void B() => Console.Write(\"B\");\n    static void Main() {\n        Notify n = A;\n        n += B;\n        n();\n    }\n}",
    "o": [
      "AB",
      "BA",
      "A",
      "B"
    ]
  },
  {
    "q": "Which lambda expression correctly returns the square of a number?",
    "o": [
      "x => x * x",
      "x => x + x",
      "x => x / x",
      "x => x - x"
    ]
  },
  {
    "q": "What is a key difference between an event and a delegate?",
    "o": [
      "An event can only be triggered by the class where it is declared",
      "A delegate cannot point to static methods",
      "Events support return values",
      "Delegates cannot be passed as parameters"
    ]
  },
  {
    "q": "What keyword is used to raise an event?",
    "o": [
      "Invoke",
      "Raise",
      "Call",
      "Trigger"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "delegate int MathOp(int a, int b);\n\nclass Program {\n    static void Main() {\n        MathOp op = (a, b) => a - b;\n        Console.WriteLine(op(10, 4));\n    }\n}",
    "o": [
      "6",
      "14",
      "4",
      "10"
    ]
  },
  {
    "q": "Which delegate type does not return a value in C#?",
    "o": [
      "Action",
      "Func",
      "Predicate",
      "Converter"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "delegate void Greet(string name);\n\nclass Program {\n    static void Main() {\n        Greet greet = delegate(string name) {\n            Console.WriteLine(\"Hi \" + name);\n        };\n        greet(\"Sam\");\n    }\n}",
    "o": [
      "Hi Sam",
      "Hello Sam",
      "Sam",
      "greet Sam"
    ]
  },
  {
    "q": "Which of these statements about anonymous methods is true?",
    "o": [
      "They do not require a separate method declaration",
      "They must always return a value",
      "They cannot use parameters",
      "They are always asynchronous"
    ]
  },
  {
    "q": "Which is the correct way to subscribe to an event named `OnChange`?",
    "o": [
      "obj.OnChange += HandlerMethod;",
      "HandlerMethod += obj.OnChange;",
      "subscribe(obj.OnChange, HandlerMethod);",
      "obj.OnChange = HandlerMethod;"
    ]
  },
  {
    "q": "What will this lambda expression return?\n`(a, b) => a > b ? a : b`",
    "o": [
      "The larger of two values",
      "The smaller of two values",
      "The sum of a and b",
      "A boolean indicating if a > b"
    ]
  },
  {
    "q": "Which delegate type returns a boolean value?",
    "o": [
      "Predicate<T>",
      "Func<T>",
      "Action<T>",
      "EventHandler"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "delegate void Print();\n\nclass Program {\n    static void Hello() => Console.Write(\"Hello \");\n    static void World() => Console.Write(\"World\");\n\n    static void Main() {\n        Print p = Hello;\n        p += World;\n        p();\n    }\n}",
    "o": [
      "Hello World",
      "World Hello",
      "Hello",
      "World"
    ]
  },
  {
    "q": "Which of the following is NOT a valid use of delegates?",
    "o": [
      "Accessing private variables directly from outside the class",
      "Calling multiple methods in a sequence",
      "Defining a custom callback",
      "Passing methods as parameters"
    ]
  },
  {
    "q": "How many return values does a multicast delegate return?",
    "o": [
      "Only the value from the last invoked method",
      "All values from each method",
      "The sum of all return values",
      "None; multicast delegates cannot return"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "Func<int, int, int> add = (x, y) => x + y;\nConsole.WriteLine(add(3, 7));",
    "o": [
      "10",
      "37",
      "3",
      "7"
    ]
  },
  {
    "q": "Which of the following is true about multicast delegates?",
    "o": [
      "They invoke multiple methods in the order they were added.",
      "They execute only the last assigned method.",
      "They are only used with asynchronous programming.",
      "They must return a boolean value."
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "delegate void Log(string msg);\n\nclass Program {\n    static void Info(string msg) => Console.Write(\"Info: \" + msg);\n    static void Warn(string msg) => Console.Write(\"Warning: \" + msg);\n\n    static void Main() {\n        Log logger = Info;\n        logger += Warn;\n        logger(\"Disk space low\");\n    }\n}",
    "o": [
      "Info: Disk space lowWarning: Disk space low",
      "Warning: Disk space low",
      "Disk space low",
      "Warning: Disk space lowInfo: Disk space low"
    ]
  },
  {
    "q": "What is a delegate in C#?",
    "o": [
      "A type that references methods with a specific signature",
      "A method that returns multiple values",
      "A runtime error handler",
      "A preprocessor directive"
    ]
  },
  {
    "q": "Which syntax represents a lambda that takes no parameters and returns 42?",
    "o": [
      "() => 42",
      "x => 42",
      "(int x, int y) => x + y",
      "() => { return; }"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "delegate int Operation(int x);\n\nclass Program {\n    static void Main() {\n        Operation square = x => x * x;\n        Console.Write(square(6));\n    }\n}",
    "o": [
      "36",
      "12",
      "6",
      "18"
    ]
  },
  {
    "q": "How is an anonymous method different from a lambda expression?",
    "o": [
      "Anonymous methods can omit parameter types; lambdas cannot in some cases.",
      "Lambdas always require a delegate declaration.",
      "Anonymous methods are not allowed in events.",
      "Lambda expressions always have a return type."
    ]
  },
  {
    "q": "Which of the following can raise an event in C#?",
    "o": [
      "The class that declares the event",
      "Any class in the same namespace",
      "Any subscriber",
      "Only static classes"
    ]
  },
  {
    "q": "What is the purpose of `EventHandler` in C#?",
    "o": [
      "To define a delegate signature for standard events",
      "To catch exceptions during event execution",
      "To handle UI button clicks only",
      "To generate runtime errors"
    ]
  },
  {
    "q": "Which line correctly declares a delegate that returns void and takes two integers?",
    "o": [
      "public delegate void MyDelegate(int x, int y);",
      "delegate MyDelegate void(int x, int y);",
      "public delegate void MyDelegate();",
      "delegate int MyDelegate(int x, int y);"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "delegate void Message();\n\nclass Program {\n    static void Main() {\n        Message msg = () => Console.Write(\"Hello from lambda\");\n        msg();\n    }\n}",
    "o": [
      "Hello from lambda",
      "lambda",
      "msg",
      "No output"
    ]
  },
  {
    "q": "Which delegate declaration allows a method with two string parameters and no return value?",
    "o": [
      "public delegate void Notify(string msg1, string msg2);",
      "public delegate string Notify(string msg);",
      "delegate int Notify(int x);",
      "delegate bool Notify();"
    ]
  },
  {
    "q": "What is the output of this code snippet?",
    "c": "delegate void Action();\n\nclass Program {\n    static void First() => Console.Write(\"First \");\n    static void Second() => Console.Write(\"Second\");\n\n    static void Main() {\n        Action action = First;\n        action += Second;\n        action();\n    }\n}",
    "o": [
      "First Second",
      "Second First",
      "Second",
      "First"
    ]
  },
  {
    "q": "Which of the following is NOT a valid use case for delegates in C#?",
    "o": [
      "Directly manipulating database connections",
      "Callback mechanisms",
      "Implementing events",
      "Passing methods as parameters"
    ]
  },
  {
    "q": "What keyword is used to define an event in C#?",
    "o": [
      "event",
      "delegate",
      "handler",
      "trigger"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "delegate int Calc(int a, int b);\n\nclass Program {\n    static void Main() {\n        Calc add = delegate(int x, int y) { return x + y; };\n        Console.Write(add(3, 4));\n    }\n}",
    "o": [
      "7",
      "12",
      "34",
      "0"
    ]
  },
  {
    "q": "Which of the following best describes a lambda expression?",
    "o": [
      "A concise way to represent an anonymous function",
      "A type of exception in C#",
      "A new data type introduced in .NET Core",
      "A mechanism to create SQL queries"
    ]
  },
  {
    "q": "Which scenario best fits using a multicast delegate?",
    "o": [
      "Triggering multiple logging methods after an operation",
      "Handling exceptions",
      "Creating a loop",
      "Formatting strings"
    ]
  },
  {
    "q": "What is required for a method to subscribe to an event?",
    "o": [
      "It must match the delegate signature of the event",
      "It must be static",
      "It must return a string",
      "It must be declared with the 'event' keyword"
    ]
  },
  {
    "q": "Which of the following uses a lambda expression correctly?",
    "o": [
      "(x, y) => x * y",
      "(int x, int y): x * y",
      "x * y => (x, y)",
      "lambda(x, y) { return x * y; }"
    ]
  },
  {
    "q": "What is the purpose of an anonymous method in C#?",
    "o": [
      "To define inline method logic without a separate method declaration",
      "To call system libraries anonymously",
      "To assign a delegate to a class name",
      "To declare a hidden class"
    ]
  },
  {
    "q": "Which of the following best describes a multicast delegate in C#?",
    "o": [
      "A delegate that can reference more than one method",
      "A delegate that calls methods from multiple classes",
      "A delegate used only for asynchronous operations",
      "A delegate used for multithreading"
    ]
  },
  {
    "q": "What will be the output of this code?",
    "c": "delegate void Logger(string msg);\n\nclass Program {\n    static void Info(string msg) => Console.Write(\"INFO: \" + msg);\n    static void Warn(string msg) => Console.Write(\"WARN: \" + msg);\n\n    static void Main() {\n        Logger log = Info;\n        log += Warn;\n        log(\"Disk space low\");\n    }\n}",
    "o": [
      "INFO: Disk space lowWARN: Disk space low",
      "WARN: Disk space lowINFO: Disk space low",
      "Disk space low",
      "INFO: WARN: Disk space low"
    ]
  },
  {
    "q": "Which of these is a valid event declaration in C#?",
    "o": [
      "public event EventHandler Clicked;",
      "event delegate void Clicked();",
      "delegate event Clicked();",
      "public Clicked event;"
    ]
  },
  {
    "q": "Which statement about lambda expressions in C# is TRUE?",
    "o": [
      "Lambda expressions can capture variables from their enclosing scope",
      "Lambda expressions must always return a value",
      "Lambdas cannot be used with LINQ",
      "Lambdas cannot be assigned to delegates"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "Func<int, int, int> multiply = (a, b) => a * b;\nConsole.Write(multiply(3, 4));",
    "o": [
      "12",
      "7",
      "34",
      "0"
    ]
  },
  {
    "q": "Which syntax correctly declares an anonymous method that returns a boolean?",
    "o": [
      "Func<int, bool> isEven = delegate(int x) { return x % 2 == 0; };",
      "Func<int, bool> isEven = (int x) => x % 2 == 0;",
      "Func<int, bool> isEven = new Func<int, bool>(x => x % 2 == 0);",
      "Func<int, bool> isEven = lambda x: x % 2 == 0;"
    ]
  },
  {
    "q": "What is required for a method to be added to a delegate invocation list?",
    "o": [
      "It must match the delegate's signature",
      "It must be static",
      "It must be public",
      "It must return void"
    ]
  },
  {
    "q": "Which scenario illustrates the use of an event?",
    "o": [
      "Notifying all listeners when a file download completes",
      "Assigning two functions to a single method",
      "Iterating over a list of functions",
      "Dynamically invoking methods using reflection"
    ]
  },
  {
    "q": "What will be printed by this code?",
    "c": "delegate string Greet(string name);\n\nclass Program {\n    static void Main() {\n        Greet greet = delegate(string name) { return \"Hello, \" + name; };\n        Console.Write(greet(\"Sam\"));\n    }\n}",
    "o": [
      "Hello, Sam",
      "Hi Sam",
      "Hello Sam!",
      "Sam"
    ]
  },
  {
    "q": "In C#, what is the purpose of the 'delegate' keyword?",
    "o": [
      "To define a reference type that can encapsulate a method",
      "To declare an event handler",
      "To trigger an event",
      "To define a lambda function"
    ]
  },
  {
    "q": "Which feature allows a delegate to invoke multiple methods in order?",
    "o": [
      "Multicast Delegate",
      "Anonymous Method",
      "Event Handler",
      "Lambda Expression"
    ]
  },
  {
    "q": "What will be the output of this code?",
    "c": "delegate void Notify();\n\nclass Program {\n    static void Alert() => Console.Write(\"Alert \");\n    static void Ring() => Console.Write(\"Ring\");\n\n    static void Main() {\n        Notify notify = Alert;\n        notify += Ring;\n        notify();\n    }\n}",
    "o": [
      "Alert Ring",
      "Ring Alert",
      "Alert",
      "Ring"
    ]
  },
  {
    "q": "Which statement about C# events is correct?",
    "o": [
      "Events are based on delegates and allow subscribers to respond to actions",
      "Events are only triggered automatically by the system",
      "Events cannot be declared inside classes",
      "Events can only use built-in EventHandler type"
    ]
  },
  {
    "q": "Which of the following is the correct syntax for a lambda expression that returns the square of a number?",
    "o": [
      "x => x * x",
      "(x) => { return x * x; }",
      "x -> x * x",
      "lambda x: x * x"
    ]
  },
  {
    "q": "What is the output of this anonymous method usage?",
    "c": "delegate int Operation(int a, int b);\n\nclass Program {\n    static void Main() {\n        Operation op = delegate(int x, int y) { return x - y; };\n        Console.Write(op(10, 3));\n    }\n}",
    "o": [
      "7",
      "13",
      "3",
      "-7"
    ]
  },
  {
    "q": "Which of the following allows you to define an inline method without a name?",
    "o": [
      "Anonymous Method",
      "Delegate",
      "Event Handler",
      "Method Overloading"
    ]
  },
  {
    "q": "Why might a developer use a lambda expression instead of an anonymous method?",
    "o": [
      "Lambda expressions are more concise and readable",
      "Lambda expressions are faster at runtime",
      "Anonymous methods support more parameters",
      "Anonymous methods are type-safe while lambda expressions are not"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "Action display = () => Console.Write(\"Lambda Works\");\ndisplay();",
    "o": [
      "Lambda Works",
      "display",
      "Action",
      "Nothing will be printed"
    ]
  },
  {
    "q": "How does a subscriber register for an event in C#?",
    "o": [
      "Using += operator with a method matching the delegate signature",
      "By calling event.Register()",
      "By assigning the event to a function",
      "Using the 'subscribe' keyword"
    ]
  },
  {
    "q": "Which delegate type is used when an event needs to return void and accept a sender and event data?",
    "o": [
      "EventHandler",
      "Func<T>",
      "Action<T>",
      "MulticastDelegate"
    ]
  },
  {
    "q": "Which keyword is used to define a delegate in C#?",
    "o": [
      "delegate",
      "event",
      "handler",
      "action"
    ]
  },
  {
    "q": "What will be the output of the following code?",
    "c": "delegate void Message();\n\nclass Program {\n    static void A() => Console.Write(\"A \");\n    static void B() => Console.Write(\"B \");\n\n    static void Main() {\n        Message msg = A;\n        msg += B;\n        msg += A;\n        msg();\n    }\n}",
    "o": [
      "A B A ",
      "A A B ",
      "B A A ",
      "B B A "
    ]
  },
  {
    "q": "Which delegate type is predefined in C# to represent a method that takes no parameters and returns void?",
    "o": [
      "Action",
      "Func",
      "Predicate",
      "EventHandler"
    ]
  },
  {
    "q": "What is the purpose of an event in C#?",
    "o": [
      "To provide a mechanism for publishing and subscribing to notifications",
      "To store a sequence of methods to execute later",
      "To define variables dynamically",
      "To return values from methods"
    ]
  },
  {
    "q": "Which lambda expression correctly returns the sum of two integers a and b?",
    "o": [
      "(a, b) => a + b",
      "sum(a, b) => a + b",
      "a + b => return",
      "(a + b) => { a + b; }"
    ]
  },
  {
    "q": "What will be printed by the following code?",
    "c": "delegate int MathOp(int x);\n\nclass Program {\n    static void Main() {\n        MathOp square = delegate(int num) { return num * num; };\n        Console.WriteLine(square(4));\n    }\n}",
    "o": [
      "16",
      "8",
      "4",
      "2"
    ]
  },
  {
    "q": "What distinguishes an event from a delegate in C#?",
    "o": [
      "Events restrict direct invocation outside the declaring class",
      "Events are faster to execute than delegates",
      "Delegates cannot store multiple methods",
      "Events support anonymous methods while delegates do not"
    ]
  },
  {
    "q": "Which of the following is a valid anonymous method declaration?",
    "o": [
      "delegate(int x) { return x * 2; }",
      "anonymous(int x) => x * 2;",
      "lambda(int x) => { return x * 2; }",
      "func(x) = x * 2;"
    ]
  },
  {
    "q": "Which C# keyword ensures that only the class that defines an event can raise it?",
    "o": [
      "event",
      "delegate",
      "private",
      "sealed"
    ]
  },
  {
    "q": "What will the following lambda expression return?",
    "c": "Func<int, int> triple = x => x * 3;\nConsole.Write(triple(6));",
    "o": [
      "18",
      "9",
      "12",
      "36"
    ]
  },
  {
    "q": "What does a multicast delegate return if multiple methods have return values?",
    "o": [
      "Only the return value of the last method invoked",
      "All return values in a list",
      "Return value of the first method only",
      "It throws an exception"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "delegate void Notify();\n\nclass Program {\n    static void Alert() => Console.Write(\"Alert \");\n    static void Warning() => Console.Write(\"Warning \");\n\n    static void Main() {\n        Notify notify = Alert;\n        notify += Warning;\n        notify();\n    }\n}",
    "o": [
      "Alert Warning ",
      "Warning Alert ",
      "Alert ",
      "Warning "
    ]
  },
  {
    "q": "Which of the following best defines a lambda expression?",
    "o": [
      "An anonymous function used to create delegates or expression tree types",
      "A class constructor",
      "A type of variable",
      "A try-catch block"
    ]
  },
  {
    "q": "Which syntax correctly defines a lambda that returns true if an integer is even?",
    "o": [
      "x => x % 2 == 0",
      "(int x): x % 2 == 0",
      "=> x % 2 == 0",
      "x := x % 2 == 0"
    ]
  },
  {
    "q": "What is the purpose of using events over plain delegates?",
    "o": [
      "To restrict invocation of the delegate to within the declaring class",
      "To increase execution speed",
      "To use fewer resources",
      "To make delegates return values"
    ]
  },
  {
    "q": "What will the following code print?",
    "c": "delegate void Message(string text);\n\nclass Program {\n    static void Main() {\n        Message msg = delegate(string t) {\n            Console.WriteLine(\"Anonymous: \" + t);\n        };\n        msg(\"Hello\");\n    }\n}",
    "o": [
      "Anonymous: Hello",
      "Hello: Anonymous",
      "Anonymous Hello",
      "Hello Anonymous"
    ]
  },
  {
    "q": "Which predefined delegate returns a value and takes one or more parameters?",
    "o": [
      "Func",
      "Action",
      "Predicate",
      "EventHandler"
    ]
  },
  {
    "q": "In C#, which of the following allows chaining multiple methods together?",
    "o": [
      "Multicast delegate",
      "Single-cast delegate",
      "Lambda expression",
      "Func delegate"
    ]
  },
  {
    "q": "Which of the following statements is true about anonymous methods?",
    "o": [
      "They are inline unnamed methods defined using the delegate keyword",
      "They must have a return type declared explicitly",
      "They cannot access variables from the outer scope",
      "They are used only with events"
    ]
  },
  {
    "q": "What does the following code output?",
    "c": "EventHandler myHandler = (s, e) => Console.Write(\"Event Triggered\");\nmyHandler.Invoke(null, EventArgs.Empty);",
    "o": [
      "Event Triggered",
      "null",
      "Exception",
      "Empty"
    ]
  },
  {
    "q": "What is the correct way to declare a delegate in C#?",
    "o": [
      "public delegate int Calculate(int x, int y);",
      "delegate void int Calculate(x, y);",
      "function delegate Calculate(int, int);",
      "int delegate Calculate(int x, int y);"
    ]
  },
  {
    "q": "What will be printed when this code runs?",
    "c": "delegate void Printer(string message);\n\nclass Program {\n    static void PrintHello(string msg) => Console.WriteLine(\"Hello \" + msg);\n    static void PrintBye(string msg) => Console.WriteLine(\"Bye \" + msg);\n\n    static void Main() {\n        Printer p = PrintHello;\n        p += PrintBye;\n        p(\"World\");\n    }\n}",
    "o": [
      "Hello World\nBye World",
      "Bye World\nHello World",
      "Hello World",
      "Bye World"
    ]
  },
  {
    "q": "Which delegate type is used when a method does not return a value?",
    "o": [
      "Action",
      "Func",
      "Predicate",
      "EventHandler<T>"
    ]
  },
  {
    "q": "Which of these best describes an event in C#?",
    "o": [
      "A mechanism that enables a class or object to notify other classes or objects when something of interest occurs",
      "A method that gets called periodically",
      "A function pointer",
      "A background task runner"
    ]
  },
  {
    "q": "What is the output of the following lambda expression?",
    "c": "Func<int, int, int> add = (a, b) => a + b;\nConsole.WriteLine(add(3, 4));",
    "o": [
      "7",
      "34",
      "3 + 4",
      "Error"
    ]
  },
  {
    "q": "What feature allows a lambda to access variables defined in its outer method scope?",
    "o": [
      "Closure",
      "Callback",
      "Boxing",
      "Multicast"
    ]
  },
  {
    "q": "What does the following code do?",
    "c": "delegate void LogHandler(string message);\nclass Logger {\n    public event LogHandler LogEvent;\n    public void TriggerLog(string msg) {\n        LogEvent?.Invoke(msg);\n    }\n}",
    "o": [
      "Raises an event if there are subscribers",
      "Throws a null exception",
      "Calls the method directly",
      "Logs the message to a file"
    ]
  },
  {
    "q": "Which syntax defines an anonymous method?",
    "o": [
      "delegate(int x) { return x * x; }",
      "lambda(int x) { return x * x; }",
      "(int x) -> x * x",
      "fn(x) => x * x"
    ]
  },
  {
    "q": "What is the main benefit of using multicast delegates?",
    "o": [
      "They allow multiple methods to be called with one delegate invocation",
      "They consume less memory",
      "They improve runtime speed",
      "They restrict method access"
    ]
  },
  {
    "q": "What is the output of this event handler?",
    "c": "event EventHandler SomethingHappened;\n\nvoid RaiseEvent() {\n    SomethingHappened += (s, e) => Console.WriteLine(\"Event fired\");\n    SomethingHappened?.Invoke(this, EventArgs.Empty);\n}",
    "o": [
      "Event fired",
      "Event not triggered",
      "Exception thrown",
      "Nothing"
    ]
  },
  {
    "q": "Which of the following allows you to invoke multiple methods with a single delegate instance?",
    "o": [
      "Multicast delegate",
      "Anonymous method",
      "Lambda expression",
      "Generic delegate"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "delegate void Show();\n\nclass Demo {\n    static void A() => Console.Write(\"A \");\n    static void B() => Console.Write(\"B \");\n\n    static void Main() {\n        Show s = A;\n        s += B;\n        s();\n    }\n}",
    "o": [
      "A B ",
      "B A ",
      "AB",
      "Only B"
    ]
  },
  {
    "q": "Which keyword is used to define an event in C#?",
    "o": [
      "event",
      "delegate",
      "trigger",
      "handler"
    ]
  },
  {
    "q": "What is the purpose of `EventHandler` in C#?",
    "o": [
      "To provide a standard delegate for event handling methods",
      "To invoke all delegates at once",
      "To define a lambda expression",
      "To handle exceptions"
    ]
  },
  {
    "q": "What is the output of the following lambda expression?",
    "c": "Func<int, int> square = x => x * x;\nConsole.WriteLine(square(6));",
    "o": [
      "36",
      "12",
      "6",
      "Error"
    ]
  },
  {
    "q": "Which of the following is a valid lambda expression in C#?",
    "o": [
      "(x, y) => x + y",
      "lambda x y => x + y",
      "function(x, y) { return x + y; }",
      "def(x, y): return x + y"
    ]
  },
  {
    "q": "Which statement about anonymous methods is correct?",
    "o": [
      "They are defined using the `delegate` keyword without a method name.",
      "They must have a name.",
      "They can only be used inside classes.",
      "They must return void."
    ]
  },
  {
    "q": "What is printed by this code?",
    "c": "delegate string Greet(string name);\n\nclass Program {\n    static void Main() {\n        Greet g = delegate(string n) { return \"Hi, \" + n; };\n        Console.WriteLine(g(\"Tom\"));\n    }\n}",
    "o": [
      "Hi, Tom",
      "Hello, Tom",
      "Tom",
      "delegate string"
    ]
  },
  {
    "q": "When is an event typically triggered in C#?",
    "o": [
      "When the `Invoke` method is called on the delegate",
      "At object construction",
      "Only after exception is thrown",
      "Automatically on field change"
    ]
  },
  {
    "q": "What does the `?.Invoke()` syntax ensure in event invocation?",
    "o": [
      "The event is only invoked if there are subscribers",
      "The event is always invoked",
      "The event is invoked asynchronously",
      "The event is removed"
    ]
  },
  {
    "q": "Which of the following is a valid declaration of a delegate?",
    "o": [
      "public delegate void MyDelegate(string message);",
      "delegate MyDelegate void(string message);",
      "void delegate MyDelegate(string message);",
      "public MyDelegate delegate(string message);"
    ]
  },
  {
    "q": "What will the following code print?",
    "c": "delegate int Calculate(int a, int b);\n\nclass Test {\n    static void Main() {\n        Calculate calc = (a, b) => a - b;\n        Console.WriteLine(calc(10, 3));\n    }\n}",
    "o": [
      "7",
      "13",
      "-7",
      "10"
    ]
  },
  {
    "q": "Which of the following best describes a multicast delegate?",
    "o": [
      "A delegate that holds references to multiple methods",
      "A delegate that only returns a boolean",
      "A delegate used only in asynchronous methods",
      "A delegate that accepts variable parameters"
    ]
  },
  {
    "q": "Which line correctly adds a method to an event?",
    "o": [
      "myObj.MyEvent += MyHandler;",
      "MyHandler += myObj.MyEvent;",
      "MyHandler = myObj.MyEvent;",
      "myObj.MyEvent(MyHandler);"
    ]
  },
  {
    "q": "What is the return type of a lambda expression like `() => 5 * 2`?",
    "o": [
      "int",
      "void",
      "bool",
      "string"
    ]
  },
  {
    "q": "Which of the following code snippets correctly uses an anonymous method?",
    "c": "delegate int Operation(int x, int y);\nOperation op = delegate(int a, int b) { return a + b; };",
    "o": [
      "Correct usage of anonymous method",
      "Incorrect: missing return keyword",
      "Incorrect: delegate keyword not needed",
      "Incorrect: lambda expression required"
    ]
  },
  {
    "q": "In which scenario would you use `EventHandler<T>`?",
    "o": [
      "When you want to pass custom event data",
      "When you don't want to pass any data",
      "When you use multicast delegates",
      "When you trigger exceptions"
    ]
  },
  {
    "q": "What is a key advantage of using lambda expressions over anonymous methods?",
    "o": [
      "Concise syntax",
      "Stronger typing",
      "Longer code allowed",
      "Fewer parameters required"
    ]
  },
  {
    "q": "What happens if an event has no subscribers and is invoked without null check?",
    "o": [
      "A NullReferenceException is thrown",
      "The program prints nothing",
      "The event auto-subscribes itself",
      "The program continues silently"
    ]
  },
  {
    "q": "What is the role of delegates in C# events?",
    "o": [
      "They define the method signature for the event handler",
      "They execute asynchronous tasks only",
      "They override existing methods",
      "They define namespaces"
    ]
  },
  {
    "q": "What is the primary purpose of a delegate in C#?",
    "o": [
      "To reference methods with a specific signature",
      "To store data dynamically",
      "To perform mathematical calculations",
      "To create new threads"
    ]
  },
  {
    "q": "Which of the following is true about multicast delegates?",
    "o": [
      "They can invoke multiple methods in sequence",
      "They can only store one method",
      "They require the use of async/await",
      "They throw errors if multiple methods are added"
    ]
  },
  {
    "q": "What does the following code output?",
    "c": "delegate void ShowMessage(string msg);\nclass Program {\n    static void Greet(string msg) => Console.WriteLine(\"Hello \" + msg);\n    static void Main() {\n        ShowMessage sm = Greet;\n        sm(\"World\");\n    }\n}",
    "o": [
      "Hello World",
      "World Hello",
      "Hello",
      "World"
    ]
  },
  {
    "q": "How can you unsubscribe from an event in C#?",
    "o": [
      "myEvent -= MyHandler;",
      "myEvent.Remove(MyHandler);",
      "myEvent.unbind(MyHandler);",
      "event.Unsubscribe(MyHandler);"
    ]
  },
  {
    "q": "What does this lambda expression return: `(x, y) => x > y`?",
    "o": [
      "A boolean indicating if x is greater than y",
      "An integer value",
      "A string output",
      "Nothing, it’s invalid"
    ]
  },
  {
    "q": "Which code demonstrates an anonymous method correctly?",
    "c": "delegate string Formatter(string input);\nFormatter fmt = delegate(string s) { return s.ToUpper(); };",
    "o": [
      "It creates an anonymous method to convert a string to uppercase",
      "It causes a syntax error",
      "It defines a lambda expression",
      "It declares an event handler"
    ]
  },
  {
    "q": "Which keyword is essential to declare an event in C#?",
    "o": [
      "event",
      "delegate",
      "handler",
      "trigger"
    ]
  },
  {
    "q": "Why are events preferred over direct delegate invocation?",
    "o": [
      "They provide encapsulation and prevent external invocation",
      "They are faster",
      "They use less memory",
      "They are required for every class"
    ]
  },
  {
    "q": "Which syntax uses a lambda to define a function that doubles a value?",
    "o": [
      "(x) => x * 2",
      "(x, y) => x + y + y",
      "delegate(int x) { return x * 2; }",
      "x => { Console.WriteLine(x); }"
    ]
  },
  {
    "q": "What is a common use-case for anonymous methods?",
    "o": [
      "To write short event handlers inline",
      "To define classes at runtime",
      "To initialize delegates globally",
      "To implement extension methods"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "delegate int Operation(int x);\nclass Test {\n    static int Square(int x) => x * x;\n    static void Main() {\n        Operation op = Square;\n        Console.WriteLine(op(4));\n    }\n}",
    "o": [
      "16",
      "8",
      "4",
      "0"
    ]
  },
  {
    "q": "Which of the following best defines a lambda expression in C#?",
    "o": [
      "A concise way to represent anonymous methods using the => syntax",
      "A named method stored in a class",
      "A delegate that must be declared in a class",
      "An inline class method"
    ]
  },
  {
    "q": "What is the purpose of the 'delegate' keyword in C#?",
    "o": [
      "To declare a reference type that can point to a method",
      "To create a dynamic class",
      "To bind an event directly",
      "To define a loop"
    ]
  },
  {
    "q": "Which of the following is a valid multicast delegate scenario?",
    "c": "delegate void Notify();\nclass Program {\n    static void A() => Console.Write(\"A\");\n    static void B() => Console.Write(\"B\");\n    static void Main() {\n        Notify notify = A;\n        notify += B;\n        notify();\n    }\n}",
    "o": [
      "Outputs AB",
      "Outputs BA",
      "Outputs A only",
      "Compile-time error"
    ]
  },
  {
    "q": "Which is a benefit of using events over raw delegates?",
    "o": [
      "Encapsulation and control over who can invoke the delegate",
      "Improved performance",
      "Ability to use async methods only",
      "Automatic logging"
    ]
  },
  {
    "q": "How do you define an event using a delegate?",
    "o": [
      "public event EventHandler MyEvent;",
      "public delegate event MyEvent;",
      "event delegate MyEventHandler;",
      "MyEvent is EventHandler;"
    ]
  },
  {
    "q": "What does the following lambda return?",
    "c": "Func<int, int, int> multiply = (a, b) => a * b;\nConsole.WriteLine(multiply(3, 5));",
    "o": [
      "15",
      "8",
      "10",
      "0"
    ]
  },
  {
    "q": "Which code defines an anonymous method that checks if a number is even?",
    "c": "Predicate<int> isEven = delegate(int x) { return x % 2 == 0; };",
    "o": [
      "Defines an anonymous method correctly",
      "Throws a syntax error",
      "Defines a lambda, not anonymous method",
      "Incorrect delegate type used"
    ]
  },
  {
    "q": "In the event declaration 'public event EventHandler Click;', what is 'Click'?",
    "o": [
      "An event based on the EventHandler delegate",
      "A delegate instance",
      "A multicast delegate type",
      "A lambda function"
    ]
  },
  {
    "q": "What happens if no subscribers are attached to an event and it is raised?",
    "o": [
      "A NullReferenceException will be thrown unless null-checked",
      "The event will be executed by default",
      "The CLR assigns a default method",
      "The program waits for a subscriber"
    ]
  },
  {
    "q": "What is the key difference between a delegate and an event in C#?",
    "o": [
      "A delegate can be called directly, while an event cannot be invoked outside the declaring class",
      "A delegate supports only one method, events can call multiple",
      "Events execute asynchronously, delegates do not",
      "Delegates are used only with UI"
    ]
  },
  {
    "q": "What is the output of this code snippet?",
    "c": "delegate void Greet(string name);\nclass Program {\n    static void Hello(string name) => Console.Write($\"Hello {name}, \");\n    static void Bye(string name) => Console.Write($\"Bye {name}.\");\n    static void Main() {\n        Greet g = Hello;\n        g += Bye;\n        g(\"Sam\");\n    }\n}",
    "o": [
      "Hello Sam, Bye Sam.",
      "Bye Sam. Hello Sam,",
      "Bye Sam.",
      "Hello Sam,"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "Func<int, int> square = x => x * x;\nConsole.WriteLine(square(6));",
    "o": [
      "36",
      "12",
      "18",
      "6"
    ]
  },
  {
    "q": "Which of these defines an anonymous method that returns the square of a number?",
    "o": [
      "Func<int, int> square = delegate(int x) { return x * x; };",
      "Func<int, int> square = (int x) => x * x;",
      "delegate int square(int x) => x * x;",
      "Func<int, int> square = new Func<int>(x => x * x);"
    ]
  },
  {
    "q": "Which of these statements about multicast delegates is true?",
    "o": [
      "They can point to multiple methods and invoke them in order",
      "They only support void return types",
      "They must be declared as events",
      "They throw an error if more than one method is assigned"
    ]
  },
  {
    "q": "How do you attach an event handler to an event in C#?",
    "o": [
      "By using the += operator",
      "By using the = operator",
      "By assigning the event to a method directly",
      "By calling the event name as a method"
    ]
  },
  {
    "q": "Which lambda correctly checks if a string starts with 'A'?",
    "o": [
      "Func<string, bool> startsWithA = s => s.StartsWith(\"A\");",
      "Func<string, bool> startsWithA = s => s.Contains(\"A\");",
      "Predicate<string> startsWithA = s => s[0] == 'A';",
      "Action<string> startsWithA = s => s == \"A\";"
    ]
  },
  {
    "q": "Which is a valid way to invoke a delegate safely in C#?",
    "o": [
      "if (myDelegate != null) myDelegate();",
      "if (myDelegate) myDelegate();",
      "myDelegate.invoke();",
      "invoke(myDelegate);"
    ]
  },
  {
    "q": "Which syntax is correct to declare an event using a custom delegate?",
    "o": [
      "public event MyDelegate OnCustomEvent;",
      "event delegate MyDelegate OnCustomEvent;",
      "MyDelegate event OnCustomEvent;",
      "public OnCustomEvent event MyDelegate;"
    ]
  },
  {
    "q": "What is the main purpose of anonymous methods?",
    "o": [
      "To define inline methods without a name for short-lived use",
      "To override existing methods anonymously",
      "To compile code faster at runtime",
      "To debug code more easily"
    ]
  },
  {
    "q": "Which of the following correctly defines a delegate in C#?",
    "o": [
      "public delegate int MathOperation(int x, int y);",
      "delegate void EventHandler();",
      "int delegate Add(int x, int y);",
      "delegate = int Add(int x, int y);"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "delegate void Notify();\nclass Program {\n    static void Hello() => Console.Write(\"Hello \");\n    static void World() => Console.WriteLine(\"World!\");\n    static void Main() {\n        Notify notify = Hello;\n        notify += World;\n        notify();\n    }\n}",
    "o": [
      "Hello World!",
      "World! Hello",
      "Hello",
      "World!"
    ]
  },
  {
    "q": "Which keyword is used to define an event in C#?",
    "o": [
      "event",
      "delegate",
      "handler",
      "trigger"
    ]
  },
  {
    "q": "Which of these is a valid multicast delegate scenario?",
    "o": [
      "A delegate that points to multiple void-returning methods",
      "A delegate with multiple return types",
      "A delegate that throws an exception if assigned more than one method",
      "A delegate that can only be triggered once"
    ]
  },
  {
    "q": "Which lambda expression correctly multiplies two integers?",
    "o": [
      "Func<int, int, int> multiply = (a, b) => a * b;",
      "Func<int, int> multiply = (a, b) => a * b;",
      "int multiply(int a, int b) => a * b;",
      "Func<int> multiply = a * b => a * b;"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "Func<int, int, int> add = delegate(int a, int b) {\n    return a + b;\n};\nConsole.WriteLine(add(3, 4));",
    "o": [
      "7",
      "34",
      "3",
      "4"
    ]
  },
  {
    "q": "Which of the following best describes an anonymous method?",
    "o": [
      "A method declared without a name using the delegate keyword",
      "A private method used within the same class",
      "A method defined in a separate file",
      "A static method with no parameters"
    ]
  },
  {
    "q": "What is a common use case of events in C#?",
    "o": [
      "Implementing UI control interactions like button clicks",
      "Storing values in memory",
      "Creating new threads",
      "Writing data to a file"
    ]
  },
  {
    "q": "Which of the following is a correct use of the lambda expression to check if a number is even?",
    "o": [
      "Func<int, bool> isEven = n => n % 2 == 0;",
      "Func<int, bool> isEven = (int n) { return n % 2 == 0; };",
      "Predicate<int> isEven = delegate(n) => n % 2 == 0;",
      "Func<int, bool> isEven = n => { return n % 2 == 0 }"
    ]
  },
  {
    "q": "What happens when a multicast delegate with multiple void-returning methods is invoked?",
    "o": [
      "All methods are called in the order they were added",
      "Only the first method is executed",
      "It returns the result of the last method",
      "It throws a runtime exception"
    ]
  },
  {
    "q": "Which of the following allows methods to be assigned to a delegate at runtime?",
    "o": [
      "Delegates",
      "Events",
      "Interfaces",
      "Abstract classes"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "delegate void LogMessage(string message);\nclass Logger {\n    static void Info(string msg) => Console.WriteLine(\"INFO: \" + msg);\n    static void Main() {\n        LogMessage log = Info;\n        log(\"System started\");\n    }\n}",
    "o": [
      "INFO: System started",
      "System started",
      "log: System started",
      "Error at runtime"
    ]
  },
  {
    "q": "Which syntax correctly defines a lambda expression that returns the square of a number?",
    "o": [
      "Func<int, int> square = x => x * x;",
      "Func<int, int> square = x => return x * x;",
      "Func<int> square = x => x * x;",
      "Func<int, int> square => x * x;"
    ]
  },
  {
    "q": "Which of these statements about events in C# is TRUE?",
    "o": [
      "Events can only be invoked from within the declaring class",
      "Events can be invoked from any class",
      "Events always return a value",
      "Events are static by default"
    ]
  },
  {
    "q": "What is the benefit of using anonymous methods?",
    "o": [
      "They reduce the need to create separate named methods",
      "They always execute faster than regular methods",
      "They are required for creating threads",
      "They enforce stricter type safety"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "delegate void Display();\nclass Program {\n    static void Show1() => Console.Write(\"A\");\n    static void Show2() => Console.Write(\"B\");\n    static void Main() {\n        Display d = Show1;\n        d += Show2;\n        d();\n    }\n}",
    "o": [
      "AB",
      "BA",
      "A",
      "B"
    ]
  },
  {
    "q": "Which delegate type is used for handling events with no return value and no parameters?",
    "o": [
      "Action",
      "Func",
      "Predicate",
      "EventHandler<T>"
    ]
  },
  {
    "q": "Which of the following statements about multicast delegates is correct?",
    "o": [
      "They can call multiple methods in the order they were added",
      "They call only the last assigned method",
      "They must return a value",
      "They cannot be used with events"
    ]
  },
  {
    "q": "What is the output of this lambda expression?",
    "c": "Func<int, int, int> add = (a, b) => a + b;\nConsole.WriteLine(add(2, 3));",
    "o": [
      "5",
      "23",
      "2",
      "3"
    ]
  },
  {
    "q": "Which scenario best fits the use of a delegate?",
    "o": [
      "Callback implementation",
      "Creating a class instance",
      "Declaring a constant value",
      "Parsing user input"
    ]
  },
  {
    "q": "What keyword is used to define a delegate in C#?",
    "o": [
      "delegate",
      "event",
      "func",
      "handler"
    ]
  },
  {
    "q": "What is the output of this code snippet?",
    "c": "delegate int Calculate(int x);\nclass Program {\n    static int Double(int x) => x * 2;\n    static void Main() {\n        Calculate calc = Double;\n        Console.WriteLine(calc(4));\n    }\n}",
    "o": [
      "8",
      "4",
      "2",
      "16"
    ]
  },
  {
    "q": "Which of the following is TRUE about multicast delegates?",
    "o": [
      "They can call multiple methods in sequence",
      "They are limited to one method at a time",
      "They require async/await",
      "They cannot be used with events"
    ]
  },
  {
    "q": "Which code defines an event handler correctly?",
    "c": "public event EventHandler MyEvent;",
    "o": [
      "public event EventHandler MyEvent;",
      "public delegate EventHandler MyEvent;",
      "event MyEventHandler;",
      "EventHandler MyEvent = new EventHandler();"
    ]
  },
  {
    "q": "Which of the following lambda expressions returns true if the number is even?",
    "o": [
      "x => x % 2 == 0",
      "x => x % 2 != 0",
      "x => x > 0",
      "x => x < 0"
    ]
  },
  {
    "q": "What is the benefit of using events over delegates directly?",
    "o": [
      "They prevent subscribers from directly invoking the delegate",
      "They allow multiple return types",
      "They provide better performance",
      "They are required to use generics"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "delegate void Greet(string name);\nclass Program {\n    static void Hello(string name) => Console.WriteLine($\"Hello, {name}!\");\n    static void Main() {\n        Greet greet = delegate(string name) {\n            Console.WriteLine($\"Hi, {name}!\");\n        };\n        greet(\"Bob\");\n    }\n}",
    "o": [
      "Hi, Bob!",
      "Hello, Bob!",
      "greet: Bob",
      "Error"
    ]
  },
  {
    "q": "Which delegate type would you use for a method that takes no parameters and returns nothing?",
    "o": [
      "Action",
      "Func",
      "EventHandler",
      "Predicate"
    ]
  },
  {
    "q": "Which of these is NOT true about lambda expressions in C#?",
    "o": [
      "They must always have a return statement",
      "They can capture outer variables",
      "They can be passed as arguments",
      "They can replace anonymous methods"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "delegate void Notify();\nclass Program {\n    static void Ping() => Console.Write(\"Ping \");\n    static void Pong() => Console.Write(\"Pong\");\n    static void Main() {\n        Notify n = Ping;\n        n += Pong;\n        n();\n    }\n}",
    "o": [
      "Ping Pong",
      "Pong Ping",
      "Ping",
      "Pong"
    ]
  },
  {
    "q": "Which of the following best describes a delegate in C#?",
    "o": [
      "A type that references methods with a specific signature",
      "A variable that stores events",
      "An object used to handle exceptions",
      "A collection of anonymous methods"
    ]
  },
  {
    "q": "What will the following code output?",
    "c": "delegate string Formatter(string input);\nclass Program {\n    static void Main() {\n        Formatter upper = s => s.ToUpper();\n        Console.WriteLine(upper(\"hello\"));\n    }\n}",
    "o": [
      "HELLO",
      "hello",
      "Error",
      "s"
    ]
  },
  {
    "q": "What is a multicast delegate?",
    "o": [
      "A delegate that can point to and invoke multiple methods",
      "A delegate that can be called from multiple threads",
      "A delegate used for broadcasting network packets",
      "A generic delegate type"
    ]
  },
  {
    "q": "Which lambda expression correctly calculates the square of a number?",
    "o": [
      "x => x * x",
      "x => x + x",
      "(int x) => x ** 2",
      "(x) => return x * x;"
    ]
  },
  {
    "q": "Which code snippet shows an anonymous method passed to a delegate?",
    "c": "delegate void ShowMessage(string msg);\nclass Test {\n    static void Main() {\n        ShowMessage show = delegate(string m) {\n            Console.WriteLine(m);\n        };\n        show(\"Anonymous!\");\n    }\n}",
    "o": [
      "Anonymous!",
      "Error",
      "ShowMessage",
      "delegate"
    ]
  },
  {
    "q": "Why are events preferred over direct delegate exposure?",
    "o": [
      "They provide encapsulation and prevent unwanted invocation",
      "They offer faster execution",
      "They automatically use async calls",
      "They are always thread-safe"
    ]
  },
  {
    "q": "Which of the following can be used to subscribe to an event?",
    "o": [
      "+=",
      "-=",
      "=",
      "++"
    ]
  },
  {
    "q": "What will this code print?",
    "c": "delegate void Del();\nclass Demo {\n    static void A() => Console.Write(\"A \");\n    static void B() => Console.Write(\"B \");\n    static void Main() {\n        Del d = A;\n        d += B;\n        d();\n    }\n}",
    "o": [
      "A B ",
      "B A ",
      "A ",
      "Error"
    ]
  },
  {
    "q": "What does the keyword `event` do when declaring an event?",
    "o": [
      "Prevents clients from invoking the delegate directly",
      "Allows automatic implementation of multicast delegates",
      "Marks the method as asynchronous",
      "Makes a delegate public"
    ]
  },
  {
    "q": "Which of the following is TRUE about anonymous methods in C#?",
    "o": [
      "They are unnamed inline methods defined using the delegate keyword",
      "They must be assigned to an event only",
      "They can’t access variables from the outer scope",
      "They are slower than normal methods"
    ]
  },
  {
    "q": "What is the correct syntax to declare a delegate in C# that returns void and accepts an int?",
    "o": [
      "public delegate void MyDelegate(int x);",
      "delegate void MyDelegate;",
      "void delegate MyDelegate(int x);",
      "delegate int MyDelegate(int x);"
    ]
  },
  {
    "q": "What will the following code output?",
    "c": "delegate int Operation(int x);\nclass Test {\n    static void Main() {\n        Operation op = delegate(int x) { return x * 2; };\n        Console.WriteLine(op(4));\n    }\n}",
    "o": [
      "8",
      "4",
      "2",
      "Error"
    ]
  },
  {
    "q": "What is a key characteristic of multicast delegates?",
    "o": [
      "They invoke multiple methods in the order they were added",
      "They can only point to methods with return type void",
      "They automatically execute in parallel",
      "They are only used in GUI programming"
    ]
  },
  {
    "q": "Which statement about lambda expressions in C# is correct?",
    "o": [
      "They provide a concise way to define anonymous methods",
      "They cannot be used with delegates",
      "They must always return void",
      "They cannot capture variables from the outer scope"
    ]
  },
  {
    "q": "What does this code output?",
    "c": "delegate void Printer();\nclass Program {\n    static void Hello() => Console.Write(\"Hello \");\n    static void World() => Console.Write(\"World\");\n    static void Main() {\n        Printer p = Hello;\n        p += World;\n        p();\n    }\n}",
    "o": [
      "Hello World",
      "World Hello",
      "Hello",
      "Error"
    ]
  },
  {
    "q": "Which keyword is used to declare an event in C#?",
    "o": [
      "event",
      "delegate",
      "handler",
      "trigger"
    ]
  },
  {
    "q": "Which line defines an event correctly in C#?",
    "o": [
      "public event EventHandler MyEvent;",
      "public delegate event MyEvent;",
      "event void MyEvent();",
      "event MyEventHandler();"
    ]
  },
  {
    "q": "Which code properly attaches a handler to an event?",
    "c": "myObject.MyEvent += new EventHandler(MyHandler);",
    "o": [
      "myObject.MyEvent += new EventHandler(MyHandler);",
      "myObject.MyEvent = MyHandler;",
      "myObject.MyEvent += MyHandler();",
      "myObject.MyEvent(MyHandler);"
    ]
  },
  {
    "q": "What will the following code display?",
    "c": "delegate void Greet(string name);\nclass Program {\n    static void Main() {\n        Greet g = (name) => Console.WriteLine($\"Hi, {name}!\");\n        g(\"Bob\");\n    }\n}",
    "o": [
      "Hi, Bob!",
      "Hi, name!",
      "name",
      "Error"
    ]
  },
  {
    "q": "Which of the following is an example of an anonymous method?",
    "o": [
      "delegate(string s) { Console.WriteLine(s); }",
      "string => Console.WriteLine(string);",
      "Console.WriteLine(\"test\")",
      "public void Print(string s) { Console.WriteLine(s); }"
    ]
  },
  {
    "q": "What will be the output of the following code?",
    "c": "delegate void MyDelegate();\nclass Program {\n    static void A() => Console.Write(\"A \");\n    static void B() => Console.Write(\"B \");\n    static void Main() {\n        MyDelegate d = A;\n        d += B;\n        d();\n    }\n}",
    "o": [
      "A B ",
      "B A ",
      "A ",
      "Error"
    ]
  },
  {
    "q": "Which of the following best describes an anonymous method in C#?",
    "o": [
      "A method without a name declared using the delegate keyword",
      "A static method with no return type",
      "A method created using a lambda expression",
      "A method that returns void"
    ]
  },
  {
    "q": "What does this code output?",
    "c": "delegate int Calc(int x);\nclass Program {\n    static void Main() {\n        Calc c = x => x + 10;\n        Console.WriteLine(c(5));\n    }\n}",
    "o": [
      "15",
      "5",
      "10",
      "0"
    ]
  },
  {
    "q": "Which statement about events in C# is TRUE?",
    "o": [
      "Events are typically based on delegates",
      "Events can only be declared inside methods",
      "Events can return a value",
      "Events cannot be used with custom delegates"
    ]
  },
  {
    "q": "Which is the correct syntax for a multicast delegate call?",
    "o": [
      "myDelegate += SomeMethod;",
      "myDelegate =+ SomeMethod;",
      "myDelegate => SomeMethod;",
      "delegate + SomeMethod"
    ]
  },
  {
    "q": "What does the following lambda expression do?\n`x => x * x`",
    "o": [
      "Returns the square of x",
      "Returns double the value of x",
      "Adds 10 to x",
      "Returns x unchanged"
    ]
  },
  {
    "q": "In C#, when is it better to use an anonymous method?",
    "o": [
      "When the method is short and used only once",
      "When you want to reuse the method across multiple classes",
      "When you want to define abstract behavior",
      "When performance is critical"
    ]
  },
  {
    "q": "What will be the output of this program?",
    "c": "delegate void Show();\nclass Program {\n    static void Main() {\n        Show s = delegate { Console.Write(\"Anonymous\"); };\n        s();\n    }\n}",
    "o": [
      "Anonymous",
      "Show",
      "delegate",
      "Error"
    ]
  },
  {
    "q": "Which of these is NOT true about delegates?",
    "o": [
      "Delegates can return multiple values",
      "Delegates are type-safe function pointers",
      "Delegates can be chained",
      "Delegates can refer to static and instance methods"
    ]
  },
  {
    "q": "What is the purpose of the `EventHandler` delegate in C#?",
    "o": [
      "To define a standard event signature with sender and EventArgs",
      "To return the result of event handling",
      "To log errors",
      "To define multiple event sources"
    ]
  },
  {
    "q": "Which keyword is used to define an event in C#?",
    "o": [
      "event",
      "delegate",
      "trigger",
      "signal"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "delegate string Greet(string name);\nclass Program {\n    static void Main() {\n        Greet g = delegate(string n) { return \"Hello \" + n; };\n        Console.WriteLine(g(\"Sam\"));\n    }\n}",
    "o": [
      "Hello Sam",
      "Sam Hello",
      "Hello",
      "Error"
    ]
  },
  {
    "q": "What is the primary difference between delegates and events in C#?",
    "o": [
      "Events provide controlled access to delegate invocation",
      "Delegates cannot hold multiple methods while events can",
      "Events are static only while delegates are not",
      "Events return values while delegates do not"
    ]
  },
  {
    "q": "What does this lambda expression represent: `(x, y) => x * y`?",
    "o": [
      "A function that multiplies two values",
      "A function that adds two values",
      "A function that subtracts y from x",
      "A function that divides x by y"
    ]
  },
  {
    "q": "Which of the following defines a multicast delegate?",
    "o": [
      "A delegate that references more than one method",
      "A delegate that is public and static",
      "A delegate that returns a list of values",
      "A delegate used only in threading"
    ]
  },
  {
    "q": "What will be the output?",
    "c": "delegate void Notify();\nclass Program {\n    static void One() { Console.Write(\"1 \"); }\n    static void Two() { Console.Write(\"2 \"); }\n    static void Main() {\n        Notify n = One;\n        n += Two;\n        n();\n    }\n}",
    "o": [
      "1 2 ",
      "2 1 ",
      "1 ",
      "2 "
    ]
  },
  {
    "q": "What is a key benefit of using lambda expressions in C#?",
    "o": [
      "They allow concise inline function definitions",
      "They always improve performance",
      "They eliminate the need for delegates",
      "They replace interfaces"
    ]
  },
  {
    "q": "Which of the following best demonstrates an anonymous method?",
    "c": "delegate void Print();\nPrint p = delegate { Console.Write(\"Hi\"); };",
    "o": [
      "delegate { Console.Write(\"Hi\"); }",
      "() => Console.Write(\"Hi\")",
      "Print() { Console.Write(\"Hi\"); }",
      "void Print = Console.Write(\"Hi\");"
    ]
  },
  {
    "q": "How can you unsubscribe a method from a delegate?",
    "o": [
      "Using -= operator",
      "Using remove() method",
      "Using delete keyword",
      "You cannot unsubscribe"
    ]
  },
  {
    "q": "What is the signature of the built-in EventHandler delegate?",
    "o": [
      "void(object sender, EventArgs e)",
      "int(EventArgs e)",
      "void(string sender)",
      "bool(EventHandler e)"
    ]
  },
  {
    "q": "Which statement correctly defines a delegate in C#?",
    "o": [
      "public delegate void LogHandler(string message);",
      "public void delegate LogHandler(string message);",
      "delegate void LogHandler = string message;",
      "LogHandler delegate(string message);"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "delegate int Operation(int x, int y);\nclass Program {\n    static void Main() {\n        Operation op = (a, b) => a - b;\n        Console.WriteLine(op(10, 3));\n    }\n}",
    "o": [
      "7",
      "13",
      "-7",
      "3"
    ]
  },
  {
    "q": "Which of the following statements is TRUE about multicast delegates?",
    "o": [
      "They invoke multiple methods in the order they were added",
      "They can only reference one method at a time",
      "They cannot return a value",
      "They throw an error if multiple methods are assigned"
    ]
  },
  {
    "q": "Which syntax represents a lambda that returns true if a number is even?",
    "o": [
      "x => x % 2 == 0",
      "x -> x % 2 == 0",
      "lambda x: x % 2 == 0",
      "def(x) { return x % 2 == 0; }"
    ]
  },
  {
    "q": "What is the purpose of the EventArgs class in C#?",
    "o": [
      "To provide data to event handlers",
      "To define event delegates",
      "To raise exceptions during events",
      "To handle multithreaded events"
    ]
  },
  {
    "q": "What is the output?",
    "c": "delegate void Show();\nclass Test {\n    static void Hello() => Console.Write(\"Hello \");\n    static void World() => Console.Write(\"World\");\n    static void Main() {\n        Show s = Hello;\n        s += World;\n        s -= Hello;\n        s();\n    }\n}",
    "o": [
      "World",
      "Hello World",
      "Hello",
      "No output"
    ]
  },
  {
    "q": "Which of the following is a valid use of an anonymous method?",
    "o": [
      "delegate(int x) { return x * x; }",
      "anonymous(int x) { return x * x; }",
      "def(int x): return x * x",
      "lambda x => x * x"
    ]
  },
  {
    "q": "What is true about delegates in C#?",
    "o": [
      "They are type-safe method pointers",
      "They are used only in WinForms",
      "They replace constructors",
      "They are used for inheritance"
    ]
  },
  {
    "q": "Which delegate is used by most .NET events?",
    "o": [
      "EventHandler",
      "Func",
      "Predicate",
      "Converter"
    ]
  },
  {
    "q": "Which statement about lambda expressions is FALSE?",
    "o": [
      "They must always return a value",
      "They can be assigned to delegates",
      "They can capture outer variables",
      "They are syntactic sugar for anonymous methods"
    ]
  },
  {
    "q": "Which keyword is used to declare an event in C#?",
    "o": [
      "event",
      "delegate",
      "handler",
      "trigger"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "delegate void Greet(string name);\nclass Program {\n    static void SayHi(string name) => Console.WriteLine(\"Hi \" + name);\n    static void SayBye(string name) => Console.WriteLine(\"Bye \" + name);\n    static void Main() {\n        Greet g = SayHi;\n        g += SayBye;\n        g(\"Alex\");\n    }\n}",
    "o": [
      "Hi Alex\nBye Alex",
      "Bye Alex\nHi Alex",
      "Hi Alex",
      "Bye Alex"
    ]
  },
  {
    "q": "Which of the following is a benefit of using events in C#?",
    "o": [
      "They allow decoupling between event source and event receiver",
      "They improve program performance",
      "They are executed in parallel by default",
      "They reduce memory usage"
    ]
  },
  {
    "q": "Which code correctly defines an anonymous method that multiplies two integers?",
    "o": [
      "delegate(int a, int b) { return a * b; }",
      "anonymous(int a, int b) => a * b;",
      "(int a, int b) => { a * b; }",
      "def(int a, int b): return a * b"
    ]
  },
  {
    "q": "Which delegate type returns a boolean and takes one parameter?",
    "o": [
      "Predicate<T>",
      "Action<T>",
      "Func<T>",
      "Converter<T, bool>"
    ]
  },
  {
    "q": "What will be printed by the following code?",
    "c": "delegate int MathOp(int x);\nclass Program {\n    static void Main() {\n        MathOp op = delegate(int x) { return x + 3; };\n        Console.WriteLine(op(7));\n    }\n}",
    "o": [
      "10",
      "7",
      "3",
      "13"
    ]
  },
  {
    "q": "Which of the following is true about multicast delegates?",
    "o": [
      "They return the value of the last method in the invocation list",
      "They combine the return values of all methods",
      "They throw an exception when multiple methods are invoked",
      "They can only be used with void return types"
    ]
  },
  {
    "q": "Which lambda expression calculates the square of a number?",
    "o": [
      "x => x * x",
      "x => x + x",
      "(x, y) => x * y",
      "() => x * x"
    ]
  },
  {
    "q": "Which of the following best describes a delegate?",
    "o": [
      "A type-safe reference to a method",
      "An object used for memory management",
      "A keyword used to declare events",
      "A method that runs asynchronously"
    ]
  },
  {
    "q": "What is the purpose of using 'EventHandler' in .NET?",
    "o": [
      "To define a standard method signature for event handling",
      "To perform logging during runtime",
      "To manage exceptions raised during events",
      "To replace delegates in LINQ"
    ]
  },
  {
    "q": "Which of the following correctly creates a delegate using a lambda expression to double a number?",
    "o": [
      "Func<int, int> doubleIt = x => x * 2;",
      "Func<int, int> doubleIt = x => x + 2;",
      "Func<int, int> doubleIt = (x, y) => x * y;",
      "Func<int> doubleIt = () => 2 * x;"
    ]
  },
  {
    "q": "What will be printed by the following code snippet?",
    "c": "delegate void LogHandler(string message);\nclass Logger {\n    public static void Log(string message) => Console.WriteLine(\"Log: \" + message);\n    public static void Warn(string message) => Console.WriteLine(\"Warning: \" + message);\n    static void Main() {\n        LogHandler handler = Log;\n        handler += Warn;\n        handler(\"Disk space low\");\n    }\n}",
    "o": [
      "Log: Disk space low\nWarning: Disk space low",
      "Warning: Disk space low\nLog: Disk space low",
      "Disk space low",
      "LogHandler triggered"
    ]
  },
  {
    "q": "In which case should you use an anonymous method over a named method?",
    "o": [
      "When the method logic is short and used only once",
      "When the method is reused in multiple classes",
      "When method needs to be documented independently",
      "When performance is critical"
    ]
  },
  {
    "q": "Which keyword is used to prevent subscribers from directly invoking an event?",
    "o": [
      "event",
      "delegate",
      "readonly",
      "private"
    ]
  },
  {
    "q": "What is the output of this lambda expression: `(x, y) => x - y`, when `x = 10`, `y = 4`?",
    "o": [
      "6",
      "14",
      "4",
      "-6"
    ]
  },
  {
    "q": "Which of the following best defines a multicast delegate?",
    "o": [
      "A delegate that holds references to more than one method",
      "A delegate that returns multiple values",
      "A delegate used for asynchronous operations",
      "A delegate that is automatically garbage collected"
    ]
  },
  {
    "q": "Which delegate type would you use for a method that takes two `int`s and returns a `bool`?",
    "o": [
      "Func<int, int, bool>",
      "Action<int, int>",
      "Predicate<int>",
      "Func<bool, int, int>"
    ]
  },
  {
    "q": "Which line correctly subscribes a method to an event?",
    "o": [
      "button.Click += OnClick;",
      "button.Click = OnClick;",
      "Click.button += OnClick();",
      "subscribe(button.Click, OnClick);"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "delegate int Operation(int x);\nclass Program {\n    static void Main() {\n        Operation op = delegate(int x) { return x * x; };\n        Console.WriteLine(op(3));\n    }\n}",
    "o": [
      "9",
      "6",
      "3",
      "0"
    ]
  },
  {
    "q": "Which scenario demonstrates a good use of lambda expressions?",
    "o": [
      "Passing a short inline function to a LINQ query",
      "Writing complex business logic",
      "Defining large reusable methods",
      "Creating class-level event handlers"
    ]
  },
  {
    "q": "Which of the following is the correct way to define a delegate that returns void and takes a string parameter?",
    "o": [
      "public delegate void MyDelegate(string msg);",
      "public void delegate MyDelegate(string msg);",
      "delegate string MyDelegate(void msg);",
      "public delegate MyDelegate(string msg) void;"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "delegate void Notify();\nclass Program {\n    static void Message1() => Console.WriteLine(\"Message 1\");\n    static void Message2() => Console.WriteLine(\"Message 2\");\n    static void Main() {\n        Notify notify = Message1;\n        notify += Message2;\n        notify();\n    }\n}",
    "o": [
      "Message 1\nMessage 2",
      "Message 2\nMessage 1",
      "Message 1",
      "Message 2"
    ]
  },
  {
    "q": "Which of the following is NOT true about events in C#?",
    "o": [
      "Events can be triggered by subscribers directly.",
      "Events are based on delegates.",
      "Events are used for communication between objects.",
      "Events can have multiple subscribers."
    ]
  },
  {
    "q": "What is the key advantage of using lambda expressions over anonymous methods?",
    "o": [
      "More concise syntax and inline readability",
      "Better performance in all cases",
      "They support multiple return types",
      "They automatically log method calls"
    ]
  },
  {
    "q": "Which of the following delegates can store methods that return `bool` and take an `int` parameter?",
    "o": [
      "Predicate<int>",
      "Action<int>",
      "Func<bool>",
      "Func<int, string>"
    ]
  },
  {
    "q": "Which statement about multicast delegates is correct?",
    "o": [
      "They invoke all methods in the invocation list sequentially.",
      "They can only hold one method reference.",
      "They always return a list of results.",
      "They are only used with events."
    ]
  },
  {
    "q": "What will the following lambda expression return?\n`Func<int, int, int> multiply = (a, b) => a * b;`\n`multiply(3, 4);`",
    "o": [
      "12",
      "7",
      "1",
      "34"
    ]
  },
  {
    "q": "Which of the following scenarios best justifies using an event?",
    "o": [
      "Notifying UI when a button is clicked",
      "Looping over a collection",
      "Calling a method inside Main directly",
      "Declaring constant values"
    ]
  },
  {
    "q": "What is a primary difference between an anonymous method and a named method?",
    "o": [
      "Anonymous methods do not have a name and are often used for short, inline logic.",
      "Anonymous methods can only be used with static methods.",
      "Named methods cannot accept parameters.",
      "Named methods can only be used with events."
    ]
  },
  {
    "q": "Which syntax correctly assigns an anonymous method to a delegate?",
    "o": [
      "MyDelegate d = delegate(string s) { Console.WriteLine(s); };",
      "MyDelegate d = anonymous(string s) => Console.WriteLine(s);",
      "MyDelegate d(string s) = { Console.WriteLine(s); };",
      "delegate MyDelegate(string s) = Console.WriteLine(s);"
    ]
  },
  {
    "q": "Which of the following defines a delegate correctly in C#?",
    "o": [
      "public delegate void MyDelegate(string message);",
      "public delegate string MyDelegate(message);",
      "delegate void MyDelegate = (string msg);",
      "void delegate MyDelegate(string msg);"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "delegate void PrintMessage(string message);\n\nclass Program {\n    static void Main() {\n        PrintMessage pm = delegate(string msg) {\n            Console.WriteLine(msg);\n        };\n        pm(\"Hello World\");\n    }\n}",
    "o": [
      "Hello World",
      "delegate",
      "PrintMessage",
      "msg"
    ]
  },
  {
    "q": "Which of the following is true about multicast delegates in C#?",
    "o": [
      "They can point to more than one method at a time.",
      "They can only point to static methods.",
      "They cannot be combined using '+' operator.",
      "They are obsolete in C#."
    ]
  },
  {
    "q": "What will be the output of the following code?",
    "c": "delegate void Del();\n\nclass Program {\n    static void A() { Console.Write(\"A\"); }\n    static void B() { Console.Write(\"B\"); }\n\n    static void Main() {\n        Del d = A;\n        d += B;\n        d();\n    }\n}",
    "o": [
      "AB",
      "BA",
      "A",
      "B"
    ]
  },
  {
    "q": "Which of the following correctly subscribes an event handler to an event in C#?",
    "o": [
      "button.Click += new EventHandler(Button_Click);",
      "button.Click = Button_Click;",
      "button.Click(new EventHandler(Button_Click));",
      "add Click Button_Click;"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "public class MyEventClass {\n    public event EventHandler MyEvent;\n    public void RaiseEvent() {\n        MyEvent?.Invoke(this, EventArgs.Empty);\n    }\n}\n\nclass Program {\n    static void Main() {\n        MyEventClass obj = new MyEventClass();\n        obj.MyEvent += (s, e) => Console.WriteLine(\"Event triggered\");\n        obj.RaiseEvent();\n    }\n}",
    "o": [
      "Event triggered",
      "Error",
      "No output",
      "RaiseEvent"
    ]
  },
  {
    "q": "Which of the following best describes a lambda expression in C#?",
    "o": [
      "A concise way to represent anonymous methods using the => operator.",
      "A method with no parameters.",
      "A delegate defined within a class.",
      "A class that holds methods."
    ]
  },
  {
    "q": "What will the following code output?",
    "c": "Func<int, int, int> add = (a, b) => a + b;\nConsole.WriteLine(add(3, 4));",
    "o": [
      "7",
      "34",
      "0",
      "Error"
    ]
  },
  {
    "q": "Which of the following statements about anonymous methods in C# is true?",
    "o": [
      "Anonymous methods do not have a name and can be assigned to a delegate.",
      "Anonymous methods must always return void.",
      "Anonymous methods cannot capture variables from the outer scope.",
      "Anonymous methods must be static."
    ]
  },
  {
    "q": "What will be the output of this code snippet?",
    "c": "delegate int Operation(int x);\n\nclass Program {\n    static void Main() {\n        Operation op = delegate(int n) { return n * n; };\n        Console.WriteLine(op(6));\n    }\n}",
    "o": [
      "36",
      "12",
      "6",
      "Error"
    ]
  },
  {
    "q": "What does a delegate in C# represent?",
    "o": [
      "A type that references methods with a specific signature",
      "A data structure to hold event logs",
      "A keyword for creating custom exceptions",
      "A class that automatically generates events"
    ]
  },
  {
    "q": "What will be the output of the following C# code?",
    "c": "delegate string Greet(string name);\n\nclass Program {\n    static string Hello(string name) => \"Hello, \" + name;\n\n    static void Main() {\n        Greet greet = Hello;\n        Console.WriteLine(greet(\"Bob\"));\n    }\n}",
    "o": [
      "Hello, Bob",
      "Bob, Hello",
      "Hello Bob",
      "Error"
    ]
  },
  {
    "q": "Which of the following is a valid way to declare a lambda expression in C#?",
    "o": [
      "(x, y) => x + y",
      "lambda(x, y) { return x + y; }",
      "(x, y) => { return x + y }",
      "delegate(x, y) => x + y"
    ]
  },
  {
    "q": "What is a key feature of multicast delegates in C#?",
    "o": [
      "They invoke multiple methods in the order they were added",
      "They require exactly two methods to be assigned",
      "They execute all methods in parallel",
      "They do not support method chaining"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "delegate void Notify();\n\nclass Program {\n    static void First() => Console.Write(\"1\");\n    static void Second() => Console.Write(\"2\");\n\n    static void Main() {\n        Notify n = First;\n        n += Second;\n        n();\n    }\n}",
    "o": [
      "12",
      "21",
      "1",
      "2"
    ]
  },
  {
    "q": "Which of the following statements is true about events in C#?",
    "o": [
      "Events provide a way for a class to notify other classes when something of interest occurs.",
      "Events can only be used in abstract classes.",
      "Events must be static and global.",
      "Events are used to execute SQL queries asynchronously."
    ]
  },
  {
    "q": "What will be the output of the following code?",
    "c": "public class MyClass {\n    public event EventHandler SomethingHappened;\n    public void DoSomething() {\n        SomethingHappened?.Invoke(this, EventArgs.Empty);\n    }\n}\n\nclass Program {\n    static void Main() {\n        MyClass obj = new MyClass();\n        obj.SomethingHappened += (s, e) => Console.WriteLine(\"Handled\");\n        obj.DoSomething();\n    }\n}",
    "o": [
      "Handled",
      "DoSomething",
      "Error",
      "Nothing"
    ]
  },
  {
    "q": "Which statement correctly creates an anonymous method in C#?",
    "o": [
      "delegate(int x) { return x * x; }",
      "(int x) => return x * x;",
      "anonymous(int x) => x * x;",
      "new delegate { return x * x; }"
    ]
  },
  {
    "q": "What does the '?' symbol do in the line 'MyEvent?.Invoke(...)'?",
    "o": [
      "It checks if the event is null before invoking it.",
      "It forces the event to be invoked asynchronously.",
      "It casts the delegate to a base class.",
      "It prevents compilation errors during event declaration."
    ]
  },
  {
    "q": "What is the purpose of an event handler in C#?",
    "o": [
      "To respond to an event when it is raised",
      "To define a custom event signature",
      "To cancel the default behavior of an event",
      "To prevent the event from executing"
    ]
  },
  {
    "q": "Which keyword is used to declare an event in C#?",
    "o": [
      "event",
      "delegate",
      "handler",
      "trigger"
    ]
  },
  {
    "q": "What is the output of the following C# code?",
    "c": "delegate int Operation(int x);\n\nclass Program {\n    static void Main() {\n        Operation op = x => x + 10;\n        Console.WriteLine(op(5));\n    }\n}",
    "o": [
      "15",
      "10",
      "5",
      "50"
    ]
  },
  {
    "q": "What is a delegate in C# most similar to in functionality?",
    "o": [
      "A function pointer",
      "A class instance",
      "A constant variable",
      "A foreach loop"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "delegate void Printer(string msg);\n\nclass Program {\n    static void PrintUpper(string msg) => Console.WriteLine(msg.ToUpper());\n    static void PrintLower(string msg) => Console.WriteLine(msg.ToLower());\n\n    static void Main() {\n        Printer p = PrintUpper;\n        p += PrintLower;\n        p(\"Hello\");\n    }\n}",
    "o": [
      "HELLO\nhello",
      "hello\nHELLO",
      "HELLO",
      "hello"
    ]
  },
  {
    "q": "Which of the following best describes a lambda expression?",
    "o": [
      "A concise way to represent an inline function",
      "A method that always returns void",
      "A method defined using the 'lambda' keyword",
      "A delegate declared outside the class"
    ]
  },
  {
    "q": "What will be printed by the following code?",
    "c": "Action greet = () => Console.WriteLine(\"Hi there!\");\ngreet();",
    "o": [
      "Hi there!",
      "greet",
      "Action",
      "Error"
    ]
  },
  {
    "q": "Which of the following statements about anonymous methods is correct?",
    "o": [
      "Anonymous methods are methods without a name and can be assigned to a delegate.",
      "Anonymous methods must be defined using the `lambda` operator.",
      "Anonymous methods can only be used in static classes.",
      "Anonymous methods require explicit return types."
    ]
  },
  {
    "q": "What is the output of this code using an event handler?",
    "c": "public class Counter {\n    public event EventHandler ThresholdReached;\n    public void ReachThreshold() {\n        ThresholdReached?.Invoke(this, EventArgs.Empty);\n    }\n}\n\nclass Program {\n    static void Main() {\n        Counter c = new Counter();\n        c.ThresholdReached += (s, e) => Console.WriteLine(\"Threshold reached!\");\n        c.ReachThreshold();\n    }\n}",
    "o": [
      "Threshold reached!",
      "EventHandler",
      "Counter",
      "No output"
    ]
  },
  {
    "q": "Which of the following is a valid syntax for a multicast delegate?",
    "o": [
      "del += AnotherMethod;",
      "del = del + AnotherMethod();",
      "multicast del => Add(AnotherMethod);",
      "delegate.Add(AnotherMethod)"
    ]
  },
  {
    "q": "What will the following lambda expression return?\n\nFunc<int, int> square = x => x * x;\nConsole.WriteLine(square(8));",
    "o": [
      "64",
      "16",
      "8",
      "Error"
    ]
  },
  {
    "q": "Which of the following best describes multicast delegates?",
    "o": [
      "Delegates that can reference more than one method",
      "Delegates that return multiple values",
      "Delegates that use multiple parameters",
      "Delegates used in multi-threaded applications"
    ]
  },
  {
    "q": "What is the output of the following C# code?",
    "c": "delegate void Show();\n\nclass Program {\n    static void A() { Console.Write(\"A\"); }\n    static void B() { Console.Write(\"B\"); }\n\n    static void Main() {\n        Show s = A;\n        s += B;\n        s += A;\n        s();\n    }\n}",
    "o": [
      "ABA",
      "AAB",
      "BAA",
      "AB"
    ]
  },
  {
    "q": "What keyword is used to prevent direct access to event delegates?",
    "o": [
      "event",
      "private",
      "readonly",
      "sealed"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "Func<int, int, int> multiply = (x, y) => x * y;\nConsole.WriteLine(multiply(4, 5));",
    "o": [
      "20",
      "9",
      "45",
      "Error"
    ]
  },
  {
    "q": "Which of the following is a valid lambda expression that returns true if the input is greater than 10?",
    "o": [
      "x => x > 10",
      "(x) => x > 10",
      "(int x): x > 10",
      "lambda(x) { return x > 10; }"
    ]
  },
  {
    "q": "Which delegate type can be used when no parameters and no return value are needed?",
    "o": [
      "Action",
      "Func",
      "Predicate",
      "Expression"
    ]
  },
  {
    "q": "What is the output of this code using an anonymous method?",
    "c": "delegate string Format(string name);\n\nclass Program {\n    static void Main() {\n        Format fmt = delegate(string n) {\n            return $\"Welcome, {n}\";\n        };\n        Console.WriteLine(fmt(\"Eve\"));\n    }\n}",
    "o": [
      "Welcome, Eve",
      "Hello Eve",
      "Format",
      "Error"
    ]
  },
  {
    "q": "What is the advantage of using events over public delegate fields?",
    "o": [
      "Events restrict outside classes from invoking the delegate directly.",
      "Events allow return values from handlers.",
      "Events do not require a delegate type.",
      "Events always run on a separate thread."
    ]
  },
  {
    "q": "Which of the following is true about lambda expressions in C#?",
    "o": [
      "They can be assigned to delegates or Func/Action types.",
      "They must always include a return statement.",
      "They cannot use captured variables from outer scopes.",
      "They must be declared as static."
    ]
  },
  {
    "q": "What does the following code output?",
    "c": "Predicate<int> isEven = x => x % 2 == 0;\nConsole.WriteLine(isEven(6));",
    "o": [
      "True",
      "False",
      "6",
      "0"
    ]
  },
  {
    "q": "What will the following C# lambda expression return?\n\nFunc<string, int> length = s => s.Length;\nConsole.WriteLine(length(\"test\"));",
    "o": [
      "4",
      "1",
      "0",
      "test"
    ]
  },
  {
    "q": "Which of the following is a valid use of an anonymous method?",
    "o": [
      "delegate(int x) { Console.WriteLine(x); }",
      "anonymous(int x) => Console.WriteLine(x);",
      "method(int x): Console.WriteLine(x);",
      "delegate => { Console.WriteLine(x); }"
    ]
  },
  {
    "q": "Which predefined delegate type would you use for a method that takes two parameters and returns a result?",
    "o": [
      "Func<T1, T2, TResult>",
      "Action<T1, T2>",
      "Predicate<T>",
      "Delegate<T1, T2>"
    ]
  },
  {
    "q": "What will be the output of the following code?",
    "c": "delegate void Notify();\n\nclass Program {\n    static void Hello() => Console.Write(\"Hello\");\n    static void World() => Console.Write(\"World\");\n\n    static void Main() {\n        Notify notify = Hello;\n        notify += World;\n        notify();\n    }\n}",
    "o": [
      "HelloWorld",
      "WorldHello",
      "Hello",
      "World"
    ]
  },
  {
    "q": "Which statement about events is correct?",
    "o": [
      "Only the class that declares an event can raise it.",
      "Events can be assigned using the '=' operator like delegates.",
      "Events cannot be multicast.",
      "Events must be static."
    ]
  },
  {
    "q": "Which of the following is a benefit of using lambda expressions?",
    "o": [
      "They provide a concise syntax for inline method definitions.",
      "They execute faster than regular methods.",
      "They are compiled into native C++ code.",
      "They automatically handle exceptions."
    ]
  },
  {
    "q": "What is the output of the following C# code?",
    "c": "Action<string> greet = name => Console.WriteLine($\"Hi, {name}!\");\ngreet(\"Charlie\");",
    "o": [
      "Hi, Charlie!",
      "Hello, Charlie!",
      "Charlie",
      "Hi name!"
    ]
  },
  {
    "q": "What is the correct way to declare a delegate that takes an int and returns void?",
    "o": [
      "public delegate void MyDelegate(int x);",
      "public delegate int MyDelegate(void x);",
      "public delegate void MyDelegate();",
      "delegate void MyDelegate = int;"
    ]
  },
  {
    "q": "Which of the following is true about multicast delegates?",
    "o": [
      "They invoke multiple methods sequentially.",
      "They combine multiple delegates using the '/' operator.",
      "They require all methods to return the same result.",
      "They are only available in async context."
    ]
  },
  {
    "q": "What will be the output of the following code using an event?",
    "c": "class Button {\n    public event EventHandler Click;\n    public void OnClick() {\n        Click?.Invoke(this, EventArgs.Empty);\n    }\n}\n\nclass Program {\n    static void Main() {\n        Button b = new Button();\n        b.Click += (s, e) => Console.WriteLine(\"Clicked!\");\n        b.OnClick();\n    }\n}",
    "o": [
      "Clicked!",
      "Click",
      "OnClick",
      "EventArgs"
    ]
  },
  {
    "q": "Which of the following can be used to chain multiple methods together in C#?",
    "o": [
      "Multicast delegate",
      "Anonymous method",
      "Lambda expression",
      "Event handler"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "delegate int Operation(int a, int b);\n\nclass Program {\n    static int Add(int x, int y) => x + y;\n    static void Main() {\n        Operation op = Add;\n        Console.WriteLine(op(7, 3));\n    }\n}",
    "o": [
      "10",
      "73",
      "7",
      "3"
    ]
  },
  {
    "q": "Which of the following is a valid lambda expression that takes no parameters and returns 42?",
    "o": [
      "() => 42",
      "() => { return 42 }",
      "() =>: 42",
      "=> 42"
    ]
  },
  {
    "q": "What is the output of the following anonymous method example?",
    "c": "delegate string Greeter(string name);\n\nclass Program {\n    static void Main() {\n        Greeter g = delegate(string n) {\n            return \"Hi \" + n;\n        };\n        Console.WriteLine(g(\"Zara\"));\n    }\n}",
    "o": [
      "Hi Zara",
      "Hello Zara",
      "Zara",
      "Hi"
    ]
  },
  {
    "q": "Which delegate type would you use to encapsulate a method that returns a boolean and takes one argument?",
    "o": [
      "Predicate<T>",
      "Action<T>",
      "Func<T, T>",
      "EventHandler<T>"
    ]
  },
  {
    "q": "Which of the following statements is true about events in C#?",
    "o": [
      "Events can only be invoked from within the class that declares them.",
      "Events can return values to the publisher.",
      "Events can be assigned using the '=' operator.",
      "Events do not require a delegate type."
    ]
  },
  {
    "q": "What will be printed by this lambda expression?",
    "c": "Func<int, int, int> max = (a, b) => a > b ? a : b;\nConsole.WriteLine(max(12, 9));",
    "o": [
      "12",
      "9",
      "21",
      "Error"
    ]
  },
  {
    "q": "Which of the following defines a delegate that takes no arguments and returns nothing?",
    "o": [
      "public delegate void SimpleDelegate();",
      "public void delegate SimpleDelegate();",
      "delegate void() SimpleDelegate;",
      "SimpleDelegate(): delegate void;"
    ]
  },
  {
    "q": "What is the primary purpose of using anonymous methods?",
    "o": [
      "To define inline methods without a named function",
      "To define extension methods",
      "To create static methods",
      "To overload constructors"
    ]
  },
  {
    "q": "What is the result of the following code using an event handler?",
    "c": "class Alarm {\n    public event EventHandler Ring;\n    public void Trigger() {\n        Ring?.Invoke(this, EventArgs.Empty);\n    }\n}\n\nclass Program {\n    static void Main() {\n        Alarm a = new Alarm();\n        a.Ring += (s, e) => Console.WriteLine(\"Alarm triggered!\");\n        a.Trigger();\n    }\n}",
    "o": [
      "Alarm triggered!",
      "Triggered",
      "Ring",
      "No output"
    ]
  },
  {
    "q": "Which keyword is used to declare an event in C#?",
    "o": [
      "event",
      "delegate",
      "handler",
      "trigger"
    ]
  },
  {
    "q": "What is the output of this code using a multicast delegate?",
    "c": "delegate void Message();\n\nclass Program {\n    static void A() => Console.Write(\"A\");\n    static void B() => Console.Write(\"B\");\n\n    static void Main() {\n        Message m = A;\n        m += B;\n        m += A;\n        m();\n    }\n}",
    "o": [
      "ABA",
      "AAB",
      "BAA",
      "AB"
    ]
  },
  {
    "q": "Which delegate type is best for a method that returns nothing and takes three parameters?",
    "o": [
      "Action<T1, T2, T3>",
      "Func<T1, T2, T3>",
      "Predicate<T>",
      "EventHandler<T>"
    ]
  },
  {
    "q": "Which of the following best describes an anonymous method in C#?",
    "o": [
      "A method without a name, defined inline using the delegate keyword",
      "A static method called anonymously",
      "A method that hides its return type",
      "A method with unknown parameters"
    ]
  },
  {
    "q": "What will the following lambda expression return?\n\nFunc<int, int, bool> checkEqual = (x, y) => x == y;\nConsole.WriteLine(checkEqual(5, 5));",
    "o": [
      "True",
      "False",
      "0",
      "Error"
    ]
  },
  {
    "q": "Which of the following allows events to be subscribed to but not directly triggered?",
    "o": [
      "The 'event' keyword",
      "A private delegate",
      "A sealed method",
      "A static lambda"
    ]
  },
  {
    "q": "What is the correct syntax to define an anonymous method that prints a message?",
    "o": [
      "delegate() { Console.WriteLine(\"Hello\"); }",
      "() => Console.WriteLine(\"Hello\")",
      "function() { Console.WriteLine(\"Hello\"); }",
      "void() => Console.WriteLine(\"Hello\")"
    ]
  },
  {
    "q": "What is the output of the following code using a lambda?",
    "c": "Action print = () => Console.WriteLine(\"Executed\");\nprint();",
    "o": [
      "Executed",
      "print",
      "Action",
      "Error"
    ]
  },
  {
    "q": "Which of the following statements is true about lambda expressions?",
    "o": [
      "They can capture variables from their surrounding scope.",
      "They must always be static.",
      "They cannot return a value.",
      "They must be declared inside a class only."
    ]
  },
  {
    "q": "What will be printed when the following event is raised?",
    "c": "class Publisher {\n    public event EventHandler Notified;\n    public void Notify() {\n        Notified?.Invoke(this, EventArgs.Empty);\n    }\n}\n\nclass Program {\n    static void Main() {\n        Publisher p = new Publisher();\n        p.Notified += (s, e) => Console.WriteLine(\"Notification received\");\n        p.Notify();\n    }\n}",
    "o": [
      "Notification received",
      "Notified",
      "Notify",
      "Publisher"
    ]
  },
  {
    "q": "What does a multicast delegate return if it has multiple methods assigned and a return type other than void?",
    "o": [
      "The return value of the last invoked method",
      "The return value of the first invoked method",
      "The combined return values of all methods",
      "It causes a compile-time error"
    ]
  },
  {
    "q": "What is the output of this C# lambda expression?",
    "c": "Func<int, int> square = x => x * x;\nConsole.WriteLine(square(6));",
    "o": [
      "36",
      "12",
      "6",
      "18"
    ]
  },
  {
    "q": "Which of the following correctly defines a delegate with no parameters and a return type of int?",
    "o": [
      "public delegate int MyDelegate();",
      "public int delegate MyDelegate();",
      "delegate int() MyDelegate;",
      "MyDelegate() => int;"
    ]
  },
  {
    "q": "What is the output of the following anonymous method code?",
    "c": "delegate string Formatter(string name);\n\nclass Program {\n    static void Main() {\n        Formatter format = delegate(string n) {\n            return $\"User: {n}\";\n        };\n        Console.WriteLine(format(\"Eve\"));\n    }\n}",
    "o": [
      "User: Eve",
      "Eve",
      "Hello Eve",
      "User"
    ]
  },
  {
    "q": "Which of the following best describes a lambda expression?",
    "o": [
      "An anonymous function that can be used to create delegates or expression tree types",
      "A method with no return value",
      "A delegate with a predefined signature",
      "A syntax for defining static classes"
    ]
  },
  {
    "q": "Which statement about events is correct in C#?",
    "o": [
      "Events use delegates to provide notifications to subscribers.",
      "Events can directly return values to subscribers.",
      "Events can be raised from any class in the application.",
      "Events can only be used with static methods."
    ]
  },
  {
    "q": "What will the following code output?",
    "c": "delegate void Notify();\n\nclass Program {\n    static void Ping() => Console.Write(\"Ping \");\n    static void Pong() => Console.Write(\"Pong\");\n\n    static void Main() {\n        Notify n = Ping;\n        n += Pong;\n        n();\n    }\n}",
    "o": [
      "Ping Pong",
      "Pong Ping",
      "Ping",
      "Pong"
    ]
  },
  {
    "q": "Which delegate type is used when a method does not return a value but accepts parameters?",
    "o": [
      "Action<T>",
      "Func<T, TResult>",
      "Predicate<T>",
      "EventHandler<T>"
    ]
  },
  {
    "q": "Which feature allows you to write inline event handlers without creating a separate method?",
    "o": [
      "Anonymous methods",
      "Static delegates",
      "Multicast events",
      "Generics"
    ]
  },
  {
    "q": "What will be the output of this event-handling code?",
    "c": "class Clicker {\n    public event EventHandler OnClick;\n    public void Click() {\n        OnClick?.Invoke(this, EventArgs.Empty);\n    }\n}\n\nclass Program {\n    static void Main() {\n        Clicker c = new Clicker();\n        c.OnClick += (s, e) => Console.WriteLine(\"Clicked once\");\n        c.OnClick += (s, e) => Console.WriteLine(\"Clicked twice\");\n        c.Click();\n    }\n}",
    "o": [
      "Clicked once\nClicked twice",
      "Clicked twice\nClicked once",
      "Clicked",
      "No output"
    ]
  },
  {
    "q": "What does the 'delegate' keyword in C# define?",
    "o": [
      "A type that references methods with a specific parameter list and return type",
      "A method that executes asynchronously",
      "A static pointer to a method",
      "A type that always returns void"
    ]
  },
  {
    "q": "What is the output of the following code using a multicast delegate?",
    "c": "delegate void Log();\n\nclass Program {\n    static void Info() => Console.Write(\"Info \");\n    static void Warning() => Console.Write(\"Warning\");\n\n    static void Main() {\n        Log logger = Info;\n        logger += Warning;\n        logger();\n    }\n}",
    "o": [
      "Info Warning",
      "Warning Info",
      "Info",
      "Warning"
    ]
  },
  {
    "q": "What is a valid use-case for lambda expressions in event handling?",
    "o": [
      "To attach inline event handlers without defining separate methods",
      "To declare a custom event class",
      "To serialize event data to JSON",
      "To dynamically raise events"
    ]
  },
  {
    "q": "What is the output of the following lambda function?",
    "c": "Func<int, int, string> compare = (a, b) => a > b ? \"Greater\" : \"Smaller or Equal\";\nConsole.WriteLine(compare(7, 10));",
    "o": [
      "Smaller or Equal",
      "Greater",
      "Error",
      "True"
    ]
  },
  {
    "q": "What will the following code output using anonymous methods?",
    "c": "delegate void Greet(string name);\n\nclass Program {\n    static void Main() {\n        Greet hello = delegate(string n) {\n            Console.WriteLine(\"Hi, \" + n);\n        };\n        hello(\"Tom\");\n    }\n}",
    "o": [
      "Hi, Tom",
      "Hello Tom",
      "Tom",
      "Hi"
    ]
  },
  {
    "q": "What is required to raise an event in C#?",
    "o": [
      "Calling the delegate using ?.Invoke()",
      "Overriding the delegate method",
      "Using the += operator",
      "Declaring the delegate as static"
    ]
  },
  {
    "q": "Which statement best describes a multicast delegate?",
    "o": [
      "It can invoke more than one method in a single call.",
      "It can subscribe to multiple events at once.",
      "It always returns void.",
      "It is only valid within sealed classes."
    ]
  },
  {
    "q": "What is the output of this Action delegate?",
    "c": "Action<string> print = s => Console.WriteLine(\"Data: \" + s);\nprint(\"Log\");",
    "o": [
      "Data: Log",
      "Log",
      "Data Log",
      "Error"
    ]
  },
  {
    "q": "What feature do both lambda expressions and anonymous methods share?",
    "o": [
      "They can capture outer variables (closures)",
      "They must return a value",
      "They can only be used inside classes",
      "They always return void"
    ]
  },
  {
    "q": "Which is a valid declaration of an event handler using EventHandler<T>?",
    "o": [
      "public event EventHandler<EventArgs> OnComplete;",
      "public EventHandler OnComplete = new EventHandler();",
      "public delegate EventHandler OnComplete();",
      "public event void OnComplete();"
    ]
  },
  {
    "q": "What is the primary benefit of using delegates in C#?",
    "o": [
      "They provide a way to pass methods as parameters",
      "They simplify exception handling",
      "They manage memory allocation automatically",
      "They are used to define class properties"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "delegate string Formatter(int x);\n\nclass Program {\n    static void Main() {\n        Formatter f = num => $\"Number: {num}\";\n        Console.WriteLine(f(25));\n    }\n}",
    "o": [
      "Number: 25",
      "25",
      "num",
      "Number:"
    ]
  },
  {
    "q": "Which of the following best defines a multicast delegate?",
    "o": [
      "A delegate that can reference multiple methods",
      "A delegate that works across multiple threads",
      "A delegate used to send data to multicast networks",
      "A delegate declared in multiple namespaces"
    ]
  },
  {
    "q": "What does the following event code do?",
    "c": "public event EventHandler DataUpdated;\n\npublic void Update() {\n    DataUpdated?.Invoke(this, EventArgs.Empty);\n}",
    "o": [
      "Raises the DataUpdated event if it has subscribers",
      "Subscribes a new handler to the DataUpdated event",
      "Initializes a delegate field with empty arguments",
      "Creates a custom event handler class"
    ]
  },
  {
    "q": "Which lambda syntax is valid for a method that adds two numbers and returns the result?",
    "o": [
      "(x, y) => x + y",
      "x, y => return x + y",
      "(int x, int y) => return x + y;",
      "(x y) -> x + y"
    ]
  },
  {
    "q": "What is the result of the following anonymous method?",
    "c": "Func<int, int> square = delegate(int n) {\n    return n * n;\n};\nConsole.WriteLine(square(4));",
    "o": [
      "16",
      "8",
      "4",
      "Error"
    ]
  },
  {
    "q": "What is required to subscribe a method to an event in C#?",
    "o": [
      "Using the += operator with a compatible delegate",
      "Calling Invoke() on the event",
      "Declaring the event as public static",
      "Using the event keyword inside Main()"
    ]
  },
  {
    "q": "What is the output of this lambda expression?",
    "c": "Action sayHi = () => Console.WriteLine(\"Hi there!\");\nsayHi();",
    "o": [
      "Hi there!",
      "sayHi",
      "Action",
      "No output"
    ]
  },
  {
    "q": "Which of the following statements is true about anonymous methods in C#?",
    "o": [
      "They can be defined using the delegate keyword without a name",
      "They must always return void",
      "They require explicit delegate types with parameters",
      "They cannot access external variables"
    ]
  },
  {
    "q": "How does the 'event' keyword restrict access to delegates?",
    "o": [
      "It allows subscription but prevents invocation from outside the declaring class",
      "It makes the delegate read-only",
      "It converts the delegate to a multicast delegate",
      "It automatically adds synchronization logic"
    ]
  },
  {
    "q": "Which of the following correctly represents a multicast delegate usage in C#?",
    "c": "delegate void Notify();\n\nclass Program {\n    static void A() => Console.Write(\"A \");\n    static void B() => Console.Write(\"B\");\n\n    static void Main() {\n        Notify n = A;\n        n += B;\n        n();\n    }\n}",
    "o": [
      "A B",
      "B A",
      "A",
      "B"
    ]
  },
  {
    "q": "What will the following anonymous method output?",
    "c": "delegate void ShowMessage(string msg);\n\nclass Program {\n    static void Main() {\n        ShowMessage show = delegate(string m) {\n            Console.WriteLine(\"Message: \" + m);\n        };\n        show(\"Hello\");\n    }\n}",
    "o": [
      "Message: Hello",
      "Hello",
      "Message Hello",
      "Message:"
    ]
  },
  {
    "q": "Which of the following is a key feature of lambda expressions in C#?",
    "o": [
      "They provide a concise syntax for anonymous methods",
      "They are only used for mathematical operations",
      "They can only be used in LINQ queries",
      "They require static context"
    ]
  },
  {
    "q": "What is the purpose of the EventHandler delegate in C#?",
    "o": [
      "To standardize event signatures with object sender and EventArgs",
      "To automatically trigger property change notifications",
      "To handle UI button clicks only",
      "To raise exceptions when events fail"
    ]
  },
  {
    "q": "What is the output of the following lambda expression?",
    "c": "Func<int, string> evenOdd = n => n % 2 == 0 ? \"Even\" : \"Odd\";\nConsole.WriteLine(evenOdd(11));",
    "o": [
      "Odd",
      "Even",
      "True",
      "1"
    ]
  },
  {
    "q": "Which of the following statements is true about delegate invocation?",
    "o": [
      "A delegate can invoke multiple methods if it is multicast",
      "Only one method can be assigned to a delegate",
      "Delegates cannot return values",
      "Delegates can only be used with static methods"
    ]
  },
  {
    "q": "Which syntax is valid for declaring an anonymous method?",
    "o": [
      "delegate(int x) { return x * 3; }",
      "(int x) -> x * 3",
      "lambda x: x * 3",
      "new delegate => x * 3"
    ]
  },
  {
    "q": "What is the main reason for using the ?.Invoke() pattern when raising events?",
    "o": [
      "To safely check for null before invoking the event",
      "To force synchronous execution of handlers",
      "To ensure the delegate is static",
      "To call all methods assigned to the event twice"
    ]
  },
  {
    "q": "What is the output of the following event invocation?",
    "c": "public event EventHandler OnStart;\n\nvoid Run() {\n    OnStart?.Invoke(this, EventArgs.Empty);\n}",
    "o": [
      "It triggers all subscribed event handlers",
      "It assigns a handler to the event",
      "It logs an event to the console",
      "It unsubscribes from the event"
    ]
  },
  {
    "q": "Which built-in delegate type should you use for a method that takes two parameters and returns a value?",
    "o": [
      "Func<T1, T2, TResult>",
      "Action<T1, T2>",
      "Predicate<T>",
      "EventHandler<T>"
    ]
  },
  {
    "q": "Which keyword is used to declare an event in C#?",
    "o": [
      "event",
      "delegate",
      "trigger",
      "handler"
    ]
  },
  {
    "q": "What is the output of this code involving a multicast delegate?",
    "c": "delegate void Task();\n\nclass Program {\n    static void Task1() => Console.Write(\"One \");\n    static void Task2() => Console.Write(\"Two\");\n\n    static void Main() {\n        Task t = Task1;\n        t += Task2;\n        t();\n    }\n}",
    "o": [
      "One Two",
      "Two One",
      "Task1",
      "Error"
    ]
  },
  {
    "q": "Which of the following best describes a lambda expression?",
    "o": [
      "An anonymous function that can contain expressions and statements",
      "A type of event handler",
      "A named function used with delegates",
      "A sealed class method"
    ]
  },
  {
    "q": "What will this code output?",
    "c": "Func<int, int, int> add = (x, y) => x + y;\nConsole.WriteLine(add(4, 6));",
    "o": [
      "10",
      "46",
      "Error",
      "0"
    ]
  },
  {
    "q": "Which statement about events in C# is true?",
    "o": [
      "Events cannot be invoked from outside the declaring class",
      "Events can only be declared in static classes",
      "Events are required to return a value",
      "Events automatically raise exceptions when null"
    ]
  },
  {
    "q": "What is the correct syntax to assign an anonymous method to a delegate?",
    "o": [
      "MyDelegate d = delegate(string msg) { Console.WriteLine(msg); };",
      "MyDelegate d = new(string msg) => Console.WriteLine(msg);",
      "MyDelegate d = message -> Console.WriteLine(message);",
      "MyDelegate d = delegate => Console.WriteLine(msg);"
    ]
  },
  {
    "q": "What is the output of this Action delegate?",
    "c": "Action show = () => Console.Write(\"Hello from lambda\");\nshow();",
    "o": [
      "Hello from lambda",
      "show",
      "Error",
      "Lambda"
    ]
  },
  {
    "q": "Which of the following is NOT a characteristic of delegates?",
    "o": [
      "They cannot point to multiple methods if not multicast",
      "They can reference static and instance methods",
      "They are type-safe function pointers",
      "They support asynchronous invocation"
    ]
  },
  {
    "q": "How are lambda expressions commonly used with events?",
    "o": [
      "To subscribe inline event handlers without needing separate method declarations",
      "To invoke events from multiple threads",
      "To define new delegate types",
      "To make event handlers static"
    ]
  },
  {
    "q": "Which of these can be used to raise an event safely?",
    "o": [
      "?.Invoke(sender, args)",
      "+= sender",
      "== null ? return : invoke()",
      "Invoke(null)"
    ]
  },
  {
    "q": "What will this delegate return?",
    "c": "delegate int MathOperation(int x);\n\nclass Program {\n    static void Main() {\n        MathOperation op = x => x * 2;\n        Console.WriteLine(op(3));\n    }\n}",
    "o": [
      "6",
      "3",
      "2",
      "0"
    ]
  },
  {
    "q": "Which of the following correctly defines an event handler using EventHandler<T>?",
    "o": [
      "public event EventHandler<MyEventArgs> OnProcessed;",
      "public delegate void OnProcessed(MyEventArgs e);",
      "event void OnProcessed(MyEventArgs e);",
      "event Event OnProcessed;"
    ]
  },
  {
    "q": "Which syntax correctly attaches a method to an event?",
    "o": [
      "myButton.Click += MyClickHandler;",
      "myButton.Click = MyClickHandler;",
      "myButton.Click(MyClickHandler);",
      "Click += myButton.MyClickHandler();"
    ]
  },
  {
    "q": "What does this lambda expression do?",
    "c": "Func<string, int> getLength = s => s.Length;\nConsole.WriteLine(getLength(\"Hello\"));",
    "o": [
      "5",
      "0",
      "Hello",
      "Length"
    ]
  },
  {
    "q": "What is the main reason to use anonymous methods with delegates?",
    "o": [
      "To define short logic inline without declaring a separate method",
      "To enforce static typing on delegate methods",
      "To restrict access to private methods",
      "To implement interface methods dynamically"
    ]
  },
  {
    "q": "What happens if a multicast delegate contains multiple methods and one throws an exception?",
    "o": [
      "Execution stops and the exception is thrown",
      "Remaining methods are still invoked",
      "Only the first method is executed",
      "All exceptions are ignored"
    ]
  },
  {
    "q": "Which lambda syntax is valid for a method returning void?",
    "o": [
      "() => Console.WriteLine(\"Done\")",
      "() -> Console.WriteLine(\"Done\")",
      "(=> Console.WriteLine(\"Done\"))",
      "lambda() { Console.WriteLine(\"Done\") }"
    ]
  },
  {
    "q": "Which feature allows you to pass a method as a parameter in C#?",
    "o": [
      "Delegates",
      "Events",
      "Properties",
      "Interfaces"
    ]
  },
  {
    "q": "What is the purpose of the 'delegate' keyword in C#?",
    "o": [
      "To declare a reference type that can encapsulate a method",
      "To define abstract event handlers",
      "To raise custom exceptions",
      "To create value types at runtime"
    ]
  },
  {
    "q": "Which of the following is true about events in C#?",
    "o": [
      "Events use delegates to maintain a list of subscribers",
      "Events can only be triggered once",
      "Events are executed synchronously only",
      "Events cannot be declared in interfaces"
    ]
  },
  {
    "q": "Which statement correctly initializes a delegate with a lambda in C#?",
    "o": [
      "Func<int, int> square = x => x * x;",
      "Func<int, int> square = (x) { return x * x; };",
      "Func<int, int> square = => x * x;",
      "Func<int, int> square = lambda(x) => x * x;"
    ]
  },
  {
    "q": "What will be the result of executing the following code?",
    "c": "delegate void LogHandler(string message);\n\nclass Logger {\n    public static void LogToConsole(string msg) {\n        Console.WriteLine(\"Console: \" + msg);\n    }\n\n    public static void LogToFile(string msg) {\n        Console.WriteLine(\"File: \" + msg);\n    }\n\n    static void Main() {\n        LogHandler log = LogToConsole;\n        log += LogToFile;\n        log(\"Test\");\n    }\n}",
    "o": [
      "Console: Test\nFile: Test",
      "File: Test\nConsole: Test",
      "Console: Test",
      "Test"
    ]
  },
  {
    "q": "Which is a benefit of using events instead of public delegates?",
    "o": [
      "Events prevent external classes from invoking the delegate directly",
      "Events can return values",
      "Events automatically log invocations",
      "Events can be overridden"
    ]
  },
  {
    "q": "Which delegate type can be used for a method that takes no parameters and returns nothing?",
    "o": [
      "Action",
      "Func",
      "Predicate",
      "EventHandler"
    ]
  },
  {
    "q": "What will the following anonymous method print?",
    "c": "delegate void Greet(string name);\n\nclass Program {\n    static void Main() {\n        Greet greet = delegate(string n) {\n            Console.WriteLine(\"Hi \" + n);\n        };\n        greet(\"Leo\");\n    }\n}",
    "o": [
      "Hi Leo",
      "Hello Leo",
      "Leo",
      "Hi"
    ]
  },
  {
    "q": "Which scenario best demonstrates the use of a multicast delegate?",
    "o": [
      "A button click that logs to both console and a file",
      "Calling a single method through a reference",
      "Returning a result from one calculation",
      "Throwing exceptions from multiple handlers"
    ]
  },
  {
    "q": "How do you remove a method from a delegate invocation list?",
    "o": [
      "Using the -= operator",
      "Using the delete keyword",
      "Calling delegate.Remove()",
      "Setting the delegate to null"
    ]
  },
  {
    "q": "Which of these is a valid declaration of an event with a custom delegate?",
    "o": [
      "public event MyDelegate OnUpdate;",
      "event OnUpdate MyDelegate;",
      "public MyDelegate OnUpdate event;",
      "OnUpdate event of type MyDelegate;"
    ]
  },
  {
    "q": "Which lambda expression returns true if a number is even?",
    "o": [
      "x => x % 2 == 0",
      "x => x % 2",
      "x -> x % 2 = 0",
      "lambda(x) { return x % 2 == 0; }"
    ]
  },
  {
    "q": "What does the following line of code declare?",
    "c": "Action<string> print = msg => Console.WriteLine(msg);",
    "o": [
      "A delegate that takes a string and returns void",
      "A function that returns a string",
      "An event handler for key presses",
      "An error handler method"
    ]
  },
  {
    "q": "What will the following lambda expression return?",
    "c": "Func<int, int, bool> isGreater = (a, b) => a > b;\nConsole.WriteLine(isGreater(10, 5));",
    "o": [
      "True",
      "False",
      "10",
      "5"
    ]
  },
  {
    "q": "Which of the following is a key feature of a multicast delegate?",
    "o": [
      "It can invoke multiple methods in sequence",
      "It returns the result of all methods",
      "It must return void",
      "It can only be used with static methods"
    ]
  },
  {
    "q": "What does this anonymous method do?",
    "c": "delegate void Alert();\n\nAlert notify = delegate {\n    Console.WriteLine(\"Alert triggered!\");\n};\n\nnotify();",
    "o": [
      "Prints 'Alert triggered!'",
      "Throws a runtime error",
      "Prints nothing",
      "Compiles with warning"
    ]
  },
  {
    "q": "Which of the following delegates is best suited for a method that returns a string and takes two ints?",
    "o": [
      "Func<int, int, string>",
      "Action<int, int>",
      "Func<string, int, int>",
      "Predicate<int>"
    ]
  },
  {
    "q": "How can you unsubscribe a method from an event?",
    "o": [
      "eventName -= MethodName;",
      "eventName.Remove(MethodName);",
      "unsubscribe(eventName, MethodName);",
      "eventName = null;"
    ]
  },
  {
    "q": "Which code correctly uses a lambda to define a Predicate?",
    "c": "Predicate<int> isOdd = x => x % 2 != 0;",
    "o": [
      "Defines a lambda that checks if a number is odd",
      "Defines a lambda that returns a number",
      "Checks if number is even",
      "Will not compile"
    ]
  },
  {
    "q": "Which line correctly declares an event using the built-in EventHandler?",
    "o": [
      "public event EventHandler ButtonClicked;",
      "event Event ButtonClicked;",
      "delegate event EventHandler ButtonClicked;",
      "ButtonClicked event EventHandler;"
    ]
  },
  {
    "q": "Which is a correct use of an anonymous method with parameters?",
    "o": [
      "Action<string> log = delegate(string msg) { Console.WriteLine(msg); };",
      "Action<string> log = string msg => Console.WriteLine(msg);",
      "Action log = delegate msg { Console.WriteLine(msg); };",
      "Func log = delegate { msg => Console.WriteLine(msg); };"
    ]
  },
  {
    "q": "Which keyword is used to define a delegate type?",
    "o": [
      "delegate",
      "event",
      "func",
      "handler"
    ]
  },
  {
    "q": "What is the advantage of using lambda expressions with delegates?",
    "o": [
      "They reduce the need for explicitly declared methods",
      "They enforce runtime type safety",
      "They allow multiple inheritance",
      "They eliminate the need for event declarations"
    ]
  },
  {
    "q": "Which statement correctly describes a delegate in C#?",
    "o": [
      "A delegate is a type-safe function pointer",
      "A delegate is used to store multiple classes",
      "A delegate is a method that returns an array",
      "A delegate is a property of a class"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "delegate int Operation(int a, int b);\n\nclass Program {\n    static int Multiply(int x, int y) => x * y;\n\n    static void Main() {\n        Operation op = Multiply;\n        Console.WriteLine(op(3, 4));\n    }\n}",
    "o": [
      "12",
      "7",
      "1",
      "0"
    ]
  },
  {
    "q": "Which of these best represents a multicast delegate behavior?",
    "o": [
      "All subscribed methods are called in sequence",
      "Only the first subscribed method is called",
      "It runs methods randomly",
      "It executes methods in reverse order"
    ]
  },
  {
    "q": "Which of the following lambda expressions is valid?",
    "o": [
      "(x, y) => x + y",
      "(x, y) -> x + y",
      "[x, y] => x + y",
      "lambda x, y: x + y"
    ]
  },
  {
    "q": "What is the output of the following anonymous method?",
    "c": "delegate void Notify();\n\nclass Program {\n    static void Main() {\n        Notify n = delegate { Console.Write(\"Alert\"); };\n        n();\n    }\n}",
    "o": [
      "Alert",
      "delegate",
      "Notify",
      "Nothing"
    ]
  },
  {
    "q": "Why are events preferred over direct delegate access?",
    "o": [
      "Events encapsulate delegate invocation and restrict direct invocation",
      "Events execute faster than delegates",
      "Events require fewer resources",
      "Events can only be used with lambda expressions"
    ]
  },
  {
    "q": "Which of the following code snippets correctly declares and uses an event?",
    "c": "public delegate void UpdateHandler();\npublic class App {\n    public event UpdateHandler OnUpdate;\n    public void Trigger() {\n        OnUpdate?.Invoke();\n    }\n}",
    "o": [
      "Defines a delegate event and invokes it safely",
      "Compiles with an error due to null check",
      "Requires a static method only",
      "OnUpdate cannot be accessed like this"
    ]
  },
  {
    "q": "How do you assign an anonymous method to a delegate?",
    "o": [
      "myDelegate = delegate { Console.WriteLine(\"Hello\"); };",
      "myDelegate = anonymous { Console.WriteLine(\"Hello\"); };",
      "myDelegate = () { Console.WriteLine(\"Hello\"); };",
      "myDelegate = function() => Console.WriteLine(\"Hello\");"
    ]
  },
  {
    "q": "What does the following lambda return?",
    "c": "Func<int, int> doubleIt = n => n * 2;\nConsole.WriteLine(doubleIt(6));",
    "o": [
      "12",
      "6",
      "2",
      "0"
    ]
  },
  {
    "q": "What is the purpose of EventHandler in .NET?",
    "o": [
      "It defines a standard delegate signature for events",
      "It returns multiple values from an event",
      "It logs errors automatically",
      "It replaces the need for delegates"
    ]
  },
  {
    "q": "Which of the following best describes a lambda expression in C#?",
    "o": [
      "A concise way to represent an anonymous method using => syntax",
      "A method with no return type",
      "A static method in a class",
      "A delegate that uses reflection"
    ]
  },
  {
    "q": "What will be the result of the following code?",
    "c": "delegate void Show();\n\nclass Demo {\n    static void Hello() => Console.WriteLine(\"Hello\");\n    static void World() => Console.WriteLine(\"World\");\n\n    static void Main() {\n        Show s = Hello;\n        s += World;\n        s();\n    }\n}",
    "o": [
      "Hello\nWorld",
      "World\nHello",
      "Hello only",
      "World only"
    ]
  },
  {
    "q": "How do you declare a delegate that returns a bool and takes a string as input?",
    "o": [
      "public delegate bool Check(string input);",
      "public delegate string Check(bool input);",
      "public delegate void Check(string input);",
      "bool delegate Check(string input);"
    ]
  },
  {
    "q": "Which code demonstrates creating an event using EventHandler<T>?",
    "c": "public event EventHandler<EventArgs> DataReceived;",
    "o": [
      "Creates a standard .NET event with data payload support",
      "Declares a delegate without any return",
      "Declares an Action event",
      "This will throw a compile error"
    ]
  },
  {
    "q": "What is the benefit of using multicast delegates?",
    "o": [
      "They can call multiple methods with a single invocation",
      "They return values from all called methods",
      "They work only with events",
      "They avoid memory allocation"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "Func<int, int> increment = delegate(int x) { return x + 1; };\nConsole.WriteLine(increment(4));",
    "o": [
      "5",
      "4",
      "1",
      "0"
    ]
  },
  {
    "q": "What does the following lambda expression do?\n\n`x => x.Length > 3`",
    "o": [
      "Returns true if x's length is greater than 3",
      "Returns the string x if it's more than 3 characters",
      "Throws an error due to syntax",
      "Always returns false"
    ]
  },
  {
    "q": "Which syntax correctly subscribes a method to an event?",
    "o": [
      "button.Click += OnClickHandler;",
      "button.Click => OnClickHandler;",
      "button.Click =+ OnClickHandler;",
      "OnClickHandler = button.Click;"
    ]
  },
  {
    "q": "What will be printed by the following code?",
    "c": "delegate void Notify();\n\nclass Test {\n    static void Main() {\n        Notify msg = () => Console.WriteLine(\"Lambda!\");\n        msg();\n    }\n}",
    "o": [
      "Lambda!",
      "Notify",
      "Main",
      "Error"
    ]
  },
  {
    "q": "What does the '?' operator in 'OnEvent?.Invoke()' signify?",
    "o": [
      "It ensures the delegate is not null before invoking",
      "It casts the event to a nullable type",
      "It forces the event to return a boolean",
      "It is used for async method calls"
    ]
  },
  {
    "q": "Which delegate type is used when no parameters are required and no value is returned?",
    "o": [
      "Action",
      "Func",
      "Predicate",
      "Delegate"
    ]
  },
  {
    "q": "What is the output of this code snippet?",
    "c": "Action greet = () => Console.WriteLine(\"Welcome to C#\");\ngreet();",
    "o": [
      "Welcome to C#",
      "C#",
      "Nothing is printed",
      "Error: Action can't be used this way"
    ]
  },
  {
    "q": "Which of the following best defines an anonymous method?",
    "o": [
      "A method without a name defined using the `delegate` keyword",
      "A method created using a lambda expression",
      "A static method called anonymously",
      "A method that is private in scope"
    ]
  },
  {
    "q": "What is the return type of this lambda expression: `x => x * x` if used with Func<int, int>?",
    "o": [
      "int",
      "void",
      "string",
      "bool"
    ]
  },
  {
    "q": "Which of the following correctly creates a multicast delegate?",
    "c": "delegate void Logger();\nLogger log = LogToFile;\nlog += LogToConsole;",
    "o": [
      "The delegate will call both LogToFile and LogToConsole",
      "Only LogToConsole will be called",
      "Only LogToFile will be called",
      "This is not valid in C#"
    ]
  },
  {
    "q": "Which type of delegate returns a boolean and takes one input?",
    "o": [
      "Predicate<T>",
      "Func<T, bool>",
      "Action<T>",
      "EventHandler"
    ]
  },
  {
    "q": "What is the purpose of using `+=` with an event?",
    "o": [
      "To subscribe a method to the event",
      "To override the existing event handler",
      "To unsubscribe a method from the event",
      "To call the event immediately"
    ]
  },
  {
    "q": "What does this lambda expression do?\n\n`(a, b) => a + b`",
    "o": [
      "Adds two parameters and returns the result",
      "Subtracts b from a",
      "Returns the larger of a and b",
      "Checks if a equals b"
    ]
  },
  {
    "q": "What is the output of this code snippet?",
    "c": "Func<int, int, int> add = (x, y) => x + y;\nConsole.WriteLine(add(5, 7));",
    "o": [
      "12",
      "10",
      "57",
      "0"
    ]
  },
  {
    "q": "Which keyword is used to prevent external classes from raising an event?",
    "o": [
      "event",
      "private",
      "readonly",
      "static"
    ]
  },
  {
    "q": "Which of the following best describes a multicast delegate?",
    "o": [
      "A delegate that can reference more than one method",
      "A delegate that only calls methods asynchronously",
      "A delegate used only for UI events",
      "A delegate that returns multiple values"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "delegate void ShowMessage();\n\nclass Example {\n    static void Message1() => Console.WriteLine(\"One\");\n    static void Message2() => Console.WriteLine(\"Two\");\n\n    static void Main() {\n        ShowMessage show = Message1;\n        show += Message2;\n        show();\n    }\n}",
    "o": [
      "One\nTwo",
      "Two\nOne",
      "Two",
      "One"
    ]
  },
  {
    "q": "How is an anonymous method different from a named method?",
    "o": [
      "It has no name and is declared using the 'delegate' keyword",
      "It must return void",
      "It cannot access outer variables",
      "It must be declared inside a class"
    ]
  },
  {
    "q": "Which of these is the correct syntax to define a delegate in C#?",
    "o": [
      "public delegate int Calculator(int x, int y);",
      "delegate Calculator(int x, int y);",
      "func Calculator(int x, int y);",
      "define Calculator(int x, int y);"
    ]
  },
  {
    "q": "What will the following code print?",
    "c": "Func<string, string> greet = name => $\"Hi, {name}!\";\nConsole.WriteLine(greet(\"Sara\"));",
    "o": [
      "Hi, Sara!",
      "Hello, Sara!",
      "Sara",
      "Hi!"
    ]
  },
  {
    "q": "Which of the following can be used to define an event handler method signature?",
    "o": [
      "void Handler(object sender, EventArgs e)",
      "string Handler(int val)",
      "bool Handler(string s)",
      "Handler Event(object obj)"
    ]
  },
  {
    "q": "Which delegate returns a value and takes no parameters?",
    "o": [
      "Func<int>",
      "Action",
      "Predicate<string>",
      "EventHandler"
    ]
  },
  {
    "q": "What is the output of this code snippet?",
    "c": "Predicate<int> isEven = n => n % 2 == 0;\nConsole.WriteLine(isEven(6));",
    "o": [
      "True",
      "False",
      "6",
      "0"
    ]
  },
  {
    "q": "What is the correct way to define an event in a class?",
    "o": [
      "public event EventHandler OnProcessed;",
      "event OnProcessed();",
      "public delegate event OnProcessed;",
      "define event EventHandler OnProcessed;"
    ]
  },
  {
    "q": "Which of the following best explains when to use the `Func<>` delegate?",
    "o": [
      "When a method returns a value",
      "When a method returns void",
      "When a method has only one parameter",
      "When using multicast delegates"
    ]
  },
  {
    "q": "Which of the following is required to raise an event in C#?",
    "o": [
      "Invoking the delegate associated with the event",
      "Assigning a method to a variable",
      "Using a Func delegate",
      "Calling Console.WriteLine"
    ]
  },
  {
    "q": "What will the following code output?",
    "c": "delegate string GetMessage(string name);\n\nclass Demo {\n    static void Main() {\n        GetMessage msg = delegate(string n) { return \"Hi, \" + n; };\n        Console.WriteLine(msg(\"Joe\"));\n    }\n}",
    "o": [
      "Hi, Joe",
      "Hello, Joe",
      "Joe",
      "Hi"
    ]
  },
  {
    "q": "Which of the following delegates can accept two int parameters and return a double?",
    "o": [
      "Func<int, int, double>",
      "Action<int, int, double>",
      "Predicate<int, double>",
      "EventHandler<int>"
    ]
  },
  {
    "q": "Which of the following keywords is used to define a delegate?",
    "o": [
      "delegate",
      "func",
      "action",
      "handler"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "Func<int, int, int> multiply = (a, b) => a * b;\nConsole.WriteLine(multiply(3, 4));",
    "o": [
      "12",
      "7",
      "34",
      "1"
    ]
  },
  {
    "q": "What is the main purpose of using events in C#?",
    "o": [
      "To enable one object to notify other objects when something occurs",
      "To create background threads",
      "To hold a list of static methods",
      "To replace constructors"
    ]
  },
  {
    "q": "Which syntax below correctly defines an anonymous method assigned to a delegate?",
    "o": [
      "delegate(int x) { return x * x; }",
      "(int x) => return x * x;",
      "anonymous(int x) { return x * x; }",
      "delegate => int x { return x * x; }"
    ]
  },
  {
    "q": "Which statement is true about Action<T> in C#?",
    "o": [
      "It represents a method that takes parameters but returns void",
      "It represents a method that returns a value",
      "It is used to define events only",
      "It cannot be used with lambdas"
    ]
  },
  {
    "q": "What will be printed by this code snippet?",
    "c": "Action log = () => Console.WriteLine(\"Action called\");\nlog();",
    "o": [
      "Action called",
      "log",
      "Nothing is printed",
      "Error at runtime"
    ]
  },
  {
    "q": "Which of these is NOT true about delegates in C#?",
    "o": [
      "They can return multiple values simultaneously",
      "They can reference multiple methods (if multicast)",
      "They are type-safe function pointers",
      "They can be passed as arguments"
    ]
  },
  {
    "q": "Which of the following is true about multicast delegates in C#?",
    "o": [
      "They invoke multiple methods in the order they were added",
      "They can only hold one method reference",
      "They throw an error if more than one method is assigned",
      "They can only be used with Func types"
    ]
  },
  {
    "q": "What will the following code output?",
    "c": "delegate void Notify();\n\nclass Program {\n    static void First() => Console.WriteLine(\"First\");\n    static void Second() => Console.WriteLine(\"Second\");\n\n    static void Main() {\n        Notify notify = First;\n        notify += Second;\n        notify();\n    }\n}",
    "o": [
      "First\nSecond",
      "Second\nFirst",
      "Second",
      "First"
    ]
  },
  {
    "q": "Which keyword is used to restrict direct access to an event from outside the class?",
    "o": [
      "event",
      "private",
      "readonly",
      "sealed"
    ]
  },
  {
    "q": "Which of the following best describes a lambda expression?",
    "o": [
      "An inline anonymous function using => syntax",
      "A method declared using the `delegate` keyword",
      "A static method declared inside a class",
      "A type-safe function pointer"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "Func<int, int> square = x => x * x;\nConsole.WriteLine(square(8));",
    "o": [
      "64",
      "16",
      "8",
      "0"
    ]
  },
  {
    "q": "Which delegate type would you use for an event that takes no arguments and returns nothing?",
    "o": [
      "Action",
      "Func",
      "Predicate",
      "EventHandler<T>"
    ]
  },
  {
    "q": "Which of the following is a valid syntax for creating an event?",
    "o": [
      "public event EventHandler SomethingHappened;",
      "event SomethingHappened();",
      "create event SomethingHappened;",
      "delegate event SomethingHappened;"
    ]
  },
  {
    "q": "What does the following anonymous method return?",
    "c": "Func<int, int> doubleIt = delegate(int x) { return x * 2; };\nConsole.WriteLine(doubleIt(6));",
    "o": [
      "12",
      "6",
      "36",
      "3"
    ]
  },
  {
    "q": "Which of these is a characteristic of an anonymous method in C#?",
    "o": [
      "It does not have a name and is defined using the `delegate` keyword",
      "It must return void",
      "It must be static",
      "It must be defined inside a constructor"
    ]
  },
  {
    "q": "What is the purpose of the `EventHandler` delegate in C#?",
    "o": [
      "It provides a standard signature for event handler methods",
      "It is used to define Func-based delegates",
      "It executes event handlers on a new thread",
      "It represents an asynchronous method call"
    ]
  },
  {
    "q": "What is required to subscribe a method to an event in C#?",
    "o": [
      "Use the += operator with a compatible method",
      "Use the = operator with any method",
      "Call the event like a regular method",
      "Use the new keyword to register the method"
    ]
  },
  {
    "q": "What will the following code output?",
    "c": "delegate int Operation(int x);\n\nclass Demo {\n    static void Main() {\n        Operation op = delegate(int val) { return val + 5; };\n        Console.WriteLine(op(10));\n    }\n}",
    "o": [
      "15",
      "10",
      "5",
      "0"
    ]
  },
  {
    "q": "Which of the following describes a lambda expression?",
    "o": [
      "A concise way to represent an anonymous method",
      "A replacement for delegates",
      "A method with no return type",
      "An event handler syntax"
    ]
  },
  {
    "q": "What does the `Predicate<T>` delegate return?",
    "o": [
      "A boolean value",
      "A string value",
      "An integer value",
      "A void type"
    ]
  },
  {
    "q": "What will this code print?",
    "c": "Action<string> greet = name => Console.WriteLine($\"Welcome, {name}!\");\ngreet(\"Nina\");",
    "o": [
      "Welcome, Nina!",
      "Hello, Nina!",
      "Welcome, name!",
      "Nina"
    ]
  },
  {
    "q": "Which syntax correctly declares an Action that takes two parameters?",
    "o": [
      "Action<int, string> log = (x, y) => Console.WriteLine($\"{x}, {y}\");",
      "Func<int, string> log = (x, y) => Console.WriteLine(x + y);",
      "Action log = int x, string y => Console.WriteLine(x, y);",
      "Action<string> log = (x, y) => x + y;"
    ]
  },
  {
    "q": "What is the purpose of multicast delegates in event handling?",
    "o": [
      "To allow multiple methods to respond to the same event",
      "To broadcast an event across multiple threads",
      "To reduce memory usage in delegates",
      "To handle UI-specific event delegation"
    ]
  },
  {
    "q": "What is the output of this snippet?",
    "c": "delegate void Display();\n\nclass Test {\n    static void A() => Console.Write(\"A \");\n    static void B() => Console.Write(\"B\");\n\n    static void Main() {\n        Display d = A;\n        d += B;\n        d();\n    }\n}",
    "o": [
      "A B",
      "B A",
      "A",
      "B"
    ]
  },
  {
    "q": "Which of these can be passed as parameters to methods?",
    "o": [
      "Delegates",
      "Events",
      "Classes only",
      "Structs only"
    ]
  },
  {
    "q": "How are lambda expressions related to delegates in C#?",
    "o": [
      "They are a more concise way to define delegates",
      "They replace events",
      "They are used only with anonymous types",
      "They are used to define interfaces"
    ]
  },
  {
    "q": "Which statement correctly defines a delegate that takes a string and returns void?",
    "o": [
      "public delegate void MyDelegate(string message);",
      "delegate string MyDelegate(void message);",
      "public event void MyDelegate(string message);",
      "delegate MyDelegate(string message) => void;"
    ]
  },
  {
    "q": "What will this code output?",
    "c": "delegate int Calculate(int x);\n\nclass Program {\n    static int Square(int n) => n * n;\n    static int Double(int n) => n * 2;\n\n    static void Main() {\n        Calculate calc = Square;\n        calc += Double;\n        Console.WriteLine(calc(3));\n    }\n}",
    "o": [
      "6",
      "9",
      "18",
      "3"
    ]
  },
  {
    "q": "What is a multicast delegate?",
    "o": [
      "A delegate that holds references to more than one method",
      "A delegate that can return multiple values",
      "A delegate that uses multiple parameters",
      "A delegate used in broadcasting messages to different servers"
    ]
  },
  {
    "q": "What will the following lambda expression return when executed?",
    "c": "Func<int, int, int> subtract = (a, b) => a - b;\nConsole.WriteLine(subtract(10, 4));",
    "o": [
      "6",
      "14",
      "10",
      "4"
    ]
  },
  {
    "q": "Which is a valid reason to use anonymous methods in C#?",
    "o": [
      "To declare inline methods without explicitly naming them",
      "To avoid using delegates",
      "To improve performance over named methods",
      "To replace all event handlers"
    ]
  },
  {
    "q": "How do you unsubscribe a method from an event?",
    "o": [
      "Using the -= operator",
      "Using the delete keyword",
      "Using the unsubscribe keyword",
      "Calling event.Remove()"
    ]
  },
  {
    "q": "What is the result of the following code?",
    "c": "Action log = delegate { Console.Write(\"Hello\"); };\nlog();",
    "o": [
      "Hello",
      "Error",
      "log",
      "Nothing"
    ]
  },
  {
    "q": "Which of the following statements about `Func` is true?",
    "o": [
      "It can return a value and take up to 16 parameters",
      "It is used only for events",
      "It must return void",
      "It only supports reference types"
    ]
  },
  {
    "q": "What is the signature of the default EventHandler delegate?",
    "o": [
      "void(object sender, EventArgs e)",
      "int(object sender, string e)",
      "bool(int value)",
      "void(int x, int y)"
    ]
  },
  {
    "q": "Which of the following is the correct way to raise an event named `OnStart`?",
    "o": [
      "OnStart?.Invoke(this, EventArgs.Empty);",
      "Invoke.OnStart(this, EventArgs.Empty);",
      "Raise(OnStart);",
      "OnStart();"
    ]
  },
  {
    "q": "Which of the following is required to declare a multicast delegate?",
    "o": [
      "The delegate must have a void return type",
      "The delegate must have no parameters",
      "The delegate must return an int",
      "The delegate must be static"
    ]
  },
  {
    "q": "What does the following code output?",
    "c": "delegate void Notify();\n\nclass Test {\n    static void A() => Console.Write(\"X \");\n    static void B() => Console.Write(\"Y \");\n\n    static void Main() {\n        Notify notify = A;\n        notify += B;\n        notify -= A;\n        notify();\n    }\n}",
    "o": [
      "Y ",
      "X Y ",
      "X ",
      "No output"
    ]
  },
  {
    "q": "What is the advantage of using lambda expressions in event handlers?",
    "o": [
      "They reduce boilerplate code for simple operations",
      "They ensure the event cannot be unsubscribed",
      "They automatically handle exceptions",
      "They make the delegate thread-safe"
    ]
  },
  {
    "q": "Which delegate type represents a method that returns a value and takes no parameters?",
    "o": [
      "Func<TResult>",
      "Action",
      "Predicate",
      "EventHandler"
    ]
  },
  {
    "q": "What does the following lambda expression return?",
    "c": "Func<int, int, int> multiply = (x, y) => x * y;\nConsole.WriteLine(multiply(3, 4));",
    "o": [
      "12",
      "7",
      "34",
      "1"
    ]
  },
  {
    "q": "Which statement about events in C# is true?",
    "o": [
      "They are typically declared using delegates",
      "They cannot be accessed inside the same class",
      "They can only be used in console applications",
      "They always require a return value"
    ]
  },
  {
    "q": "What is the output of this anonymous method example?",
    "c": "Func<string, string> echo = delegate(string msg) { return msg + \"!\"; };\nConsole.WriteLine(echo(\"Hey\"));",
    "o": [
      "Hey!",
      "Hey",
      "!Hey",
      "Hey!Hey"
    ]
  },
  {
    "q": "How is a lambda expression different from an anonymous method?",
    "o": [
      "It uses the => operator and can be more concise",
      "It must be declared inside a class",
      "It always takes exactly one parameter",
      "It cannot return a value"
    ]
  },
  {
    "q": "Which of the following adds a method to a delegate invocation list?",
    "o": [
      "Using the += operator",
      "Calling delegate.Add()",
      "Using the = operator",
      "Calling delegate.Invoke()"
    ]
  },
  {
    "q": "What is required when raising an event safely to avoid null reference exceptions?",
    "o": [
      "Use the null-conditional operator (?.Invoke)",
      "Use the static keyword",
      "Initialize the event with a default handler",
      "Wrap it in a try-catch block"
    ]
  },
  {
    "q": "Which of the following defines a delegate that takes two integers and returns a boolean?",
    "o": [
      "public delegate bool Compare(int a, int b);",
      "delegate void Compare(int a, int b);",
      "public delegate Compare(bool a, bool b);",
      "delegate bool Compare();"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "delegate string Formatter(string input);\n\nclass Program {\n    static void Main() {\n        Formatter fmt = s => s.ToUpper();\n        Console.WriteLine(fmt(\"event\"));\n    }\n}",
    "o": [
      "EVENT",
      "event",
      "Event",
      "EVEN"
    ]
  },
  {
    "q": "What keyword is used to define an event based on a delegate?",
    "o": [
      "event",
      "delegate",
      "handler",
      "trigger"
    ]
  },
  {
    "q": "Which is a valid use case for multicast delegates?",
    "o": [
      "Notifying multiple listeners about an event",
      "Returning multiple values from a method",
      "Defining multiple delegates at once",
      "Handling exception chaining"
    ]
  },
  {
    "q": "What does the following code output?",
    "c": "Action<string> shout = delegate(string word) { Console.WriteLine(word + \"!!!\"); };\nshout(\"Run\");",
    "o": [
      "Run!!!",
      "Run",
      "Run!",
      "Run!!!Run"
    ]
  },
  {
    "q": "Which of the following statements is true about lambda expressions?",
    "o": [
      "They can capture variables from the enclosing scope",
      "They cannot return a value",
      "They must always be used with Func<>",
      "They require a delegate declaration"
    ]
  },
  {
    "q": "What is the output of the following multicast delegate example?",
    "c": "delegate void Log();\nclass Program {\n    static void A() => Console.Write(\"1 \");\n    static void B() => Console.Write(\"2 \");\n    static void Main() {\n        Log log = A;\n        log += B;\n        log += A;\n        log();\n    }\n}",
    "o": [
      "1 2 1 ",
      "1 2 ",
      "2 1 1 ",
      "1 1 2 "
    ]
  },
  {
    "q": "Which delegate type returns no value and takes three parameters?",
    "o": [
      "Action<T1, T2, T3>",
      "Func<T1, T2, T3>",
      "Predicate<T>",
      "EventHandler<T>"
    ]
  },
  {
    "q": "Which keyword is used to prevent external classes from raising an event?",
    "o": [
      "private set",
      "sealed",
      "readonly",
      "override"
    ]
  },
  {
    "q": "How can you define an inline event handler using a lambda expression?",
    "o": [
      "button.Click += (s, e) => Console.WriteLine(\"Clicked\");",
      "button.Click = delegate(s, e) { Console.WriteLine(\"Clicked\"); };",
      "button.Click -> Console.WriteLine(\"Clicked\");",
      "button.Click => Console.WriteLine(\"Clicked\");"
    ]
  },
  {
    "q": "Which of the following correctly declares an event based on a delegate?",
    "o": [
      "public event EventHandler MyEvent;",
      "public delegate event MyEventHandler();",
      "public MyEvent event;",
      "event MyEventHandler() = delegate {};"
    ]
  },
  {
    "q": "What does this code output?",
    "c": "delegate void Del();\n\nclass Program {\n    static void First() => Console.Write(\"First \");\n    static void Second() => Console.Write(\"Second \");\n\n    static void Main() {\n        Del d = First;\n        d += Second;\n        d();\n    }\n}",
    "o": [
      "First Second ",
      "Second First ",
      "First ",
      "Second "
    ]
  },
  {
    "q": "What is the purpose of a delegate in C#?",
    "o": [
      "To encapsulate method references",
      "To store class instances",
      "To handle memory management",
      "To define constants"
    ]
  },
  {
    "q": "Which code defines an anonymous method that checks if a number is even?",
    "o": [
      "Func<int, bool> isEven = delegate(int x) { return x % 2 == 0; };",
      "bool isEven = (x) => x % 2 == 0;",
      "Func<bool> isEven = x % 2 == 0;",
      "delegate bool isEven = (x) => x % 2 == 0;"
    ]
  },
  {
    "q": "What will this lambda expression return?",
    "c": "Func<int, int, int> mod = (a, b) => a % b;\nConsole.WriteLine(mod(10, 3));",
    "o": [
      "1",
      "3",
      "0",
      "10"
    ]
  },
  {
    "q": "Which is true about multicast delegates?",
    "o": [
      "Only the last method’s return value is accessible",
      "They execute all attached methods simultaneously",
      "They are used only with events",
      "They must return a value"
    ]
  },
  {
    "q": "How is an event typically raised in C#?",
    "o": [
      "By calling Invoke on the event with appropriate arguments",
      "By assigning a value to the event",
      "By calling Start() on the event",
      "By using event += methodName"
    ]
  },
  {
    "q": "Which of the following is a characteristic of an anonymous method?",
    "o": [
      "It has no name and is defined inline using the 'delegate' keyword",
      "It must return void",
      "It must be static",
      "It can’t capture local variables"
    ]
  },
  {
    "q": "Which code uses a lambda expression to greet a user?",
    "o": [
      "Action<string> greet = name => Console.WriteLine($\"Hi, {name}!\");",
      "Func<string> greet = Console.WriteLine;",
      "Action greet = (name) => return $\"Hi, {name}\";",
      "var greet = (string name) -> Console.WriteLine(name);"
    ]
  },
  {
    "q": "Which delegate is used to define a method that returns void and takes no parameters?",
    "o": [
      "Action",
      "Func",
      "Predicate",
      "EventHandler<T>"
    ]
  },
  {
    "q": "Which of the following statements is true about delegates in C#?",
    "o": [
      "A delegate can reference any method with a matching signature and return type",
      "A delegate must be static",
      "A delegate can only point to methods in the same class",
      "Delegates can only be used in console applications"
    ]
  },
  {
    "q": "What will this code output?",
    "c": "delegate int Operation(int x, int y);\n\nclass Program {\n    static int Add(int a, int b) => a + b;\n\n    static void Main() {\n        Operation op = Add;\n        Console.WriteLine(op(3, 4));\n    }\n}",
    "o": [
      "7",
      "12",
      "34",
      "1"
    ]
  },
  {
    "q": "How are events related to delegates in C#?",
    "o": [
      "Events use delegates as their underlying type",
      "Events are executed before delegates",
      "Events can override delegates",
      "Events inherit from delegates"
    ]
  },
  {
    "q": "Which of the following uses a lambda expression to square a number?",
    "o": [
      "Func<int, int> square = x => x * x;",
      "Func<int, int> square = delegate(int x) { return x + x; };",
      "int square = x => x * x;",
      "square = (int x) => x + x;"
    ]
  },
  {
    "q": "What is the result of this code?",
    "c": "Action a = () => Console.Write(\"Hello \");\nAction b = () => Console.WriteLine(\"World\");\na += b;\na();",
    "o": [
      "Hello World",
      "Hello",
      "World",
      "HelloWorld"
    ]
  },
  {
    "q": "Which of the following defines an anonymous method that returns true if a string is empty?",
    "o": [
      "Func<string, bool> isEmpty = delegate(string s) { return s == \"\"; };",
      "Func<string, bool> isEmpty = s => s.Length > 0;",
      "Action<string> isEmpty = delegate(string s) { return s == \"\"; };",
      "Func<bool> isEmpty = delegate() { return s == \"\"; };"
    ]
  },
  {
    "q": "What does a multicast delegate return?",
    "o": [
      "Only the return value of the last method invoked",
      "The combined return values of all methods",
      "The first method’s return value only",
      "An array of return values"
    ]
  },
  {
    "q": "Which of the following is a valid use of the EventHandler delegate?",
    "o": [
      "public event EventHandler ButtonClicked;",
      "public EventHandler event ButtonClicked;",
      "event ButtonClicked() = new EventHandler();",
      "delegate event EventHandler ButtonClicked();"
    ]
  },
  {
    "q": "Which keyword allows a method to be registered to an event?",
    "o": [
      "+=",
      "-=",
      "=",
      "=>"
    ]
  },
  {
    "q": "What does the following code print?",
    "c": "delegate void Print(string msg);\n\nclass Program {\n    static void Main() {\n        Print p = delegate(string m) { Console.WriteLine(m); };\n        p(\"Delegates!\");\n    }\n}",
    "o": [
      "Delegates!",
      "delegate",
      "p",
      "Print"
    ]
  },
  {
    "q": "Which of the following is true about multicast delegates in C#?",
    "o": [
      "They maintain an invocation list of methods to call",
      "They can only hold one method reference",
      "They cannot be used with events",
      "They return values from all methods"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "delegate void ShowMessage();\nclass Program {\n    static void Hello() => Console.Write(\"Hello \");\n    static void World() => Console.Write(\"World\");\n    static void Main() {\n        ShowMessage msg = Hello;\n        msg += World;\n        msg();\n    }\n}",
    "o": [
      "Hello World",
      "World Hello",
      "Hello",
      "World"
    ]
  },
  {
    "q": "What is a characteristic of anonymous methods in C#?",
    "o": [
      "They are defined using the 'delegate' keyword without a name",
      "They must be declared static",
      "They cannot access variables in the outer scope",
      "They must return void"
    ]
  },
  {
    "q": "Which of the following correctly uses a lambda expression to filter even numbers?",
    "o": [
      "nums.Where(n => n % 2 == 0);",
      "nums.Filter(n => n % 2);",
      "nums.Select(n => n % 2 == 0);",
      "nums.Map(n => n % 2 == 0);"
    ]
  },
  {
    "q": "Which is a built-in delegate type that returns a value and takes one input?",
    "o": [
      "Func<T, TResult>",
      "Action<T>",
      "EventHandler<T>",
      "Predicate<T>"
    ]
  },
  {
    "q": "What is the result of this code?",
    "c": "Func<int, int> doubler = x => x * 2;\nConsole.WriteLine(doubler(6));",
    "o": [
      "12",
      "6",
      "8",
      "18"
    ]
  },
  {
    "q": "What will the following event declaration allow?",
    "c": "public event EventHandler DataLoaded;",
    "o": [
      "It allows subscribers to handle the DataLoaded event using EventHandler signature",
      "It can be assigned using the '=' operator",
      "It executes all EventHandlers in parallel",
      "It only works in Windows Forms applications"
    ]
  },
  {
    "q": "What is the correct syntax to remove a method from a delegate?",
    "o": [
      "myDelegate -= SomeMethod;",
      "myDelegate =- SomeMethod;",
      "myDelegate -> SomeMethod;",
      "delete myDelegate(SomeMethod);"
    ]
  },
  {
    "q": "What is the purpose of the 'Invoke' method on delegates?",
    "o": [
      "To execute the methods assigned to the delegate",
      "To bind a new method to the delegate",
      "To unsubscribe a method from the delegate",
      "To create a new delegate instance"
    ]
  },
  {
    "q": "What does the following anonymous method return?",
    "c": "Func<string, int> length = delegate(string s) { return s.Length; };\nConsole.WriteLine(length(\"Event\"));",
    "o": [
      "5",
      "4",
      "6",
      "0"
    ]
  },
  {
    "q": "Which delegate type is used when a method returns a boolean and takes one argument?",
    "o": [
      "Predicate<T>",
      "Func<T, bool>",
      "Action<T>",
      "EventHandler<T>"
    ]
  },
  {
    "q": "What will be printed by the following code?",
    "c": "delegate string Greet(string name);\n\nclass Program {\n    static string Hello(string n) => $\"Hello, {n}\";\n    static void Main() {\n        Greet g = Hello;\n        Console.WriteLine(g(\"Bob\"));\n    }\n}",
    "o": [
      "Hello, Bob",
      "Bob, Hello",
      "Hello",
      "Bob"
    ]
  },
  {
    "q": "Which of the following correctly declares a delegate that returns an int and takes two ints?",
    "o": [
      "public delegate int Calc(int x, int y);",
      "public delegate Calc(int x, int y) returns int;",
      "public delegate int Calc => (int x, int y);",
      "delegate Calc<int, int>;"
    ]
  },
  {
    "q": "Which statement about lambda expressions is correct?",
    "o": [
      "They provide a concise way to represent anonymous methods",
      "They must always return void",
      "They cannot be used with delegates",
      "They must be static"
    ]
  },
  {
    "q": "What does the following lambda expression return?",
    "c": "Func<int, bool> isOdd = n => n % 2 != 0;\nConsole.WriteLine(isOdd(7));",
    "o": [
      "True",
      "False",
      "0",
      "1"
    ]
  },
  {
    "q": "How does C# handle multiple methods in a multicast delegate that return values?",
    "o": [
      "Only the result of the last method in the invocation list is returned",
      "It aggregates all return values into a list",
      "It throws a compile-time error",
      "It returns the result of the first method only"
    ]
  },
  {
    "q": "What is the output of this code using an anonymous method?",
    "c": "Action sayHi = delegate { Console.WriteLine(\"Hi there\"); };\nsayHi();",
    "o": [
      "Hi there",
      "Hello",
      "There",
      "Nothing"
    ]
  },
  {
    "q": "Which of the following is a valid event handler method signature?",
    "o": [
      "void OnClicked(object sender, EventArgs e)",
      "int OnClicked(object sender, EventArgs e)",
      "void OnClicked(EventArgs e)",
      "static void OnClicked()"
    ]
  },
  {
    "q": "What does the += operator do when used with events?",
    "o": [
      "It subscribes a method to the event",
      "It triggers the event",
      "It creates a new delegate",
      "It assigns a method exclusively to the event"
    ]
  },
  {
    "q": "What will be printed?",
    "c": "Func<int, int, int> multiply = (a, b) => a * b;\nConsole.WriteLine(multiply(3, 4));",
    "o": [
      "12",
      "7",
      "1",
      "34"
    ]
  },
  {
    "q": "Which keyword is used to declare an event in C#?",
    "o": [
      "event",
      "delegate",
      "trigger",
      "raise"
    ]
  },
  {
    "q": "What will this code print?",
    "c": "delegate void Notify();\nclass Program {\n    static void One() => Console.Write(\"1 \");\n    static void Two() => Console.Write(\"2 \");\n    static void Main() {\n        Notify n = One;\n        n += Two;\n        n();\n    }\n}",
    "o": [
      "1 2 ",
      "2 1 ",
      "1 ",
      "2"
    ]
  },
  {
    "q": "Which built-in delegate is used for methods that return void and take no parameters?",
    "o": [
      "Action",
      "Func",
      "Predicate",
      "EventHandler"
    ]
  },
  {
    "q": "Which line correctly declares a lambda expression that doubles an integer?",
    "o": [
      "Func<int, int> doubleIt = x => x * 2;",
      "Func<int> doubleIt = x => x * 2;",
      "int doubleIt => x * 2;",
      "doubleIt = (x) => return x * 2;"
    ]
  },
  {
    "q": "What is the output of this code snippet?",
    "c": "Predicate<int> isPositive = num => num > 0;\nConsole.WriteLine(isPositive(3));",
    "o": [
      "True",
      "False",
      "3",
      "0"
    ]
  },
  {
    "q": "Which of the following describes a multicast delegate?",
    "o": [
      "A delegate that references more than one method",
      "A delegate that works across multiple classes",
      "A delegate that handles multiple return types",
      "A delegate that uses events only"
    ]
  },
  {
    "q": "How is an event typically triggered in C#?",
    "o": [
      "By invoking the delegate associated with the event",
      "By assigning a method to it directly",
      "By using the += operator alone",
      "By declaring it with 'trigger'"
    ]
  },
  {
    "q": "What does the following code do?",
    "c": "delegate bool Check(int val);\nCheck isEven = delegate(int x) { return x % 2 == 0; };\nConsole.WriteLine(isEven(6));",
    "o": [
      "True",
      "False",
      "6",
      "0"
    ]
  },
  {
    "q": "What is required for a method to handle an event?",
    "o": [
      "It must match the delegate signature used by the event",
      "It must be static",
      "It must return a value",
      "It must be marked as 'event'"
    ]
  },
  {
    "q": "What is the output?",
    "c": "Func<string> getMessage = () => \"Hello from lambda!\";\nConsole.WriteLine(getMessage());",
    "o": [
      "Hello from lambda!",
      "lambda",
      "getMessage",
      "Func"
    ]
  },
  {
    "q": "Which of the following best defines a delegate in C#?",
    "o": [
      "A type that references methods with a particular parameter list and return type",
      "A class used to raise events",
      "A variable that holds string values only",
      "A method that handles exceptions"
    ]
  },
  {
    "q": "What will be the output of the following code?",
    "c": "delegate int Calculate(int x, int y);\nclass Program {\n    static int Add(int a, int b) => a + b;\n    static void Main() {\n        Calculate calc = Add;\n        Console.WriteLine(calc(4, 6));\n    }\n}",
    "o": [
      "10",
      "46",
      "0",
      "Compilation error"
    ]
  },
  {
    "q": "Which of these can be assigned to an event in C#?",
    "o": [
      "A method matching the event delegate signature",
      "A constructor",
      "A class instance",
      "A property"
    ]
  },
  {
    "q": "Which lambda expression correctly checks if a string is empty?",
    "o": [
      "Func<string, bool> isEmpty = s => s == \"\";",
      "Func<string, bool> isEmpty = => s == \"\";",
      "Func<bool, string> isEmpty = s => \"\" == s;",
      "Func<string, bool> isEmpty = s = s == \"\";"
    ]
  },
  {
    "q": "What is true about anonymous methods in C#?",
    "o": [
      "They are unnamed inline methods defined using the delegate keyword",
      "They can only be used inside static methods",
      "They must always return void",
      "They cannot access outer scope variables"
    ]
  },
  {
    "q": "What will this code output?",
    "c": "Action greet = () => Console.WriteLine(\"Hi!\");\ngreet();",
    "o": [
      "Hi!",
      "Hello",
      "greet",
      "Nothing"
    ]
  },
  {
    "q": "Which scenario best suits using an event in C#?",
    "o": [
      "Notifying subscribers when a user clicks a button",
      "Calculating values in a loop",
      "Declaring constants",
      "Reading file contents"
    ]
  },
  {
    "q": "What does this code do?",
    "c": "delegate void LogHandler(string message);\nclass Logger {\n    public LogHandler log;\n    public void Process() {\n        log(\"Processing started\");\n    }\n}",
    "o": [
      "Invokes a method through a delegate",
      "Raises an exception",
      "Reads a log file",
      "Creates a static method"
    ]
  },
  {
    "q": "What is required to invoke a delegate instance safely if it may be null?",
    "o": [
      "Use the null-conditional operator: myDelegate?.Invoke();",
      "Use a try-catch block always",
      "Call the method directly",
      "It can't be avoided in any way"
    ]
  },
  {
    "q": "What will be printed?",
    "c": "Func<int, int, int> subtract = (a, b) => a - b;\nConsole.WriteLine(subtract(9, 4));",
    "o": [
      "5",
      "13",
      "4",
      "-5"
    ]
  },
  {
    "q": "Which of the following is a benefit of using events in C#?",
    "o": [
      "They provide a safe way to implement the publisher-subscriber model",
      "They eliminate the need for delegates",
      "They improve performance of loops",
      "They replace inheritance"
    ]
  },
  {
    "q": "What does the following code output?",
    "c": "delegate void Printer(string msg);\nclass Program {\n    static void Print1(string s) => Console.Write(\"First: \" + s);\n    static void Print2(string s) => Console.Write(\" Second: \" + s);\n    static void Main() {\n        Printer p = Print1;\n        p += Print2;\n        p(\"Hello\");\n    }\n}",
    "o": [
      "First: Hello Second: Hello",
      "Second: Hello First: Hello",
      "Hello",
      "First: Hello"
    ]
  },
  {
    "q": "What is the correct syntax for declaring a multicast delegate?",
    "o": [
      "MyDelegate d = Method1; d += Method2;",
      "MyDelegate d = Method1 + Method2;",
      "delegate void d = Method1, Method2;",
      "MyDelegate d = new Multicast(Method1, Method2);"
    ]
  },
  {
    "q": "Which of the following best describes an anonymous method?",
    "o": [
      "A method declared inline without a name using the 'delegate' keyword",
      "A static method in a sealed class",
      "A method that hides its implementation",
      "A method declared in a separate file"
    ]
  },
  {
    "q": "What will be printed by this code?",
    "c": "Func<int, int, int> divide = (a, b) => a / b;\nConsole.WriteLine(divide(8, 2));",
    "o": [
      "4",
      "6",
      "2",
      "16"
    ]
  },
  {
    "q": "Which of the following can be used to filter a list using a lambda expression?",
    "o": [
      "list.Where(x => x > 10);",
      "list.Filter(x > 10);",
      "lambda(list, x > 10);",
      "filter(x => x > 10)"
    ]
  },
  {
    "q": "What is the purpose of the EventHandler delegate in C#?",
    "o": [
      "It provides a standard delegate type for event handlers",
      "It logs exceptions raised in event calls",
      "It defines events in interfaces",
      "It invokes multicast methods automatically"
    ]
  },
  {
    "q": "What does this code output?",
    "c": "Func<string, string> shout = s => s.ToUpper();\nConsole.WriteLine(shout(\"hello\"));",
    "o": [
      "HELLO",
      "hello",
      "Hello",
      "Shout"
    ]
  },
  {
    "q": "Which statement is true about lambda expressions?",
    "o": [
      "They can be used to create expressions that return a value",
      "They must use the 'delegate' keyword",
      "They can only be assigned to void methods",
      "They require a named method"
    ]
  },
  {
    "q": "How do you raise an event in C#?",
    "o": [
      "By invoking the event delegate inside a method",
      "By declaring the event as public",
      "By using the += operator",
      "By overriding the event handler"
    ]
  },
  {
    "q": "Which of the following delegate declarations is valid in C#?",
    "o": [
      "public delegate int Operation(int x, int y);",
      "delegate Operation(int x, int y);",
      "int delegate Operation(x, y);",
      "delegate int Operation(x, y);"
    ]
  },
  {
    "q": "What will be the output of the following code?",
    "c": "delegate void Display();\nclass Test {\n    static void Greet() => Console.WriteLine(\"Welcome!\");\n    static void Main() {\n        Display d = Greet;\n        d();\n    }\n}",
    "o": [
      "Welcome!",
      "Greet",
      "d",
      "No output"
    ]
  },
  {
    "q": "Which of these is a key feature of multicast delegates?",
    "o": [
      "They invoke multiple methods in the order they are added",
      "They can hold return values from all methods",
      "They can only be used with void methods",
      "They require async methods"
    ]
  },
  {
    "q": "What will this lambda expression return?",
    "c": "Func<int, int> square = x => x * x;\nConsole.WriteLine(square(7));",
    "o": [
      "49",
      "14",
      "7",
      "0"
    ]
  },
  {
    "q": "Which of the following is true about anonymous methods in C#?",
    "o": [
      "They allow defining a method inline without a name",
      "They must be declared static",
      "They are only used with events",
      "They can't access variables outside their scope"
    ]
  },
  {
    "q": "Which of the following is used to declare a standard event handler in .NET?",
    "o": [
      "EventHandler",
      "DelegateHandler",
      "StandardEvent",
      "EventInvoke"
    ]
  },
  {
    "q": "What does this code output?",
    "c": "Action<string> print = msg => Console.WriteLine(msg);\nprint(\"Lambda Rocks!\");",
    "o": [
      "Lambda Rocks!",
      "msg",
      "Action",
      "print"
    ]
  },
  {
    "q": "How do you prevent a delegate from being null when invoked?",
    "o": [
      "Use null-conditional operator (?.Invoke)",
      "Check with 'is' before invoking",
      "Use try-catch always",
      "Delegates can’t be null"
    ]
  },
  {
    "q": "Which of the following is the correct syntax for an event declaration?",
    "o": [
      "public event EventHandler MyEvent;",
      "event MyEventHandler public;",
      "EventHandler MyEvent = event;",
      "event void MyEventHandler();"
    ]
  },
  {
    "q": "What will be printed?",
    "c": "delegate string Formatter(string s);\nclass Demo {\n    static void Main() {\n        Formatter f = delegate(string str) { return str + \"!\"; };\n        Console.WriteLine(f(\"CSharp\"));\n    }\n}",
    "o": [
      "CSharp!",
      "CSharp",
      "!CSharp",
      "C#"
    ]
  },
  {
    "q": "Which keyword is used to define an event in C#?",
    "o": [
      "event",
      "delegate",
      "handler",
      "trigger"
    ]
  },
  {
    "q": "What does the following code output?",
    "c": "delegate void Notify();\nclass Program {\n    static void Alert() => Console.WriteLine(\"Alert triggered\");\n    static void Main() {\n        Notify n = Alert;\n        n();\n    }\n}",
    "o": [
      "Alert triggered",
      "Notify",
      "n",
      "No output"
    ]
  },
  {
    "q": "What will happen if a multicast delegate contains multiple methods with return values?",
    "o": [
      "Only the return value of the last method is returned",
      "All return values are collected",
      "Only the first return value is accessible",
      "It causes a compilation error"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "Func<int, int, int> multiply = (x, y) => x * y;\nConsole.WriteLine(multiply(3, 5));",
    "o": [
      "15",
      "8",
      "10",
      "0"
    ]
  },
  {
    "q": "Which of the following correctly demonstrates an anonymous method?",
    "o": [
      "delegate(string msg) { Console.WriteLine(msg); }",
      "lambda(string msg) => Console.WriteLine(msg)",
      "(msg) => { Console.WriteLine(msg); }",
      "string msg => Console.WriteLine(msg)"
    ]
  },
  {
    "q": "What is the primary purpose of the EventHandler delegate?",
    "o": [
      "To define a method signature for event handlers with no return value",
      "To store multiple values in an event",
      "To delay method execution",
      "To pass parameters by reference"
    ]
  },
  {
    "q": "Which syntax correctly adds a method to an event?",
    "o": [
      "obj.SomeEvent += HandlerMethod;",
      "obj.SomeEvent = HandlerMethod;",
      "HandlerMethod += obj.SomeEvent;",
      "obj.HandlerMethod += SomeEvent;"
    ]
  },
  {
    "q": "What does the following code print?",
    "c": "Action<string> printer = s => Console.WriteLine(s.ToLower());\nprinter(\"EVENT\");",
    "o": [
      "event",
      "EVENT",
      "Event",
      "printer"
    ]
  },
  {
    "q": "Why are anonymous methods often used with events?",
    "o": [
      "To quickly define short handlers without creating separate named methods",
      "To avoid exceptions",
      "To improve compilation speed",
      "To make delegates static"
    ]
  },
  {
    "q": "Which of the following is true about lambda expressions in C#?",
    "o": [
      "They can capture outer variables and create closures",
      "They can only be used with LINQ",
      "They require explicit return types",
      "They must be inside a class marked 'static'"
    ]
  },
  {
    "q": "Which of the following can a delegate encapsulate in C#?",
    "o": [
      "A method with a matching signature",
      "A class constructor",
      "A field",
      "A namespace"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "delegate string Formatter(string input);\nclass Program {\n    static void Main() {\n        Formatter f = delegate(string s) { return s + \" C#\"; };\n        Console.WriteLine(f(\"Learning\"));\n    }\n}",
    "o": [
      "Learning C#",
      "C# Learning",
      "Learning",
      "C#"
    ]
  },
  {
    "q": "How is a multicast delegate different from a single-cast delegate?",
    "o": [
      "It can invoke multiple methods in sequence",
      "It can return multiple values",
      "It can only be used with events",
      "It does not support parameters"
    ]
  },
  {
    "q": "Which of the following is a correct lambda expression that returns the sum of two numbers?",
    "o": [
      "(a, b) => a + b",
      "lambda(a, b): return a + b",
      "sum(a, b) => a + b",
      "=> (a + b)"
    ]
  },
  {
    "q": "What does this code print?",
    "c": "delegate void Notify();\nclass Program {\n    static void Ping() => Console.WriteLine(\"Ping\");\n    static void Pong() => Console.WriteLine(\"Pong\");\n    static void Main() {\n        Notify n = Ping;\n        n += Pong;\n        n();\n    }\n}",
    "o": [
      "Ping\nPong",
      "Pong\nPing",
      "Ping",
      "Pong"
    ]
  },
  {
    "q": "Which of the following best defines a lambda expression in C#?",
    "o": [
      "An inline anonymous function used to create delegates or expression tree types",
      "A delegate that only works with integers",
      "A named method with flexible return type",
      "A method declared inside a property"
    ]
  },
  {
    "q": "What is the correct way to unsubscribe a method from an event?",
    "o": [
      "eventName -= MethodName;",
      "eventName = MethodName;",
      "MethodName -= eventName;",
      "unsubscribe(eventName, MethodName);"
    ]
  },
  {
    "q": "What does the following code output?",
    "c": "Action action = () => Console.WriteLine(\"Done\");\naction();",
    "o": [
      "Done",
      "()",
      "action",
      "Nothing"
    ]
  },
  {
    "q": "Which of these is a true statement about delegates in C#?",
    "o": [
      "Delegates are type-safe function pointers",
      "Delegates must be static methods",
      "Delegates can only call methods with no parameters",
      "Delegates always return void"
    ]
  },
  {
    "q": "Which scenario best suits the use of an event in C#?",
    "o": [
      "When a class needs to notify other classes about a state change",
      "When a method needs to run periodically",
      "When creating a database connection",
      "When returning a computed value"
    ]
  },
  {
    "q": "Which statement correctly describes a delegate in C#?",
    "o": [
      "A delegate is a type-safe reference to a method",
      "A delegate is a collection of classes",
      "A delegate is a structure that holds data",
      "A delegate is a reference to an event only"
    ]
  },
  {
    "q": "What does the following code output?",
    "c": "delegate int Calc(int x);\nclass Program {\n    static int Double(int n) => n * 2;\n    static void Main() {\n        Calc c = Double;\n        Console.WriteLine(c(4));\n    }\n}",
    "o": [
      "8",
      "4",
      "2",
      "0"
    ]
  },
  {
    "q": "Which of the following best describes a multicast delegate?",
    "o": [
      "A delegate that holds references to more than one method",
      "A delegate that returns multiple values",
      "A delegate that accepts multiple arguments",
      "A delegate that executes asynchronously"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "Action a = delegate { Console.WriteLine(\"Anonymous!\"); };\na();",
    "o": [
      "Anonymous!",
      "Action",
      "a",
      "Nothing"
    ]
  },
  {
    "q": "What is a lambda expression most commonly used for in C#?",
    "o": [
      "Defining short anonymous functions",
      "Creating async methods",
      "Building XML documents",
      "Declaring classes"
    ]
  },
  {
    "q": "What is the correct way to define an event based on a custom delegate?",
    "o": [
      "public event MyDelegate OnEvent;",
      "event void OnEvent();",
      "delegate OnEvent MyDelegate;",
      "MyDelegate event OnEvent;"
    ]
  },
  {
    "q": "Which of the following is a valid lambda that returns true if a number is even?",
    "o": [
      "x => x % 2 == 0",
      "x => return x % 2 == 0",
      "(int x) -> x % 2 == 0",
      "lambda x: x % 2 == 0"
    ]
  },
  {
    "q": "Why is it necessary to check for null before invoking an event?",
    "o": [
      "To ensure there are subscribers",
      "To free memory",
      "To avoid casting errors",
      "To increase performance"
    ]
  },
  {
    "q": "What does the following code output?",
    "c": "delegate void Show();\nclass Program {\n    static void Hello() => Console.WriteLine(\"Hello\");\n    static void World() => Console.WriteLine(\"World\");\n    static void Main() {\n        Show s = Hello;\n        s += World;\n        s += Hello;\n        s();\n    }\n}",
    "o": [
      "Hello\nWorld\nHello",
      "World\nHello\nWorld",
      "Hello\nHello\nWorld",
      "World\nWorld\nHello"
    ]
  },
  {
    "q": "Which statement is true about events in C#?",
    "o": [
      "Events provide a way for a class to notify other classes or objects when something of interest occurs",
      "Events can return values to the subscribers",
      "Events are always static in nature",
      "Events cannot be based on delegates"
    ]
  },
  {
    "q": "Which of the following keywords is used to declare a delegate in C#?",
    "o": [
      "delegate",
      "event",
      "handler",
      "callback"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "delegate int MathOp(int x);\nclass Program {\n    static int Square(int n) => n * n;\n    static void Main() {\n        MathOp op = Square;\n        Console.WriteLine(op(6));\n    }\n}",
    "o": [
      "36",
      "12",
      "6",
      "0"
    ]
  },
  {
    "q": "Which of the following best describes an event in C#?",
    "o": [
      "A mechanism for communication between objects using delegates",
      "A static function that runs periodically",
      "A method with no parameters and no return value",
      "A listener that cannot be overridden"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "Action<string> greet = name => Console.WriteLine($\"Hi {name}\");\ngreet(\"Sam\");",
    "o": [
      "Hi Sam",
      "Hello Sam",
      "Hi",
      "Sam"
    ]
  },
  {
    "q": "Which delegate is typically used when an event does not require custom event data?",
    "o": [
      "EventHandler",
      "Action",
      "Func",
      "MulticastDelegate"
    ]
  },
  {
    "q": "What is the correct syntax for defining an anonymous method that returns a string?",
    "o": [
      "delegate() { return \"Hello\"; }",
      "() => { return \"Hello\"; }",
      "string() => \"Hello\"",
      "func => \"Hello\""
    ]
  },
  {
    "q": "What is the default return type of an Action delegate in C#?",
    "o": [
      "void",
      "int",
      "bool",
      "string"
    ]
  },
  {
    "q": "What is a key advantage of using lambda expressions in event handling?",
    "o": [
      "They allow concise and inline implementation of handlers",
      "They automatically unsubscribe after execution",
      "They enforce return types at compile time",
      "They work only with static events"
    ]
  },
  {
    "q": "Which of the following statements about multicast delegates is true?",
    "o": [
      "They execute all attached methods in order",
      "They can return values from all methods",
      "They execute only the last method attached",
      "They cannot hold reference to static methods"
    ]
  },
  {
    "q": "What does this code output?",
    "c": "delegate void Notify();\nclass Program {\n    static void Main() {\n        Notify n = () => Console.WriteLine(\"Done!\");\n        n();\n    }\n}",
    "o": [
      "Done!",
      "()",
      "Notify",
      "Nothing"
    ]
  },
  {
    "q": "Which of the following is true about multicast delegates in C#?",
    "o": [
      "They invoke their invocation list in the order methods were added.",
      "They always execute in parallel.",
      "They return values from all methods they call.",
      "They are only available in .NET 6 or later."
    ]
  },
  {
    "q": "What will the following code output?",
    "c": "delegate void Del();\nclass Program {\n    static void A() => Console.Write(\"A\");\n    static void B() => Console.Write(\"B\");\n    static void Main() {\n        Del d = A;\n        d += B;\n        d();\n    }\n}",
    "o": [
      "AB",
      "BA",
      "A",
      "B"
    ]
  },
  {
    "q": "Which of the following is a benefit of using lambda expressions in C#?",
    "o": [
      "They reduce the need for verbose method definitions",
      "They are compiled at runtime",
      "They can only be used in LINQ",
      "They replace all event handlers"
    ]
  },
  {
    "q": "What is the correct way to create a delegate instance named `d` from a static method `M`?",
    "o": [
      "DelegateType d = M;",
      "M d = new M();",
      "delegate d = new M();",
      "DelegateType d(M);"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "Action act = delegate { Console.Write(\"Run\"); };\nact();",
    "o": [
      "Run",
      "act",
      "delegate",
      "Nothing"
    ]
  },
  {
    "q": "Which of the following is the best scenario to use an event in C#?",
    "o": [
      "To notify subscribers about a user action like button click",
      "To store temporary string values",
      "To inherit behavior from a base class",
      "To declare a constant"
    ]
  },
  {
    "q": "What is the correct way to unsubscribe a method from a delegate-based event?",
    "o": [
      "eventName -= MethodName;",
      "remove(eventName, MethodName);",
      "unsubscribe eventName.MethodName;",
      "eventName.delete(MethodName);"
    ]
  },
  {
    "q": "What does the following lambda expression represent?\n`x => x * x`",
    "o": [
      "A function that returns the square of x",
      "A function that doubles x",
      "A function that returns x + x",
      "A function that divides x by 2"
    ]
  },
  {
    "q": "Which of these is a valid use of an anonymous method in C#?",
    "o": [
      "delegate(int x) { return x + 1; }",
      "(int x) delegate { return x + 1; }",
      "anonymous(int x) { return x + 1; }",
      "method(int x) => x + 1;"
    ]
  },
  {
    "q": "What is a valid reason for using delegates instead of interfaces in some cases?",
    "o": [
      "Delegates allow methods to be passed as parameters",
      "Interfaces support only static methods",
      "Delegates enforce inheritance",
      "Delegates cannot call static methods"
    ]
  },
  {
    "q": "Which keyword is used to define an event in C#?",
    "o": [
      "event",
      "delegate",
      "trigger",
      "notify"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "delegate void Print();\nclass Program {\n    static void Hello() => Console.Write(\"Hello \");\n    static void World() => Console.Write(\"World\");\n    static void Main() {\n        Print p = Hello;\n        p += World;\n        p();\n    }\n}",
    "o": [
      "Hello World",
      "World Hello",
      "Hello",
      "World"
    ]
  },
  {
    "q": "Which of the following is true about anonymous methods in C#?",
    "o": [
      "They do not require a named method to be defined.",
      "They must be static.",
      "They cannot be used with delegates.",
      "They are compiled at runtime only."
    ]
  },
  {
    "q": "What is the correct way to define a lambda that returns the sum of two integers?",
    "o": [
      "(x, y) => x + y",
      "lambda x, y: x + y",
      "x + y => (x, y)",
      "sum => x + y"
    ]
  },
  {
    "q": "Which of the following best describes an Action delegate?",
    "o": [
      "It represents a method that returns void and can take parameters.",
      "It represents a method that returns a value.",
      "It represents an abstract event handler.",
      "It can only handle string parameters."
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "delegate int Operation(int a, int b);\nclass Program {\n    static void Main() {\n        Operation op = (x, y) => x * y;\n        Console.WriteLine(op(3, 4));\n    }\n}",
    "o": [
      "12",
      "7",
      "1",
      "0"
    ]
  },
  {
    "q": "Why would you use a delegate instead of directly calling a method?",
    "o": [
      "To enable methods to be passed as parameters",
      "To improve performance in loops",
      "To avoid using classes",
      "To reduce memory usage"
    ]
  },
  {
    "q": "What is the result of invoking a delegate that has no subscribers?",
    "o": [
      "NullReferenceException",
      "MethodNotFoundException",
      "DelegateNotBoundException",
      "The delegate executes without error"
    ]
  },
  {
    "q": "What is the output of this code snippet?",
    "c": "delegate void Notifier(string message);\nclass Program {\n    static void Alert(string msg) => Console.WriteLine(\"Alert: \" + msg);\n    static void Main() {\n        Notifier n = delegate(string m) { Alert(m); };\n        n(\"Test\");\n    }\n}",
    "o": [
      "Alert: Test",
      "Test Alert",
      "Alert",
      "Test"
    ]
  },
  {
    "q": "Which of the following is NOT a valid use case for lambda expressions?",
    "o": [
      "Creating a new class instance",
      "Assigning to a delegate",
      "Using in LINQ queries",
      "Defining inline functionality"
    ]
  },
  {
    "q": "What is the purpose of a multicast delegate in C#?",
    "o": [
      "To call multiple methods in a single delegate invocation",
      "To prevent method chaining",
      "To improve application speed",
      "To handle only one method per delegate"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "delegate void Message();\nclass Test {\n    static void A() => Console.Write(\"X\");\n    static void B() => Console.Write(\"Y\");\n    static void Main() {\n        Message m = A;\n        m += A;\n        m += B;\n        m();\n    }\n}",
    "o": [
      "XXY",
      "XYX",
      "YYX",
      "XY"
    ]
  },
  {
    "q": "Which delegate type should be used when the method returns a value and accepts parameters?",
    "o": [
      "Func",
      "Action",
      "EventHandler",
      "Predicate"
    ]
  },
  {
    "q": "Which of the following defines an anonymous method correctly?",
    "o": [
      "delegate(int x) { return x * 2; }",
      "(int x) delegate { return x * 2; }",
      "anonymous(int x) => x * 2;",
      "func(x) => return x * 2;"
    ]
  },
  {
    "q": "What does this code print?",
    "c": "Action action = () => Console.Write(\"C#\");\naction();",
    "o": [
      "C#",
      "action",
      "()",
      "Error"
    ]
  },
  {
    "q": "When can an event be raised in C#?",
    "o": [
      "Only within the class or struct that declares it",
      "From any class",
      "Only from derived classes",
      "Only from static methods"
    ]
  },
  {
    "q": "Which lambda syntax below returns the string length of a given input?",
    "o": [
      "s => s.Length",
      "s => Length(s)",
      "(s) => s.Count",
      "s => String.Length()"
    ]
  },
  {
    "q": "What is the primary use of the `EventHandler` delegate in .NET?",
    "o": [
      "To define a standard pattern for event-handling methods",
      "To automatically subscribe to all events",
      "To pass parameters to anonymous functions",
      "To handle file I/O events only"
    ]
  },
  {
    "q": "What will be the output of this program?",
    "c": "delegate string Greet(string name);\nclass Program {\n    static void Main() {\n        Greet g = x => \"Hello, \" + x;\n        Console.WriteLine(g(\"Dev\"));\n    }\n}",
    "o": [
      "Hello, Dev",
      "Hi Dev",
      "Dev Hello",
      "Greet Dev"
    ]
  },
  {
    "q": "Which of the following best describes a lambda expression?",
    "o": [
      "An anonymous function used to create delegates or expression tree types",
      "A static function that takes no parameters",
      "A keyword used to declare events",
      "A way to create classes at runtime"
    ]
  }
]