[
  {
    "q": "Which of the following correctly declares a function that returns an integer and takes two integers as parameters?",
    "o": [
      "int add(int a, int b);",
      "function add(int a, int b);",
      "int add(a, b);",
      "declare int add(a, b);"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "#include <stdio.h>\n\nvoid greet() {\n    printf(\"Hello, World!\\n\");\n}\n\nint main() {\n    greet();\n    return 0;\n}",
    "o": [
      "Hello, World!",
      "greet",
      "main",
      "No output"
    ]
  },
  {
    "q": "In C, when arguments are passed by value to a function, what happens?",
    "o": [
      "The function receives a copy of the argument's value",
      "The function can modify the original variable",
      "The address of the argument is passed",
      "There is no difference between value and reference"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "#include <stdio.h>\n\nvoid update(int x) {\n    x = 10;\n}\n\nint main() {\n    int a = 5;\n    update(a);\n    printf(\"%d\\n\", a);\n    return 0;\n}",
    "o": [
      "5",
      "10",
      "0",
      "Compilation Error"
    ]
  },
  {
    "q": "Which keyword is used to specify external linkage in C?",
    "o": [
      "extern",
      "auto",
      "register",
      "static"
    ]
  },
  {
    "q": "What is the output of the following recursive function call?",
    "c": "#include <stdio.h>\n\nint factorial(int n) {\n    if(n == 0) return 1;\n    else return n * factorial(n - 1);\n}\n\nint main() {\n    printf(\"%d\\n\", factorial(4));\n    return 0;\n}",
    "o": [
      "24",
      "4",
      "6",
      "120"
    ]
  },
  {
    "q": "Which of the following is a characteristic of a function defined as 'static' in C?",
    "o": [
      "It has internal linkage",
      "It can be accessed from other files",
      "Its value persists between function calls",
      "It cannot be defined inside a function"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "#include <stdio.h>\n\nvoid swap(int *x, int *y) {\n    int temp = *x;\n    *x = *y;\n    *y = temp;\n}\n\nint main() {\n    int a = 10, b = 20;\n    swap(&a, &b);\n    printf(\"%d %d\\n\", a, b);\n    return 0;\n}",
    "o": [
      "20 10",
      "10 20",
      "0 0",
      "Compilation Error"
    ]
  },
  {
    "q": "What is the default storage class for local variables in C?",
    "o": [
      "auto",
      "static",
      "register",
      "extern"
    ]
  },
  {
    "q": "Which of the following correctly defines a recursive function?",
    "o": [
      "A function that calls itself within its definition",
      "A function that calls another function",
      "A function that runs in a loop",
      "A function that takes another function as an argument"
    ]
  },
  {
    "q": "Which of the following is a correct function definition in C?",
    "o": [
      "float multiply(float x, float y) { return x * y; }",
      "function multiply(float x, float y) { return x * y; }",
      "float multiply = function(x, y);",
      "define float multiply(x, y);"
    ]
  },
  {
    "q": "What is the output of the following C code?",
    "c": "#include <stdio.h>\n\nint square(int n) {\n    return n * n;\n}\n\nint main() {\n    printf(\"%d\\n\", square(3));\n    return 0;\n}",
    "o": [
      "9",
      "6",
      "3",
      "0"
    ]
  },
  {
    "q": "Which of the following statements is true about call by reference in C?",
    "o": [
      "Changes made to parameters affect the original variables",
      "A copy of the variable is passed",
      "It is not possible in C",
      "Reference variables are declared with &"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "#include <stdio.h>\n\nvoid increment(int *p) {\n    (*p)++;\n}\n\nint main() {\n    int a = 5;\n    increment(&a);\n    printf(\"%d\\n\", a);\n    return 0;\n}",
    "o": [
      "6",
      "5",
      "0",
      "Compilation error"
    ]
  },
  {
    "q": "What is a recursive function?",
    "o": [
      "A function that calls itself directly or indirectly",
      "A function that loops forever",
      "A function that calls a pointer",
      "A function with no parameters"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "#include <stdio.h>\n\nint sum(int n) {\n    if(n == 0) return 0;\n    return n + sum(n - 1);\n}\n\nint main() {\n    printf(\"%d\\n\", sum(3));\n    return 0;\n}",
    "o": [
      "6",
      "3",
      "0",
      "9"
    ]
  },
  {
    "q": "Which storage class causes a variable to retain its value between function calls?",
    "o": [
      "static",
      "auto",
      "extern",
      "register"
    ]
  },
  {
    "q": "What will be the value of `x` after executing this program?",
    "c": "#include <stdio.h>\n\nvoid setValue() {\n    static int x = 0;\n    x++;\n    printf(\"%d \", x);\n}\n\nint main() {\n    setValue();\n    setValue();\n    setValue();\n    return 0;\n}",
    "o": [
      "1 2 3 ",
      "0 1 2 ",
      "1 1 1 ",
      "3 2 1 "
    ]
  },
  {
    "q": "Which storage class is used for global variables visible to all files?",
    "o": [
      "extern",
      "static",
      "auto",
      "register"
    ]
  },
  {
    "q": "What is the default return type of a C function if not specified?",
    "o": [
      "int",
      "void",
      "float",
      "char"
    ]
  },
  {
    "q": "Which of the following is a valid declaration of a function that takes no parameters and returns void in C?",
    "o": [
      "void display();",
      "display void();",
      "function display();",
      "void display{};"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "#include <stdio.h>\n\nvoid printMessage() {\n    printf(\"Function called!\\n\");\n}\n\nint main() {\n    printMessage();\n    return 0;\n}",
    "o": [
      "Function called!",
      "printMessage",
      "main",
      "Compilation error"
    ]
  },
  {
    "q": "In C, which of the following best describes 'call by value'?",
    "o": [
      "A copy of the actual value is passed to the function",
      "The memory address of the variable is passed",
      "The value is modified directly in the calling function",
      "It allows changing global variables"
    ]
  },
  {
    "q": "What is the output of the following C program?",
    "c": "#include <stdio.h>\n\nvoid modify(int a) {\n    a = 100;\n}\n\nint main() {\n    int num = 50;\n    modify(num);\n    printf(\"%d\\n\", num);\n    return 0;\n}",
    "o": [
      "50",
      "100",
      "0",
      "Compilation error"
    ]
  },
  {
    "q": "Which of the following recursive function calls computes the Fibonacci series correctly?",
    "o": [
      "int fib(int n) { if(n <= 1) return n; return fib(n-1) + fib(n-2); }",
      "int fib(int n) { return n + fib(n); }",
      "int fib(int n) { return fib(n-1) * fib(n-2); }",
      "int fib(int n) { if(n <= 2) return 1; return n; }"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "c": "#include <stdio.h>\n\nint counter() {\n    static int count = 0;\n    count++;\n    return count;\n}\n\nint main() {\n    printf(\"%d \", counter());\n    printf(\"%d \", counter());\n    printf(\"%d\\n\", counter());\n    return 0;\n}",
    "o": [
      "1 2 3",
      "0 1 2",
      "3 2 1",
      "1 1 1"
    ]
  },
  {
    "q": "Which storage class restricts the visibility of a global variable to the current file?",
    "o": [
      "static",
      "extern",
      "register",
      "auto"
    ]
  },
  {
    "q": "What does the 'register' storage class suggest to the compiler?",
    "o": [
      "Store the variable in a CPU register for faster access",
      "Make the variable globally accessible",
      "Reserve the variable in ROM",
      "Use the variable only inside loops"
    ]
  },
  {
    "q": "What will be the output of the following C code?",
    "c": "#include <stdio.h>\n\nint factorial(int n) {\n    if (n == 1) return 1;\n    return n * factorial(n - 1);\n}\n\nint main() {\n    printf(\"%d\\n\", factorial(5));\n    return 0;\n}",
    "o": [
      "120",
      "24",
      "60",
      "720"
    ]
  },
  {
    "q": "Which of the following is NOT a valid storage class in C?",
    "o": [
      "global",
      "static",
      "register",
      "extern"
    ]
  },
  {
    "q": "Which of the following is the correct syntax for declaring a function that returns an integer and accepts two integer parameters?",
    "o": [
      "int add(int a, int b);",
      "int add(int, int) { return a + b; }",
      "void add(int a, int b);",
      "int add(int a, b);"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "#include <stdio.h>\n\nint multiply(int a, int b) {\n    return a * b;\n}\n\nint main() {\n    int result = multiply(4, 5);\n    printf(\"%d\\n\", result);\n    return 0;\n}",
    "o": [
      "20",
      "9",
      "5",
      "15"
    ]
  },
  {
    "q": "Which of the following statements is true about 'call by reference' in C?",
    "o": [
      "It allows the function to modify the original argument",
      "It passes the value of the argument to the function",
      "It makes a copy of the argument for the function",
      "It is not possible in C"
    ]
  },
  {
    "q": "What will be the output of the following code?",
    "c": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"%d %d\\n\", x, y);\n    return 0;\n}",
    "o": [
      "10 5",
      "5 10",
      "15 15",
      "10 10"
    ]
  },
  {
    "q": "Which of the following is a valid recursive function to compute the factorial of a number in C?",
    "o": [
      "int factorial(int n) { if(n == 0) return 1; return n * factorial(n - 1); }",
      "int factorial(int n) { if(n == 1) return 1; return n * factorial(n - 1); }",
      "int factorial(int n) { if(n == 0) return 1; return factorial(n + 1); }",
      "int factorial(int n) { return factorial(n - 1); }"
    ]
  },
  {
    "q": "What will be the output of the following code?",
    "c": "#include <stdio.h>\n\nint recursive(int n) {\n    if(n <= 1) return 1;\n    return n * recursive(n - 1);\n}\n\nint main() {\n    printf(\"%d\\n\", recursive(4));\n    return 0;\n}",
    "o": [
      "24",
      "4",
      "120",
      "1"
    ]
  },
  {
    "q": "Which of the following storage classes is used for local variables that retain their values between function calls?",
    "o": [
      "static",
      "auto",
      "extern",
      "register"
    ]
  },
  {
    "q": "What is the purpose of the 'extern' storage class in C?",
    "o": [
      "To declare a variable that is defined in another file",
      "To define a variable with static storage",
      "To store the variable in a register",
      "To automatically initialize the variable"
    ]
  },
  {
    "q": "What is the scope of a variable declared as 'static' inside a function?",
    "o": [
      "It is limited to the function but retains its value across function calls",
      "It is visible throughout the entire program",
      "It is visible only within the block where it is declared",
      "It is visible only within the file"
    ]
  },
  {
    "q": "What is the default value of an uninitialized static variable in C?",
    "o": [
      "0",
      "NULL",
      "random value",
      "garbage value"
    ]
  },
  {
    "q": "Which of the following function declarations is correct in C?",
    "o": [
      "int add(int a, int b);",
      "function int add(int a, int b);",
      "void add(int a, int b);",
      "int add a, b;"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "#include <stdio.h>\n\nint subtract(int a, int b) {\n    return a - b;\n}\n\nint main() {\n    int result = subtract(15, 5);\n    printf(\"%d\\n\", result);\n    return 0;\n}",
    "o": [
      "10",
      "5",
      "15",
      "0"
    ]
  },
  {
    "q": "In C, what does 'call by value' mean?",
    "o": [
      "The function works with a copy of the argument value",
      "The memory address of the argument is passed to the function",
      "The function modifies the actual value of the argument",
      "The function accesses the variable in memory directly"
    ]
  },
  {
    "q": "What is the output of the following C code?",
    "c": "#include <stdio.h>\n\nvoid updateValue(int a) {\n    a = 10;\n}\n\nint main() {\n    int num = 5;\n    updateValue(num);\n    printf(\"%d\\n\", num);\n    return 0;\n}",
    "o": [
      "5",
      "10",
      "0",
      "None"
    ]
  },
  {
    "q": "What is the base case condition for a recursive function to calculate factorial in C?",
    "o": [
      "n == 0",
      "n == 1",
      "n < 1",
      "n == 2"
    ]
  },
  {
    "q": "What will be the output of the following code?",
    "c": "#include <stdio.h>\n\nint factorial(int n) {\n    if(n == 0) return 1;\n    return n * factorial(n - 1);\n}\n\nint main() {\n    printf(\"%d\\n\", factorial(3));\n    return 0;\n}",
    "o": [
      "6",
      "3",
      "9",
      "120"
    ]
  },
  {
    "q": "Which of the following statements is correct regarding 'call by reference' in C?",
    "o": [
      "The function can modify the original variable",
      "The function cannot modify the original variable",
      "The function works with a copy of the value",
      "The function copies the memory address of the variable"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "#include <stdio.h>\n\nvoid swap(int *x, int *y) {\n    int temp = *x;\n    *x = *y;\n    *y = temp;\n}\n\nint main() {\n    int a = 2, b = 3;\n    swap(&a, &b);\n    printf(\"%d %d\\n\", a, b);\n    return 0;\n}",
    "o": [
      "3 2",
      "2 3",
      "5 5",
      "0 0"
    ]
  },
  {
    "q": "What will be the output of the following recursive function call?",
    "c": "#include <stdio.h>\n\nint sum(int n) {\n    if (n == 1) return 1;\n    return n + sum(n - 1);\n}\n\nint main() {\n    printf(\"%d\\n\", sum(4));\n    return 0;\n}",
    "o": [
      "10",
      "4",
      "24",
      "5"
    ]
  },
  {
    "q": "Which storage class has the longest lifetime in C?",
    "o": [
      "static",
      "extern",
      "register",
      "auto"
    ]
  },
  {
    "q": "What does the 'auto' storage class signify in C?",
    "o": [
      "The variable has automatic storage duration, allocated and deallocated on entering and exiting the block",
      "The variable is stored in a register for faster access",
      "The variable retains its value between function calls",
      "The variable is global"
    ]
  },
  {
    "q": "Which of the following is true about the 'register' storage class in C?",
    "o": [
      "It stores the variable in a register for faster access",
      "It stores the variable in RAM",
      "It retains the variable's value across function calls",
      "It is used for global variables"
    ]
  },
  {
    "q": "What is the scope of a variable declared as 'extern'?",
    "o": [
      "It is visible throughout the program, across multiple files",
      "It is only visible within the function where it is declared",
      "It is visible only within the block where it is declared",
      "It is visible within the same file only"
    ]
  },
  {
    "q": "What will be the output of the following code?",
    "c": "#include <stdio.h>\n\nint main() {\n    int x = 5;\n    { \n        static int x = 10;\n        printf(\"%d \", x);\n    }\n    printf(\"%d\", x);\n    return 0;\n}",
    "o": [
      "10 5",
      "10 10",
      "5 5",
      "5 10"
    ]
  },
  {
    "q": "What is the correct syntax for defining a function that takes two integers and returns an integer in C?",
    "o": [
      "int add(int a, int b) { return a + b; }",
      "def int add(int a, int b) { return a + b; }",
      "function int add(int a, int b) { return a + b; }",
      "int add(a, b) { return a + b; }"
    ]
  },
  {
    "q": "What will be the output of the following C code?",
    "c": "#include <stdio.h>\n\nvoid addNumbers(int a, int b) {\n    printf(\"%d\\n\", a + b);\n}\n\nint main() {\n    addNumbers(3, 7);\n    return 0;\n}",
    "o": [
      "10",
      "3",
      "7",
      "30"
    ]
  },
  {
    "q": "Which of the following statements is true about 'call by reference' in C?",
    "o": [
      "The actual memory location of the argument is passed to the function.",
      "The function creates a local copy of the argument.",
      "The argument's value is not affected by the function.",
      "The argument is passed as a constant."
    ]
  },
  {
    "q": "What is the correct way to pass an array to a function in C?",
    "o": [
      "By passing the array's pointer.",
      "By passing the array's value.",
      "By passing the size of the array.",
      "By passing the array as a string."
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "#include <stdio.h>\n\nvoid increment(int *a) {\n    (*a)++;\n}\n\nint main() {\n    int num = 10;\n    increment(&num);\n    printf(\"%d\\n\", num);\n    return 0;\n}",
    "o": [
      "11",
      "10",
      "0",
      "None"
    ]
  },
  {
    "q": "Which of the following is a correct example of a recursive function to calculate factorial in C?",
    "o": [
      "int factorial(int n) { if (n == 0) return 1; return n * factorial(n - 1); }",
      "int factorial(int n) { return n * factorial(n + 1); }",
      "int factorial(int n) { if (n == 1) return 1; return n + factorial(n - 1); }",
      "int factorial(int n) { return n * factorial(n); }"
    ]
  },
  {
    "q": "What is the output of the following C code?",
    "c": "#include <stdio.h>\n\nint fibonacci(int n) {\n    if (n <= 1) return n;\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\n\nint main() {\n    printf(\"%d\\n\", fibonacci(5));\n    return 0;\n}",
    "o": [
      "5",
      "8",
      "13",
      "3"
    ]
  },
  {
    "q": "Which storage class in C limits the scope of a variable to the block in which it is defined?",
    "o": [
      "auto",
      "static",
      "extern",
      "register"
    ]
  },
  {
    "q": "What does the 'extern' storage class in C indicate?",
    "o": [
      "The variable is declared in another file or scope.",
      "The variable retains its value between function calls.",
      "The variable is automatically stored in the register.",
      "The variable is local to the function."
    ]
  },
  {
    "q": "Which of the following statements correctly explains recursion in C?",
    "o": [
      "Recursion occurs when a function calls itself.",
      "Recursion involves returning values from multiple functions.",
      "Recursion is used to process large data sets by splitting them into smaller tasks.",
      "Recursion can only be used in mathematical problems."
    ]
  },
  {
    "q": "What is the output of the following C code?",
    "c": "#include <stdio.h>\n\nint factorial(int n) {\n    if (n == 1) return 1;\n    return n * factorial(n - 1);\n}\n\nint main() {\n    printf(\"%d\\n\", factorial(4));\n    return 0;\n}",
    "o": [
      "24",
      "4",
      "12",
      "1"
    ]
  },
  {
    "q": "Which storage class in C is used for variables that are meant to be accessed outside the current file?",
    "o": [
      "extern",
      "static",
      "auto",
      "register"
    ]
  },
  {
    "q": "What is the primary advantage of using recursion in C?",
    "o": [
      "It allows solving problems that can be broken down into smaller sub-problems.",
      "It simplifies memory management by eliminating the need for loops.",
      "It allows faster execution by avoiding function calls.",
      "It ensures efficient storage management."
    ]
  },
  {
    "q": "What is the output of the following C code?",
    "c": "#include <stdio.h>\n\nvoid printMessage() {\n    static int count = 0;\n    count++;\n    printf(\"%d\\n\", count);\n}\n\nint main() {\n    printMessage();\n    printMessage();\n    printMessage();\n    return 0;\n}",
    "o": [
      "1 2 3",
      "1 1 1",
      "0 1 2",
      "0 0 0"
    ]
  },
  {
    "q": "Which of the following is true about the 'register' storage class in C?",
    "o": [
      "It suggests that the variable be stored in a CPU register for faster access.",
      "It restricts the variable's scope to the function in which it is defined.",
      "It preserves the variable's value between function calls.",
      "It automatically initializes the variable to 0."
    ]
  },
  {
    "q": "What does the 'static' storage class do in C?",
    "o": [
      "It ensures that the variable retains its value across function calls.",
      "It stores the variable in a CPU register.",
      "It makes the variable visible to all functions in the program.",
      "It makes the variable local to the function."
    ]
  },
  {
    "q": "Which of the following is the correct syntax for declaring a function that returns a float and takes two integer parameters in C?",
    "o": [
      "float add(int a, int b);",
      "add(int a, int b) -> float;",
      "int add(float a, float b);",
      "def float add(int a, int b);"
    ]
  },
  {
    "q": "What is the output of the following C code?",
    "c": "#include <stdio.h>\n\nint sum(int a, int b) {\n    return a + b;\n}\n\nint main() {\n    printf(\"%d\\n\", sum(4, 5));\n    return 0;\n}",
    "o": [
      "9",
      "4",
      "5",
      "None"
    ]
  },
  {
    "q": "What is the primary difference between call by value and call by reference in C?",
    "o": [
      "In call by value, a copy of the argument is passed, whereas in call by reference, the actual address is passed.",
      "In call by reference, the function can modify the argument’s value, whereas in call by value, it cannot.",
      "Call by value uses pointers, whereas call by reference does not.",
      "There is no difference between the two."
    ]
  },
  {
    "q": "Which of the following is an example of passing by reference in C?",
    "o": [
      "void swap(int *a, int *b) { int temp = *a; *a = *b; *b = temp; }",
      "void swap(int a, int b) { int temp = a; a = b; b = temp; }",
      "void swap(int a, int *b) { int temp = a; a = *b; *b = temp; }",
      "void swap(int a, int b) { return a + b; }"
    ]
  },
  {
    "q": "Which of the following statements is correct about recursion in C?",
    "o": [
      "A function that calls itself is a recursive function.",
      "Recursion always leads to an infinite loop.",
      "Recursion requires the use of global variables.",
      "Recursion is slower than iteration in all cases."
    ]
  },
  {
    "q": "What is the output of the following C code?",
    "c": "#include <stdio.h>\n\nint factorial(int n) {\n    if (n == 0) return 1;\n    return n * factorial(n - 1);\n}\n\nint main() {\n    printf(\"%d\\n\", factorial(6));\n    return 0;\n}",
    "o": [
      "720",
      "6",
      "36",
      "120"
    ]
  },
  {
    "q": "What will be the output of the following C code?",
    "c": "#include <stdio.h>\n\nint factorial(int n) {\n    if (n == 1) return 1;\n    return n * factorial(n - 1);\n}\n\nint main() {\n    printf(\"%d\\n\", factorial(4));\n    return 0;\n}",
    "o": [
      "24",
      "4",
      "12",
      "1"
    ]
  },
  {
    "q": "Which storage class in C is used to define variables that are visible only within the current function and have automatic storage duration?",
    "o": [
      "auto",
      "static",
      "extern",
      "register"
    ]
  },
  {
    "q": "Which storage class is used for variables that retain their values across multiple function calls in C?",
    "o": [
      "static",
      "extern",
      "auto",
      "register"
    ]
  },
  {
    "q": "Which of the following is true about the 'extern' storage class in C?",
    "o": [
      "It indicates that a variable is declared in another file or scope.",
      "It makes the variable local to the current function.",
      "It ensures that the variable is initialized to zero.",
      "It allows the variable to be stored in a register."
    ]
  },
  {
    "q": "Which of the following is a correct example of a function using recursion in C to find the nth Fibonacci number?",
    "o": [
      "int fibonacci(int n) { if (n <= 1) return n; return fibonacci(n - 1) + fibonacci(n - 2); }",
      "int fibonacci(int n) { if (n == 1) return 1; return fibonacci(n - 1) * fibonacci(n - 2); }",
      "int fibonacci(int n) { return n + fibonacci(n - 1); }",
      "int fibonacci(int n) { return n - fibonacci(n - 1); }"
    ]
  },
  {
    "q": "What is the primary purpose of the 'register' storage class in C?",
    "o": [
      "It suggests that the variable be stored in a CPU register for faster access.",
      "It stores the variable in a static location.",
      "It limits the scope of the variable to the entire program.",
      "It makes the variable visible to all functions."
    ]
  },
  {
    "q": "What is the output of the following C code?",
    "c": "#include <stdio.h>\n\nint x = 10;\nvoid test() {\n    printf(\"%d\\n\", x);\n}\n\nint main() {\n    test();\n    return 0;\n}",
    "o": [
      "10",
      "0",
      "None",
      "Error"
    ]
  },
  {
    "q": "What is the main advantage of using recursion in C?",
    "o": [
      "It simplifies the code for problems that have a recursive structure.",
      "It always reduces the time complexity of the program.",
      "It is easier to understand for beginners than iteration.",
      "It requires less memory."
    ]
  },
  {
    "q": "Which of the following is true about the 'auto' storage class in C?",
    "o": [
      "It is the default storage class for local variables.",
      "It stores variables in a CPU register.",
      "It makes the variable accessible globally.",
      "It preserves the variable's value across function calls."
    ]
  },
  {
    "q": "What does the 'static' keyword do when used inside a function in C?",
    "o": [
      "It makes the variable retain its value between function calls.",
      "It prevents the variable from being modified.",
      "It makes the variable local to the function and eliminates memory usage.",
      "It prevents the variable from being accessed outside the function."
    ]
  },
  {
    "q": "What is the correct syntax for defining a function in C that returns an integer and takes two float parameters?",
    "o": [
      "int add(float a, float b);",
      "int add(float a, float b) { return a + b; }",
      "add(int a, int b) -> int;",
      "def add(float a, float b) -> int;"
    ]
  },
  {
    "q": "What will be the output of the following C code?",
    "c": "#include <stdio.h>\n\nvoid print_value(int *a) {\n    printf(\"%d\\n\", *a);\n}\n\nint main() {\n    int x = 5;\n    print_value(&x);\n    return 0;\n}",
    "o": [
      "5",
      "0",
      "None",
      "Error"
    ]
  },
  {
    "q": "Which of the following is true about recursion in C?",
    "o": [
      "Recursion requires a base case to terminate the function calls.",
      "Recursion is always more efficient than iteration.",
      "Recursion uses no additional memory compared to iteration.",
      "Recursion cannot be used for problems that involve loops."
    ]
  },
  {
    "q": "Which of the following is an example of call by value in C?",
    "o": [
      "void swap(int a, int b) { int temp = a; a = b; b = temp; }",
      "void swap(int *a, int *b) { int temp = *a; *a = *b; *b = temp; }",
      "void swap(int &a, int &b) { int temp = a; a = b; b = temp; }",
      "void swap(int a, int b) { int temp = a; a = b; b = temp; }"
    ]
  },
  {
    "q": "What is the output of the following C code?",
    "c": "#include <stdio.h>\n\nint factorial(int n) {\n    if (n == 1 || n == 0) return 1;\n    return n * factorial(n - 1);\n}\n\nint main() {\n    printf(\"%d\\n\", factorial(5));\n    return 0;\n}",
    "o": [
      "120",
      "5",
      "24",
      "60"
    ]
  },
  {
    "q": "Which storage class is used to declare variables that are shared among all functions in a C program?",
    "o": [
      "extern",
      "static",
      "auto",
      "register"
    ]
  },
  {
    "q": "What will be the output of the following C code?",
    "c": "#include <stdio.h>\n\nint x = 10;\nvoid modify() {\n    x = 20;\n}\n\nint main() {\n    modify();\n    printf(\"%d\\n\", x);\n    return 0;\n}",
    "o": [
      "20",
      "10",
      "None",
      "Error"
    ]
  },
  {
    "q": "What is the purpose of the 'register' storage class in C?",
    "o": [
      "It suggests that the variable should be stored in a CPU register for faster access.",
      "It stores the variable in a static memory location.",
      "It limits the scope of the variable to the entire program.",
      "It makes the variable retain its value between function calls."
    ]
  },
  {
    "q": "What is the correct syntax to call a function named 'compute' in C with two integer arguments 5 and 10?",
    "o": [
      "compute(5, 10);",
      "compute(5, 10) -> int;",
      "int compute(5, 10);",
      "call compute(5, 10);"
    ]
  },
  {
    "q": "Which of the following is true about the 'static' keyword in C when used in a function?",
    "o": [
      "It ensures that the variable retains its value across multiple function calls.",
      "It makes the variable available only within the function it is defined in.",
      "It initializes the variable to zero when the function is called.",
      "It stores the variable in a CPU register."
    ]
  },
  {
    "q": "What is the output of the following C code?",
    "c": "#include <stdio.h>\n\nint sum(int a, int b) {\n    return a + b;\n}\n\nint main() {\n    int x = 3, y = 4;\n    printf(\"%d\\n\", sum(x, y));\n    return 0;\n}",
    "o": [
      "7",
      "3",
      "4",
      "None"
    ]
  },
  {
    "q": "What is the key difference between 'call by value' and 'call by reference' in C?",
    "o": [
      "Call by value passes a copy of the argument, whereas call by reference passes the address of the argument.",
      "Call by reference passes a copy of the argument, whereas call by value passes the address of the argument.",
      "Call by value can change the value of the argument, whereas call by reference cannot.",
      "There is no difference between call by value and call by reference."
    ]
  },
  {
    "q": "What is the base case for the following recursive function in C to calculate the factorial of a number?",
    "c": "#include <stdio.h>\n\nint factorial(int n) {\n    if (n == 0) return 1;\n    return n * factorial(n - 1);\n}\n\nint main() {\n    printf(\"%d\\n\", factorial(4));\n    return 0;\n}",
    "o": [
      "if (n == 0) return 1;",
      "if (n == 1) return 1;",
      "if (n == 4) return 4;",
      "None"
    ]
  },
  {
    "q": "Which of the following statements is true regarding scope in C?",
    "o": [
      "A variable's scope determines where it can be accessed in the program.",
      "Scope refers to the size of the memory allocated to a variable.",
      "A variable's scope is determined by its data type.",
      "Scope determines how long a variable exists in memory."
    ]
  },
  {
    "q": "Which of the following statements is correct about recursion in C?",
    "o": [
      "Recursion can be used to break a problem into smaller subproblems.",
      "Recursion eliminates the need for loop constructs.",
      "Recursion cannot be used with dynamic memory allocation.",
      "Recursive functions do not use stack memory."
    ]
  },
  {
    "q": "What is the correct output of the following C code?",
    "c": "#include <stdio.h>\n\nvoid test() {\n    static int a = 5;\n    a++;\n    printf(\"%d\\n\", a);\n}\n\nint main() {\n    test();\n    test();\n    return 0;\n}",
    "o": [
      "6\n7",
      "5\n6",
      "6\n6",
      "5\n5"
    ]
  },
  {
    "q": "What will be the output of the following C code?",
    "c": "#include <stdio.h>\n\nvoid display(int a) {\n    a = 10;\n    printf(\"%d\\n\", a);\n}\n\nint main() {\n    int x = 5;\n    display(x);\n    printf(\"%d\\n\", x);\n    return 0;\n}",
    "o": [
      "10\n5",
      "10\n10",
      "5\n5",
      "Error"
    ]
  },
  {
    "q": "Which of the following is true about function declaration in C?",
    "o": [
      "The function declaration tells the compiler about the function's name, return type, and parameters.",
      "Function declaration is not required in C.",
      "Function declaration should always include the function definition.",
      "Function declaration and function definition are the same in C."
    ]
  },
  {
    "q": "Which of the following correctly defines a function that calculates the sum of two integers in C?",
    "o": [
      "int add(int a, int b) { return a + b; }",
      "int add(int a, b) { return a + b; }",
      "void add(int a, int b) { return a + b; }",
      "add(int a, int b) { return a + b; }"
    ]
  },
  {
    "q": "What is the output of the following C code?",
    "c": "#include <stdio.h>\n\nvoid multiply(int a, int b) {\n    printf(\"%d\\n\", a * b);\n}\n\nint main() {\n    int x = 5, y = 2;\n    multiply(x, y);\n    return 0;\n}",
    "o": [
      "10",
      "25",
      "7",
      "Error"
    ]
  },
  {
    "q": "Which of the following is an example of 'call by reference' in C?",
    "o": [
      "void swap(int *a, int *b) { int temp = *a; *a = *b; *b = temp; }",
      "void swap(int a, int b) { int temp = a; a = b; b = temp; }",
      "void swap(int a, int b) { int temp = &a; a = b; b = temp; }",
      "void swap(int a, int *b) { int temp = a; a = *b; *b = temp; }"
    ]
  },
  {
    "q": "Which of the following is the base case for a recursive function to compute factorial in C?",
    "o": [
      "if (n == 0) return 1;",
      "if (n == 1) return 1;",
      "if (n == 1) return n;",
      "if (n > 0) return n;"
    ]
  },
  {
    "q": "What will be the output of the following C code?",
    "c": "#include <stdio.h>\n\nvoid printValue(int a) {\n    a = a * 2;\n    printf(\"%d\\n\", a);\n}\n\nint main() {\n    int x = 3;\n    printValue(x);\n    printf(\"%d\\n\", x);\n    return 0;\n}",
    "o": [
      "6\n3",
      "6\n6",
      "3\n3",
      "3\n6"
    ]
  },
  {
    "q": "Which storage class specifies that the variable will only be initialized once and retains its value between function calls?",
    "o": [
      "static",
      "auto",
      "register",
      "extern"
    ]
  },
  {
    "q": "Which of the following C function declarations is correct?",
    "o": [
      "void add(int, int);",
      "int add(int, int) {}",
      "int add(int a, b) {}",
      "void add(int a, int b) {}"
    ]
  },
  {
    "q": "What will be the output of the following C code?",
    "c": "#include <stdio.h>\n\nint factorial(int n) {\n    if (n == 0) return 1;\n    return n * factorial(n - 1);\n}\n\nint main() {\n    printf(\"%d\\n\", factorial(4));\n    return 0;\n}",
    "o": [
      "24",
      "4",
      "16",
      "Error"
    ]
  },
  {
    "q": "Which of the following best describes 'call by value' in C?",
    "o": [
      "The function receives a copy of the argument, and changes made to it do not affect the original variable.",
      "The function receives the address of the argument, and changes made to it affect the original variable.",
      "The function does not modify the argument passed.",
      "The function passes a reference of the argument."
    ]
  },
  {
    "q": "What is the purpose of the 'extern' storage class in C?",
    "o": [
      "It is used to declare variables that are defined outside the current file.",
      "It makes the variable local to the function in which it is defined.",
      "It automatically initializes variables to zero.",
      "It stores the variable in CPU registers for fast access."
    ]
  },
  {
    "q": "What will be the output of the following C code?",
    "c": "#include <stdio.h>\n\nvoid modify(int x) {\n    x = x + 10;\n    printf(\"%d\\n\", x);\n}\n\nint main() {\n    int num = 5;\n    modify(num);\n    printf(\"%d\\n\", num);\n    return 0;\n}",
    "o": [
      "15\n5",
      "5\n5",
      "15\n15",
      "5\n10"
    ]
  },
  {
    "q": "Which of the following C functions has a recursive structure?",
    "o": [
      "int factorial(int n) { if (n == 0) return 1; return n * factorial(n - 1); }",
      "void printHello() { printf(\"Hello\\n\"); }",
      "int sum(int a, int b) { return a + b; }",
      "void printNumbers() { for(int i=0; i<5; i++) { printf(\"%d\\n\", i); } }"
    ]
  },
  {
    "q": "What is the expected output of the following C code?",
    "c": "#include <stdio.h>\n\nint count = 0;\n\nvoid increment() {\n    static int count = 0;\n    count++;\n    printf(\"%d\\n\", count);\n}\n\nint main() {\n    increment();\n    increment();\n    increment();\n    return 0;\n}",
    "o": [
      "1\n2\n3",
      "0\n1\n2",
      "1\n1\n1",
      "3\n3\n3"
    ]
  },
  {
    "q": "Which of the following functions is an example of 'call by reference'?",
    "o": [
      "void swap(int *a, int *b) { int temp = *a; *a = *b; *b = temp; }",
      "void swap(int a, int b) { int temp = a; a = b; b = temp; }",
      "int swap(int a, int b) { return a + b; }",
      "int swap(int *a, int *b) { return *a + *b; }"
    ]
  },
  {
    "q": "What will be the output of the following C code?",
    "c": "#include <stdio.h>\n\nint add(int a, int b) {\n    return a + b;\n}\n\nint main() {\n    int x = 10, y = 20;\n    printf(\"%d\\n\", add(x, y));\n    return 0;\n}",
    "o": [
      "30",
      "10",
      "20",
      "Error"
    ]
  },
  {
    "q": "Which of the following C function declarations is valid?",
    "o": [
      "int add(int, int);",
      "add(int a, int b);",
      "void add(int, int) { return a + b; }",
      "int add(int a, int b) { return a + b; }"
    ]
  },
  {
    "q": "What is the output of the following C code?",
    "c": "#include <stdio.h>\n\nint subtract(int a, int b) {\n    return a - b;\n}\n\nint main() {\n    int result = subtract(15, 5);\n    printf(\"%d\\n\", result);\n    return 0;\n}",
    "o": [
      "10",
      "15",
      "5",
      "Error"
    ]
  },
  {
    "q": "Which of the following statements is correct for call by value in C?",
    "o": [
      "The actual value of the argument is passed to the function.",
      "The address of the argument is passed to the function.",
      "The reference of the argument is passed to the function.",
      "The function modifies the original value of the argument."
    ]
  },
  {
    "q": "What will be the output of the following recursive function?",
    "c": "#include <stdio.h>\n\nint factorial(int n) {\n    if (n == 0) return 1;\n    return n * factorial(n - 1);\n}\n\nint main() {\n    printf(\"%d\\n\", factorial(5));\n    return 0;\n}",
    "o": [
      "120",
      "5",
      "25",
      "Error"
    ]
  },
  {
    "q": "Which of the following C functions uses recursion to print numbers from 1 to 5?",
    "o": [
      "void printNumbers(int n) { if (n <= 5) { printf(\"%d\\n\", n); printNumbers(n + 1); } }",
      "void printNumbers() { for (int i = 1; i <= 5; i++) { printf(\"%d\\n\", i); } }",
      "void printNumbers(int n) { for (int i = 1; i <= 5; i++) { printf(\"%d\\n\", n); } }",
      "void printNumbers(int n) { if (n > 0) { printf(\"%d\\n\", n); printNumbers(n - 1); } }"
    ]
  },
  {
    "q": "Which of the following is the correct function declaration in C?",
    "o": [
      "int multiply(int a, int b);",
      "void multiply(int, int);",
      "multiply(int a, int b);",
      "int multiply(int a, int b) {}"
    ]
  },
  {
    "q": "What is the output of the following C code?",
    "c": "#include <stdio.h>\n\nint calculateSum(int a, int b) {\n    return a + b;\n}\n\nint main() {\n    int result = calculateSum(100, 200);\n    printf(\"%d\\n\", result);\n    return 0;\n}",
    "o": [
      "300",
      "100",
      "200",
      "Error"
    ]
  },
  {
    "q": "Which of the following C storage classes is used to define variables that are accessible across multiple files?",
    "o": [
      "extern",
      "auto",
      "static",
      "register"
    ]
  },
  {
    "q": "What is the correct way to pass an array to a function in C?",
    "o": [
      "void printArray(int arr[], int size);",
      "void printArray(int arr, int size);",
      "void printArray(int *arr[], int size);",
      "void printArray(int arr(), int size);"
    ]
  },
  {
    "q": "What will be the output of the following code?",
    "c": "#include <stdio.h>\n\nint count = 0;\n\nvoid increment() {\n    static int count = 0;\n    count++;\n    printf(\"%d\\n\", count);\n}\n\nint main() {\n    increment();\n    increment();\n    increment();\n    return 0;\n}",
    "o": [
      "1\n2\n3",
      "0\n1\n2",
      "1\n1\n1",
      "3\n3\n3"
    ]
  },
  {
    "q": "Which storage class in C provides variables that are local to the function and not initialized to any default value?",
    "o": [
      "auto",
      "register",
      "static",
      "extern"
    ]
  },
  {
    "q": "What will be the output of the following recursive function?",
    "c": "#include <stdio.h>\n\nint sum(int n) {\n    if (n == 0) return 0;\n    return n + sum(n - 1);\n}\n\nint main() {\n    printf(\"%d\\n\", sum(4));\n    return 0;\n}",
    "o": [
      "10",
      "4",
      "5",
      "Error"
    ]
  },
  {
    "q": "Which of the following is true about the 'static' storage class in C?",
    "o": [
      "It retains the value of a variable across function calls within the same program.",
      "It makes a variable global to all functions.",
      "It makes a variable local to the block in which it is defined.",
      "It stores the variable in the CPU registers for faster access."
    ]
  },
  {
    "q": "Which of the following function declarations is correct for passing multiple integers in C?",
    "o": [
      "int sum(int a, int b, int c);",
      "int sum(int a, b, c);",
      "int sum(int a; int b; int c);",
      "int sum(int a, b, c) { return a + b + c; }"
    ]
  },
  {
    "q": "What is the output of the following C code?",
    "c": "#include <stdio.h>\n\nint factorial(int n) {\n    if (n == 0) return 1;\n    return n * factorial(n - 1);\n}\n\nint main() {\n    printf(\"%d\\n\", factorial(3));\n    return 0;\n}",
    "o": [
      "6",
      "3",
      "9",
      "Error"
    ]
  },
  {
    "q": "Which of the following is an example of a recursive function in C?",
    "o": [
      "int factorial(int n) { if (n == 0) return 1; return n * factorial(n - 1); }",
      "int sum(int a, int b) { return a + b; }",
      "void printHello() { printf(\"Hello\"); }",
      "void printNumbers() { for (int i = 1; i <= 5; i++) { printf(\"%d\\n\", i); } }"
    ]
  },
  {
    "q": "What will be the output of the following C code?",
    "c": "#include <stdio.h>\n\nvoid printMessage() {\n    printf(\"Hello from function!\\n\");\n}\n\nint main() {\n    printMessage();\n    return 0;\n}",
    "o": [
      "Hello from function!",
      "Hello",
      "Error",
      "None"
    ]
  },
  {
    "q": "Which of the following is true for call by reference in C?",
    "o": [
      "The address of the argument is passed to the function.",
      "The value of the argument is passed to the function.",
      "The reference of the argument is passed to the function.",
      "The function returns the address of the argument."
    ]
  },
  {
    "q": "What is the output of the following C code?",
    "c": "#include <stdio.h>\n\nint multiply(int x, int y) {\n    return x * y;\n}\n\nint main() {\n    printf(\"%d\\n\", multiply(4, 5));\n    return 0;\n}",
    "o": [
      "20",
      "45",
      "9",
      "25"
    ]
  },
  {
    "q": "Which of the following function declarations is valid in C?",
    "o": [
      "int add(int, int);",
      "add(int a, int b);",
      "void add(int, int) { return a + b; }",
      "int add(int a, int b) { return a + b; }"
    ]
  },
  {
    "q": "What will be the output of the following recursive function?",
    "c": "#include <stdio.h>\n\nint factorial(int n) {\n    if (n == 1) return 1;\n    return n * factorial(n - 1);\n}\n\nint main() {\n    printf(\"%d\\n\", factorial(4));\n    return 0;\n}",
    "o": [
      "24",
      "4",
      "120",
      "6"
    ]
  },
  {
    "q": "Which of the following storage classes is used to store a variable in the CPU registers for fast access in C?",
    "o": [
      "register",
      "static",
      "auto",
      "extern"
    ]
  },
  {
    "q": "What is the result of passing an array to a function in C?",
    "o": [
      "The base address of the array is passed.",
      "The whole array is passed by value.",
      "The array size is passed.",
      "The address of each element is passed individually."
    ]
  },
  {
    "q": "What will be the output of the following C code snippet?",
    "c": "#include <stdio.h>\n\nvoid changeValue(int x) {\n    x = 100;\n}\n\nint main() {\n    int num = 5;\n    changeValue(num);\n    printf(\"%d\\n\", num);\n    return 0;\n}",
    "o": [
      "5",
      "100",
      "Error",
      "Undefined behavior"
    ]
  },
  {
    "q": "Which of the following statements is true regarding recursion in C?",
    "o": [
      "A function calls itself.",
      "A function cannot call other functions.",
      "Recursion leads to infinite loops.",
      "Recursion is not allowed in C."
    ]
  },
  {
    "q": "What is the scope of a local variable in C?",
    "o": [
      "The scope is limited to the block of code in which it is defined.",
      "The scope is global throughout the program.",
      "The scope is limited to the function where it is defined.",
      "The scope is limited to the file in which it is declared."
    ]
  },
  {
    "q": "What is the output of the following recursive function?",
    "c": "#include <stdio.h>\n\nvoid printNumbers(int n) {\n    if (n <= 5) {\n        printf(\"%d\\n\", n);\n        printNumbers(n + 1);\n    }\n}\n\nint main() {\n    printNumbers(1);\n    return 0;\n}",
    "o": [
      "1\n2\n3\n4\n5",
      "1\n2\n3\n4",
      "5\n4\n3\n2\n1",
      "1\n1\n1\n1"
    ]
  },
  {
    "q": "Which of the following storage classes restricts the variable's visibility to the function in which it is defined, and retains its value between function calls?",
    "o": [
      "static",
      "register",
      "extern",
      "auto"
    ]
  },
  {
    "q": "What is the output of the following C code snippet?",
    "c": "#include <stdio.h>\n\nint sum(int a, int b) {\n    return a + b;\n}\n\nint main() {\n    int result = sum(10, 20);\n    printf(\"%d\\n\", result);\n    return 0;\n}",
    "o": [
      "30",
      "10",
      "20",
      "Error"
    ]
  },
  {
    "q": "Which of the following C function types is used to define a function that doesn't return a value?",
    "o": [
      "void",
      "int",
      "char",
      "float"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "c": "#include <stdio.h>\n\nint square(int x) {\n    return x * x;\n}\n\nint main() {\n    printf(\"%d\\n\", square(6));\n    return 0;\n}",
    "o": [
      "36",
      "12",
      "6",
      "18"
    ]
  },
  {
    "q": "Which of the following is the correct definition of a function that returns an integer value in C?",
    "o": [
      "int add(int a, int b) { return a + b; }",
      "add(int a, int b) { return a + b; }",
      "void add(int a, int b) { return a + b; }",
      "int add(int a, int b) return a + b;"
    ]
  },
  {
    "q": "What will be the output of the following C code?",
    "c": "#include <stdio.h>\n\nvoid showMessage() {\n    static int count = 0;\n    count++;\n    printf(\"%d\\n\", count);\n}\n\nint main() {\n    showMessage();\n    showMessage();\n    return 0;\n}",
    "o": [
      "1\n2",
      "0\n1",
      "1\n1",
      "2\n2"
    ]
  },
  {
    "q": "What does the 'extern' storage class do in C?",
    "o": [
      "It makes the variable or function accessible across multiple files.",
      "It restricts the variable's visibility to the file in which it is defined.",
      "It initializes variables to zero.",
      "It stores the variable in the CPU registers."
    ]
  },
  {
    "q": "What is the output of the following C code?",
    "c": "#include <stdio.h>\n\nint add(int a, int b) {\n    return a + b;\n}\n\nint main() {\n    printf(\"%d\\n\", add(2, 3));\n    return 0;\n}",
    "o": [
      "5",
      "3",
      "2",
      "Error"
    ]
  },
  {
    "q": "Which of the following is true for call by value in C?",
    "o": [
      "The actual value of the argument is passed to the function.",
      "The address of the argument is passed to the function.",
      "The reference of the argument is passed to the function.",
      "Changes to the argument affect the calling variable."
    ]
  },
  {
    "q": "What is the result of the following code snippet that calls a recursive function?",
    "c": "#include <stdio.h>\n\nint factorial(int n) {\n    if (n <= 1) return 1;\n    return n * factorial(n - 1);\n}\n\nint main() {\n    printf(\"%d\\n\", factorial(3));\n    return 0;\n}",
    "o": [
      "6",
      "3",
      "9",
      "12"
    ]
  },
  {
    "q": "What is the correct syntax for a function that takes an integer and a float as arguments in C?",
    "o": [
      "void func(int a, float b) {}",
      "void func(int a, float b);",
      "int func(int a, float b) {}",
      "int func(int a, float b);"
    ]
  },
  {
    "q": "Which of the following is an example of recursion in C?",
    "o": [
      "int factorial(int n) { if (n == 0) return 1; return n * factorial(n - 1); }",
      "void print() { printf(\"Hello\"); }",
      "void loop() { for (int i = 0; i < 10; i++) { printf(\"%d\", i); } }",
      "int add(int a, int b) { return a + b; }"
    ]
  },
  {
    "q": "What is the scope of a variable declared inside a function in C?",
    "o": [
      "Local to the function",
      "Global throughout the program",
      "Accessible within the file only",
      "Accessible only within the block it is declared"
    ]
  },
  {
    "q": "What is the output of the following C code snippet?",
    "c": "#include <stdio.h>\n\nvoid changeValue(int *x) {\n    *x = 100;\n}\n\nint main() {\n    int num = 5;\n    changeValue(&num);\n    printf(\"%d\\n\", num);\n    return 0;\n}",
    "o": [
      "100",
      "5",
      "Error",
      "Undefined behavior"
    ]
  },
  {
    "q": "Which storage class in C retains the value of a variable even after the function ends?",
    "o": [
      "static",
      "auto",
      "extern",
      "register"
    ]
  },
  {
    "q": "What will be the output of the following C code snippet using static variables?",
    "c": "#include <stdio.h>\n\nvoid counter() {\n    static int count = 0;\n    count++;\n    printf(\"%d\\n\", count);\n}\n\nint main() {\n    counter();\n    counter();\n    counter();\n    return 0;\n}",
    "o": [
      "1\n2\n3",
      "1\n1\n1",
      "0\n0\n0",
      "3\n3\n3"
    ]
  },
  {
    "q": "What is the correct syntax to define a function that returns an integer and takes no arguments in C?",
    "o": [
      "int myFunction() { return 0; }",
      "int myFunction { return 0; }",
      "int myFunction(void) { return 0; }",
      "int myFunction(int) { return 0; }"
    ]
  },
  {
    "q": "Which of the following is the default storage class for local variables in C?",
    "o": [
      "auto",
      "register",
      "static",
      "extern"
    ]
  },
  {
    "q": "What will be the output of the following recursive function call?",
    "c": "#include <stdio.h>\n\nint sum(int n) {\n    if (n == 0) return 0;\n    return n + sum(n - 1);\n}\n\nint main() {\n    printf(\"%d\\n\", sum(5));\n    return 0;\n}",
    "o": [
      "15",
      "10",
      "5",
      "50"
    ]
  },
  {
    "q": "Which of the following statements is true about static variables in C?",
    "o": [
      "They retain their value between function calls.",
      "They are initialized each time the function is called.",
      "They can be accessed only within the function they are declared.",
      "They are automatically destroyed when the function exits."
    ]
  },
  {
    "q": "What will be the output of the following C code with recursion?",
    "c": "#include <stdio.h>\n\nvoid printNumbers(int n) {\n    if (n < 5) {\n        printf(\"%d\\n\", n);\n        printNumbers(n + 1);\n    }\n}\n\nint main() {\n    printNumbers(1);\n    return 0;\n}",
    "o": [
      "1\n2\n3\n4",
      "1\n2\n3\n4\n5",
      "1\n1\n1\n1",
      "5\n4\n3\n2\n1"
    ]
  },
  {
    "q": "Which of the following is true about functions in C?",
    "o": [
      "Functions can return values and accept arguments.",
      "Functions must always return a value.",
      "Functions do not accept arguments.",
      "Functions cannot be recursive."
    ]
  },
  {
    "q": "What is the correct way to declare a function in C that accepts an integer array and its size?",
    "o": [
      "void myFunction(int arr[], int size);",
      "void myFunction(int arr[size], int size);",
      "void myFunction(int arr[], size_t size);",
      "void myFunction(int arr[10], int size);"
    ]
  },
  {
    "q": "Which of the following is the correct way to call a function that does not return a value in C?",
    "o": [
      "void myFunction();",
      "myFunction();",
      "int myFunction();",
      "call myFunction();"
    ]
  },
  {
    "q": "What will be the output of the following C code using call by reference?",
    "c": "#include <stdio.h>\n\nvoid increment(int *x) {\n    (*x)++;\n}\n\nint main() {\n    int num = 10;\n    increment(&num);\n    printf(\"%d\\n\", num);\n    return 0;\n}",
    "o": [
      "11",
      "10",
      "9",
      "Error"
    ]
  },
  {
    "q": "Which of the following statements is true about the 'extern' storage class in C?",
    "o": [
      "It allows variables and functions to be declared in one file and used in another.",
      "It automatically initializes variables to zero.",
      "It makes variables local to the function.",
      "It restricts variable access to the function in which it is declared."
    ]
  },
  {
    "q": "What is the output of the following C code?",
    "c": "#include <stdio.h>\n\nint multiply(int a, int b) {\n    return a * b;\n}\n\nint main() {\n    int result = multiply(4, 5);\n    printf(\"%d\\n\", result);\n    return 0;\n}",
    "o": [
      "20",
      "9",
      "45",
      "0"
    ]
  },
  {
    "q": "Which of the following is true about call by reference in C?",
    "o": [
      "The memory address of the argument is passed to the function.",
      "The actual value of the argument is passed to the function.",
      "The function does not modify the value of the argument.",
      "The value passed to the function is copied."
    ]
  },
  {
    "q": "What will be the output of the following recursive C function?",
    "c": "#include <stdio.h>\n\nint power(int base, int exp) {\n    if (exp == 0) return 1;\n    return base * power(base, exp - 1);\n}\n\nint main() {\n    printf(\"%d\\n\", power(2, 3));\n    return 0;\n}",
    "o": [
      "8",
      "6",
      "4",
      "2"
    ]
  },
  {
    "q": "Which of the following is the correct way to pass an array to a function in C?",
    "o": [
      "void func(int arr[]);",
      "void func(int arr[10]);",
      "void func(int *arr);",
      "Both a and c"
    ]
  },
  {
    "q": "What is recursion in C?",
    "o": [
      "A function calling itself.",
      "A function that accepts multiple arguments.",
      "A function that returns multiple values.",
      "A function that performs iterations."
    ]
  },
  {
    "q": "What is the scope of a variable declared with the 'extern' storage class in C?",
    "o": [
      "Global across all files.",
      "Local to the function.",
      "Local to the block.",
      "Accessible only within the file."
    ]
  },
  {
    "q": "What will be the output of the following C code?",
    "c": "#include <stdio.h>\n\nint increment(int x) {\n    x++;\n    return x;\n}\n\nint main() {\n    int num = 10;\n    increment(num);\n    printf(\"%d\\n\", num);\n    return 0;\n}",
    "o": [
      "10",
      "11",
      "9",
      "Error"
    ]
  },
  {
    "q": "What is the correct declaration of a function that takes an integer array and returns a float in C?",
    "o": [
      "float avg(int arr[]);",
      "int avg(int arr[]);",
      "float avg(int arr[10]);",
      "int avg(float arr[]);"
    ]
  },
  {
    "q": "Which storage class in C allows a variable to retain its value across multiple function calls?",
    "o": [
      "static",
      "auto",
      "extern",
      "register"
    ]
  },
  {
    "q": "What will be the output of the following code using call by value?",
    "c": "#include <stdio.h>\n\nvoid modify(int a) {\n    a = a * 2;\n}\n\nint main() {\n    int num = 5;\n    modify(num);\n    printf(\"%d\\n\", num);\n    return 0;\n}",
    "o": [
      "5",
      "10",
      "0",
      "Error"
    ]
  },
  {
    "q": "Which of the following is true about local variables in C?",
    "o": [
      "They are created when the function is called and destroyed when the function ends.",
      "They are created only once during the program execution.",
      "They retain their value even after the function ends.",
      "They can be accessed globally."
    ]
  },
  {
    "q": "What is the purpose of the 'void' keyword in a function declaration in C?",
    "o": [
      "To indicate that the function does not return any value.",
      "To indicate that the function takes no arguments.",
      "To indicate that the function can return multiple types of data.",
      "Both a and b"
    ]
  },
  {
    "q": "What will be the output of the following C code using a recursive function?",
    "c": "#include <stdio.h>\n\nvoid printNumbers(int n) {\n    if (n > 0) {\n        printNumbers(n - 1);\n        printf(\"%d \", n);\n    }\n}\n\nint main() {\n    printNumbers(5);\n    return 0;\n}",
    "o": [
      "1 2 3 4 5",
      "5 4 3 2 1",
      "1 2 3 4",
      "Error"
    ]
  },
  {
    "q": "What is the scope of a static variable in C?",
    "o": [
      "Local to the function but retains its value across multiple function calls.",
      "Global throughout the program.",
      "Local to the file.",
      "Accessible only within the block in which it is declared."
    ]
  },
  {
    "q": "Which of the following storage classes in C is used to store variables that are accessible across different files?",
    "o": [
      "extern",
      "static",
      "auto",
      "register"
    ]
  },
  {
    "q": "What is the correct syntax for a function that returns an integer and accepts two float arguments in C?",
    "o": [
      "int sum(float a, float b) { return a + b; }",
      "int sum(float a, float b);",
      "float sum(int a, int b) { return a + b; }",
      "float sum(int a, int b);"
    ]
  },
  {
    "q": "What is the result of the following C code with a static variable?",
    "c": "#include <stdio.h>\n\nvoid count() {\n    static int counter = 0;\n    counter++;\n    printf(\"%d\\n\", counter);\n}\n\nint main() {\n    count();\n    count();\n    count();\n    return 0;\n}",
    "o": [
      "1\n2\n3",
      "1\n1\n1",
      "3\n3\n3",
      "0\n1\n2"
    ]
  },
  {
    "q": "What is the correct syntax to pass an integer array of 5 elements to a function in C?",
    "o": [
      "void func(int arr[5]);",
      "void func(int arr[]);",
      "void func(int arr[10]);",
      "Both a and b"
    ]
  },
  {
    "q": "What is the scope of a variable declared inside a function with the 'register' storage class in C?",
    "o": [
      "Local to the function and stored in CPU registers for faster access.",
      "Global to the entire program.",
      "Local to the block in which it is declared.",
      "Accessible only within the file."
    ]
  },
  {
    "q": "What is the output of the following C code snippet?",
    "c": "#include <stdio.h>\n\nint square(int x) {\n    return x * x;\n}\n\nint main() {\n    int result = square(6);\n    printf(\"%d\\n\", result);\n    return 0;\n}",
    "o": [
      "36",
      "12",
      "6",
      "0"
    ]
  },
  {
    "q": "Which of the following is true about Call by Reference in C?",
    "o": [
      "The actual memory address of the argument is passed to the function.",
      "A copy of the argument value is passed to the function.",
      "The function cannot modify the original argument.",
      "The arguments are passed through the stack."
    ]
  },
  {
    "q": "What will be the output of the following recursive C function?",
    "c": "#include <stdio.h>\n\nint factorial(int n) {\n    if (n == 0) return 1;\n    return n * factorial(n - 1);\n}\n\nint main() {\n    printf(\"%d\\n\", factorial(4));\n    return 0;\n}",
    "o": [
      "24",
      "4",
      "16",
      "0"
    ]
  },
  {
    "q": "What is the result of the following C code when a function is called?",
    "c": "#include <stdio.h>\n\nvoid display() {\n    printf(\"Hello, World!\\n\");\n}\n\nint main() {\n    display();\n    return 0;\n}",
    "o": [
      "Hello, World!",
      "World!",
      "Hello!",
      "Error"
    ]
  },
  {
    "q": "What will be the output of the following C code with Call by Value?",
    "c": "#include <stdio.h>\n\nvoid modify(int a) {\n    a = a * 2;\n}\n\nint main() {\n    int num = 5;\n    modify(num);\n    printf(\"%d\\n\", num);\n    return 0;\n}",
    "o": [
      "5",
      "10",
      "0",
      "Error"
    ]
  },
  {
    "q": "What is the result of passing an array to a function in C?",
    "o": [
      "The address of the array is passed to the function.",
      "A copy of the array is passed to the function.",
      "The array size is automatically passed along with it.",
      "None of the above."
    ]
  },
  {
    "q": "What is the output of the following recursive C function?",
    "c": "#include <stdio.h>\n\nvoid printNumbers(int n) {\n    if (n > 0) {\n        printNumbers(n - 1);\n        printf(\"%d \", n);\n    }\n}\n\nint main() {\n    printNumbers(3);\n    return 0;\n}",
    "o": [
      "1 2 3",
      "3 2 1",
      "1 2",
      "Error"
    ]
  },
  {
    "q": "Which storage class in C preserves the value of a variable between function calls?",
    "o": [
      "static",
      "extern",
      "register",
      "auto"
    ]
  },
  {
    "q": "What will be the output of the following C code with recursion?",
    "c": "#include <stdio.h>\n\nint sum(int n) {\n    if (n <= 0) return 0;\n    return n + sum(n - 1);\n}\n\nint main() {\n    printf(\"%d\\n\", sum(4));\n    return 0;\n}",
    "o": [
      "10",
      "4",
      "5",
      "0"
    ]
  },
  {
    "q": "What is the correct syntax to define a function that accepts two integers and returns an integer in C?",
    "o": [
      "int add(int a, int b);",
      "void add(int a, int b);",
      "int add(int a, b);",
      "int add(a, b);"
    ]
  },
  {
    "q": "Which of the following is true about recursion in C?",
    "o": [
      "A function calls itself to solve smaller instances of the same problem.",
      "Recursion uses loops to solve problems.",
      "Recursive functions do not require base conditions.",
      "Recursion consumes less memory compared to iteration."
    ]
  },
  {
    "q": "What is the purpose of the 'extern' keyword in C?",
    "o": [
      "To declare a variable or function that is defined in another file.",
      "To declare a function with no return value.",
      "To define a variable with static storage.",
      "To define the return type of a function."
    ]
  },
  {
    "q": "What is the output of the following code when calling the 'add' function in C?",
    "c": "#include <stdio.h>\n\nint add(int a, int b) {\n    return a + b;\n}\n\nint main() {\n    int result = add(3, 4);\n    printf(\"%d\\n\", result);\n    return 0;\n}",
    "o": [
      "7",
      "3",
      "4",
      "0"
    ]
  },
  {
    "q": "What is the behavior of a function declared with the 'static' storage class in C?",
    "o": [
      "The function's value is retained across multiple function calls.",
      "The function can only be accessed within the same file.",
      "The function has automatic storage duration.",
      "The function can be accessed globally."
    ]
  },
  {
    "q": "Which of the following is the correct way to call a function from another file in C?",
    "o": [
      "Include the header file and declare the function using 'extern'.",
      "Use the 'import' keyword.",
      "Declare the function with the 'static' keyword.",
      "Declare the function with the 'extern' keyword inside the main file."
    ]
  },
  {
    "q": "What is the scope of a variable declared as 'auto' in a C function?",
    "o": [
      "Local to the function and automatically initialized.",
      "Global to the entire program.",
      "Accessible within the block in which it is declared.",
      "Local to the file."
    ]
  },
  {
    "q": "What will happen if you do not provide a return statement in a non-void function in C?",
    "o": [
      "Undefined behavior; a garbage value might be returned.",
      "The function will print a warning message.",
      "The program will compile, but the function will return 0 by default.",
      "The function will not execute."
    ]
  },
  {
    "q": "What will be the output of the following C code snippet?",
    "c": "#include <stdio.h>\n\nvoid greet() {\n    printf(\"Hello, World!\\n\");\n}\n\nint main() {\n    greet();\n    return 0;\n}",
    "o": [
      "Hello, World!",
      "Hello",
      "World",
      "Error"
    ]
  },
  {
    "q": "Which of the following is true about 'call by value' in C?",
    "o": [
      "The function gets a copy of the argument's value.",
      "The function can modify the original argument.",
      "The argument is passed by memory address.",
      "It is used for functions returning values."
    ]
  },
  {
    "q": "What will be the output of the following recursive function?",
    "c": "#include <stdio.h>\n\nint power(int base, int exp) {\n    if (exp == 0) return 1;\n    return base * power(base, exp - 1);\n}\n\nint main() {\n    printf(\"%d\\n\", power(2, 3));\n    return 0;\n}",
    "o": [
      "8",
      "6",
      "12",
      "2"
    ]
  },
  {
    "q": "What is the correct way to declare a function prototype in C?",
    "o": [
      "int add(int, int);",
      "add(int, int) : int;",
      "int add(int, int) -> ;",
      "add(int, int): int"
    ]
  },
  {
    "q": "Which of the following storage classes can be used to persist the value of a variable between function calls?",
    "o": [
      "static",
      "auto",
      "extern",
      "register"
    ]
  },
  {
    "q": "What will be the output of the following C code with a recursive function?",
    "c": "#include <stdio.h>\n\nvoid countdown(int n) {\n    if (n > 0) {\n        printf(\"%d \", n);\n        countdown(n - 1);\n    }\n}\n\nint main() {\n    countdown(3);\n    return 0;\n}",
    "o": [
      "3 2 1",
      "1 2 3",
      "1 2",
      "Error"
    ]
  },
  {
    "q": "Which of the following statements is true about recursion in C?",
    "o": [
      "A function that calls itself to solve smaller instances of the problem.",
      "Recursion consumes less memory than iteration.",
      "Recursion always results in an infinite loop.",
      "Recursion should be avoided in C programming."
    ]
  },
  {
    "q": "What is the value of the 'x' variable in the following code snippet after calling the function?",
    "c": "#include <stdio.h>\n\nvoid modify(int x) {\n    x = 10;\n}\n\nint main() {\n    int x = 5;\n    modify(x);\n    printf(\"%d\\n\", x);\n    return 0;\n}",
    "o": [
      "5",
      "10",
      "0",
      "Error"
    ]
  },
  {
    "q": "What is the correct way to declare a recursive function in C?",
    "o": [
      "int factorial(int n);",
      "factorial(int n) : int;",
      "int factorial(n) -> int;",
      "factorial(int) -> int;"
    ]
  },
  {
    "q": "What will happen if you forget to provide a base condition in a recursive function?",
    "o": [
      "It will result in infinite recursion and a stack overflow.",
      "The program will execute correctly but inefficiently.",
      "The recursion will terminate after one iteration.",
      "The program will print an error message."
    ]
  },
  {
    "q": "What is the default storage class of local variables in C?",
    "o": [
      "auto",
      "static",
      "extern",
      "register"
    ]
  },
  {
    "q": "What is the output of the following code with call by reference?",
    "c": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"%d %d\\n\", x, y);\n    return 0;\n}",
    "o": [
      "10 5",
      "5 10",
      "0 0",
      "Error"
    ]
  },
  {
    "q": "Which of the following is the correct definition for a void function in C?",
    "o": [
      "void display();",
      "display(void);",
      "void display(void){}",
      "function void display();"
    ]
  },
  {
    "q": "What will be the output of the following recursive function?",
    "c": "#include <stdio.h>\n\nint sum(int n) {\n    if (n == 0) return 0;\n    return n + sum(n - 1);\n}\n\nint main() {\n    printf(\"%d\\n\", sum(3));\n    return 0;\n}",
    "o": [
      "6",
      "3",
      "0",
      "Error"
    ]
  },
  {
    "q": "Which of the following is the correct syntax to call a function from another file in C?",
    "o": [
      "#include 'file.h' and use the function name.",
      "#include 'file.h' and declare the function using extern.",
      "Use the function name directly.",
      "Use the 'import' keyword."
    ]
  },
  {
    "q": "What is the output of the following function with recursion in C?",
    "c": "#include <stdio.h>\n\nint fibonacci(int n) {\n    if (n <= 1) return n;\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\n\nint main() {\n    printf(\"%d\\n\", fibonacci(5));\n    return 0;\n}",
    "o": [
      "5",
      "3",
      "8",
      "Error"
    ]
  },
  {
    "q": "Which storage class in C is used to declare a variable that is visible across different files?",
    "o": [
      "extern",
      "static",
      "auto",
      "register"
    ]
  },
  {
    "q": "What will be the output of the following C code snippet?",
    "c": "#include <stdio.h>\n\nint multiply(int a, int b) {\n    return a * b;\n}\n\nint main() {\n    int result = multiply(4, 5);\n    printf(\"%d\\n\", result);\n    return 0;\n}",
    "o": [
      "20",
      "4",
      "5",
      "Error"
    ]
  },
  {
    "q": "Which of the following is the correct way to define a function in C that does not return any value?",
    "o": [
      "void function_name() {}",
      "function_name() -> void {}",
      "void function_name(void) {}",
      "void -> function_name() {}"
    ]
  },
  {
    "q": "What is the output of the following code with respect to 'call by value'?",
    "c": "#include <stdio.h>\n\nvoid updateValue(int num) {\n    num = 20;\n}\n\nint main() {\n    int value = 10;\n    updateValue(value);\n    printf(\"%d\\n\", value);\n    return 0;\n}",
    "o": [
      "10",
      "20",
      "Error",
      "0"
    ]
  },
  {
    "q": "What is the advantage of using 'call by reference' over 'call by value'?",
    "o": [
      "It allows the function to modify the actual argument passed.",
      "It uses less memory than call by value.",
      "It is more secure than call by value.",
      "It is faster than call by value."
    ]
  },
  {
    "q": "Which of the following statements is correct about recursion in C?",
    "o": [
      "A function calls itself in recursion.",
      "Recursion is always more efficient than iteration.",
      "Recursion requires less memory than loops.",
      "Recursion is not supported in C."
    ]
  },
  {
    "q": "What will be the output of the following C program with recursion?",
    "c": "#include <stdio.h>\n\nint factorial(int n) {\n    if (n == 0) return 1;\n    return n * factorial(n - 1);\n}\n\nint main() {\n    printf(\"%d\\n\", factorial(4));\n    return 0;\n}",
    "o": [
      "24",
      "4",
      "120",
      "Error"
    ]
  },
  {
    "q": "What is the purpose of the 'static' storage class in C?",
    "o": [
      "It retains the value of a variable across function calls.",
      "It restricts the variable's visibility to the function.",
      "It makes the variable accessible across multiple files.",
      "It allocates memory dynamically."
    ]
  },
  {
    "q": "What will happen if a function calls itself indefinitely in C?",
    "o": [
      "It will cause a stack overflow.",
      "It will terminate after a certain number of iterations.",
      "It will result in an infinite loop.",
      "It will cause an error."
    ]
  },
  {
    "q": "What is the result of passing an array to a function in C?",
    "o": [
      "The function receives the address of the first element of the array.",
      "The function receives a copy of the entire array.",
      "The function receives the size of the array.",
      "The array cannot be passed to a function."
    ]
  },
  {
    "q": "Which of the following is the correct syntax for declaring an array in C?",
    "o": [
      "int arr[5];",
      "array int[5];",
      "int[5] arr;",
      "int arr = [5];"
    ]
  },
  {
    "q": "What will be the output of the following function with recursion in C?",
    "c": "#include <stdio.h>\n\nvoid printNumbers(int n) {\n    if (n > 0) {\n        printf(\"%d \", n);\n        printNumbers(n - 1);\n    }\n}\n\nint main() {\n    printNumbers(3);\n    return 0;\n}",
    "o": [
      "3 2 1",
      "1 2 3",
      "3 2 1 0",
      "Error"
    ]
  },
  {
    "q": "What is the correct syntax for defining a function that accepts an integer and a float in C?",
    "o": [
      "void function(int x, float y) {}",
      "function(int, float) {}",
      "int function(x: int, y: float) {}",
      "int function(int, float) {}"
    ]
  },
  {
    "q": "Which storage class ensures that a variable is visible across different files in C?",
    "o": [
      "extern",
      "static",
      "auto",
      "register"
    ]
  },
  {
    "q": "What is the default storage class for local variables in C?",
    "o": [
      "auto",
      "static",
      "register",
      "extern"
    ]
  },
  {
    "q": "What will be the output of the following C program that swaps two integers?",
    "c": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 10, y = 20;\n    swap(&x, &y);\n    printf(\"%d %d\\n\", x, y);\n    return 0;\n}",
    "o": [
      "20 10",
      "10 20",
      "0 0",
      "Error"
    ]
  },
  {
    "q": "Which of the following is a valid function definition in C?",
    "o": [
      "int add(int a, int b) { return a + b; }",
      "function int add(int a, int b) { return a + b; }",
      "int add(a, b) { return a + b; }",
      "def int add(int a, int b) { return a + b; }"
    ]
  },
  {
    "q": "What happens if you call a function without passing the correct number of arguments in C?",
    "o": [
      "It causes undefined behavior or a runtime error.",
      "The function uses default values for missing arguments.",
      "The program will print an error message.",
      "It will return 0."
    ]
  },
  {
    "q": "Which of the following is correct about the 'register' storage class in C?",
    "o": [
      "It suggests to the compiler to store the variable in a CPU register for fast access.",
      "It is used for variables that need to be stored permanently.",
      "It makes a variable accessible across different files.",
      "It automatically initializes variables."
    ]
  },
  {
    "q": "What is the correct syntax for defining a function that returns an integer value in C?",
    "o": [
      "int function_name() { return 0; }",
      "function int() { return 0; }",
      "int function_name(void) { return 0; }",
      "function int function_name() { return 0; }"
    ]
  },
  {
    "q": "What will the following C code output when executed?",
    "c": "#include <stdio.h>\n\nvoid displayMessage() {\n    printf(\"Hello World\\n\");\n}\n\nint main() {\n    displayMessage();\n    return 0;\n}",
    "o": [
      "Hello World",
      "Error",
      "No Output",
      "None"
    ]
  },
  {
    "q": "Which of the following best describes 'call by reference' in C?",
    "o": [
      "The function receives the memory address of the argument, allowing it to modify the original variable.",
      "The function receives a copy of the argument, and cannot modify the original variable.",
      "The function receives a reference type as argument, but the original variable cannot be changed.",
      "The function returns a reference type to the calling function."
    ]
  },
  {
    "q": "Which of the following statements is correct regarding recursion in C?",
    "o": [
      "Recursion is a process where a function calls itself.",
      "Recursion is not supported in C.",
      "Recursion always results in faster execution compared to iteration.",
      "Recursion is only used in object-oriented languages."
    ]
  },
  {
    "q": "What is the output of the following recursive function call in C?",
    "c": "#include <stdio.h>\n\nint sum(int n) {\n    if (n <= 0) return 0;\n    return n + sum(n - 1);\n}\n\nint main() {\n    printf(\"%d\\n\", sum(4));\n    return 0;\n}",
    "o": [
      "10",
      "4",
      "0",
      "Error"
    ]
  },
  {
    "q": "What is the main advantage of using 'call by value' over 'call by reference'?",
    "o": [
      "It prevents the function from modifying the original variable.",
      "It is faster in execution compared to call by reference.",
      "It is more memory efficient.",
      "It automatically handles function return values."
    ]
  },
  {
    "q": "Which storage class allows a function to preserve the value of a variable between function calls in C?",
    "o": [
      "static",
      "extern",
      "auto",
      "register"
    ]
  },
  {
    "q": "Which of the following best describes the use of the 'extern' storage class in C?",
    "o": [
      "It allows a variable to be declared outside the current file and used in multiple files.",
      "It makes the variable local to the function.",
      "It creates a static variable that is accessible only within the current file.",
      "It automatically initializes variables to zero."
    ]
  },
  {
    "q": "What will be the output of the following code snippet with respect to 'call by reference'?",
    "c": "#include <stdio.h>\n\nvoid updateValue(int *num) {\n    *num = 20;\n}\n\nint main() {\n    int value = 10;\n    updateValue(&value);\n    printf(\"%d\\n\", value);\n    return 0;\n}",
    "o": [
      "20",
      "10",
      "0",
      "Error"
    ]
  },
  {
    "q": "Which of the following correctly demonstrates a function with parameters in C?",
    "o": [
      "void add(int x, int y) { return x + y; }",
      "add(int x, int y) { return x + y; }",
      "int add(x, y) { return x + y; }",
      "int add(int x, int y) { return x + y; }"
    ]
  },
  {
    "q": "What is the default value of a local variable in C if it is not initialized?",
    "o": [
      "Undefined",
      "0",
      "Null",
      "Garbage value"
    ]
  },
  {
    "q": "Which of the following is true regarding the 'auto' storage class in C?",
    "o": [
      "The 'auto' keyword is used to declare local variables, and they are automatically initialized.",
      "It is used to make a variable visible across different files.",
      "It is used for global variables only.",
      "It defines variables that exist for the duration of the program."
    ]
  },
  {
    "q": "What happens when the base case of a recursive function is not defined in C?",
    "o": [
      "It results in infinite recursion, causing a stack overflow.",
      "It will cause the program to output random values.",
      "The program will terminate unexpectedly.",
      "The function will not execute."
    ]
  },
  {
    "q": "What is the result of passing a pointer to a function in C?",
    "o": [
      "The function can modify the actual data of the argument.",
      "The function gets a copy of the data and cannot modify the original.",
      "The function creates a copy of the pointer, not the data.",
      "The function can access only the address of the data."
    ]
  },
  {
    "q": "Which of the following correctly demonstrates recursion in C?",
    "o": [
      "int factorial(int n) { if (n == 1) return 1; return n * factorial(n - 1); }",
      "int factorial(int n) { while (n > 1) { n--; return n * factorial(n - 1); } }",
      "int factorial(int n) { return 1; }",
      "int factorial(int n) { if (n == 0) return 1; else return n + factorial(n); }"
    ]
  },
  {
    "q": "What will happen if you attempt to return a local variable from a function that uses 'auto' storage class in C?",
    "o": [
      "The value of the local variable will be returned, but it may be overwritten by another function call.",
      "The variable will remain in memory and be accessible after the function returns.",
      "The program will cause an error.",
      "The returned value will be undefined."
    ]
  },
  {
    "q": "Which of the following is the correct way to declare a recursive function in C?",
    "o": [
      "int factorial(int n) { if (n <= 1) return 1; return n * factorial(n - 1); }",
      "int factorial(int n) { return n + factorial(n - 1); }",
      "int factorial(int n) { if (n == 0) return 1; return factorial(n - 1); }",
      "int factorial(int n) { return n * factorial(n + 1); }"
    ]
  },
  {
    "q": "What is the purpose of the 'return' statement in a C function?",
    "o": [
      "To return a value from the function to the calling function.",
      "To exit the function and print a message.",
      "To end the program.",
      "To stop the execution of a loop inside the function."
    ]
  },
  {
    "q": "Which of the following is the correct syntax to declare a function that takes no parameters in C?",
    "o": [
      "void function_name(void);",
      "void function_name();",
      "int function_name();",
      "int function_name(void);"
    ]
  },
  {
    "q": "What is the expected output of the following code snippet?",
    "c": "#include <stdio.h>\n\nint multiply(int a, int b) {\n    return a * b;\n}\n\nint main() {\n    printf(\"%d\\n\", multiply(3, 4));\n    return 0;\n}",
    "o": [
      "12",
      "7",
      "3",
      "0"
    ]
  },
  {
    "q": "Which of the following is correct about call by value in C?",
    "o": [
      "The function works with a copy of the argument, so changes inside the function do not affect the original argument.",
      "The function works with the original argument, and any changes will be reflected outside the function.",
      "The function receives the memory address of the argument and modifies it directly.",
      "The function cannot modify any variables inside the function."
    ]
  },
  {
    "q": "Which of the following is true about recursion in C?",
    "o": [
      "A recursive function must have a base case to prevent infinite recursion.",
      "Recursion is always faster than iteration in C.",
      "Recursion can only be used in object-oriented languages.",
      "Recursive functions do not use memory from the call stack."
    ]
  },
  {
    "q": "What will the following code output?",
    "c": "#include <stdio.h>\n\nvoid display() {\n    printf(\"Hello World\");\n}\n\nint main() {\n    display();\n    return 0;\n}",
    "o": [
      "Hello World",
      "Hello",
      "World",
      "Error"
    ]
  },
  {
    "q": "What is the result of calling a function by reference in C?",
    "o": [
      "The function can modify the original data of the variable passed.",
      "The function receives a copy of the data and cannot modify the original.",
      "The function does not modify any variable passed to it.",
      "The function uses a local copy of the variable, but it cannot modify it."
    ]
  },
  {
    "q": "What is the role of the 'extern' keyword in C?",
    "o": [
      "It allows a function or variable to be defined in another file.",
      "It defines a function in the current file.",
      "It makes a variable local to the function.",
      "It defines a constant variable."
    ]
  },
  {
    "q": "Which of the following statements is correct regarding storage classes in C?",
    "o": [
      "Storage classes define the lifetime, visibility, and default values of variables.",
      "Storage classes are used only for global variables.",
      "Storage classes are defined only inside functions.",
      "Storage classes define the default value of constants."
    ]
  },
  {
    "q": "What is the main advantage of using 'call by reference' over 'call by value' in C?",
    "o": [
      "It allows changes to be reflected in the original variable.",
      "It is more memory efficient as no copies are made.",
      "It is less error-prone.",
      "It works better for larger data types."
    ]
  },
  {
    "q": "What will the following recursive function call output in C?",
    "c": "#include <stdio.h>\n\nint factorial(int n) {\n    if (n == 1) return 1;\n    return n * factorial(n - 1);\n}\n\nint main() {\n    printf(\"%d\\n\", factorial(5));\n    return 0;\n}",
    "o": [
      "120",
      "5",
      "0",
      "Error"
    ]
  },
  {
    "q": "Which of the following will correctly implement a function that sums two numbers and returns the result?",
    "o": [
      "int sum(int a, int b) { return a + b; }",
      "int sum(int a, int b) { print(a + b); }",
      "sum(int a, int b) { return a + b; }",
      "int sum(int a, int b) { a + b; }"
    ]
  },
  {
    "q": "Which storage class in C is used to retain the value of a variable even after the function call ends?",
    "o": [
      "static",
      "extern",
      "auto",
      "register"
    ]
  },
  {
    "q": "Which of the following is correct about the scope of a variable in C?",
    "o": [
      "The scope of a variable is determined by where it is declared.",
      "The scope of a variable is determined by its storage class.",
      "The scope of a variable is global for all functions.",
      "The scope of a variable is only accessible to the main function."
    ]
  },
  {
    "q": "What does the 'register' storage class do in C?",
    "o": [
      "It suggests to the compiler to store the variable in a CPU register for faster access.",
      "It makes the variable automatically initialized to 0.",
      "It is used for variables that need to be accessed globally.",
      "It restricts the variable's value to be used in the function where it is declared."
    ]
  },
  {
    "q": "What will happen if a function is called before its definition in C?",
    "o": [
      "It will result in a compiler error unless the function is declared before the call.",
      "The function will still work without any issue.",
      "The program will crash at runtime.",
      "The function will be ignored by the compiler."
    ]
  },
  {
    "q": "Which of the following is true for 'call by value' in C?",
    "o": [
      "The value of the argument is passed to the function.",
      "The memory address of the argument is passed to the function.",
      "The original argument is modified directly.",
      "The function gets access to the original memory space."
    ]
  },
  {
    "q": "What will happen if you omit the return type in a C function?",
    "o": [
      "It will cause a compilation error because the return type is required.",
      "The compiler will assume the return type is 'int'.",
      "The function will not return anything, but it will still compile.",
      "The function will work without any issues."
    ]
  },
  {
    "q": "What is the result of passing a pointer to a function in C?",
    "o": [
      "The function can modify the original data of the argument.",
      "The function will receive a copy of the data and cannot modify it.",
      "The function cannot access the variable at all.",
      "The function will create a copy of the variable in the heap."
    ]
  },
  {
    "q": "Which of the following is a characteristic of a recursive function in C?",
    "o": [
      "It calls itself directly or indirectly.",
      "It always runs faster than iterative loops.",
      "It is only used in object-oriented programming.",
      "It cannot return any values."
    ]
  },
  {
    "q": "What is the scope of a variable declared inside a function in C?",
    "o": [
      "It is local to that function and cannot be accessed outside.",
      "It is global and accessible by all functions.",
      "It is global but only within the main function.",
      "It is accessible to all functions within the file."
    ]
  },
  {
    "q": "What will be the output of the following code snippet in C?",
    "c": "#include <stdio.h>\n\nvoid add(int a, int b) {\n    a = a + b;\n    printf(\"%d\\n\", a);\n}\n\nint main() {\n    int x = 5, y = 10;\n    add(x, y);\n    printf(\"%d\\n\", x);\n    return 0;\n}",
    "o": [
      "15 5",
      "15 15",
      "5 10",
      "10 5"
    ]
  },
  {
    "q": "Which of the following is the correct way to declare a function that does not return any value?",
    "o": [
      "void function_name();",
      "int function_name();",
      "void function_name(void);",
      "int function_name(void);"
    ]
  },
  {
    "q": "Which function call type allows the function to modify the arguments directly in C?",
    "o": [
      "Call by reference",
      "Call by value",
      "Call by address",
      "Call by result"
    ]
  },
  {
    "q": "What will the following code output in C?",
    "c": "#include <stdio.h>\n\nint factorial(int n) {\n    if (n <= 1) return 1;\n    return n * factorial(n - 1);\n}\n\nint main() {\n    printf(\"%d\\n\", factorial(4));\n    return 0;\n}",
    "o": [
      "24",
      "4",
      "120",
      "0"
    ]
  },
  {
    "q": "Which of the following is correct regarding 'extern' keyword usage in C?",
    "o": [
      "It allows a function or variable to be declared in one file but defined in another.",
      "It is used to define global variables within a function.",
      "It defines a constant variable.",
      "It restricts the use of a function to the current file."
    ]
  },
  {
    "q": "In C, what is the default return type for a function if no return type is specified?",
    "o": [
      "int",
      "void",
      "float",
      "char"
    ]
  },
  {
    "q": "What is the purpose of the 'static' storage class in C?",
    "o": [
      "It allows a variable to retain its value between function calls.",
      "It makes a variable visible to all functions in the program.",
      "It reduces the memory usage of a variable.",
      "It makes a variable local to the function."
    ]
  },
  {
    "q": "Which of the following statements about recursion in C is false?",
    "o": [
      "A recursive function must have a base case to avoid infinite recursion.",
      "A recursive function calls itself with a smaller problem until it reaches the base case.",
      "Recursion is always more efficient than iteration.",
      "Recursion can be used to solve problems that require breaking down a problem into smaller sub-problems."
    ]
  },
  {
    "q": "Which storage class restricts the scope of a variable to the function in which it is declared and is not initialized automatically?",
    "o": [
      "auto",
      "static",
      "register",
      "extern"
    ]
  },
  {
    "q": "Which of the following is true about 'call by value' in C?",
    "o": [
      "The function works with a copy of the actual argument, so the original argument remains unchanged.",
      "The function works with the original argument, modifying its value directly.",
      "The function cannot access the variable passed to it.",
      "The function can modify global variables only."
    ]
  },
  {
    "q": "What will be the output of the following C program?",
    "c": "#include <stdio.h>\n\nvoid display() {\n    printf(\"Welcome to C programming\");\n}\n\nint main() {\n    display();\n    return 0;\n}",
    "o": [
      "Welcome to C programming",
      "Welcome to programming",
      "C programming",
      "Error"
    ]
  },
  {
    "q": "Which of the following is the correct syntax to declare a function in C that takes two integers and returns an integer?",
    "o": [
      "int function_name(int a, int b);",
      "function_name(int a, int b) -> int;",
      "int function_name(int, int);",
      "function_name(int a, int b) { return a + b; }"
    ]
  },
  {
    "q": "What is the main difference between 'call by reference' and 'call by value' in C?",
    "o": [
      "Call by reference passes the memory address, while call by value passes a copy of the value.",
      "Call by value modifies the original variable, while call by reference does not.",
      "Call by reference uses more memory than call by value.",
      "Call by reference cannot be used with arrays."
    ]
  },
  {
    "q": "What is the correct syntax for defining a function that returns a float and accepts two integer parameters in C?",
    "o": [
      "float function_name(int a, int b) { return a + b; }",
      "function_name(float, int, int) { return a + b; }",
      "float function_name(int a, int b) -> a + b;",
      "function_name(int a, int b) -> float { return a + b; }"
    ]
  },
  {
    "q": "What will be the output of the following code snippet in C?",
    "c": "#include <stdio.h>\n\nvoid swap(int *x, int *y) {\n    int temp = *x;\n    *x = *y;\n    *y = temp;\n}\n\nint main() {\n    int a = 5, b = 10;\n    swap(&a, &b);\n    printf(\"%d %d\\n\", a, b);\n    return 0;\n}",
    "o": [
      "10 5",
      "5 10",
      "0 0",
      "5 5"
    ]
  },
  {
    "q": "Which of the following is true about the return type of a function in C?",
    "o": [
      "The return type must match the type of the value returned by the function.",
      "The return type can be any type, regardless of what is returned.",
      "A function with no return type will cause an error.",
      "The return type can only be integer."
    ]
  },
  {
    "q": "What will be the output of the following C code?",
    "c": "#include <stdio.h>\n\nint add(int a, int b) {\n    return a + b;\n}\n\nint main() {\n    int result = add(5, 10);\n    printf(\"Result: %d\\n\", result);\n    return 0;\n}",
    "o": [
      "Result: 15",
      "Result: 5",
      "Result: 10",
      "Result: 50"
    ]
  },
  {
    "q": "Which of the following correctly represents a recursive function in C?",
    "o": [
      "int factorial(int n) { if (n == 1) return 1; else return n * factorial(n - 1); }",
      "int factorial(int n) { return n * factorial(n); }",
      "int factorial(int n) { if (n == 0) return 1; return n; }",
      "int factorial(int n) { return n; }"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "c": "#include <stdio.h>\n\nvoid print_hello() {\n    printf(\"Hello, World!\\n\");\n}\n\nint main() {\n    print_hello();\n    return 0;\n}",
    "o": [
      "Hello, World!",
      "Hello!",
      "World!",
      "Error"
    ]
  },
  {
    "q": "Which of the following describes the concept of 'call by reference' in C?",
    "o": [
      "The function receives the memory address of the argument and can modify the original value.",
      "The function receives a copy of the argument, and modifications are not reflected outside the function.",
      "The function cannot modify the argument.",
      "The function does not receive any argument."
    ]
  },
  {
    "q": "What is the default storage class for local variables in C?",
    "o": [
      "auto",
      "static",
      "extern",
      "register"
    ]
  },
  {
    "q": "Which of the following is the correct syntax for declaring a function in C that returns void and accepts no arguments?",
    "o": [
      "void function_name();",
      "void function_name(void);",
      "function_name(void) -> void;",
      "function_name() -> void;"
    ]
  },
  {
    "q": "Which of the following storage classes allows a variable to retain its value even after the function execution ends?",
    "o": [
      "static",
      "auto",
      "register",
      "extern"
    ]
  },
  {
    "q": "What is the primary difference between 'call by value' and 'call by reference' in C?",
    "o": [
      "Call by value passes a copy of the argument, while call by reference passes the actual address of the argument.",
      "Call by value passes the address of the argument, while call by reference passes the value.",
      "Call by value passes a pointer, while call by reference passes an array.",
      "Call by value modifies the argument, while call by reference does not."
    ]
  },
  {
    "q": "Which of the following statements is true about recursion in C?",
    "o": [
      "A recursive function must have a base case to terminate the recursion.",
      "Recursion uses fewer resources than iteration in most cases.",
      "Recursion is always faster than iteration.",
      "A recursive function cannot return any value."
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "c": "#include <stdio.h>\n\nvoid increment(int *x) {\n    (*x)++;\n}\n\nint main() {\n    int a = 5;\n    increment(&a);\n    printf(\"%d\\n\", a);\n    return 0;\n}",
    "o": [
      "6",
      "5",
      "7",
      "Error"
    ]
  },
  {
    "q": "Which of the following is a valid way to call a function that takes two integer arguments in C?",
    "o": [
      "function_name(5, 10);",
      "function_name(5, 10); // No semicolon",
      "function_name(5, \"10\");",
      "function_name(10);"
    ]
  },
  {
    "q": "What is the result of calling a function with a void return type in C?",
    "o": [
      "The function does not return a value.",
      "The function must return a value of type void.",
      "The function will cause an error at compile time.",
      "The function will return 0 by default."
    ]
  },
  {
    "q": "What happens when a local variable is declared as 'static' inside a function in C?",
    "o": [
      "The variable retains its value between function calls.",
      "The variable is only visible to the function in which it is declared.",
      "The variable is stored in the heap memory.",
      "The variable will be initialized to zero automatically."
    ]
  },
  {
    "q": "What will be the output of the following code in C?",
    "c": "#include <stdio.h>\n\nint multiply(int a, int b) {\n    return a * b;\n}\n\nint main() {\n    int result = multiply(3, 4);\n    printf(\"Result: %d\\n\", result);\n    return 0;\n}",
    "o": [
      "Result: 12",
      "Result: 7",
      "Result: 34",
      "Result: 0"
    ]
  },
  {
    "q": "Which of the following is the correct way to call a function with two integer arguments in C?",
    "o": [
      "function_name(10, 20);",
      "function_name(10, \"20\");",
      "function_name(10);",
      "function_name();"
    ]
  },
  {
    "q": "What does the storage class 'extern' signify in C?",
    "o": [
      "The variable is defined in another file or outside the current function.",
      "The variable is local to the function.",
      "The variable retains its value across function calls.",
      "The variable is automatically initialized to zero."
    ]
  },
  {
    "q": "What will be the output of the following code in C?",
    "c": "#include <stdio.h>\n\nint factorial(int n) {\n    if (n == 0) return 1;\n    return n * factorial(n - 1);\n}\n\nint main() {\n    int result = factorial(5);\n    printf(\"Factorial: %d\\n\", result);\n    return 0;\n}",
    "o": [
      "Factorial: 120",
      "Factorial: 24",
      "Factorial: 5",
      "Factorial: 0"
    ]
  },
  {
    "q": "Which of the following is the correct syntax for defining a recursive function in C?",
    "o": [
      "int factorial(int n) { if (n == 0) return 1; else return n * factorial(n - 1); }",
      "int factorial(int n) { return n * factorial(n); }",
      "int factorial(int n) { if (n == 0) return 1; return n; }",
      "int factorial(int n) { return n; }"
    ]
  },
  {
    "q": "Which of the following is true about the scope of a static variable in C?",
    "o": [
      "A static variable retains its value between function calls but is only visible within the function.",
      "A static variable is accessible globally.",
      "A static variable is initialized to zero by default.",
      "A static variable can be accessed from other functions if declared globally."
    ]
  },
  {
    "q": "What will be the output of the following code snippet in C?",
    "c": "#include <stdio.h>\n\nvoid changeValue(int *x) {\n    *x = 100;\n}\n\nint main() {\n    int a = 50;\n    changeValue(&a);\n    printf(\"%d\\n\", a);\n    return 0;\n}",
    "o": [
      "100",
      "50",
      "0",
      "Error"
    ]
  },
  {
    "q": "What will be the output of the following C program?",
    "c": "#include <stdio.h>\n\nint add(int a, int b) {\n    return a + b;\n}\n\nint main() {\n    int result = add(10, 20);\n    printf(\"%d\\n\", result);\n    return 0;\n}",
    "o": [
      "30",
      "10",
      "20",
      "Error"
    ]
  },
  {
    "q": "What is the correct way to declare a function that takes no parameters and returns an integer in C?",
    "o": [
      "int function_name(void);",
      "int function_name();",
      "function_name(void) -> int;",
      "int function_name();"
    ]
  },
  {
    "q": "Which of the following is true about the 'call by value' method in C?",
    "o": [
      "The function receives a copy of the argument and changes made inside the function do not affect the original argument.",
      "The function directly modifies the value of the argument passed.",
      "The function does not receive any argument.",
      "The function receives the address of the argument."
    ]
  },
  {
    "q": "What is the correct syntax for using 'extern' in C?",
    "o": [
      "extern int a;",
      "extern int a = 5;",
      "int extern a;",
      "int a = extern 5;"
    ]
  },
  {
    "q": "What will be the output of the following code snippet in C?",
    "c": "#include <stdio.h>\n\nvoid show_message() {\n    printf(\"Hello from function!\\n\");\n}\n\nint main() {\n    show_message();\n    return 0;\n}",
    "o": [
      "Hello from function!",
      "Hello!",
      "World!",
      "None"
    ]
  },
  {
    "q": "Which of the following is true about recursion in C?",
    "o": [
      "Recursion is a process where a function calls itself.",
      "Recursion reduces memory usage and is always faster than iteration.",
      "A recursive function cannot return any value.",
      "Recursion requires a for loop to work."
    ]
  },
  {
    "q": "Which storage class is used to declare a variable that retains its value across function calls?",
    "o": [
      "static",
      "auto",
      "register",
      "extern"
    ]
  },
  {
    "q": "What happens when a function call in C exceeds the maximum recursion depth?",
    "o": [
      "The program may crash due to a stack overflow error.",
      "The function will continue executing as usual.",
      "The compiler will throw an error.",
      "The program will return a default value."
    ]
  },
  {
    "q": "What is the result of the following C code?",
    "c": "#include <stdio.h>\n\nint add(int a, int b) {\n    return a + b;\n}\n\nint main() {\n    int result = add(10, 15);\n    printf(\"%d\\n\", result);\n    return 0;\n}",
    "o": [
      "25",
      "10",
      "15",
      "5"
    ]
  },
  {
    "q": "What will be the output of the following code in C?",
    "c": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"x = %d, y = %d\\n\", x, y);\n    return 0;\n}",
    "o": [
      "x = 10, y = 5",
      "x = 5, y = 10",
      "x = 0, y = 0",
      "x = 15, y = 15"
    ]
  },
  {
    "q": "Which of the following statements is correct about a recursive function?",
    "o": [
      "A recursive function calls itself in order to solve a problem.",
      "A recursive function cannot return a value.",
      "Recursion is slower than iteration for simple problems.",
      "Recursion requires the use of a loop inside the function."
    ]
  },
  {
    "q": "What is the default value of a static variable in C if not explicitly initialized?",
    "o": [
      "0",
      "undefined",
      "garbage value",
      "NULL"
    ]
  },
  {
    "q": "What will be the output of the following code in C?",
    "c": "#include <stdio.h>\n\nint multiply_by_2(int x) {\n    return x * 2;\n}\n\nint main() {\n    int num = 7;\n    int result = multiply_by_2(num);\n    printf(\"Result = %d\\n\", result);\n    return 0;\n}",
    "o": [
      "Result = 14",
      "Result = 7",
      "Result = 21",
      "Result = 0"
    ]
  },
  {
    "q": "Which of the following best defines a function prototype in C?",
    "o": [
      "A declaration of the function that specifies the return type and parameters but does not include the function body.",
      "A function definition that includes the implementation of the function.",
      "A special type of function that is only declared but never used.",
      "A function that has no parameters."
    ]
  },
  {
    "q": "Which of the following is the correct way to call a function that returns an integer value in C?",
    "o": [
      "int result = function_name();",
      "function_name() -> int;",
      "return function_name(int);",
      "int function_name();"
    ]
  },
  {
    "q": "What will be the output of the following code snippet in C?",
    "c": "#include <stdio.h>\n\nint square(int x) {\n    return x * x;\n}\n\nint main() {\n    int result = square(4);\n    printf(\"%d\\n\", result);\n    return 0;\n}",
    "o": [
      "16",
      "4",
      "0",
      "64"
    ]
  },
  {
    "q": "Which of the following is true about the scope of an 'auto' variable in C?",
    "o": [
      "The 'auto' variable is local to the block or function where it is defined.",
      "The 'auto' variable retains its value across function calls.",
      "The 'auto' variable can be accessed outside the function where it is defined.",
      "The 'auto' variable is visible to all functions in the program."
    ]
  },
  {
    "q": "What will be the output of the following code snippet in C?",
    "c": "#include <stdio.h>\n\nvoid add_numbers(int a, int b) {\n    printf(\"Sum: %d\\n\", a + b);\n}\n\nint main() {\n    int x = 5, y = 7;\n    add_numbers(x, y);\n    return 0;\n}",
    "o": [
      "Sum: 12",
      "Sum: 57",
      "Sum: 5",
      "Sum: 7"
    ]
  },
  {
    "q": "Which of the following is the correct way to declare a function that takes two integer arguments and returns an integer?",
    "o": [
      "int function_name(int a, int b);",
      "function_name(int a, int b) -> int;",
      "int function_name(int, int);",
      "int function_name(a, b);"
    ]
  },
  {
    "q": "Which of the following is true about 'call by reference' in C?",
    "o": [
      "The function receives the memory address of the argument, and any changes made to the parameter inside the function will affect the original argument.",
      "The function receives a copy of the argument, and changes inside the function do not affect the original argument.",
      "The function cannot modify the argument value.",
      "The argument is passed without any reference."
    ]
  },
  {
    "q": "What will be the output of the following C code?",
    "c": "#include <stdio.h>\n\nint increment(int x) {\n    return x + 1;\n}\n\nint main() {\n    int result = increment(5);\n    printf(\"%d\\n\", result);\n    return 0;\n}",
    "o": [
      "6",
      "5",
      "0",
      "1"
    ]
  },
  {
    "q": "What is the correct syntax for defining a function that returns nothing and takes no parameters in C?",
    "o": [
      "void function_name(void);",
      "void function_name();",
      "function_name(void) -> void;",
      "void function_name;"
    ]
  },
  {
    "q": "What will happen if a function is called before it is declared or defined in C?",
    "o": [
      "The compiler will show an error unless a prototype is provided beforehand.",
      "The function will work fine without any issues.",
      "The function will be executed, but the result will be undefined.",
      "The program will crash at runtime."
    ]
  },
  {
    "q": "Which of the following storage classes is used to declare a variable that is initialized only once and retains its value across function calls?",
    "o": [
      "static",
      "auto",
      "extern",
      "register"
    ]
  },
  {
    "q": "What will be the output of the following C code?",
    "c": "#include <stdio.h>\n\nint power(int base, int exponent) {\n    if (exponent == 0) return 1;\n    return base * power(base, exponent - 1);\n}\n\nint main() {\n    int result = power(2, 3);\n    printf(\"%d\\n\", result);\n    return 0;\n}",
    "o": [
      "8",
      "6",
      "4",
      "2"
    ]
  },
  {
    "q": "Which of the following is the correct definition of a function in C?",
    "o": [
      "A function definition includes the function's body and specifies how it operates.",
      "A function definition only includes the function name and its parameters.",
      "A function definition is used to declare variables in the function scope.",
      "A function definition specifies only the return type."
    ]
  },
  {
    "q": "What is the value of the variable 'x' after the following code is executed in C?",
    "c": "#include <stdio.h>\n\nvoid add_to_x(int x) {\n    x = x + 10;\n}\n\nint main() {\n    int x = 5;\n    add_to_x(x);\n    printf(\"%d\\n\", x);\n    return 0;\n}",
    "o": [
      "5",
      "15",
      "10",
      "0"
    ]
  },
  {
    "q": "Which of the following is true about recursive functions in C?",
    "o": [
      "Recursive functions can call themselves and are useful for solving problems that can be broken into smaller subproblems.",
      "Recursive functions cannot return a value.",
      "Recursive functions consume less memory than iterative solutions.",
      "Recursive functions are always faster than iterative functions."
    ]
  },
  {
    "q": "What will be the output of the following C code snippet?",
    "c": "#include <stdio.h>\n\nint sum(int a, int b) {\n    return a + b;\n}\n\nint main() {\n    int result = sum(3, 7);\n    printf(\"Sum: %d\\n\", result);\n    return 0;\n}",
    "o": [
      "Sum: 10",
      "Sum: 7",
      "Sum: 3",
      "Sum: 0"
    ]
  },
  {
    "q": "Which of the following is a valid recursive function call in C?",
    "o": [
      "return recursive_function(parameter);",
      "recursive_function(parameter) return;",
      "recursive_function() return;",
      "return function recursive(parameter);"
    ]
  },
  {
    "q": "What is the default value of a local variable in C if it is not initialized?",
    "o": [
      "It holds a garbage value.",
      "It is automatically set to zero.",
      "It holds a NULL value.",
      "It is automatically set to -1."
    ]
  },
  {
    "q": "What is the difference between 'call by value' and 'call by reference' in C?",
    "o": [
      "In 'call by value', the function receives a copy of the argument, whereas in 'call by reference', the function receives the memory address of the argument.",
      "In 'call by reference', the function receives a copy of the argument, whereas in 'call by value', the function receives the memory address.",
      "In both 'call by value' and 'call by reference', the function receives the memory address of the argument.",
      "There is no difference between 'call by value' and 'call by reference'."
    ]
  },
  {
    "q": "What is the output of the following code in C?",
    "c": "#include <stdio.h>\n\nint multiply(int a, int b) {\n    return a * b;\n}\n\nint main() {\n    int result = multiply(3, 4);\n    printf(\"%d\\n\", result);\n    return 0;\n}",
    "o": [
      "12",
      "7",
      "3",
      "4"
    ]
  },
  {
    "q": "Which of the following is used to pass large data to functions without copying it in C?",
    "o": [
      "Passing the data by reference (using pointers).",
      "Passing the data by value.",
      "Using static variables.",
      "Passing data as global variables."
    ]
  },
  {
    "q": "Which function type in C should be used to return a value that is not defined at compile time?",
    "o": [
      "A function with a pointer return type.",
      "A function with an integer return type.",
      "A function with a string return type.",
      "A function with a void return type."
    ]
  },
  {
    "q": "What is the output of the following C code snippet?",
    "c": "#include <stdio.h>\n\nvoid my_function(int *a) {\n    *a = *a + 5;\n}\n\nint main() {\n    int x = 10;\n    my_function(&x);\n    printf(\"%d\\n\", x);\n    return 0;\n}",
    "o": [
      "15",
      "10",
      "5",
      "0"
    ]
  },
  {
    "q": "Which of the following is correct regarding 'static' variables in C?",
    "o": [
      "Static variables retain their value between function calls.",
      "Static variables cannot be modified during execution.",
      "Static variables are initialized every time the function is called.",
      "Static variables have local scope and cannot be accessed outside the function."
    ]
  },
  {
    "q": "What is the correct way to declare a function that does not return any value in C?",
    "o": [
      "void function_name();",
      "function_name(void);",
      "function_name() -> void;",
      "void function_name(int);"
    ]
  },
  {
    "q": "What will happen if a function is called recursively but does not have a base case in C?",
    "o": [
      "The function will cause a stack overflow error due to infinite recursion.",
      "The function will execute and return a value of zero.",
      "The function will return a null value.",
      "The function will stop execution and return control to the main program."
    ]
  },
  {
    "q": "Which storage class is used to declare a variable that can be accessed across multiple files in C?",
    "o": [
      "extern",
      "static",
      "register",
      "auto"
    ]
  },
  {
    "q": "What is the result of the following C code snippet?",
    "c": "#include <stdio.h>\n\nint square(int x) {\n    return x * x;\n}\n\nint main() {\n    int num = 5;\n    printf(\"%d\\n\", square(num));\n    return 0;\n}",
    "o": [
      "25",
      "10",
      "5",
      "50"
    ]
  },
  {
    "q": "Which of the following best describes the 'void' return type in C functions?",
    "o": [
      "A function with a 'void' return type does not return any value.",
      "A function with a 'void' return type returns a zero value by default.",
      "A function with a 'void' return type must return an integer.",
      "A function with a 'void' return type is used to define constant values."
    ]
  },
  {
    "q": "Which of the following is the correct way to declare a function that accepts a pointer in C?",
    "o": [
      "void func(int *ptr);",
      "void func(int ptr);",
      "void func(int &ptr);",
      "void func(int ptr[]);"
    ]
  },
  {
    "q": "What is the output of the following code in C?",
    "c": "#include <stdio.h>\n\nint multiply(int a, int b) {\n    return a * b;\n}\n\nint main() {\n    int x = 5, y = 6;\n    printf(\"%d\\n\", multiply(x, y));\n    return 0;\n}",
    "o": [
      "30",
      "11",
      "6",
      "5"
    ]
  },
  {
    "q": "Which of the following is true about 'call by value' in C?",
    "o": [
      "In 'call by value', a copy of the argument is passed to the function.",
      "In 'call by value', the original value of the argument is modified.",
      "In 'call by value', the function can access the memory address of the argument.",
      "In 'call by value', only global variables can be passed."
    ]
  },
  {
    "q": "What happens if a recursive function in C does not have a base case?",
    "o": [
      "The program will crash due to a stack overflow.",
      "The program will stop running after a few iterations.",
      "The function will return a null value.",
      "The program will run indefinitely without any errors."
    ]
  },
  {
    "q": "What is the output of the following C code snippet?",
    "c": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 10, y = 20;\n    swap(&x, &y);\n    printf(\"%d %d\\n\", x, y);\n    return 0;\n}",
    "o": [
      "20 10",
      "10 20",
      "20 20",
      "10 10"
    ]
  },
  {
    "q": "Which of the following is a valid way to declare a function with a default argument in C?",
    "o": [
      "int sum(int a, int b = 10);",
      "int sum(int a, int b);",
      "int sum(int a = 10, int b);",
      "int sum(int a, int b=10){}"
    ]
  },
  {
    "q": "Which of the following statements about recursion is false in C?",
    "o": [
      "Recursive functions call themselves and must have a base case.",
      "Recursive functions always use less memory than iterative solutions.",
      "Recursion can simplify code for problems like factorials and Fibonacci.",
      "Excessive recursion can lead to a stack overflow."
    ]
  },
  {
    "q": "What will be the output of the following C code?",
    "c": "#include <stdio.h>\n\nint add(int a, int b) {\n    return a + b;\n}\n\nint main() {\n    int result = add(4, 5);\n    printf(\"%d\\n\", result);\n    return 0;\n}",
    "o": [
      "9",
      "4",
      "5",
      "45"
    ]
  },
  {
    "q": "Which of the following is true about 'call by reference' in C?",
    "o": [
      "In 'call by reference', the function operates on the actual argument, not a copy.",
      "In 'call by reference', the function gets a copy of the argument's value.",
      "In 'call by reference', the function cannot modify the original variable.",
      "In 'call by reference', pointers are not allowed."
    ]
  },
  {
    "q": "What will happen if a function is called with more arguments than it can accept in C?",
    "o": [
      "The compiler will throw an error.",
      "The program will run with unpredictable results.",
      "The extra arguments will be ignored.",
      "The program will crash due to a stack overflow."
    ]
  },
  {
    "q": "What will the following C code output?",
    "c": "#include <stdio.h>\n\nvoid display(int n) {\n    if (n > 0) {\n        printf(\"%d\\n\", n);\n        display(n - 1);\n    }\n}\n\nint main() {\n    display(3);\n    return 0;\n}",
    "o": [
      "3 2 1",
      "1 2 3",
      "3 3 3",
      "1"
    ]
  },
  {
    "q": "Which storage class is used for a variable that is accessible only within a specific function in C?",
    "o": [
      "auto",
      "static",
      "extern",
      "register"
    ]
  },
  {
    "q": "Which function return type should be used when no return value is required in C?",
    "o": [
      "void",
      "int",
      "char",
      "float"
    ]
  },
  {
    "q": "Which of the following is an advantage of using functions in C?",
    "o": [
      "Functions allow for modularity and reusability of code.",
      "Functions always improve the performance of a program.",
      "Functions are not necessary for small programs.",
      "Functions allow global variables to be accessed more easily."
    ]
  },
  {
    "q": "What will happen if a function is called with a variable of a different type than expected in C?",
    "o": [
      "The compiler will generate an error.",
      "The program will run with undefined behavior.",
      "The program will automatically convert the type.",
      "The program will throw a runtime exception."
    ]
  },
  {
    "q": "What is the correct syntax for declaring a function with default arguments in C?",
    "o": [
      "int add(int a, int b = 5);",
      "int add(int a = 5, int b);",
      "int add(int a, int b) { return a + b; }",
      "int add(int a, int b = 5) { return a + b; }"
    ]
  },
  {
    "q": "What is the output of the following C code snippet?",
    "c": "#include <stdio.h>\n\nint cube(int n) {\n    return n * n * n;\n}\n\nint main() {\n    int result = cube(3);\n    printf(\"%d\\n\", result);\n    return 0;\n}",
    "o": [
      "27",
      "9",
      "6",
      "30"
    ]
  },
  {
    "q": "Which of the following is the correct way to pass an array to a function in C?",
    "o": [
      "void printArray(int arr[]);",
      "void printArray(int arr);",
      "void printArray(int arr[10]);",
      "void printArray(int *arr);"
    ]
  },
  {
    "q": "What is the result of the following C code?",
    "c": "#include <stdio.h>\n\nint sum(int a, int b) {\n    return a + b;\n}\n\nint main() {\n    int num1 = 2, num2 = 3;\n    printf(\"%d\\n\", sum(num1, num2));\n    return 0;\n}",
    "o": [
      "5",
      "23",
      "6",
      "2"
    ]
  },
  {
    "q": "Which of the following best describes 'call by reference' in C?",
    "o": [
      "The function works directly with the actual arguments, modifying their values.",
      "The function works with a copy of the argument's value.",
      "The function does not allow modifications to the argument.",
      "The function cannot accept variables as arguments."
    ]
  },
  {
    "q": "What is the output of the following C code?",
    "c": "#include <stdio.h>\n\nvoid print(int num) {\n    if (num > 0) {\n        print(num - 1);\n    }\n    printf(\"%d \", num);\n}\n\nint main() {\n    print(3);\n    return 0;\n}",
    "o": [
      "0 1 2 3",
      "3 2 1 0",
      "1 2 3 0",
      "0 1 2"
    ]
  },
  {
    "q": "Which of the following storage classes ensures a variable retains its value between function calls in C?",
    "o": [
      "static",
      "auto",
      "extern",
      "register"
    ]
  },
  {
    "q": "Which of the following is true about recursion in C?",
    "o": [
      "A recursive function must have a base case to prevent infinite calls.",
      "A recursive function can be written without a base case.",
      "Recursion is always more efficient than iteration in C.",
      "Recursion does not use the stack memory."
    ]
  },
  {
    "q": "What is the result of the following C code?",
    "c": "#include <stdio.h>\n\nvoid increment(int *num) {\n    *num = *num + 1;\n}\n\nint main() {\n    int x = 5;\n    increment(&x);\n    printf(\"%d\\n\", x);\n    return 0;\n}",
    "o": [
      "6",
      "5",
      "7",
      "1"
    ]
  },
  {
    "q": "Which of the following is the correct syntax for defining a function that does not return a value in C?",
    "o": [
      "void myFunction() { /* code */ }",
      "void myFunction() { return; }",
      "void myFunction(void) { /* code */ }",
      "void myFunction(int a) { return; }"
    ]
  },
  {
    "q": "Which of the following is a valid recursive function call in C?",
    "o": [
      "factorial(n - 1)",
      "factorial(n)",
      "factorial(n + 1)",
      "factorial(-n)"
    ]
  },
  {
    "q": "What is the output of the following C program?",
    "c": "#include <stdio.h>\n\nint factorial(int n) {\n    if (n <= 1) return 1;\n    return n * factorial(n - 1);\n}\n\nint main() {\n    printf(\"%d\\n\", factorial(5));\n    return 0;\n}",
    "o": [
      "120",
      "60",
      "5",
      "1"
    ]
  },
  {
    "q": "Which of the following storage classes can be used to define variables that are shared across different files in C?",
    "o": [
      "extern",
      "static",
      "auto",
      "register"
    ]
  },
  {
    "q": "What happens if a function in C does not return a value when the return type is not 'void'?",
    "o": [
      "The behavior is undefined, and it may lead to a compilation warning or error.",
      "The function will automatically return 0.",
      "The function will return a random value.",
      "The program will crash."
    ]
  },
  {
    "q": "What will be the output of the following C program?",
    "c": "#include <stdio.h>\n\nvoid add(int *a, int *b) {\n    *a = *a + *b;\n}\n\nint main() {\n    int x = 2, y = 3;\n    add(&x, &y);\n    printf(\"%d\\n\", x);\n    return 0;\n}",
    "o": [
      "5",
      "6",
      "3",
      "0"
    ]
  },
  {
    "q": "Which of the following statements about the 'auto' storage class is correct?",
    "o": [
      "'auto' variables are automatically destroyed when the block or function they are in is exited.",
      "'auto' variables persist for the lifetime of the program.",
      "'auto' variables are stored in global memory.",
      "'auto' variables can be accessed globally."
    ]
  },
  {
    "q": "Which of the following is true about the 'register' storage class in C?",
    "o": [
      "Variables with the 'register' storage class are stored in CPU registers for faster access.",
      "Variables with the 'register' storage class are stored in RAM.",
      "Variables with the 'register' storage class can be accessed globally.",
      "Variables with the 'register' storage class persist for the lifetime of the program."
    ]
  },
  {
    "q": "What is the output of the following C code?",
    "c": "#include <stdio.h>\n\nint main() {\n    int x = 10;\n    int y = 20;\n    int result = (x > y) ? x : y;\n    printf(\"%d\\n\", result);\n    return 0;\n}",
    "o": [
      "20",
      "10",
      "0",
      "30"
    ]
  },
  {
    "q": "What is the correct syntax for defining a recursive function in C?",
    "o": [
      "int factorial(int n) { if (n == 0) return 1; else return n * factorial(n - 1); }",
      "int factorial(int n) { return n * factorial(n - 1); }",
      "int factorial(int n) { if (n <= 0) return 1; return n * factorial(n - 1); }",
      "void factorial(int n) { return n * factorial(n - 1); }"
    ]
  },
  {
    "q": "What is the output of the following C code?",
    "c": "#include <stdio.h>\n\nvoid fun(int *a) {\n    *a = *a * 2;\n}\n\nint main() {\n    int x = 5;\n    fun(&x);\n    printf(\"%d\\n\", x);\n    return 0;\n}",
    "o": [
      "10",
      "5",
      "2",
      "0"
    ]
  },
  {
    "q": "Which of the following storage classes is used to define variables that are visible only within the function they are defined in?",
    "o": [
      "auto",
      "static",
      "extern",
      "register"
    ]
  },
  {
    "q": "What happens if a C function does not have a return statement but its return type is non-void?",
    "o": [
      "The behavior is undefined, leading to unpredictable results.",
      "The function will return a default value (like 0 for integers).",
      "The program will crash immediately.",
      "The compiler will automatically add a return statement."
    ]
  },
  {
    "q": "What is the purpose of the 'extern' storage class in C?",
    "o": [
      "It declares a variable that is defined in another file.",
      "It ensures the variable persists throughout the program.",
      "It restricts the variable’s scope to the current block.",
      "It stores the variable in a CPU register."
    ]
  },
  {
    "q": "What will be the output of the following C code?",
    "c": "#include <stdio.h>\n\nvoid foo(int x) {\n    if (x == 0) return;\n    foo(x - 1);\n    printf(\"%d \", x);\n}\n\nint main() {\n    foo(3);\n    return 0;\n}",
    "o": [
      "1 2 3",
      "3 2 1",
      "1 2 3 0",
      "3 2 1 0"
    ]
  },
  {
    "q": "Which of the following defines a valid function with no parameters in C?",
    "o": [
      "void myFunction(void);",
      "void myFunction();",
      "void myFunction() { }",
      "int myFunction(void);"
    ]
  },
  {
    "q": "What is the result of the following C code?",
    "c": "#include <stdio.h>\n\nint x = 5;\nvoid changeValue(int x) {\n    x = x + 10;\n}\n\nint main() {\n    changeValue(x);\n    printf(\"%d\\n\", x);\n    return 0;\n}",
    "o": [
      "5",
      "15",
      "10",
      "0"
    ]
  },
  {
    "q": "Which storage class in C would you use to define a variable that retains its value between function calls?",
    "o": [
      "static",
      "register",
      "auto",
      "extern"
    ]
  },
  {
    "q": "What does the following code snippet demonstrate in C?\n\nvoid swap(int *a, int *b) { int temp = *a; *a = *b; *b = temp; }",
    "o": [
      "Call by reference",
      "Call by value",
      "Pointer arithmetic",
      "Memory allocation"
    ]
  },
  {
    "q": "What is the output of the following code?\n\nint factorial(int n) {\n    if (n <= 1) return 1;\n    return n * factorial(n - 1);\n}\n\nint main() {\n    printf(\"%d\\n\", factorial(4));\n    return 0;\n}",
    "o": [
      "24",
      "12",
      "4",
      "16"
    ]
  },
  {
    "q": "Which of the following is the correct way to define a function with default arguments in C?",
    "o": [
      "C does not support default arguments.",
      "int add(int a, int b = 5);",
      "int add(int a = 5, int b);",
      "int add(int a = 5, int b = 10);"
    ]
  },
  {
    "q": "Which of the following is an example of a recursive function in C?",
    "o": [
      "int factorial(int n) { if (n <= 1) return 1; return n * factorial(n - 1); }",
      "int sum(int a, int b) { return a + b; }",
      "void printHello() { printf(\"Hello\\n\"); }",
      "int add(int a, int b) { return a + b; }"
    ]
  },
  {
    "q": "What happens if you try to access a variable defined with the 'static' storage class in a different function?",
    "o": [
      "It can be accessed if declared with 'extern' in the other function.",
      "It will be automatically imported from the global scope.",
      "It cannot be accessed from the other function.",
      "It will produce a compile-time error."
    ]
  },
  {
    "q": "What is the purpose of the 'register' storage class in C?",
    "o": [
      "It suggests to the compiler to store the variable in a CPU register for faster access.",
      "It stores the variable in memory permanently.",
      "It restricts the variable’s scope to the current function.",
      "It allows the variable to be accessed globally."
    ]
  },
  {
    "q": "Which of the following will cause an infinite recursion in C?",
    "o": [
      "A recursive function without a base case.",
      "A function with a return value.",
      "A function that prints a value.",
      "A function that calls another function."
    ]
  },
  {
    "q": "What is the output of the following code?\n\nint main() {\n    int a = 10;\n    int b = 20;\n    swap(&a, &b);\n    printf(\"%d %d\\n\", a, b);\n    return 0;\n}",
    "o": [
      "20 10",
      "10 20",
      "0 0",
      "Undefined"
    ]
  },
  {
    "q": "Which of the following correctly declares a function in C?",
    "o": [
      "int sum(int a, int b);",
      "int sum(a, b);",
      "function sum(int a, int b);",
      "declare int sum(int a, int b);"
    ]
  },
  {
    "q": "What is the output of the following C code snippet?",
    "c": "#include <stdio.h>\nvoid greet() {\n    printf(\"Hello from C!\\n\");\n}\n\nint main() {\n    greet();\n    return 0;\n}",
    "o": [
      "Hello from C!",
      "greet",
      "Compilation error",
      "No output"
    ]
  },
  {
    "q": "Which storage class makes a variable retain its value between multiple function calls?",
    "o": [
      "static",
      "auto",
      "register",
      "extern"
    ]
  },
  {
    "q": "What is the output of the following recursive function call?",
    "c": "#include <stdio.h>\nint factorial(int n) {\n    if (n == 0) return 1;\n    else return n * factorial(n - 1);\n}\n\nint main() {\n    printf(\"%d\", factorial(4));\n    return 0;\n}",
    "o": [
      "24",
      "4",
      "10",
      "0"
    ]
  },
  {
    "q": "In C, which method allows a function to modify the original variables passed to it?",
    "o": [
      "Call by reference",
      "Call by value",
      "Pass by copy",
      "Copy on write"
    ]
  },
  {
    "q": "Which keyword is used to define a function that returns no value?",
    "o": [
      "void",
      "null",
      "empty",
      "returnless"
    ]
  },
  {
    "q": "What is the output of the following code snippet demonstrating call by value?",
    "c": "#include <stdio.h>\nvoid modify(int x) {\n    x = 20;\n}\n\nint main() {\n    int a = 10;\n    modify(a);\n    printf(\"%d\", a);\n    return 0;\n}",
    "o": [
      "10",
      "20",
      "0",
      "Garbage value"
    ]
  },
  {
    "q": "Which of the following is true about recursive functions in C?",
    "o": [
      "A recursive function calls itself",
      "Recursive functions cannot return values",
      "Recursion is not allowed in C",
      "They always result in infinite loops"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "c": "#include <stdio.h>\nvoid func() {\n    static int count = 0;\n    count++;\n    printf(\"%d \", count);\n}\n\nint main() {\n    func(); func(); func();\n    return 0;\n}",
    "o": [
      "1 2 3 ",
      "0 1 2 ",
      "1 1 1 ",
      "3 2 1 "
    ]
  },
  {
    "q": "Which keyword is used to access a global variable when a local variable with the same name exists?",
    "o": [
      "extern",
      "global",
      "static",
      "register"
    ]
  },
  {
    "q": "Which of the following is both a valid declaration and definition of a function in C?",
    "o": [
      "int max(int x, int y) { return (x > y) ? x : y; }",
      "function int max(x, y) return x > y ? x : y;",
      "int max(x, y);",
      "declare int max(int x, int y);"
    ]
  },
  {
    "q": "What will be printed by this code snippet?",
    "c": "#include <stdio.h>\nvoid test() {\n    auto int x = 5;\n    printf(\"%d\", x);\n}\nint main() {\n    test();\n    return 0;\n}",
    "o": [
      "5",
      "0",
      "Garbage value",
      "Error: 'auto' not allowed"
    ]
  },
  {
    "q": "Which statement about call by reference is true in C?",
    "o": [
      "It is simulated using pointers.",
      "C natively supports call by reference.",
      "It is done using `&` like in C++.",
      "It is not possible in C."
    ]
  },
  {
    "q": "What is the output of the following recursive function?",
    "c": "#include <stdio.h>\nvoid countDown(int n) {\n    if (n == 0) return;\n    printf(\"%d \", n);\n    countDown(n - 1);\n}\nint main() {\n    countDown(3);\n    return 0;\n}",
    "o": [
      "3 2 1 ",
      "1 2 3 ",
      "0 1 2 ",
      "3 2 1 0 "
    ]
  },
  {
    "q": "What will happen if a function is called but not declared before `main()` in C?",
    "o": [
      "Compilation error if no implicit declaration is assumed",
      "It always compiles and runs successfully",
      "Function will be ignored by the compiler",
      "Compiler replaces it with a dummy function"
    ]
  },
  {
    "q": "What is the purpose of the `register` storage class in C?",
    "o": [
      "To suggest storing the variable in a CPU register",
      "To define a global variable",
      "To store a variable in memory permanently",
      "To allocate memory on heap"
    ]
  },
  {
    "q": "What will this code print?",
    "c": "#include <stdio.h>\nvoid modify(int* p) {\n    *p = 50;\n}\nint main() {\n    int a = 10;\n    modify(&a);\n    printf(\"%d\", a);\n    return 0;\n}",
    "o": [
      "50",
      "10",
      "0",
      "Garbage value"
    ]
  },
  {
    "q": "What does the `extern` keyword indicate in a function declaration?",
    "o": [
      "The function is defined elsewhere",
      "The function is static",
      "The function is inline",
      "The function is a macro"
    ]
  },
  {
    "q": "Which is a correct base case in a recursive function?",
    "o": [
      "if (n == 0) return;",
      "while(n > 0)",
      "for(i = 0; i < n; i++)",
      "n = n - 1;"
    ]
  },
  {
    "q": "What is the output of this recursive function?",
    "c": "#include <stdio.h>\nint sum(int n) {\n    if (n == 1) return 1;\n    return n + sum(n - 1);\n}\nint main() {\n    printf(\"%d\", sum(3));\n    return 0;\n}",
    "o": [
      "6",
      "3",
      "9",
      "1"
    ]
  },
  {
    "q": "Which of the following is the correct way to define a function that takes no parameters and returns nothing?",
    "o": [
      "void display() { /* code */ }",
      "display() void { /* code */ }",
      "function void display() { }",
      "void display[] { }"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "#include <stdio.h>\nint square(int x) {\n    return x * x;\n}\nint main() {\n    printf(\"%d\", square(4));\n    return 0;\n}",
    "o": [
      "16",
      "8",
      "4",
      "0"
    ]
  },
  {
    "q": "Which of these is true about 'call by value' in C?",
    "o": [
      "Changes made to parameters do not affect the original values",
      "The function modifies the original variable directly",
      "Memory address of the variable is passed",
      "It is implemented using pointers"
    ]
  },
  {
    "q": "What will the following code output?",
    "c": "#include <stdio.h>\nvoid update(int *x) {\n    *x = *x + 5;\n}\nint main() {\n    int a = 2;\n    update(&a);\n    printf(\"%d\", a);\n    return 0;\n}",
    "o": [
      "7",
      "2",
      "5",
      "0"
    ]
  },
  {
    "q": "What does the `static` keyword mean when used with a local variable in a function?",
    "o": [
      "The variable retains its value between function calls",
      "The variable is shared across different programs",
      "The variable is stored in a register",
      "The variable is global"
    ]
  },
  {
    "q": "What is the output of this recursive function?",
    "c": "#include <stdio.h>\nvoid printReverse(int n) {\n    if (n == 0) return;\n    printReverse(n - 1);\n    printf(\"%d \", n);\n}\nint main() {\n    printReverse(3);\n    return 0;\n}",
    "o": [
      "1 2 3 ",
      "3 2 1 ",
      "3 1 2 ",
      "0 1 2 "
    ]
  },
  {
    "q": "Which of the following correctly describes a function prototype in C?",
    "o": [
      "It is a declaration of a function that specifies the return type and parameter types",
      "It defines what a function does",
      "It must contain the function body",
      "It is used only in C++"
    ]
  },
  {
    "q": "What will this code snippet print?",
    "c": "#include <stdio.h>\nvoid counter() {\n    static int count = 10;\n    count++;\n    printf(\"%d \", count);\n}\nint main() {\n    counter(); counter();\n    return 0;\n}",
    "o": [
      "11 12 ",
      "1 2 ",
      "10 11 ",
      "0 1 "
    ]
  },
  {
    "q": "Which storage class is used to declare a variable that is visible to all functions in all files?",
    "o": [
      "extern",
      "auto",
      "static",
      "register"
    ]
  },
  {
    "q": "Which one of the following is **not** a valid reason to use recursion in C?",
    "o": [
      "To reduce the performance of the program",
      "To solve problems that have smaller sub-problems of the same type",
      "To implement algorithms like factorial or Fibonacci",
      "To replace certain iterative approaches"
    ]
  },
  {
    "q": "Which of the following correctly defines a function that takes a float and returns an int?",
    "o": [
      "int convert(float x) { return (int)x; }",
      "int convert(x: float) { return (int)x; }",
      "function int convert(float x) = int;",
      "int convert = function(float x) { return x; };"
    ]
  },
  {
    "q": "What is the output of the following C code?",
    "c": "#include <stdio.h>\nvoid printHello() {\n    printf(\"Hello\\n\");\n}\nint main() {\n    printHello();\n    return 0;\n}",
    "o": [
      "Hello",
      "Hello\\n",
      "printHello",
      "Error"
    ]
  },
  {
    "q": "Which of the following is true about the `auto` storage class in C?",
    "o": [
      "It is the default for local variables",
      "It makes variables globally accessible",
      "It stores variables in registers",
      "It retains values between function calls"
    ]
  },
  {
    "q": "What does the following recursive function do?",
    "c": "#include <stdio.h>\nvoid recurse(int n) {\n    if (n == 0) return;\n    recurse(n - 1);\n    printf(\"%d \", n);\n}\nint main() {\n    recurse(2);\n    return 0;\n}",
    "o": [
      "1 2 ",
      "2 1 ",
      "0 1 ",
      "0 1 2 "
    ]
  },
  {
    "q": "Which of the following passes the address of a variable to a function?",
    "o": [
      "modify(&x);",
      "modify(x);",
      "modify(*x);",
      "modify(x*);"
    ]
  },
  {
    "q": "What is the correct way to declare a function that accepts two integers and returns nothing?",
    "o": [
      "void func(int a, int b);",
      "void func(a, b);",
      "function void func(int, int);",
      "int func(int, int);"
    ]
  },
  {
    "q": "What is the output of the following code that uses a global variable?",
    "c": "#include <stdio.h>\nint count = 0;\nvoid increment() {\n    count++;\n}\nint main() {\n    increment();\n    increment();\n    printf(\"%d\", count);\n    return 0;\n}",
    "o": [
      "2",
      "1",
      "0",
      "Error"
    ]
  },
  {
    "q": "Which keyword is used to limit a variable's scope to the file it is declared in?",
    "o": [
      "static",
      "extern",
      "register",
      "auto"
    ]
  },
  {
    "q": "What will the following code print?",
    "c": "#include <stdio.h>\nint fib(int n) {\n    if (n <= 1) return n;\n    return fib(n - 1) + fib(n - 2);\n}\nint main() {\n    printf(\"%d\", fib(4));\n    return 0;\n}",
    "o": [
      "3",
      "5",
      "2",
      "4"
    ]
  },
  {
    "q": "Which of the following is true about a function definition in C?",
    "o": [
      "It includes the body of the function",
      "It can only appear before main()",
      "It must always return an int",
      "It should not have parameters"
    ]
  },
  {
    "q": "Which of the following statements is true about function definitions in C?",
    "o": [
      "A function must be defined before it is used, unless a prototype is provided.",
      "Functions must always return a value.",
      "Function names must be written in capital letters.",
      "Functions cannot take more than two arguments."
    ]
  },
  {
    "q": "What will be the output of the following program?",
    "c": "#include <stdio.h>\nint multiply(int a, int b) {\n    return a * b;\n}\nint main() {\n    printf(\"%d\", multiply(2, 3));\n    return 0;\n}",
    "o": [
      "6",
      "5",
      "0",
      "2"
    ]
  },
  {
    "q": "Which function call demonstrates call by reference in C?",
    "o": [
      "update(&value);",
      "update(value);",
      "update(*value);",
      "update(value*);"
    ]
  },
  {
    "q": "What is the output of this code involving static variables?",
    "c": "#include <stdio.h>\nvoid counter() {\n    static int i = 1;\n    printf(\"%d \", i);\n    i++;\n}\nint main() {\n    counter(); counter();\n    return 0;\n}",
    "o": [
      "1 2 ",
      "2 3 ",
      "0 1 ",
      "1 1 "
    ]
  },
  {
    "q": "Which of these keywords is used to declare a function that is visible across multiple files?",
    "o": [
      "extern",
      "static",
      "auto",
      "global"
    ]
  },
  {
    "q": "What does the following recursive function compute?",
    "c": "#include <stdio.h>\nint sum(int n) {\n    if (n == 0) return 0;\n    return n + sum(n - 1);\n}\nint main() {\n    printf(\"%d\", sum(5));\n    return 0;\n}",
    "o": [
      "15",
      "10",
      "5",
      "0"
    ]
  },
  {
    "q": "Which of the following correctly declares a function that takes an int and returns a float?",
    "o": [
      "float convert(int a);",
      "float convert(a);",
      "int convert(float a);",
      "float convert = function(int a);"
    ]
  },
  {
    "q": "Which storage class in C requests the compiler to keep a variable in a CPU register if possible?",
    "o": [
      "register",
      "auto",
      "extern",
      "static"
    ]
  },
  {
    "q": "What is the output of this recursive code?",
    "c": "#include <stdio.h>\nvoid fun(int n) {\n    if (n < 1) return;\n    printf(\"%d \", n);\n    fun(n - 2);\n}\nint main() {\n    fun(5);\n    return 0;\n}",
    "o": [
      "5 3 1 ",
      "5 4 3 ",
      "1 3 5 ",
      "1 2 3 "
    ]
  },
  {
    "q": "Which of the following is NOT true about C functions?",
    "o": [
      "Functions in C can be defined inside another function",
      "Functions can return values",
      "Functions can take multiple arguments",
      "Functions can call themselves"
    ]
  },
  {
    "q": "Which of the following correctly declares a function that does not return a value and takes no parameters?",
    "o": [
      "void func();",
      "func() void;",
      "void func(void) = 0;",
      "void = func();"
    ]
  },
  {
    "q": "What will be the output of the following code?",
    "c": "#include <stdio.h>\nint doubleIt(int x) {\n    return x * 2;\n}\nint main() {\n    printf(\"%d\", doubleIt(7));\n    return 0;\n}",
    "o": [
      "14",
      "7",
      "2",
      "0"
    ]
  },
  {
    "q": "Which of these behaviors is characteristic of call by value?",
    "o": [
      "The original variable remains unchanged after the function call",
      "Changes in the function affect the original variable",
      "Address of variable is passed",
      "Requires pointer as argument"
    ]
  },
  {
    "q": "What will the following program print?",
    "c": "#include <stdio.h>\nvoid modify(int x) {\n    x = x + 10;\n}\nint main() {\n    int a = 5;\n    modify(a);\n    printf(\"%d\", a);\n    return 0;\n}",
    "o": [
      "5",
      "15",
      "10",
      "0"
    ]
  },
  {
    "q": "Which storage class in C allows a variable to persist its value between function calls?",
    "o": [
      "static",
      "auto",
      "extern",
      "register"
    ]
  },
  {
    "q": "What will the recursive function below return?",
    "c": "#include <stdio.h>\nint factorial(int n) {\n    if (n == 1) return 1;\n    return n * factorial(n - 1);\n}\nint main() {\n    printf(\"%d\", factorial(4));\n    return 0;\n}",
    "o": [
      "24",
      "12",
      "16",
      "4"
    ]
  },
  {
    "q": "Which of the following is true regarding recursive functions?",
    "o": [
      "They must have a base case to prevent infinite recursion",
      "They are faster than loops in all cases",
      "They use less memory than iterative solutions",
      "They are not allowed in standard C"
    ]
  },
  {
    "q": "Which keyword is used to declare a variable that can be used across multiple files?",
    "o": [
      "extern",
      "static",
      "auto",
      "local"
    ]
  },
  {
    "q": "What is the output of this recursive function?",
    "c": "#include <stdio.h>\nvoid countdown(int n) {\n    if (n == 0) return;\n    printf(\"%d \", n);\n    countdown(n - 1);\n}\nint main() {\n    countdown(3);\n    return 0;\n}",
    "o": [
      "3 2 1 ",
      "1 2 3 ",
      "0 1 2 ",
      "1 3 2 "
    ]
  },
  {
    "q": "Which of the following is not a valid reason to use the `register` keyword in C?",
    "o": [
      "To share a variable between functions",
      "To store a frequently used variable in a CPU register",
      "To speed up access to variables",
      "To hint compiler about optimization"
    ]
  },
  {
    "q": "Which of the following is a correct function declaration that takes two integers and returns an integer?",
    "o": [
      "int add(int a, int b);",
      "int add(a, b);",
      "function int add(int, int);",
      "add(int a, int b) -> int;"
    ]
  },
  {
    "q": "What is the output of this C program?",
    "c": "#include <stdio.h>\nint main() {\n    int a = 10;\n    int *p = &a;\n    printf(\"%d\", *p);\n    return 0;\n}",
    "o": [
      "10",
      "0",
      "Address of a",
      "Garbage value"
    ]
  },
  {
    "q": "In call by reference, what is actually passed to the function?",
    "o": [
      "Address of the variable",
      "Value of the variable",
      "Return value of another function",
      "A copy of the variable"
    ]
  },
  {
    "q": "Which of the following will print the updated value of 'x' after the function call?",
    "c": "#include <stdio.h>\nvoid update(int *x) {\n    *x = *x + 1;\n}\nint main() {\n    int x = 5;\n    update(&x);\n    printf(\"%d\", x);\n    return 0;\n}",
    "o": [
      "6",
      "5",
      "1",
      "Compilation error"
    ]
  },
  {
    "q": "Which of the following is true about the `auto` storage class in C?",
    "o": [
      "It is the default storage class for local variables",
      "It makes a variable globally accessible",
      "It stores variables in a register",
      "It extends the lifetime of a variable"
    ]
  },
  {
    "q": "What will the following recursive function return?",
    "c": "#include <stdio.h>\nint power(int base, int exp) {\n    if (exp == 0) return 1;\n    return base * power(base, exp - 1);\n}\nint main() {\n    printf(\"%d\", power(2, 3));\n    return 0;\n}",
    "o": [
      "8",
      "6",
      "4",
      "9"
    ]
  },
  {
    "q": "Which of the following is required for a recursive function to terminate?",
    "o": [
      "A base case condition",
      "A global variable",
      "A static variable",
      "A return value of 0"
    ]
  },
  {
    "q": "What keyword is used to create a global variable that can be accessed in other files?",
    "o": [
      "extern",
      "static",
      "register",
      "local"
    ]
  },
  {
    "q": "What is the output of this function that uses static local variables?",
    "c": "#include <stdio.h>\nvoid demo() {\n    static int count = 0;\n    count++;\n    printf(\"%d \", count);\n}\nint main() {\n    demo(); demo(); demo();\n    return 0;\n}",
    "o": [
      "1 2 3 ",
      "0 0 0 ",
      "1 1 1 ",
      "3 2 1 "
    ]
  },
  {
    "q": "Which of the following statements about recursion is false?",
    "o": [
      "Recursive functions always require more memory due to stack usage",
      "Every recursive function must have a base case",
      "Recursion can be replaced with iteration",
      "Recursion always executes faster than loops"
    ]
  },
  {
    "q": "Which of the following correctly declares a function that returns nothing and accepts an integer?",
    "o": [
      "void display(int n);",
      "display void(int n);",
      "function display(int n): void;",
      "void = display(int);"
    ]
  },
  {
    "q": "What will the following C code output?",
    "c": "#include <stdio.h>\nint square(int x) {\n    return x * x;\n}\nint main() {\n    printf(\"%d\", square(4));\n    return 0;\n}",
    "o": [
      "16",
      "8",
      "4",
      "Error"
    ]
  },
  {
    "q": "In call by value, what is passed to the function?",
    "o": [
      "A copy of the actual argument",
      "The address of the variable",
      "The pointer to the function",
      "The memory location of the return value"
    ]
  },
  {
    "q": "What is the output of the following code using call by reference?",
    "c": "#include <stdio.h>\nvoid setToZero(int *n) {\n    *n = 0;\n}\nint main() {\n    int x = 7;\n    setToZero(&x);\n    printf(\"%d\", x);\n    return 0;\n}",
    "o": [
      "0",
      "7",
      "1",
      "Error"
    ]
  },
  {
    "q": "Which storage class retains the value of a variable between function calls?",
    "o": [
      "static",
      "auto",
      "register",
      "extern"
    ]
  },
  {
    "q": "What will this recursive function return?",
    "c": "#include <stdio.h>\nint sumDigits(int n) {\n    if (n == 0) return 0;\n    return (n % 10) + sumDigits(n / 10);\n}\nint main() {\n    printf(\"%d\", sumDigits(123));\n    return 0;\n}",
    "o": [
      "6",
      "3",
      "1",
      "0"
    ]
  },
  {
    "q": "What is a key characteristic of recursive functions?",
    "o": [
      "They call themselves with modified parameters",
      "They always require pointer arguments",
      "They cannot return values",
      "They are only used for mathematical operations"
    ]
  },
  {
    "q": "Which keyword restricts a variable’s visibility to the file it is defined in?",
    "o": [
      "static",
      "extern",
      "auto",
      "global"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "#include <stdio.h>\nvoid f() {\n    auto int x = 5;\n    printf(\"%d \", x);\n}\nint main() {\n    f(); f();\n    return 0;\n}",
    "o": [
      "5 5 ",
      "5 6 ",
      "6 6 ",
      "5 4 "
    ]
  },
  {
    "q": "Which of the following is NOT true about function declarations in C?",
    "o": [
      "They must include return type and parameter types",
      "They can be omitted if the function is defined before use",
      "They help with type checking",
      "They allocate memory for function code"
    ]
  },
  {
    "q": "Which of the following is a valid function definition in C that returns a float and takes no parameters?",
    "o": [
      "float getValue() { return 3.14; }",
      "float getValue[] { return 3.14; }",
      "float = getValue() => 3.14;",
      "function float getValue() { return 3.14; }"
    ]
  },
  {
    "q": "What is the output of the following program?",
    "c": "#include <stdio.h>\nint addOne(int n) {\n    n = n + 1;\n    return n;\n}\nint main() {\n    int a = 5;\n    addOne(a);\n    printf(\"%d\", a);\n    return 0;\n}",
    "o": [
      "5",
      "6",
      "0",
      "Compilation Error"
    ]
  },
  {
    "q": "Which of the following demonstrates a call by reference using pointers?",
    "o": [
      "void swap(int *a, int *b);",
      "void swap(int a, int b);",
      "void swap(int &a, int &b);",
      "int *swap(int a, int b);"
    ]
  },
  {
    "q": "What will this code output?",
    "c": "#include <stdio.h>\nvoid doubleVal(int *p) {\n    *p = *p * 2;\n}\nint main() {\n    int x = 4;\n    doubleVal(&x);\n    printf(\"%d\", x);\n    return 0;\n}",
    "o": [
      "8",
      "4",
      "0",
      "Error"
    ]
  },
  {
    "q": "Which keyword makes a global variable visible to other files?",
    "o": [
      "extern",
      "static",
      "register",
      "local"
    ]
  },
  {
    "q": "What is the output of the recursive function below?",
    "c": "#include <stdio.h>\nint countDown(int n) {\n    if (n == 0) return 0;\n    printf(\"%d \", n);\n    return countDown(n - 1);\n}\nint main() {\n    countDown(3);\n    return 0;\n}",
    "o": [
      "3 2 1 ",
      "1 2 3 ",
      "0 1 2 3 ",
      "3 3 3 "
    ]
  },
  {
    "q": "Which statement about static variables is true?",
    "o": [
      "They retain their value between function calls",
      "They are automatically destroyed after a function returns",
      "They are stored in the CPU register",
      "They are reinitialized each time the function is called"
    ]
  },
  {
    "q": "What is the main purpose of declaring a function prototype?",
    "o": [
      "To inform the compiler about the function’s return type and parameters",
      "To define the logic of the function",
      "To initialize the function",
      "To allocate memory for the function"
    ]
  },
  {
    "q": "What will this recursive function print?",
    "c": "#include <stdio.h>\nvoid printEven(int n) {\n    if (n > 10) return;\n    if (n % 2 == 0) printf(\"%d \", n);\n    printEven(n + 1);\n}\nint main() {\n    printEven(6);\n    return 0;\n}",
    "o": [
      "6 8 10 ",
      "6 7 8 9 10 ",
      "6 7 8 9 10 11 ",
      "Only 6"
    ]
  },
  {
    "q": "Which storage class defines a variable that is local to a block but initialized only once?",
    "o": [
      "static",
      "auto",
      "extern",
      "dynamic"
    ]
  },
  {
    "q": "Which of the following is a valid function declaration in C?",
    "o": [
      "int multiply(int a, int b);",
      "int multiply(a, b);",
      "multiply(int a, int b) -> int;",
      "function int multiply(int, int);"
    ]
  },
  {
    "q": "What will be the output of the following program?",
    "c": "#include <stdio.h>\nint increment(int x) {\n    return x + 1;\n}\nint main() {\n    int num = 10;\n    increment(num);\n    printf(\"%d\", num);\n    return 0;\n}",
    "o": [
      "10",
      "11",
      "0",
      "Error"
    ]
  },
  {
    "q": "Which of the following defines a call by reference function in C?",
    "o": [
      "void swap(int *a, int *b);",
      "void swap(int a, int b);",
      "void swap(int &a, int &b);",
      "int *swap(int a, int b);"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "#include <stdio.h>\nvoid updateValue(int *x) {\n    *x = 100;\n}\nint main() {\n    int a = 50;\n    updateValue(&a);\n    printf(\"%d\", a);\n    return 0;\n}",
    "o": [
      "100",
      "50",
      "0",
      "Error"
    ]
  },
  {
    "q": "Which storage class limits the scope of a variable to the function in which it is declared?",
    "o": [
      "auto",
      "register",
      "extern",
      "static"
    ]
  },
  {
    "q": "What is the output of the following recursive function?",
    "c": "#include <stdio.h>\nint factorial(int n) {\n    if (n == 0) return 1;\n    return n * factorial(n - 1);\n}\nint main() {\n    printf(\"%d\", factorial(5));\n    return 0;\n}",
    "o": [
      "120",
      "60",
      "25",
      "5"
    ]
  },
  {
    "q": "What is a characteristic of recursive functions?",
    "o": [
      "They call themselves with modified parameters",
      "They always execute faster than loops",
      "They are used only for mathematical operations",
      "They must have a return type of int"
    ]
  },
  {
    "q": "Which of the following storage classes allows a variable to be visible across all files in a program?",
    "o": [
      "extern",
      "static",
      "auto",
      "register"
    ]
  },
  {
    "q": "What will the following code print?",
    "c": "#include <stdio.h>\nvoid increment(int *p) {\n    (*p)++;\n}\nint main() {\n    int num = 2;\n    increment(&num);\n    increment(&num);\n    printf(\"%d\", num);\n    return 0;\n}",
    "o": [
      "4",
      "2",
      "3",
      "5"
    ]
  },
  {
    "q": "Which of the following is a valid function declaration in C for a function that returns an integer and takes an integer as an argument?",
    "o": [
      "int square(int n);",
      "int square(n);",
      "square(int n) -> int;",
      "function int square(int n);"
    ]
  },
  {
    "q": "Which of the following is a correct function declaration in C that returns a character?",
    "o": [
      "char getChar();",
      "char getChar(int);",
      "function char getChar();",
      "char getChar[];"
    ]
  },
  {
    "q": "What will the following program output?",
    "c": "#include <stdio.h>\nint multiply(int a, int b) {\n    return a * b;\n}\nint main() {\n    int result = multiply(2, 3);\n    printf(\"%d\", result);\n    return 0;\n}",
    "o": [
      "6",
      "5",
      "0",
      "3"
    ]
  },
  {
    "q": "What does a function that uses call by value do?",
    "o": [
      "It works with a copy of the argument passed",
      "It works with the original value of the argument",
      "It directly modifies the argument value",
      "It passes a pointer to the argument"
    ]
  },
  {
    "q": "What is the output of this code snippet using call by reference?",
    "c": "#include <stdio.h>\nvoid addTen(int *x) {\n    *x += 10;\n}\nint main() {\n    int num = 5;\n    addTen(&num);\n    printf(\"%d\", num);\n    return 0;\n}",
    "o": [
      "15",
      "5",
      "10",
      "Error"
    ]
  },
  {
    "q": "Which storage class is used to make a variable retain its value across multiple function calls?",
    "o": [
      "static",
      "auto",
      "extern",
      "register"
    ]
  },
  {
    "q": "What will the following recursive function return?",
    "c": "#include <stdio.h>\nint power(int base, int exp) {\n    if (exp == 0) return 1;\n    return base * power(base, exp - 1);\n}\nint main() {\n    printf(\"%d\", power(3, 2));\n    return 0;\n}",
    "o": [
      "9",
      "6",
      "3",
      "1"
    ]
  },
  {
    "q": "Which of the following is true about recursive functions?",
    "o": [
      "They call themselves with a modified argument",
      "They always perform better than iterative solutions",
      "They always return an integer value",
      "They cannot return a value"
    ]
  },
  {
    "q": "Which storage class limits the visibility of a variable to the current block of code?",
    "o": [
      "auto",
      "extern",
      "register",
      "static"
    ]
  },
  {
    "q": "What will this code output?",
    "c": "#include <stdio.h>\nvoid printEven(int n) {\n    if (n % 2 == 0) printf(\"%d \", n);\n    if (n < 10) printEven(n + 1);\n}\nint main() {\n    printEven(3);\n    return 0;\n}",
    "o": [
      "4 6 8 10 ",
      "3 5 7 9 10 ",
      "4 6 8 ",
      "Only 4"
    ]
  },
  {
    "q": "Which keyword is used to define a variable that retains its value between function calls, but has local scope?",
    "o": [
      "static",
      "extern",
      "auto",
      "register"
    ]
  },
  {
    "q": "Which of the following is the correct syntax to define a function that returns an integer and accepts two integers as arguments?",
    "o": [
      "int add(int a, int b);",
      "int add(a, b) int;",
      "function int add(int a, int b);",
      "int add(int a, b) -> int;"
    ]
  },
  {
    "q": "What will this code output?",
    "c": "#include <stdio.h>\nint multiply(int x, int y) {\n    return x * y;\n}\nint main() {\n    int result = multiply(3, 4);\n    printf(\"%d\", result);\n    return 0;\n}",
    "o": [
      "12",
      "7",
      "14",
      "Error"
    ]
  },
  {
    "q": "Which of the following describes call by reference?",
    "o": [
      "The function operates on the original argument by passing its memory address",
      "The function operates on a copy of the argument",
      "The function returns a reference to the argument",
      "The function works only with pointers"
    ]
  },
  {
    "q": "What will this program output using call by reference?",
    "c": "#include <stdio.h>\nvoid setZero(int *p) {\n    *p = 0;\n}\nint main() {\n    int a = 5;\n    setZero(&a);\n    printf(\"%d\", a);\n    return 0;\n}",
    "o": [
      "0",
      "5",
      "1",
      "Error"
    ]
  },
  {
    "q": "Which storage class is used to define variables that are visible across different functions but are initialized only once?",
    "o": [
      "static",
      "auto",
      "register",
      "extern"
    ]
  },
  {
    "q": "What will the following recursive function return?",
    "c": "#include <stdio.h>\nint fibonacci(int n) {\n    if (n <= 1) return n;\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\nint main() {\n    printf(\"%d\", fibonacci(5));\n    return 0;\n}",
    "o": [
      "5",
      "8",
      "3",
      "0"
    ]
  },
  {
    "q": "Which statement is true about recursive functions?",
    "o": [
      "They call themselves with a modified argument to break the problem down",
      "They must have a base case to terminate",
      "They are always more efficient than loops",
      "They are only used for mathematical functions"
    ]
  },
  {
    "q": "What is the scope of a variable declared as 'register' in C?",
    "o": [
      "The scope is local to the block of code where it is declared, but it is stored in a CPU register for faster access",
      "The scope is global, but it resides in the stack memory",
      "The scope is limited to the function in which it is declared",
      "The scope is throughout the entire program"
    ]
  },
  {
    "q": "What will the following program print?",
    "c": "#include <stdio.h>\nvoid display() {\n    static int counter = 0;\n    printf(\"%d \", counter);\n    counter++;\n}\nint main() {\n    display();\ndisplay();\ndisplay();\n    return 0;\n}",
    "o": [
      "0 1 2 ",
      "0 0 0 ",
      "1 1 1 ",
      "Error"
    ]
  },
  {
    "q": "Which of the following is NOT a valid storage class in C?",
    "o": [
      "dynamic",
      "static",
      "auto",
      "extern"
    ]
  },
  {
    "q": "Which of the following function declarations is correct in C?",
    "o": [
      "void printMessage();",
      "printMessage() void;",
      "void printMessage[];",
      "function void printMessage();"
    ]
  },
  {
    "q": "What will the following program output?",
    "c": "#include <stdio.h>\nint sum(int a, int b) {\n    return a + b;\n}\nint main() {\n    int result = sum(5, 7);\n    printf(\"%d\", result);\n    return 0;\n}",
    "o": [
      "12",
      "5",
      "7",
      "Error"
    ]
  },
  {
    "q": "What is the difference between call by value and call by reference in C?",
    "o": [
      "Call by value passes a copy of the argument, whereas call by reference passes the address of the argument",
      "Call by value passes the address of the argument, whereas call by reference passes a copy of the argument",
      "Call by value directly modifies the argument, whereas call by reference does not",
      "Call by value does not return anything, whereas call by reference returns a value"
    ]
  },
  {
    "q": "What will this program output?",
    "c": "#include <stdio.h>\nvoid modifyValue(int *p) {\n    *p = 100;\n}\nint main() {\n    int a = 10;\n    modifyValue(&a);\n    printf(\"%d\", a);\n    return 0;\n}",
    "o": [
      "100",
      "10",
      "0",
      "Error"
    ]
  },
  {
    "q": "Which storage class is used to define variables that are only visible within the block in which they are declared, and their value is not retained between calls?",
    "o": [
      "auto",
      "extern",
      "static",
      "register"
    ]
  },
  {
    "q": "What will the following recursive function return?",
    "c": "#include <stdio.h>\nint factorial(int n) {\n    if (n == 0) return 1;\n    return n * factorial(n - 1);\n}\nint main() {\n    printf(\"%d\", factorial(4));\n    return 0;\n}",
    "o": [
      "24",
      "12",
      "6",
      "4"
    ]
  },
  {
    "q": "Which of the following best describes recursion?",
    "o": [
      "A function that calls itself to solve a problem",
      "A function that always returns a value of type int",
      "A function that cannot take parameters",
      "A function that cannot use variables"
    ]
  },
  {
    "q": "Which storage class allows a variable to be accessible in multiple files in a program?",
    "o": [
      "extern",
      "auto",
      "register",
      "static"
    ]
  },
  {
    "q": "What will this recursive function output?",
    "c": "#include <stdio.h>\nvoid printNumbers(int n) {\n    if (n <= 0) return;\n    printNumbers(n - 1);\n    printf(\"%d \", n);\n}\nint main() {\n    printNumbers(3);\n    return 0;\n}",
    "o": [
      "1 2 3 ",
      "3 2 1 ",
      "0 1 2 3 ",
      "1 2 3 4"
    ]
  },
  {
    "q": "What is the scope of a variable declared as 'register' in C?",
    "o": [
      "The scope is local to the block, and it is stored in a CPU register for faster access",
      "The scope is global, but it resides in memory",
      "The scope is limited to the function in which it is declared",
      "The scope is throughout the entire program"
    ]
  },
  {
    "q": "Which of the following is a valid function definition in C?",
    "o": [
      "int add(int a, int b) { return a + b; }",
      "function int add(int a, int b) { return a + b; }",
      "int add(int a, b) { return a + b; }",
      "int add(a, b) { return a + b; }"
    ]
  },
  {
    "q": "What will the following program output?",
    "c": "#include <stdio.h>\nint divide(int a, int b) {\n    return a / b;\n}\nint main() {\n    int result = divide(10, 2);\n    printf(\"%d\", result);\n    return 0;\n}",
    "o": [
      "5",
      "2",
      "10",
      "Error"
    ]
  },
  {
    "q": "What is the difference between call by value and call by reference in terms of memory usage?",
    "o": [
      "Call by reference uses more memory because it passes a pointer to the function",
      "Call by value uses more memory because it creates a copy of the argument",
      "Both use the same amount of memory",
      "Call by value does not use any memory"
    ]
  },
  {
    "q": "What will this code output when using call by reference?",
    "c": "#include <stdio.h>\nvoid updateValue(int *ptr) {\n    *ptr = 50;\n}\nint main() {\n    int num = 30;\n    updateValue(&num);\n    printf(\"%d\", num);\n    return 0;\n}",
    "o": [
      "50",
      "30",
      "Error",
      "80"
    ]
  },
  {
    "q": "Which storage class makes a variable visible to all functions across files?",
    "o": [
      "extern",
      "auto",
      "register",
      "static"
    ]
  },
  {
    "q": "What will the following recursive function return?",
    "c": "#include <stdio.h>\nint power(int base, int exp) {\n    if (exp == 0) return 1;\n    return base * power(base, exp - 1);\n}\nint main() {\n    printf(\"%d\", power(2, 3));\n    return 0;\n}",
    "o": [
      "8",
      "6",
      "4",
      "2"
    ]
  },
  {
    "q": "Which of the following is NOT a characteristic of recursion?",
    "o": [
      "Recursion requires a base case to prevent infinite calls",
      "Recursion uses a stack for function calls",
      "Recursive functions always return an integer",
      "Recursive functions can solve problems that are easier to break down into smaller sub-problems"
    ]
  },
  {
    "q": "Which storage class in C allows a variable to retain its value between function calls but is local to the function?",
    "o": [
      "static",
      "auto",
      "extern",
      "register"
    ]
  },
  {
    "q": "What will the following code output?",
    "c": "#include <stdio.h>\nvoid printNumbers(int n) {\n    if (n <= 0) return;\n    printf(\"%d \", n);\n    printNumbers(n - 1);\n}\nint main() {\n    printNumbers(4);\n    return 0;\n}",
    "o": [
      "4 3 2 1 ",
      "1 2 3 4 ",
      "4 3 2 ",
      "1 2 3 "
    ]
  },
  {
    "q": "Which of the following keywords is used to declare a variable that is stored in a register and has a limited scope?",
    "o": [
      "register",
      "auto",
      "static",
      "extern"
    ]
  },
  {
    "q": "Which of the following is a valid function prototype in C?",
    "o": [
      "int multiply(int a, int b);",
      "multiply(int a, int b) int;",
      "int multiply(a, b) { return a * b; }",
      "int multiply(int a, b) { return a * b; }"
    ]
  },
  {
    "q": "What will the following code output?",
    "c": "#include <stdio.h>\nint subtract(int x, int y) {\n    return x - y;\n}\nint main() {\n    int result = subtract(15, 5);\n    printf(\"%d\", result);\n    return 0;\n}",
    "o": [
      "10",
      "5",
      "20",
      "Error"
    ]
  },
  {
    "q": "What happens in call by reference in C?",
    "o": [
      "The function operates on the original value by passing the memory address",
      "The function operates on a copy of the argument",
      "The function creates a new copy of the argument and modifies it",
      "The function cannot modify the argument"
    ]
  },
  {
    "q": "What will this code output using call by reference?",
    "c": "#include <stdio.h>\nvoid increment(int *p) {\n    (*p)++;\n}\nint main() {\n    int num = 10;\n    increment(&num);\n    printf(\"%d\", num);\n    return 0;\n}",
    "o": [
      "11",
      "10",
      "0",
      "Error"
    ]
  },
  {
    "q": "Which storage class ensures that a variable is initialized only once and retains its value across function calls?",
    "o": [
      "static",
      "auto",
      "register",
      "extern"
    ]
  },
  {
    "q": "What will the following recursive function return?",
    "c": "#include <stdio.h>\nint sum(int n) {\n    if (n == 0) return 0;\n    return n + sum(n - 1);\n}\nint main() {\n    printf(\"%d\", sum(4));\n    return 0;\n}",
    "o": [
      "10",
      "6",
      "4",
      "0"
    ]
  },
  {
    "q": "Which statement is true about recursion?",
    "o": [
      "The function calls itself with a modified argument to solve the problem step by step",
      "Recursion always uses more memory than iteration",
      "Recursive functions must have a fixed number of parameters",
      "Recursion always produces a result faster than iteration"
    ]
  },
  {
    "q": "Which of the following storage classes is used to define variables that exist only within a single function and are not visible to other functions?",
    "o": [
      "auto",
      "register",
      "static",
      "extern"
    ]
  },
  {
    "q": "What will this recursive function print?",
    "c": "#include <stdio.h>\nvoid printReverse(int n) {\n    if (n <= 0) return;\n    printf(\"%d \", n);\n    printReverse(n - 1);\n}\nint main() {\n    printReverse(3);\n    return 0;\n}",
    "o": [
      "3 2 1 ",
      "1 2 3 ",
      "1 2 3 4",
      "Error"
    ]
  },
  {
    "q": "Which storage class in C allows a variable to retain its value between function calls, while limiting its scope to the function?",
    "o": [
      "static",
      "auto",
      "register",
      "extern"
    ]
  },
  {
    "q": "Which of the following is the correct way to declare a function in C that returns a float and takes two integers as arguments?",
    "o": [
      "float divide(int a, int b);",
      "float divide(a, b) int;",
      "float divide(int a, b) { return a / b; }",
      "function float divide(int a, int b);"
    ]
  },
  {
    "q": "What will the following code output?",
    "c": "#include <stdio.h>\nint add(int x, int y) {\n    return x + y;\n}\nint main() {\n    int result = add(6, 4);\n    printf(\"%d\", result);\n    return 0;\n}",
    "o": [
      "10",
      "6",
      "4",
      "Error"
    ]
  },
  {
    "q": "What is the main advantage of using call by reference over call by value?",
    "o": [
      "Call by reference allows modifications to the original variable",
      "Call by reference passes a copy of the argument, making it more memory efficient",
      "Call by reference always results in faster code",
      "Call by reference is more secure than call by value"
    ]
  },
  {
    "q": "What will this program output when using call by reference?",
    "c": "#include <stdio.h>\nvoid updateValue(int *ptr) {\n    *ptr = 42;\n}\nint main() {\n    int num = 25;\n    updateValue(&num);\n    printf(\"%d\", num);\n    return 0;\n}",
    "o": [
      "42",
      "25",
      "50",
      "Error"
    ]
  },
  {
    "q": "Which storage class allows a variable to be shared across multiple files in C?",
    "o": [
      "extern",
      "static",
      "auto",
      "register"
    ]
  },
  {
    "q": "What will the following recursive function return?",
    "c": "#include <stdio.h>\nint factorial(int n) {\n    if (n == 0) return 1;\n    return n * factorial(n - 1);\n}\nint main() {\n    printf(\"%d\", factorial(5));\n    return 0;\n}",
    "o": [
      "120",
      "24",
      "5",
      "0"
    ]
  },
  {
    "q": "Which of the following is true about recursion?",
    "o": [
      "Recursion works by solving smaller sub-problems and combining their results",
      "Recursion is always more efficient than iteration",
      "Recursion requires no base case to work properly",
      "Recursive functions cannot call other functions"
    ]
  },
  {
    "q": "Which storage class ensures that a variable is initialized only once and its value is retained between function calls?",
    "o": [
      "static",
      "auto",
      "register",
      "extern"
    ]
  },
  {
    "q": "What will the following code output?",
    "c": "#include <stdio.h>\nvoid printNum(int n) {\n    if (n == 0) return;\n    printNum(n - 1);\n    printf(\"%d \", n);\n}\nint main() {\n    printNum(3);\n    return 0;\n}",
    "o": [
      "1 2 3 ",
      "3 2 1 ",
      "3 2 1 0 ",
      "1 2 3 4"
    ]
  },
  {
    "q": "Which of the following storage classes is used to define variables that exist within a specific block and do not retain values after the block ends?",
    "o": [
      "auto",
      "static",
      "extern",
      "register"
    ]
  },
  {
    "q": "Which of the following is a valid function definition in C?",
    "o": [
      "int multiply(int a, int b) { return a * b; }",
      "function multiply(int a, b) { return a * b; }",
      "int multiply(int a, int b); { return a * b; }",
      "multiply(int a, int b) { return a * b; }"
    ]
  },
  {
    "q": "What will the following code output?",
    "c": "#include <stdio.h>\nint subtract(int a, int b) {\n    return a - b;\n}\nint main() {\n    int result = subtract(8, 3);\n    printf(\"%d\", result);\n    return 0;\n}",
    "o": [
      "5",
      "8",
      "3",
      "Error"
    ]
  },
  {
    "q": "Which of the following statements is correct about call by reference in C?",
    "o": [
      "The function receives the address of the argument, allowing modifications to the original value",
      "The function receives a copy of the argument, leaving the original unchanged",
      "The function cannot modify the argument passed to it",
      "Call by reference is slower than call by value"
    ]
  },
  {
    "q": "What will this program output using call by reference?",
    "c": "#include <stdio.h>\nvoid updateValue(int *ptr) {\n    *ptr = 100;\n}\nint main() {\n    int num = 45;\n    updateValue(&num);\n    printf(\"%d\", num);\n    return 0;\n}",
    "o": [
      "100",
      "45",
      "200",
      "Error"
    ]
  },
  {
    "q": "Which storage class is used for a variable that is local to a function but retains its value between function calls?",
    "o": [
      "static",
      "auto",
      "extern",
      "register"
    ]
  },
  {
    "q": "What will the following recursive function return?",
    "c": "#include <stdio.h>\nint factorial(int n) {\n    if (n == 0) return 1;\n    return n * factorial(n - 1);\n}\nint main() {\n    printf(\"%d\", factorial(6));\n    return 0;\n}",
    "o": [
      "720",
      "120",
      "6",
      "1"
    ]
  },
  {
    "q": "What is the base case in recursion?",
    "o": [
      "The condition that stops further recursive calls",
      "The initial value passed to the recursive function",
      "The return value of the recursive function",
      "The maximum number of recursive calls allowed"
    ]
  },
  {
    "q": "Which storage class is used for variables that are visible to all functions and retain their values across the program?",
    "o": [
      "extern",
      "auto",
      "static",
      "register"
    ]
  },
  {
    "q": "What will the following recursive function output?",
    "c": "#include <stdio.h>\nvoid printNumbers(int n) {\n    if (n == 0) return;\n    printf(\"%d \", n);\n    printNumbers(n - 1);\n}\nint main() {\n    printNumbers(4);\n    return 0;\n}",
    "o": [
      "4 3 2 1 ",
      "1 2 3 4 ",
      "4 3 2 ",
      "1 2 3"
    ]
  },
  {
    "q": "Which of the following storage classes limits the variable's scope to the block in which it is defined and stores it in the CPU register?",
    "o": [
      "register",
      "auto",
      "static",
      "extern"
    ]
  },
  {
    "q": "Which of the following is a valid function declaration in C?",
    "o": [
      "int multiply(int a, int b);",
      "multiply(int a, int b) int;",
      "int multiply(int a, b);",
      "int multiply(a, b) { return a * b; }"
    ]
  },
  {
    "q": "What will the following code output?",
    "c": "#include <stdio.h>\nint add(int a, int b) {\n    return a + b;\n}\nint main() {\n    int result = add(12, 8);\n    printf(\"%d\", result);\n    return 0;\n}",
    "o": [
      "20",
      "12",
      "8",
      "Error"
    ]
  },
  {
    "q": "What is a primary advantage of using call by reference in C?",
    "o": [
      "It allows modifications to the original variable",
      "It copies the argument's value, preventing any changes to the original variable",
      "It provides faster function execution than call by value",
      "It prevents any changes to global variables"
    ]
  },
  {
    "q": "What will this program output when using call by reference?",
    "c": "#include <stdio.h>\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"%d %d\", x, y);\n    return 0;\n}",
    "o": [
      "10 5",
      "5 10",
      "Error",
      "50 50"
    ]
  },
  {
    "q": "Which storage class is used for variables that are only accessible within the function they are defined in and are automatically created?",
    "o": [
      "auto",
      "extern",
      "register",
      "static"
    ]
  },
  {
    "q": "What will the following recursive function return?",
    "c": "#include <stdio.h>\nint fibonacci(int n) {\n    if (n <= 1) return n;\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\nint main() {\n    printf(\"%d\", fibonacci(6));\n    return 0;\n}",
    "o": [
      "8",
      "5",
      "13",
      "3"
    ]
  },
  {
    "q": "What is the base case in a recursive function?",
    "o": [
      "A condition that stops further recursive calls and returns a result",
      "The first value passed to the recursive function",
      "The point where the function calls itself",
      "A loop that runs during recursion"
    ]
  },
  {
    "q": "Which storage class limits the scope of a variable to the file in which it is declared, and its value persists across function calls?",
    "o": [
      "static",
      "extern",
      "auto",
      "register"
    ]
  },
  {
    "q": "What will the following code output when using recursion?",
    "c": "#include <stdio.h>\nvoid printReverse(int n) {\n    if (n == 0) return;\n    printReverse(n - 1);\n    printf(\"%d \", n);\n}\nint main() {\n    printReverse(4);\n    return 0;\n}",
    "o": [
      "1 2 3 4",
      "4 3 2 1",
      "4 3 2",
      "Error"
    ]
  },
  {
    "q": "Which storage class in C allows a variable to be used across multiple files but retains its value between function calls?",
    "o": [
      "extern",
      "auto",
      "register",
      "static"
    ]
  },
  {
    "q": "Which of the following is the correct way to declare a function in C that takes two integers as arguments and returns an integer?",
    "o": [
      "int add(int a, int b);",
      "add(int a, int b) int;",
      "int add(a, b) { return a + b; }",
      "function int add(int a, b);"
    ]
  },
  {
    "q": "What will the following code output?",
    "c": "#include <stdio.h>\nint multiply(int x, int y) {\n    return x * y;\n}\nint main() {\n    int result = multiply(4, 5);\n    printf(\"%d\", result);\n    return 0;\n}",
    "o": [
      "20",
      "9",
      "Error",
      "45"
    ]
  },
  {
    "q": "What is the main advantage of using call by reference in C?",
    "o": [
      "It allows modifications to the original variable",
      "It prevents the function from modifying the original variable",
      "It is faster than call by value",
      "It reduces memory usage"
    ]
  },
  {
    "q": "What will the following code output when using call by reference?",
    "c": "#include <stdio.h>\nvoid setValue(int *x) {\n    *x = 25;\n}\nint main() {\n    int num = 10;\n    setValue(&num);\n    printf(\"%d\", num);\n    return 0;\n}",
    "o": [
      "25",
      "10",
      "Error",
      "5"
    ]
  },
  {
    "q": "Which storage class is used to define variables that are local to a function but persist across function calls?",
    "o": [
      "static",
      "auto",
      "extern",
      "register"
    ]
  },
  {
    "q": "What will the following recursive function return?",
    "c": "#include <stdio.h>\nint factorial(int n) {\n    if (n == 1) return 1;\n    return n * factorial(n - 1);\n}\nint main() {\n    printf(\"%d\", factorial(4));\n    return 0;\n}",
    "o": [
      "24",
      "6",
      "4",
      "1"
    ]
  },
  {
    "q": "Which of the following statements is true about recursion?",
    "o": [
      "Recursion reduces a problem to smaller sub-problems",
      "Recursion is faster than iteration for all cases",
      "Recursive functions do not require a base case",
      "Recursion is always less memory efficient than iteration"
    ]
  },
  {
    "q": "Which storage class in C makes a variable accessible to all functions within the program?",
    "o": [
      "extern",
      "auto",
      "register",
      "static"
    ]
  },
  {
    "q": "What will the following recursive function print?",
    "c": "#include <stdio.h>\nvoid printNumbers(int n) {\n    if (n == 0) return;\n    printf(\"%d \", n);\n    printNumbers(n - 1);\n}\nint main() {\n    printNumbers(3);\n    return 0;\n}",
    "o": [
      "3 2 1",
      "1 2 3",
      "3 2 1 0",
      "1 2 3 4"
    ]
  },
  {
    "q": "Which of the following storage classes ensures that a variable's value is retained throughout the program execution?",
    "o": [
      "static",
      "auto",
      "extern",
      "register"
    ]
  },
  {
    "q": "Which of the following function declarations is correct in C?",
    "o": [
      "void printMessage();",
      "printMessage(void);",
      "void printMessage(int);",
      "function void printMessage();"
    ]
  },
  {
    "q": "What will the following code output?",
    "c": "#include <stdio.h>\nint add(int a, int b) {\n    return a + b;\n}\nint main() {\n    int result = add(2, 3);\n    printf(\"%d\", result);\n    return 0;\n}",
    "o": [
      "5",
      "2",
      "3",
      "Error"
    ]
  },
  {
    "q": "What is the major disadvantage of call by value in C?",
    "o": [
      "It cannot modify the original variable",
      "It is less memory efficient",
      "It leads to faster code execution",
      "It prevents recursion"
    ]
  },
  {
    "q": "What will the following code output using call by reference?",
    "c": "#include <stdio.h>\nvoid modifyValue(int *num) {\n    *num = *num + 10;\n}\nint main() {\n    int num = 5;\n    modifyValue(&num);\n    printf(\"%d\", num);\n    return 0;\n}",
    "o": [
      "15",
      "5",
      "10",
      "Error"
    ]
  },
  {
    "q": "Which storage class is used for variables that are visible only within the function they are declared in and are automatically allocated?",
    "o": [
      "auto",
      "register",
      "static",
      "extern"
    ]
  },
  {
    "q": "What will the following recursive function return?",
    "c": "#include <stdio.h>\nint sum(int n) {\n    if (n == 0) return 0;\n    return n + sum(n - 1);\n}\nint main() {\n    printf(\"%d\", sum(4));\n    return 0;\n}",
    "o": [
      "10",
      "4",
      "0",
      "Error"
    ]
  },
  {
    "q": "Which of the following statements about recursion is correct?",
    "o": [
      "Recursion involves a function calling itself",
      "Recursion is faster than iteration for all cases",
      "Recursive functions do not need a base case",
      "Recursion is used only for simple problems"
    ]
  },
  {
    "q": "Which storage class in C makes a variable visible only within the file it is declared in?",
    "o": [
      "static",
      "register",
      "extern",
      "auto"
    ]
  },
  {
    "q": "What will the following code output when using recursion?",
    "c": "#include <stdio.h>\nvoid printNumbers(int n) {\n    if (n == 0) return;\n    printNumbers(n - 1);\n    printf(\"%d \", n);\n}\nint main() {\n    printNumbers(3);\n    return 0;\n}",
    "o": [
      "1 2 3",
      "3 2 1",
      "3 2 1 0",
      "1 2 3 4"
    ]
  },
  {
    "q": "Which of the following storage classes is used for variables that are retained across function calls and initialized only once?",
    "o": [
      "static",
      "extern",
      "auto",
      "register"
    ]
  },
  {
    "q": "Which of the following is a correct function definition in C?",
    "o": [
      "int add(int a, int b) { return a + b; }",
      "function add(int a, int b) { return a + b; }",
      "int add(a, b) { return a + b; }",
      "void add(int a, int b) { return a + b; }"
    ]
  },
  {
    "q": "What will the following code output?",
    "c": "#include <stdio.h>\nint multiply(int x, int y) {\n    return x * y;\n}\nint main() {\n    int result = multiply(3, 7);\n    printf(\"%d\", result);\n    return 0;\n}",
    "o": [
      "21",
      "10",
      "7",
      "Error"
    ]
  },
  {
    "q": "Which of the following statements is true about call by value in C?",
    "o": [
      "The function works with a copy of the argument, leaving the original variable unchanged",
      "The function modifies the original argument passed",
      "It is more efficient than call by reference",
      "It requires pointers to work"
    ]
  },
  {
    "q": "What will the following code output when using call by reference?",
    "c": "#include <stdio.h>\nvoid increment(int *num) {\n    (*num)++;\n}\nint main() {\n    int num = 10;\n    increment(&num);\n    printf(\"%d\", num);\n    return 0;\n}",
    "o": [
      "11",
      "10",
      "1",
      "Error"
    ]
  },
  {
    "q": "Which storage class is used for variables that are only visible within the block in which they are declared and cannot be used outside?",
    "o": [
      "auto",
      "static",
      "extern",
      "register"
    ]
  },
  {
    "q": "What will the following recursive function return?",
    "c": "#include <stdio.h>\nint power(int base, int exp) {\n    if (exp == 0) return 1;\n    return base * power(base, exp - 1);\n}\nint main() {\n    printf(\"%d\", power(2, 3));\n    return 0;\n}",
    "o": [
      "8",
      "6",
      "3",
      "5"
    ]
  },
  {
    "q": "Which of the following is true about recursion?",
    "o": [
      "A function can call itself",
      "Recursion requires iteration",
      "Recursive functions must have a return value",
      "Recursion is always more efficient than iteration"
    ]
  },
  {
    "q": "Which storage class makes the variable's value persist between function calls and is only visible within the function?",
    "o": [
      "static",
      "register",
      "extern",
      "auto"
    ]
  },
  {
    "q": "What will the following code output using recursion?",
    "c": "#include <stdio.h>\nvoid printNumbers(int n) {\n    if (n > 0) {\n        printNumbers(n - 1);\n        printf(\"%d \", n);\n    }\n}\nint main() {\n    printNumbers(3);\n    return 0;\n}",
    "o": [
      "1 2 3",
      "3 2 1",
      "3 2 1 0",
      "1 2 3 4"
    ]
  },
  {
    "q": "Which of the following storage classes in C is used for variables that are shared among functions in different files?",
    "o": [
      "extern",
      "auto",
      "static",
      "register"
    ]
  },
  {
    "q": "Which of the following is a valid function prototype in C?",
    "o": [
      "int multiply(int a, int b);",
      "multiply(int a, int b);",
      "int multiply(a, b) {}",
      "int multiply(a, b);"
    ]
  },
  {
    "q": "What will the following code output?",
    "c": "#include <stdio.h>\nint subtract(int x, int y) {\n    return x - y;\n}\nint main() {\n    int result = subtract(10, 3);\n    printf(\"%d\", result);\n    return 0;\n}",
    "o": [
      "7",
      "3",
      "10",
      "Error"
    ]
  },
  {
    "q": "What happens when a function in C uses call by value?",
    "o": [
      "The function operates on a copy of the argument, not modifying the original value",
      "The function can modify the original value",
      "The function is unable to handle complex data types",
      "The function modifies both the argument and the local variable"
    ]
  },
  {
    "q": "What will the following code output using call by reference?",
    "c": "#include <stdio.h>\nvoid doubleValue(int *a) {\n    *a = *a * 2;\n}\nint main() {\n    int x = 5;\n    doubleValue(&x);\n    printf(\"%d\", x);\n    return 0;\n}",
    "o": [
      "10",
      "5",
      "Error",
      "50"
    ]
  },
  {
    "q": "Which storage class is used for variables that are local to a function and do not retain their value between calls?",
    "o": [
      "auto",
      "static",
      "register",
      "extern"
    ]
  },
  {
    "q": "What will the following recursive function return?",
    "c": "#include <stdio.h>\nint fibonacci(int n) {\n    if (n <= 1) return n;\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\nint main() {\n    printf(\"%d\", fibonacci(5));\n    return 0;\n}",
    "o": [
      "5",
      "8",
      "3",
      "13"
    ]
  },
  {
    "q": "Which of the following is true about recursion?",
    "o": [
      "A function that calls itself is known as recursion",
      "Recursion is always more efficient than iteration",
      "Recursive functions do not require a base case",
      "Recursive functions always use less memory than loops"
    ]
  },
  {
    "q": "Which storage class allows a variable to be accessed by all functions within a program but is not automatically initialized?",
    "o": [
      "extern",
      "auto",
      "register",
      "static"
    ]
  },
  {
    "q": "What will the following code output when using recursion?",
    "c": "#include <stdio.h>\nvoid countdown(int n) {\n    if (n == 0) return;\n    printf(\"%d \", n);\n    countdown(n - 1);\n}\nint main() {\n    countdown(4);\n    return 0;\n}",
    "o": [
      "4 3 2 1",
      "1 2 3 4",
      "4 3 2 1 0",
      "1 2 3"
    ]
  },
  {
    "q": "Which of the following storage classes in C allows a variable to be used by functions across different files?",
    "o": [
      "extern",
      "auto",
      "register",
      "static"
    ]
  },
  {
    "q": "Which of the following is the correct syntax for defining a function in C that returns an integer and takes two integer parameters?",
    "o": [
      "int add(int a, int b) { return a + b; }",
      "add(int a, int b) { return a + b; }",
      "int add(a, b) { return a + b; }",
      "int add(a, b): return a + b;"
    ]
  },
  {
    "q": "What will the following code output?",
    "c": "#include <stdio.h>\nint divide(int x, int y) {\n    return x / y;\n}\nint main() {\n    int result = divide(10, 2);\n    printf(\"%d\", result);\n    return 0;\n}",
    "o": [
      "5",
      "2",
      "10",
      "Error"
    ]
  },
  {
    "q": "In call by value, when a function is called with an argument, what is passed to the function?",
    "o": [
      "A copy of the argument value",
      "The actual argument",
      "The address of the argument",
      "A reference to the argument"
    ]
  },
  {
    "q": "What will the following code output when using call by reference?",
    "c": "#include <stdio.h>\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\nint main() {\n    int x = 5, y = 10;\n    swap(&x, &y);\n    printf(\"%d %d\", x, y);\n    return 0;\n}",
    "o": [
      "10 5",
      "5 10",
      "Error",
      "15 10"
    ]
  },
  {
    "q": "Which storage class is used for variables that are automatically initialized to zero and can be used across all functions?",
    "o": [
      "extern",
      "auto",
      "register",
      "static"
    ]
  },
  {
    "q": "What will the following recursive function return?",
    "c": "#include <stdio.h>\nint factorial(int n) {\n    if (n == 0) return 1;\n    return n * factorial(n - 1);\n}\nint main() {\n    printf(\"%d\", factorial(5));\n    return 0;\n}",
    "o": [
      "120",
      "5",
      "25",
      "Error"
    ]
  },
  {
    "q": "What is the main purpose of using recursion in C?",
    "o": [
      "To break a problem into smaller subproblems",
      "To avoid using loops",
      "To reduce memory consumption",
      "To increase the execution time"
    ]
  },
  {
    "q": "Which of the following storage classes retains a variable's value throughout the program execution?",
    "o": [
      "static",
      "register",
      "extern",
      "auto"
    ]
  },
  {
    "q": "What will the following code output when using recursion?",
    "c": "#include <stdio.h>\nvoid printNumbers(int n) {\n    if (n > 0) {\n        printf(\"%d \", n);\n        printNumbers(n - 1);\n    }\n}\nint main() {\n    printNumbers(4);\n    return 0;\n}",
    "o": [
      "4 3 2 1",
      "1 2 3 4",
      "4 3 2 1 0",
      "1 2 3"
    ]
  },
  {
    "q": "Which of the following storage classes in C is used for variables that are only accessible within the block of their declaration?",
    "o": [
      "auto",
      "register",
      "extern",
      "static"
    ]
  },
  {
    "q": "Which of the following is the correct syntax for defining a function that returns an integer in C?",
    "o": [
      "int functionName() { return 0; }",
      "functionName int() { return 0; }",
      "int functionName(int) { return 0; }",
      "void functionName(int) { return 0; }"
    ]
  },
  {
    "q": "What will the following code output?",
    "c": "#include <stdio.h>\nint subtract(int a, int b) {\n    return a - b;\n}\nint main() {\n    printf(\"%d\", subtract(10, 4));\n    return 0;\n}",
    "o": [
      "6",
      "10",
      "4",
      "Error"
    ]
  },
  {
    "q": "What is the key difference between call by value and call by reference in C?",
    "o": [
      "Call by value passes a copy of the argument, while call by reference passes the actual memory address of the argument",
      "Call by value modifies the original argument, while call by reference does not",
      "Call by value allows for faster execution than call by reference",
      "Call by value does not use any memory"
    ]
  },
  {
    "q": "What will the following code output when using call by reference?",
    "c": "#include <stdio.h>\nvoid doubleValue(int *x) {\n    *x = *x * 2;\n}\nint main() {\n    int num = 4;\n    doubleValue(&num);\n    printf(\"%d\", num);\n    return 0;\n}",
    "o": [
      "8",
      "4",
      "16",
      "Error"
    ]
  },
  {
    "q": "Which storage class is used for variables that retain their value between function calls but are only visible within the function?",
    "o": [
      "static",
      "auto",
      "extern",
      "register"
    ]
  },
  {
    "q": "What will the following recursive function return?",
    "c": "#include <stdio.h>\nint power(int base, int exp) {\n    if (exp == 0) return 1;\n    return base * power(base, exp - 1);\n}\nint main() {\n    printf(\"%d\", power(3, 2));\n    return 0;\n}",
    "o": [
      "9",
      "6",
      "3",
      "12"
    ]
  },
  {
    "q": "Which of the following is the primary reason for using recursion in C?",
    "o": [
      "To break a complex problem into simpler subproblems",
      "To reduce memory usage",
      "To avoid the use of loops",
      "To speed up program execution"
    ]
  },
  {
    "q": "Which of the following storage classes allows a variable to be visible to all functions within the program?",
    "o": [
      "extern",
      "auto",
      "register",
      "static"
    ]
  },
  {
    "q": "What will the following code output using recursion?",
    "c": "#include <stdio.h>\nvoid countdown(int n) {\n    if (n == 0) return;\n    printf(\"%d \", n);\n    countdown(n - 1);\n}\nint main() {\n    countdown(5);\n    return 0;\n}",
    "o": [
      "5 4 3 2 1",
      "1 2 3 4 5",
      "5 4 3 2 1 0",
      "1 2 3 4"
    ]
  },
  {
    "q": "Which of the following storage classes in C is used to limit the scope of a variable to the file in which it is declared?",
    "o": [
      "static",
      "extern",
      "auto",
      "register"
    ]
  },
  {
    "q": "Which of the following is the correct way to declare a function in C that returns an integer and accepts two integer parameters?",
    "o": [
      "int add(int a, int b);",
      "function add(int a, int b);",
      "int add(a, b);",
      "int add(a, b) {}"
    ]
  },
  {
    "q": "What will the following code output?",
    "c": "#include <stdio.h>\nint multiply(int x, int y) {\n    return x * y;\n}\nint main() {\n    printf(\"%d\", multiply(6, 4));\n    return 0;\n}",
    "o": [
      "24",
      "10",
      "64",
      "40"
    ]
  },
  {
    "q": "Which statement is true regarding call by value in C?",
    "o": [
      "A copy of the argument is passed to the function, leaving the original value unchanged",
      "The function modifies the original argument",
      "Call by value always uses pointers",
      "Call by value is slower than call by reference"
    ]
  },
  {
    "q": "What will the following code output when using call by reference?",
    "c": "#include <stdio.h>\nvoid increment(int *x) {\n    (*x)++;\n}\nint main() {\n    int num = 7;\n    increment(&num);\n    printf(\"%d\", num);\n    return 0;\n}",
    "o": [
      "8",
      "7",
      "9",
      "Error"
    ]
  },
  {
    "q": "Which storage class in C is used for variables that retain their value between function calls?",
    "o": [
      "static",
      "auto",
      "register",
      "extern"
    ]
  },
  {
    "q": "What will the following recursive function return?",
    "c": "#include <stdio.h>\nint factorial(int n) {\n    if (n == 1) return 1;\n    return n * factorial(n - 1);\n}\nint main() {\n    printf(\"%d\", factorial(4));\n    return 0;\n}",
    "o": [
      "24",
      "4",
      "16",
      "6"
    ]
  },
  {
    "q": "What does recursion in C allow a function to do?",
    "o": [
      "A function can call itself",
      "A function can exit before completion",
      "A function can call other functions but not itself",
      "A function cannot return any value"
    ]
  },
  {
    "q": "Which of the following storage classes in C is used for variables that are initialized automatically to zero and can be accessed by all functions?",
    "o": [
      "extern",
      "static",
      "register",
      "auto"
    ]
  },
  {
    "q": "What will the following code output when using recursion?",
    "c": "#include <stdio.h>\nvoid printNumbers(int n) {\n    if (n <= 0) return;\n    printf(\"%d \", n);\n    printNumbers(n - 1);\n}\nint main() {\n    printNumbers(3);\n    return 0;\n}",
    "o": [
      "3 2 1",
      "1 2 3",
      "3 2 1 0",
      "1 2"
    ]
  },
  {
    "q": "Which of the following storage classes makes a variable accessible outside its scope in other files?",
    "o": [
      "extern",
      "static",
      "register",
      "auto"
    ]
  },
  {
    "q": "Which of the following function declarations is correct in C for a function that returns an integer and takes two integer parameters?",
    "o": [
      "int add(int a, int b);",
      "add(int a, int b);",
      "int add(a, b);",
      "void add(int a, int b);"
    ]
  },
  {
    "q": "What will the following code output?",
    "c": "#include <stdio.h>\nint add(int a, int b) {\n    return a + b;\n}\nint main() {\n    printf(\"%d\", add(7, 8));\n    return 0;\n}",
    "o": [
      "15",
      "7",
      "8",
      "0"
    ]
  },
  {
    "q": "Which of the following statements is true for call by reference in C?",
    "o": [
      "The function works with the memory address of the variable, allowing modifications to the original value",
      "The function creates a copy of the argument, leaving the original value unchanged",
      "Call by reference always passes arguments by value",
      "Call by reference cannot work with pointers"
    ]
  },
  {
    "q": "What will the following code output when using call by reference?",
    "c": "#include <stdio.h>\nvoid modify(int *a) {\n    *a = *a + 10;\n}\nint main() {\n    int x = 5;\n    modify(&x);\n    printf(\"%d\", x);\n    return 0;\n}",
    "o": [
      "15",
      "5",
      "10",
      "Error"
    ]
  },
  {
    "q": "Which storage class in C is used to declare a variable that is visible only within the current function and is automatically initialized to 0?",
    "o": [
      "auto",
      "static",
      "register",
      "extern"
    ]
  },
  {
    "q": "What will the following recursive function return?",
    "c": "#include <stdio.h>\nint sum(int n) {\n    if (n == 0) return 0;\n    return n + sum(n - 1);\n}\nint main() {\n    printf(\"%d\", sum(4));\n    return 0;\n}",
    "o": [
      "10",
      "4",
      "6",
      "20"
    ]
  },
  {
    "q": "Which of the following statements best describes recursion?",
    "o": [
      "Recursion occurs when a function calls itself",
      "Recursion is the process of looping through values iteratively",
      "Recursion cannot be used in C programming",
      "Recursion is always more efficient than iteration"
    ]
  },
  {
    "q": "Which of the following storage classes is used to declare variables that persist throughout the lifetime of the program but are only visible within the function they are declared in?",
    "o": [
      "static",
      "register",
      "extern",
      "auto"
    ]
  },
  {
    "q": "What will the following code output when using recursion?",
    "c": "#include <stdio.h>\nvoid print_numbers(int n) {\n    if (n == 0) return;\n    print_numbers(n - 1);\n    printf(\"%d \", n);\n}\nint main() {\n    print_numbers(3);\n    return 0;\n}",
    "o": [
      "1 2 3",
      "3 2 1",
      "0 1 2 3",
      "3 2 1 0"
    ]
  },
  {
    "q": "Which of the following storage classes in C is used to declare variables that are shared across multiple files in a program?",
    "o": [
      "extern",
      "auto",
      "register",
      "static"
    ]
  },
  {
    "q": "Which of the following is the correct syntax to declare a function in C that returns an integer and takes two integer parameters?",
    "o": [
      "int sum(int a, int b);",
      "sum(int a, int b);",
      "int sum(a, b);",
      "int sum() { return 0; }"
    ]
  },
  {
    "q": "What will the following code output?",
    "c": "#include <stdio.h>\nint subtract(int x, int y) {\n    return x - y;\n}\nint main() {\n    printf(\"%d\", subtract(10, 3));\n    return 0;\n}",
    "o": [
      "7",
      "13",
      "30",
      "3"
    ]
  },
  {
    "q": "Which of the following statements is true for call by value in C?",
    "o": [
      "A copy of the argument is passed to the function, and the original value is not modified",
      "The original argument is directly modified by the function",
      "The argument must always be passed by reference",
      "Call by value allows direct memory manipulation"
    ]
  },
  {
    "q": "What will the following code output when using call by reference?",
    "c": "#include <stdio.h>\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\nint main() {\n    int x = 10, y = 20;\n    swap(&x, &y);\n    printf(\"%d %d\", x, y);\n    return 0;\n}",
    "o": [
      "20 10",
      "10 20",
      "Error",
      "30 40"
    ]
  },
  {
    "q": "Which storage class in C is used to declare a variable that is visible only within the block in which it is defined, and is automatically initialized to zero?",
    "o": [
      "auto",
      "static",
      "register",
      "extern"
    ]
  },
  {
    "q": "What will the following recursive function return?",
    "c": "#include <stdio.h>\nint power(int base, int exp) {\n    if (exp == 0) return 1;\n    return base * power(base, exp - 1);\n}\nint main() {\n    printf(\"%d\", power(2, 3));\n    return 0;\n}",
    "o": [
      "8",
      "6",
      "4",
      "2"
    ]
  },
  {
    "q": "Which of the following is the main advantage of using recursion in C?",
    "o": [
      "It simplifies complex problems by breaking them into smaller subproblems",
      "It speeds up the program execution",
      "It minimizes memory usage",
      "It avoids the use of variables"
    ]
  },
  {
    "q": "Which of the following storage classes in C is used to declare variables that are accessible from any function throughout the program?",
    "o": [
      "extern",
      "static",
      "register",
      "auto"
    ]
  },
  {
    "q": "What will the following code output when using recursion?",
    "c": "#include <stdio.h>\nvoid print_descending(int n) {\n    if (n == 0) return;\n    printf(\"%d \", n);\n    print_descending(n - 1);\n}\nint main() {\n    print_descending(5);\n    return 0;\n}",
    "o": [
      "5 4 3 2 1",
      "1 2 3 4 5",
      "5 4 3 2 1 0",
      "1 2 3"
    ]
  },
  {
    "q": "Which of the following storage classes ensures that a variable retains its value between function calls and is limited to the function in which it is declared?",
    "o": [
      "static",
      "register",
      "extern",
      "auto"
    ]
  },
  {
    "q": "Which of the following is the correct syntax for declaring a function that returns an integer and takes two integer parameters?",
    "o": [
      "int multiply(int a, int b);",
      "multiply(int a, int b);",
      "int multiply(a, b);",
      "int multiply() { return 0; }"
    ]
  },
  {
    "q": "What will the following code output?",
    "c": "#include <stdio.h>\nint add(int a, int b) {\n    return a + b;\n}\nint main() {\n    printf(\"%d\", add(4, 3));\n    return 0;\n}",
    "o": [
      "7",
      "10",
      "3",
      "Error"
    ]
  },
  {
    "q": "Which of the following statements is true for call by reference in C?",
    "o": [
      "The function receives the address of the argument, allowing the function to modify the original variable",
      "The function receives a copy of the argument and cannot modify the original value",
      "The argument must always be passed by value",
      "Call by reference is not supported in C"
    ]
  },
  {
    "q": "What will the following code output when using call by reference?",
    "c": "#include <stdio.h>\nvoid update(int *a) {\n    *a = *a + 5;\n}\nint main() {\n    int num = 10;\n    update(&num);\n    printf(\"%d\", num);\n    return 0;\n}",
    "o": [
      "15",
      "10",
      "5",
      "20"
    ]
  },
  {
    "q": "Which storage class is used to define variables that are automatically initialized to zero and are visible only within the function in which they are declared?",
    "o": [
      "auto",
      "static",
      "register",
      "extern"
    ]
  },
  {
    "q": "What will the following recursive function return?",
    "c": "#include <stdio.h>\nint factorial(int n) {\n    if (n == 1) return 1;\n    return n * factorial(n - 1);\n}\nint main() {\n    printf(\"%d\", factorial(5));\n    return 0;\n}",
    "o": [
      "120",
      "60",
      "24",
      "5"
    ]
  },
  {
    "q": "Which of the following describes the use of recursion in C?",
    "o": [
      "A function calls itself to solve a smaller version of the problem",
      "A function calls other functions but not itself",
      "A function can only loop over a fixed number of elements",
      "A recursive function never returns any value"
    ]
  },
  {
    "q": "Which of the following storage classes in C makes a variable visible throughout the program across different files?",
    "o": [
      "extern",
      "static",
      "register",
      "auto"
    ]
  },
  {
    "q": "What will the following code output when using recursion?",
    "c": "#include <stdio.h>\nvoid print_numbers(int n) {\n    if (n == 0) return;\n    print_numbers(n - 1);\n    printf(\"%d \", n);\n}\nint main() {\n    print_numbers(4);\n    return 0;\n}",
    "o": [
      "1 2 3 4",
      "4 3 2 1",
      "4 3 2 1 0",
      "1 2 3"
    ]
  },
  {
    "q": "Which storage class in C is used to declare a variable that is local to the function and has an automatic duration, with no explicit initialization?",
    "o": [
      "auto",
      "register",
      "extern",
      "static"
    ]
  },
  {
    "q": "Which of the following is the correct syntax for defining a function in C that returns an integer and takes two integer parameters?",
    "o": [
      "int divide(int a, int b) { return a / b; }",
      "void divide(int a, int b) { return a / b; }",
      "int divide(a, b) { return a / b; }",
      "int divide(int a, int b);"
    ]
  },
  {
    "q": "What will the following code output?",
    "c": "#include <stdio.h>\nint multiply(int x, int y) {\n    return x * y;\n}\nint main() {\n    printf(\"%d\", multiply(3, 4));\n    return 0;\n}",
    "o": [
      "12",
      "7",
      "3",
      "15"
    ]
  },
  {
    "q": "Which of the following best describes call by value in C?",
    "o": [
      "The function gets a copy of the argument, so the original value is not modified",
      "The function can directly modify the original argument",
      "The argument must be passed by reference",
      "Call by value always requires the use of pointers"
    ]
  },
  {
    "q": "What will the following code output when using call by reference?",
    "c": "#include <stdio.h>\nvoid modify(int *a) {\n    *a = *a + 10;\n}\nint main() {\n    int num = 5;\n    modify(&num);\n    printf(\"%d\", num);\n    return 0;\n}",
    "o": [
      "15",
      "10",
      "5",
      "20"
    ]
  },
  {
    "q": "Which storage class in C is used to define a variable that persists for the lifetime of the program and is accessible only within the function where it is defined?",
    "o": [
      "static",
      "auto",
      "register",
      "extern"
    ]
  },
  {
    "q": "What will the following recursive function return?",
    "c": "#include <stdio.h>\nint factorial(int n) {\n    if (n == 0) return 1;\n    return n * factorial(n - 1);\n}\nint main() {\n    printf(\"%d\", factorial(3));\n    return 0;\n}",
    "o": [
      "6",
      "3",
      "9",
      "5"
    ]
  },
  {
    "q": "Which of the following is a key advantage of using recursion in C?",
    "o": [
      "It simplifies the solution of complex problems by breaking them into smaller subproblems",
      "It makes the program run faster",
      "It uses less memory than iteration",
      "It avoids using variables"
    ]
  },
  {
    "q": "Which of the following storage classes in C makes a variable accessible across multiple files?",
    "o": [
      "extern",
      "auto",
      "register",
      "static"
    ]
  },
  {
    "q": "What will the following code output when using recursion?",
    "c": "#include <stdio.h>\nvoid print(int n) {\n    if (n == 0) return;\n    printf(\"%d \", n);\n    print(n - 1);\n}\nint main() {\n    print(4);\n    return 0;\n}",
    "o": [
      "4 3 2 1",
      "1 2 3 4",
      "4 3 2 1 0",
      "0 1 2 3 4"
    ]
  },
  {
    "q": "Which of the following storage classes is used for variables that are local to a function and automatically initialized to zero?",
    "o": [
      "auto",
      "register",
      "extern",
      "static"
    ]
  },
  {
    "q": "Which of the following is the correct syntax to declare a function that returns a float and takes two integer parameters in C?",
    "o": [
      "float divide(int a, int b);",
      "divide(int a, int b);",
      "float divide(a, b);",
      "void divide(int a, int b);"
    ]
  },
  {
    "q": "What will the following code output?",
    "c": "#include <stdio.h>\nint subtract(int a, int b) {\n    return a - b;\n}\nint main() {\n    printf(\"%d\", subtract(10, 4));\n    return 0;\n}",
    "o": [
      "6",
      "14",
      "4",
      "10"
    ]
  },
  {
    "q": "Which of the following statements is true for call by value in C?",
    "o": [
      "The function receives a copy of the argument, and the original value is not modified",
      "The function modifies the original argument directly",
      "Call by value passes the memory address of the argument",
      "Call by value cannot be used with primitive types"
    ]
  },
  {
    "q": "What will the following code output when using call by reference?",
    "c": "#include <stdio.h>\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\nint main() {\n    int x = 1, y = 2;\n    swap(&x, &y);\n    printf(\"%d %d\", x, y);\n    return 0;\n}",
    "o": [
      "2 1",
      "1 2",
      "Error",
      "0 0"
    ]
  },
  {
    "q": "Which storage class in C is used for variables that are initialized automatically and are limited in scope to the function where they are defined?",
    "o": [
      "auto",
      "register",
      "static",
      "extern"
    ]
  },
  {
    "q": "What will the following recursive function return?",
    "c": "#include <stdio.h>\nint power(int base, int exp) {\n    if (exp == 0) return 1;\n    return base * power(base, exp - 1);\n}\nint main() {\n    printf(\"%d\", power(3, 2));\n    return 0;\n}",
    "o": [
      "9",
      "6",
      "3",
      "27"
    ]
  },
  {
    "q": "Which of the following is a potential drawback of recursion in C?",
    "o": [
      "It can lead to a stack overflow if the recursion depth is too large",
      "It is always faster than iterative solutions",
      "It uses less memory than iteration",
      "It doesn't work with large inputs"
    ]
  },
  {
    "q": "Which of the following storage classes in C is used to declare variables that retain their values between function calls?",
    "o": [
      "static",
      "auto",
      "register",
      "extern"
    ]
  },
  {
    "q": "What will the following code output when using recursion?",
    "c": "#include <stdio.h>\nvoid print_reverse(int n) {\n    if (n == 0) return;\n    printf(\"%d \", n);\n    print_reverse(n - 1);\n}\nint main() {\n    print_reverse(3);\n    return 0;\n}",
    "o": [
      "3 2 1",
      "1 2 3",
      "0 1 2 3",
      "3 2 1 0"
    ]
  },
  {
    "q": "Which storage class in C allows a variable to be visible across multiple files and retains its value throughout the program?",
    "o": [
      "extern",
      "register",
      "static",
      "auto"
    ]
  },
  {
    "q": "Which of the following is the correct way to define a function in C that returns an integer and takes three float parameters?",
    "o": [
      "int calculate_area(float a, float b, float c) { return (a * b * c); }",
      "int calculate_area(float a, float b, float c);",
      "void calculate_area(float a, float b, float c) { return (a * b * c); }",
      "float calculate_area(int a, int b, int c);"
    ]
  },
  {
    "q": "What will the following code output?",
    "c": "#include <stdio.h>\nint add(int x, int y) {\n    return x + y;\n}\nint main() {\n    printf(\"%d\", add(5, 6));\n    return 0;\n}",
    "o": [
      "11",
      "10",
      "15",
      "6"
    ]
  },
  {
    "q": "Which of the following statements is true for call by reference in C?",
    "o": [
      "The function receives the address of the argument, and it can modify the original value",
      "The function receives a copy of the argument, so the original value is unchanged",
      "The argument must be passed by value",
      "The function can modify the value only if the argument is passed by pointer"
    ]
  },
  {
    "q": "What will the following code output when using call by reference?",
    "c": "#include <stdio.h>\nvoid increment(int *x) {\n    (*x)++;\n}\nint main() {\n    int num = 10;\n    increment(&num);\n    printf(\"%d\", num);\n    return 0;\n}",
    "o": [
      "11",
      "10",
      "9",
      "12"
    ]
  },
  {
    "q": "Which of the following storage classes in C defines variables that are automatically initialized and are accessible within the function where they are declared?",
    "o": [
      "auto",
      "register",
      "static",
      "extern"
    ]
  },
  {
    "q": "What will the following recursive function return?",
    "c": "#include <stdio.h>\nint fibonacci(int n) {\n    if (n <= 1) return n;\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\nint main() {\n    printf(\"%d\", fibonacci(5));\n    return 0;\n}",
    "o": [
      "5",
      "8",
      "3",
      "13"
    ]
  },
  {
    "q": "Which of the following best describes recursion in C?",
    "o": [
      "A function that calls itself to solve a smaller version of the problem",
      "A function that calls another function and then returns",
      "A function that only works with arrays",
      "A function that cannot use loops"
    ]
  },
  {
    "q": "Which of the following storage classes in C makes a variable accessible to all functions within the same file?",
    "o": [
      "static",
      "auto",
      "register",
      "extern"
    ]
  },
  {
    "q": "What will the following code output when using recursion?",
    "c": "#include <stdio.h>\nvoid print_numbers(int n) {\n    if (n == 0) return;\n    print_numbers(n - 1);\n    printf(\"%d \", n);\n}\nint main() {\n    print_numbers(4);\n    return 0;\n}",
    "o": [
      "1 2 3 4",
      "4 3 2 1",
      "4 3 2 1 0",
      "0 1 2 3 4"
    ]
  },
  {
    "q": "Which storage class in C is used for variables that retain their values throughout the execution of the program and are visible across all functions in the file?",
    "o": [
      "static",
      "extern",
      "register",
      "auto"
    ]
  },
  {
    "q": "Which of the following is the correct syntax to declare a function in C that takes an integer argument and returns an integer?",
    "o": [
      "int func(int a);",
      "int func(int a) { return a; }",
      "void func(int a);",
      "int func(a);"
    ]
  },
  {
    "q": "What will the following code output?",
    "c": "#include <stdio.h>\nint multiply(int a, int b) {\n    return a * b;\n}\nint main() {\n    printf(\"%d\", multiply(7, 6));\n    return 0;\n}",
    "o": [
      "42",
      "13",
      "56",
      "6"
    ]
  },
  {
    "q": "Which of the following statements is true for call by reference in C?",
    "o": [
      "The function receives the memory address of the argument, allowing it to modify the original value",
      "The function receives a copy of the argument, so the original value cannot be modified",
      "The function cannot modify the original value",
      "The function uses the address of the argument but doesn't modify the value"
    ]
  },
  {
    "q": "What will the following code output when using call by reference?",
    "c": "#include <stdio.h>\nvoid update(int *a) {\n    *a += 10;\n}\nint main() {\n    int num = 5;\n    update(&num);\n    printf(\"%d\", num);\n    return 0;\n}",
    "o": [
      "15",
      "5",
      "10",
      "20"
    ]
  },
  {
    "q": "Which of the following storage classes in C is used for variables that are visible only within the function where they are declared, and are automatically initialized?",
    "o": [
      "auto",
      "register",
      "static",
      "extern"
    ]
  },
  {
    "q": "What will the following recursive function return?",
    "c": "#include <stdio.h>\nint sum(int n) {\n    if (n == 0) return 0;\n    return n + sum(n - 1);\n}\nint main() {\n    printf(\"%d\", sum(4));\n    return 0;\n}",
    "o": [
      "10",
      "4",
      "5",
      "6"
    ]
  },
  {
    "q": "Which of the following is a major advantage of recursion in C?",
    "o": [
      "It simplifies complex problems by breaking them into smaller subproblems",
      "It uses less memory than iterative solutions",
      "It is always faster than iteration",
      "It avoids using loops"
    ]
  },
  {
    "q": "Which of the following storage classes in C limits the visibility of a variable to the current block of code but ensures it persists between function calls?",
    "o": [
      "static",
      "auto",
      "extern",
      "register"
    ]
  },
  {
    "q": "What will the following code output when using recursion?",
    "c": "#include <stdio.h>\nvoid countdown(int n) {\n    if (n == 0) return;\n    printf(\"%d \", n);\n    countdown(n - 1);\n}\nint main() {\n    countdown(3);\n    return 0;\n}",
    "o": [
      "3 2 1",
      "1 2 3",
      "3 2 1 0",
      "0 1 2 3"
    ]
  },
  {
    "q": "Which storage class in C is used to declare variables that are shared among different files in a program?",
    "o": [
      "extern",
      "static",
      "register",
      "auto"
    ]
  },
  {
    "q": "Which of the following is the correct way to declare a function that returns a double and accepts two integer parameters?",
    "o": [
      "double multiply(int a, int b);",
      "double multiply(int a, b);",
      "int multiply(int a, int b);",
      "void multiply(int a, int b);"
    ]
  },
  {
    "q": "What will the following code output?",
    "c": "#include <stdio.h>\nint add(int a, int b) {\n    return a + b;\n}\nint main() {\n    printf(\"%d\", add(2, 3));\n    return 0;\n}",
    "o": [
      "5",
      "2",
      "3",
      "6"
    ]
  },
  {
    "q": "Which of the following is true about call by value in C?",
    "o": [
      "The function receives a copy of the argument, so the original value cannot be modified",
      "The function receives the memory address of the argument and can modify it",
      "The function does not receive a copy, but modifies the original argument directly",
      "The function uses pointers to modify the value of the argument"
    ]
  },
  {
    "q": "What will the following code output when using call by reference?",
    "c": "#include <stdio.h>\nvoid square(int *x) {\n    *x = (*x) * (*x);\n}\nint main() {\n    int num = 5;\n    square(&num);\n    printf(\"%d\", num);\n    return 0;\n}",
    "o": [
      "25",
      "5",
      "10",
      "50"
    ]
  },
  {
    "q": "Which storage class in C is used for variables that retain their values between function calls but are visible only within the function they are declared in?",
    "o": [
      "static",
      "extern",
      "auto",
      "register"
    ]
  },
  {
    "q": "What will the following recursive function return?",
    "c": "#include <stdio.h>\nint factorial(int n) {\n    if (n == 0) return 1;\n    return n * factorial(n - 1);\n}\nint main() {\n    printf(\"%d\", factorial(4));\n    return 0;\n}",
    "o": [
      "24",
      "4",
      "120",
      "16"
    ]
  },
  {
    "q": "What is the main disadvantage of recursion in C?",
    "o": [
      "It can lead to a stack overflow if the recursion depth is too large",
      "It is always faster than iterative solutions",
      "It uses less memory than iteration",
      "It avoids using variables"
    ]
  },
  {
    "q": "Which of the following storage classes in C is used to declare a variable that is available across multiple files?",
    "o": [
      "extern",
      "static",
      "auto",
      "register"
    ]
  },
  {
    "q": "What will the following code output when using recursion?",
    "c": "#include <stdio.h>\nvoid print_reverse(int n) {\n    if (n == 0) return;\n    printf(\"%d \", n);\n    print_reverse(n - 1);\n}\nint main() {\n    print_reverse(2);\n    return 0;\n}",
    "o": [
      "2 1",
      "1 2",
      "2 1 0",
      "0 1 2"
    ]
  },
  {
    "q": "Which storage class in C is used for variables that are automatically initialized to zero and have a scope limited to the current function?",
    "o": [
      "auto",
      "register",
      "static",
      "extern"
    ]
  },
  {
    "q": "Which of the following is the correct syntax to declare a function that returns a void and takes no parameters in C?",
    "o": [
      "void func();",
      "void func() { }",
      "void func(void);",
      "void func(int a);"
    ]
  },
  {
    "q": "What will the following code output?",
    "c": "#include <stdio.h>\nint subtract(int x, int y) {\n    return x - y;\n}\nint main() {\n    printf(\"%d\", subtract(10, 3));\n    return 0;\n}",
    "o": [
      "7",
      "10",
      "3",
      "13"
    ]
  },
  {
    "q": "Which of the following is true about call by value in C?",
    "o": [
      "The function receives a copy of the argument, so the original value cannot be modified",
      "The function directly modifies the original value of the argument",
      "The function uses a pointer to modify the value of the argument",
      "The function receives a reference to the argument and changes its value"
    ]
  },
  {
    "q": "What will the following code output when using call by reference?",
    "c": "#include <stdio.h>\nvoid swap(int *x, int *y) {\n    int temp = *x;\n    *x = *y;\n    *y = temp;\n}\nint main() {\n    int a = 1, b = 2;\n    swap(&a, &b);\n    printf(\"%d %d\", a, b);\n    return 0;\n}",
    "o": [
      "2 1",
      "1 2",
      "1 1",
      "2 2"
    ]
  },
  {
    "q": "Which storage class in C is used to declare variables that retain their values across multiple function calls within the same file?",
    "o": [
      "static",
      "register",
      "auto",
      "extern"
    ]
  },
  {
    "q": "What will the following recursive function return?",
    "c": "#include <stdio.h>\nint power(int base, int exp) {\n    if (exp == 0) return 1;\n    return base * power(base, exp - 1);\n}\nint main() {\n    printf(\"%d\", power(2, 3));\n    return 0;\n}",
    "o": [
      "8",
      "6",
      "4",
      "2"
    ]
  },
  {
    "q": "What is the advantage of using recursion in C?",
    "o": [
      "It simplifies solving complex problems by breaking them into smaller subproblems",
      "It is always faster than iterative solutions",
      "It uses less memory than iterative solutions",
      "It avoids the need for loops"
    ]
  },
  {
    "q": "Which of the following storage classes in C makes a variable accessible only within the block of code where it is declared?",
    "o": [
      "auto",
      "static",
      "extern",
      "register"
    ]
  },
  {
    "q": "What will the following code output when using recursion?",
    "c": "#include <stdio.h>\nvoid print_numbers(int n) {\n    if (n == 0) return;\n    printf(\"%d \", n);\n    print_numbers(n - 1);\n}\nint main() {\n    print_numbers(3);\n    return 0;\n}",
    "o": [
      "3 2 1",
      "1 2 3",
      "3 2 1 0",
      "0 1 2 3"
    ]
  },
  {
    "q": "Which storage class in C allows variables to be accessed across multiple files in the program?",
    "o": [
      "extern",
      "static",
      "register",
      "auto"
    ]
  },
  {
    "q": "Which of the following is the correct way to declare a function in C that returns a float and takes two integer arguments?",
    "o": [
      "float calculate(int a, int b);",
      "int calculate(float a, float b);",
      "float calculate(int a, int b) { return a + b; }",
      "void calculate(int a, int b);"
    ]
  },
  {
    "q": "What will the following code output?",
    "c": "#include <stdio.h>\nint divide(int x, int y) {\n    return x / y;\n}\nint main() {\n    printf(\"%d\", divide(10, 2));\n    return 0;\n}",
    "o": [
      "5",
      "2",
      "10",
      "20"
    ]
  },
  {
    "q": "Which of the following statements is true for call by value in C?",
    "o": [
      "The function works with a copy of the argument, so changes to the parameter don't affect the original value",
      "The function directly modifies the original value of the argument",
      "The function uses pointers to modify the original value of the argument",
      "The function receives a reference to the argument and changes its value"
    ]
  },
  {
    "q": "What will the following code output when using call by reference?",
    "c": "#include <stdio.h>\nvoid double_value(int *x) {\n    *x = *x * 2;\n}\nint main() {\n    int num = 4;\n    double_value(&num);\n    printf(\"%d\", num);\n    return 0;\n}",
    "o": [
      "8",
      "4",
      "16",
      "2"
    ]
  },
  {
    "q": "Which of the following storage classes in C is used to declare variables that retain their values across multiple function calls?",
    "o": [
      "static",
      "auto",
      "register",
      "extern"
    ]
  },
  {
    "q": "What will the following recursive function return?",
    "c": "#include <stdio.h>\nint factorial(int n) {\n    if (n == 0) return 1;\n    return n * factorial(n - 1);\n}\nint main() {\n    printf(\"%d\", factorial(5));\n    return 0;\n}",
    "o": [
      "120",
      "24",
      "60",
      "5"
    ]
  },
  {
    "q": "Which of the following is a disadvantage of recursion in C?",
    "o": [
      "It can lead to stack overflow if the recursion depth is too large",
      "It avoids the need for loops",
      "It is always faster than iterative solutions",
      "It uses less memory than iteration"
    ]
  },
  {
    "q": "Which of the following storage classes in C makes a variable visible across multiple files in the program?",
    "o": [
      "extern",
      "register",
      "auto",
      "static"
    ]
  },
  {
    "q": "What will the following code output when using recursion?",
    "c": "#include <stdio.h>\nvoid print_numbers(int n) {\n    if (n == 0) return;\n    print_numbers(n - 1);\n    printf(\"%d \", n);\n}\nint main() {\n    print_numbers(3);\n    return 0;\n}",
    "o": [
      "1 2 3",
      "3 2 1",
      "3 2 1 0",
      "0 1 2 3"
    ]
  },
  {
    "q": "Which storage class in C allows variables to be automatically initialized to zero and retains their values between function calls?",
    "o": [
      "static",
      "register",
      "auto",
      "extern"
    ]
  }
]