[
  {
    "title": "Reverse an Array",
    "ques": "Write a C program to reverse a 1D integer array of size n. The program should take user input for the array elements and print the reversed array.",
    "answer": {
      "type": "code",
      "lang": "c",
      "content": "#include <stdio.h>\n\nvoid reverseArray(int arr[], int n) {\n    int start = 0;\n    int end = n - 1;\n    while (start < end) {\n        int temp = arr[start];\n        arr[start] = arr[end];\n        arr[end] = temp;\n        start++;\n        end--;\n    }\n}\n\nint main() {\n    int n;\n    printf(\"Enter the size of array: \");\n    scanf(\"%d\", &n);\n    int arr[n];\n    printf(\"Enter %d elements:\\n\", n);\n    for(int i = 0; i < n; i++) {\n        scanf(\"%d\", &arr[i]);\n    }\n    reverseArray(arr, n);\n    printf(\"Reversed array: \");\n    for(int i = 0; i < n; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}"
    },
    "explanation": "This program reverses a 1D array:\n\n1. ***Function reverseArray***: Takes the array and its size as parameters.\n2. ```int start = 0``` and ```int end = n - 1```: Define two pointers at the beginning and end of the array.\n3. ***While loop***: Runs until start < end, swapping elements:\n   - ```temp = arr[start]```: Stores the start element temporarily.\n   - ```arr[start] = arr[end]```: Moves end element to start.\n   - ```arr[end] = temp```: Places temp (original start) at end.\n   - Increments start, decrements end to move inward.\n4. ***Main function***:\n   - Takes user input for size (```scanf(\"%d\", &n)```).\n   - Uses Variable Length Array (VLA) ```int arr[n]```.\n   - Fills array with a for loop.\n   - Calls ```reverseArray``` and prints the result."
  },
  {
    "title": "String Length Calculator",
    "ques": "Create a C program that calculates the length of a string without using the built-in strlen() function. Accept a string from the user and display its length.",
    "answer": {
      "type": "code",
      "lang": "c",
      "content": "#include <stdio.h>\n\nint stringLength(char str[]) {\n    int len = 0;\n    while (str[len] != '\\0') {\n        len++;\n    }\n    return len;\n}\n\nint main() {\n    char str[100];\n    printf(\"Enter a string: \");\n    fgets(str, sizeof(str), stdin);\n    int len = stringLength(str);\n    if (str[len-1] == '\\n') len--; // Remove newline from fgets\n    printf(\"Length of the string: %d\\n\", len);\n    return 0;\n}"
    },
    "explanation": "This program calculates string length manually:\n\n1. ***Function stringLength***: Takes a character array as input.\n2. ```int len = 0```: Initializes length counter.\n3. ***While loop***: Checks each character until null terminator (```\\0```):\n   - ```str[len] != '\\0'```: Continues while not at string end.\n   - ```len++```: Increments counter per character.\n4. ***Main function***:\n   - ```char str[100]```: Declares a character array for input.\n   - ```fgets(str, sizeof(str), stdin)```: Safely reads string with spaces.\n   - Adjusts length if ```\\n``` is included from fgets.\n   - Prints the calculated length."
  },
  {
    "title": "2D Array Transpose",
    "ques": "Write a C program to find the transpose of a 3x3 matrix (2D array). Take the matrix elements as input from the user and display the transposed matrix.",
    "answer": {
      "type": "code",
      "lang": "c",
      "content": "#include <stdio.h>\n\nint main() {\n    int matrix[3][3], transpose[3][3];\n    printf(\"Enter elements of 3x3 matrix:\\n\");\n    for(int i = 0; i < 3; i++) {\n        for(int j = 0; j < 3; j++) {\n            scanf(\"%d\", &matrix[i][j]);\n        }\n    }\n    for(int i = 0; i < 3; i++) {\n        for(int j = 0; j < 3; j++) {\n            transpose[j][i] = matrix[i][j];\n        }\n    }\n    printf(\"Transpose of the matrix:\\n\");\n    for(int i = 0; i < 3; i++) {\n        for(int j = 0; j < 3; j++) {\n            printf(\"%d \", transpose[i][j]);\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}"
    },
    "explanation": "This program transposes a 3x3 matrix:\n\n1. ***Declarations***: ```matrix[3][3]``` for input, ```transpose[3][3]``` for result.\n2. ***Input loop***: Nested loops fill the matrix row-by-row:\n   - ```scanf(\"%d\", &matrix[i][j])```: Reads each element.\n3. ***Transpose logic***: Swaps rows and columns:\n   - ```transpose[j][i] = matrix[i][j]```: Places row i, col j into col i, row j.\n4. ***Output loop***: Prints transposed matrix:\n   - Nested loops print each element with space.\n   - ```printf(\"\\n\")```: Adds newline after each row."
  },
  {
    "title": "Character Array vs String",
    "ques": "Write a C program to demonstrate the difference between a character array and a string by initializing both and printing their contents. Show how a missing null terminator affects output.",
    "answer": {
      "type": "code",
      "lang": "c",
      "content": "#include <stdio.h>\n\nint main() {\n    char charArray[] = {'H', 'e', 'l', 'l', 'o'};\n    char string[] = \"Hello\";\n    printf(\"Character array: \");\n    for(int i = 0; i < 5; i++) {\n        printf(\"%c\", charArray[i]);\n    }\n    printf(\"\\nString: %s\\n\", string);\n    printf(\"Character array as string: %s\\n\", charArray); // Undefined behavior\n    return 0;\n}"
    },
    "explanation": "This program shows char array vs string:\n\n1. ***Declarations***:\n   - ```charArray[] = {'H', 'e', 'l', 'l', 'o'}```: No null terminator.\n   - ```string[] = \"Hello\"```: Automatically adds ```\\0```.\n2. ***Printing charArray***: Uses a loop to print each char individually:\n   - ```printf(\"%c\", charArray[i])```: Prints one character at a time.\n3. ***Printing string***: Uses ```%s``` format specifier, stops at ```\\0```.\n4. ***Char array as string***: Attempting ```%s``` on charArray leads to ***undefined behavior*** because it lacks ```\\0```, potentially printing garbage until a null is found in memory."
  },
  {
    "title": "String Concatenation",
    "ques": "Write a C program to concatenate two strings using the strcat() function. Take two strings as input from the user and display the concatenated result.",
    "answer": {
      "type": "code",
      "lang": "c",
      "content": "#include <stdio.h>\n#include <string.h>\n\nint main() {\n    char str1[100], str2[50];\n    printf(\"Enter first string: \");\n    fgets(str1, sizeof(str1), stdin);\n    printf(\"Enter second string: \");\n    fgets(str2, sizeof(str2), stdin);\n    // Remove newline characters if present\n    if (str1[strlen(str1) - 1] == '\\n') str1[strlen(str1) - 1] = '\\0';\n    if (str2[strlen(str2) - 1] == '\\n') str2[strlen(str2) - 1] = '\\0';\n    strcat(str1, str2);\n    printf(\"Concatenated string: %s\\n\", str1);\n    return 0;\n}"
    },
    "explanation": "This program concatenates two strings:\n\n1. ***Includes***: ```string.h``` for ```strcat()```.\n2. ***Declarations***: ```str1[100]``` and ```str2[50]``` for input strings.\n3. ***Input***: Uses ```fgets()``` to safely read strings with spaces.\n4. ***Newline removal***:\n   - Checks if last character is ```\\n``` from ```fgets```.\n   - Replaces it with ```\\0``` to ensure proper string termination.\n5. ***Concatenation***: ```strcat(str1, str2)``` appends str2 to str1.\n6. ***Output***: Prints the result using ```%s```."
  },
  {
    "title": "Multidimensional Array Sum",
    "ques": "Create a C program to calculate the sum of all elements in a 3D array (e.g., 2x3x4). Initialize the array with predefined values and print the total sum.",
    "answer": {
      "type": "code",
      "lang": "c",
      "content": "#include <stdio.h>\n\nint main() {\n    int arr[2][3][4] = {\n        {{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}},\n        {{13, 14, 15, 16}, {17, 18, 19, 20}, {21, 22, 23, 24}}\n    };\n    int sum = 0;\n    for(int i = 0; i < 2; i++) {\n        for(int j = 0; j < 3; j++) {\n            for(int k = 0; k < 4; k++) {\n                sum += arr[i][j][k];\n            }\n        }\n    }\n    printf(\"Sum of all elements: %d\\n\", sum);\n    return 0;\n}"
    },
    "explanation": "This program sums a 3D array:\n\n1. ***Declaration***: ```arr[2][3][4]``` defines a 2x3x4 3D array with initialized values.\n2. ***Sum variable***: ```int sum = 0``` to accumulate the total.\n3. ***Nested loops***:\n   - ```i``` iterates over 2 layers.\n   - ```j``` iterates over 3 rows per layer.\n   - ```k``` iterates over 4 columns per row.\n   - ```sum += arr[i][j][k]``` adds each element.\n4. ***Output***: Prints the total sum (e.g., 300 for these values)."
  },
  {
    "title": "String Comparison",
    "ques": "Write a C program to compare two strings using strcmp() function. Take two strings as input and determine if they are equal, or which one is lexicographically greater.",
    "answer": {
      "type": "code",
      "lang": "c",
      "content": "#include <stdio.h>\n#include <string.h>\n\nint main() {\n    char str1[50], str2[50];\n    printf(\"Enter first string: \");\n    fgets(str1, sizeof(str1), stdin);\n    printf(\"Enter second string: \");\n    fgets(str2, sizeof(str2), stdin);\n    if (str1[strlen(str1) - 1] == '\\n') str1[strlen(str1) - 1] = '\\0';\n    if (str2[strlen(str2) - 1] == '\\n') str2[strlen(str2) - 1] = '\\0';\n    int result = strcmp(str1, str2);\n    if (result == 0) {\n        printf(\"Strings are equal\\n\");\n    } else if (result < 0) {\n        printf(\"First string is less than second string\\n\");\n    } else {\n        printf(\"First string is greater than second string\\n\");\n    }\n    return 0;\n}"
    },
    "explanation": "This program compares two strings:\n\n1. ***Includes***: ```string.h``` for ```strcmp()```.\n2. ***Input***: ```fgets()``` reads two strings.\n3. ***Newline removal***: Ensures clean strings by replacing ```\\n``` with ```\\0```.\n4. ***Comparison***: ```strcmp(str1, str2)``` returns:\n   - 0 if equal.\n   - Negative if str1 < str2 (lexicographically).\n   - Positive if str1 > str2.\n5. ***Output***: Uses if-else to interpret and print the result."
  },
  {
    "title": "Matrix Diagonal Sum",
    "ques": "Write a C program to calculate the sum of the main diagonal elements of a square 2D array (matrix). Take a 4x4 matrix as input from the user and display the diagonal sum.",
    "answer": {
      "type": "code",
      "lang": "c",
      "content": "#include <stdio.h>\n\nint main() {\n    int matrix[4][4], sum = 0;\n    printf(\"Enter elements of 4x4 matrix:\\n\");\n    for(int i = 0; i < 4; i++) {\n        for(int j = 0; j < 4; j++) {\n            scanf(\"%d\", &matrix[i][j]);\n        }\n    }\n    for(int i = 0; i < 4; i++) {\n        sum += matrix[i][i];\n    }\n    printf(\"Sum of main diagonal elements: %d\\n\", sum);\n    return 0;\n}"
    },
    "explanation": "This program sums the main diagonal of a 4x4 matrix:\n\n1. ***Declaration***: ```matrix[4][4]``` for the matrix, ```sum = 0``` for the total.\n2. ***Input***: Nested loops fill the matrix:\n   - ```scanf(\"%d\", &matrix[i][j])``` reads each element.\n3. ***Diagonal sum***: Single loop where ```i == j```:\n   - ```sum += matrix[i][i]``` adds elements where row equals column.\n4. ***Output***: Prints the sum of diagonal elements."
  },
  {
    "title": "Bubble Sort 1D Array",
    "ques": "Write a C program to sort a 1D integer array in ascending order using the bubble sort algorithm. Take array elements as input from the user and display the sorted array.",
    "answer": {
      "type": "code",
      "lang": "c",
      "content": "#include <stdio.h>\n\nvoid bubbleSort(int arr[], int n) {\n    for(int i = 0; i < n-1; i++) {\n        for(int j = 0; j < n-i-1; j++) {\n            if(arr[j] > arr[j+1]) {\n                int temp = arr[j];\n                arr[j] = arr[j+1];\n                arr[j+1] = temp;\n            }\n        }\n    }\n}\n\nint main() {\n    int n;\n    printf(\"Enter size of array: \");\n    scanf(\"%d\", &n);\n    int arr[n];\n    printf(\"Enter %d elements:\\n\", n);\n    for(int i = 0; i < n; i++) {\n        scanf(\"%d\", &arr[i]);\n    }\n    bubbleSort(arr, n);\n    printf(\"Sorted array: \");\n    for(int i = 0; i < n; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}"
    },
    "explanation": "This program sorts a 1D array using bubble sort:\n\n1. ***Function bubbleSort***: Takes array and size as parameters.\n2. ***Outer loop***: ```i < n-1``` runs n-1 passes.\n3. ***Inner loop***: ```j < n-i-1``` compares adjacent elements:\n   - If ```arr[j] > arr[j+1]```, swaps them using a temp variable.\n4. ***Main function***:\n   - Takes size and elements as input.\n   - Calls ```bubbleSort```.\n   - Prints sorted array."
  },
  {
    "title": "String Tokenization",
    "ques": "Write a C program to split a string into words using the strtok() function. Take a sentence as input from the user and print each word on a new line.",
    "answer": {
      "type": "code",
      "lang": "c",
      "content": "#include <stdio.h>\n#include <string.h>\n\nint main() {\n    char str[100];\n    printf(\"Enter a sentence: \");\n    fgets(str, sizeof(str), stdin);\n    if (str[strlen(str) - 1] == '\\n') str[strlen(str) - 1] = '\\0';\n    char *token = strtok(str, \" \");\n    printf(\"Words in the sentence:\\n\");\n    while (token != NULL) {\n        printf(\"%s\\n\", token);\n        token = strtok(NULL, \" \");\n    }\n    return 0;\n}"
    },
    "explanation": "This program tokenizes a string:\n\n1. ***Includes***: ```string.h``` for ```strtok()```.\n2. ***Input***: ```fgets()``` reads a sentence.\n3. ***Newline removal***: Replaces ```\\n``` with ```\\0```.\n4. ***Tokenization***:\n   - ```strtok(str, \" \")```: Splits on space, returns first token.\n   - ***While loop***: Continues with ```strtok(NULL, \" \")``` until no tokens remain.\n5. ***Output***: Prints each token (word) on a new line."
  },
  {
    "title": "Row-wise Sum of 2D Array",
    "ques": "Create a C program to calculate and display the sum of each row in a 3x4 2D array. Take the array elements as input from the user.",
    "answer": {
      "type": "code",
      "lang": "c",
      "content": "#include <stdio.h>\n\nint main() {\n    int arr[3][4];\n    printf(\"Enter elements of 3x4 matrix:\\n\");\n    for(int i = 0; i < 3; i++) {\n        for(int j = 0; j < 4; j++) {\n            scanf(\"%d\", &arr[i][j]);\n        }\n    }\n    printf(\"Sum of each row:\\n\");\n    for(int i = 0; i < 3; i++) {\n        int rowSum = 0;\n        for(int j = 0; j < 4; j++) {\n            rowSum += arr[i][j];\n        }\n        printf(\"Row %d: %d\\n\", i+1, rowSum);\n    }\n    return 0;\n}"
    },
    "explanation": "This program computes row sums:\n\n1. ***Declaration***: ```arr[3][4]``` for a 3x4 matrix.\n2. ***Input***: Nested loops fill the array.\n3. ***Row sum calculation***:\n   - Outer loop iterates rows.\n   - Inner loop sums elements: ```rowSum += arr[i][j]```.\n4. ***Output***: Prints sum for each row with row number."
  },
  {
    "title": "Dynamic Character Array Modification",
    "ques": "Write a C program to demonstrate modifying a character array by converting all lowercase letters to uppercase. Take a character array input from the user and display the modified array.",
    "answer": {
      "type": "code",
      "lang": "c",
      "content": "#include <stdio.h>\n#include <ctype.h>\n\nint main() {\n    char arr[50];\n    printf(\"Enter a character array (max 49 chars): \");\n    fgets(arr, sizeof(arr), stdin);\n    if (arr[strlen(arr) - 1] == '\\n') arr[strlen(arr) - 1] = '\\0';\n    for(int i = 0; arr[i] != '\\0'; i++) {\n        arr[i] = toupper(arr[i]);\n    }\n    printf(\"Modified array (uppercase): %s\\n\", arr);\n    return 0;\n}"
    },
    "explanation": "This program modifies a character array:\n\n1. ***Includes***: ```ctype.h``` for ```toupper()```.\n2. ***Input***: ```fgets()``` reads the character array.\n3. ***Newline removal***: Ensures proper termination.\n4. ***Modification***: Loop until ```\\0```:\n   - ```toupper(arr[i])``` converts each char to uppercase.\n5. ***Output***: Prints modified array as a string."
  }
]