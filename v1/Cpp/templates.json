[
  {
    "q": "Which of the following correctly defines a function template in C++?",
    "o": [
      "template <typename T> T max(T a, T b) { return (a > b) ? a : b; }",
      "template max(T a, T b) { return (a > b) ? a : b; }",
      "template <class> max(T a, T b) { return (a > b) ? a : b; }",
      "function template <T> max(T a, T b) { return (a > b) ? a : b; }"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint main() {\n    vector<int> v = {1, 2, 3};\n    v.push_back(4);\n    cout << v.size();\n    return 0;\n}",
    "o": [
      "4",
      "3",
      "5",
      "0"
    ]
  },
  {
    "q": "Which STL container stores elements in key-value pairs and does not allow duplicate keys?",
    "o": [
      "map",
      "vector",
      "list",
      "set"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "#include <iostream>\n#include <map>\nusing namespace std;\n\nint main() {\n    map<string, int> age;\n    age[\"Alice\"] = 30;\n    cout << age[\"Alice\"];\n    return 0;\n}",
    "o": [
      "30",
      "0",
      "Alice",
      "Error"
    ]
  },
  {
    "q": "Which of the following correctly defines a class template in C++?",
    "o": [
      "template <class T> class Box { T data; };",
      "class template <T> Box { T data; };",
      "template Box<T> { T data; };",
      "template class<T> Box { T data; };"
    ]
  },
  {
    "q": "What is the output of the following code using iterators?",
    "c": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint main() {\n    vector<int> v = {1, 2, 3};\n    vector<int>::iterator it = v.begin();\n    cout << *it;\n    return 0;\n}",
    "o": [
      "1",
      "2",
      "3",
      "0"
    ]
  },
  {
    "q": "Which algorithm from the STL is used to sort elements?",
    "o": [
      "sort()",
      "arrange()",
      "order()",
      "reorder()"
    ]
  },
  {
    "q": "What is the output of the following code using a lambda function?",
    "c": "#include <iostream>\nusing namespace std;\n\nint main() {\n    auto square = [](int x) { return x * x; };\n    cout << square(4);\n    return 0;\n}",
    "o": [
      "16",
      "4",
      "8",
      "Error"
    ]
  },
  {
    "q": "Which STL container allows constant-time insertion and deletion at both ends?",
    "o": [
      "list",
      "vector",
      "map",
      "set"
    ]
  },
  {
    "q": "Which of the following is a correct way to declare a lambda function in C++?",
    "o": [
      "auto add = [](int a, int b) { return a + b; };",
      "lambda add(int a, int b) { return a + b; }",
      "auto add(int a, int b) => { return a + b; };",
      "function add = [](int a, int b) -> int { return a + b; }"
    ]
  },
  {
    "q": "Which STL container maintains the insertion order and allows random access?",
    "o": [
      "vector",
      "list",
      "map",
      "set"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "#include <iostream>\n#include <list>\nusing namespace std;\n\nint main() {\n    list<int> myList = {10, 20, 30};\n    myList.pop_front();\n    cout << myList.front();\n    return 0;\n}",
    "o": [
      "20",
      "10",
      "30",
      "0"
    ]
  },
  {
    "q": "Which keyword is used to define a generic function in C++?",
    "o": [
      "template",
      "generic",
      "define",
      "typename"
    ]
  },
  {
    "q": "What does the following code output?",
    "c": "#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nint main() {\n    vector<int> v = {3, 1, 4, 2};\n    sort(v.begin(), v.end());\n    cout << v[0];\n    return 0;\n}",
    "o": [
      "1",
      "2",
      "3",
      "4"
    ]
  },
  {
    "q": "Which of the following best describes an iterator in C++ STL?",
    "o": [
      "An object that points to an element in a container and can be incremented or decremented",
      "A container of elements",
      "A type of class template",
      "A sorting algorithm"
    ]
  },
  {
    "q": "What is the output of this lambda expression?",
    "c": "#include <iostream>\nusing namespace std;\n\nint main() {\n    auto greet = []() { return \"Hello\"; };\n    cout << greet();\n    return 0;\n}",
    "o": [
      "Hello",
      "greet",
      "0",
      "Error"
    ]
  },
  {
    "q": "Which STL container provides constant time lookup and stores elements in sorted order based on key?",
    "o": [
      "map",
      "vector",
      "list",
      "deque"
    ]
  },
  {
    "q": "Which of the following is a correct way to pass a lambda to an algorithm?",
    "o": [
      "for_each(v.begin(), v.end(), [](int x){ cout << x; });",
      "for_each(v.begin(), [](int x){ cout << x; });",
      "lambda x: cout << x;",
      "for_each(v.begin(), v.end(), lambda(x) cout << x; );"
    ]
  },
  {
    "q": "What is the main advantage of using function templates in C++?",
    "o": [
      "They allow the same function to operate on different data types",
      "They improve runtime performance",
      "They prevent syntax errors",
      "They make the code slower but more readable"
    ]
  },
  {
    "q": "What does the following class template code output?",
    "c": "#include <iostream>\nusing namespace std;\n\ntemplate <typename T>\nclass Calculator {\npublic:\n    T add(T a, T b) { return a + b; }\n};\n\nint main() {\n    Calculator<int> calc;\n    cout << calc.add(3, 4);\n    return 0;\n}",
    "o": [
      "7",
      "34",
      "3",
      "4"
    ]
  },
  {
    "q": "Which of the following is the correct syntax for a function template with multiple types?",
    "o": [
      "template <typename T, typename U> void display(T a, U b);",
      "template <T, U> void display(T a, U b);",
      "template <class T U> void display(T a, U b);",
      "template void display<T, U>(T a, U b);"
    ]
  },
  {
    "q": "What will the following code print?",
    "c": "#include <iostream>\n#include <map>\nusing namespace std;\n\nint main() {\n    map<int, string> m;\n    m[1] = \"A\";\n    m[2] = \"B\";\n    cout << m.size();\n    return 0;\n}",
    "o": [
      "2",
      "1",
      "0",
      "Error"
    ]
  },
  {
    "q": "Which STL container allows duplicate keys and stores key-value pairs?",
    "o": [
      "multimap",
      "map",
      "vector",
      "set"
    ]
  },
  {
    "q": "What is the result of this lambda expression?",
    "c": "#include <iostream>\nusing namespace std;\n\nint main() {\n    auto add = [](int a, int b) { return a + b; };\n    cout << add(5, 3);\n    return 0;\n}",
    "o": [
      "8",
      "53",
      "Error",
      "0"
    ]
  },
  {
    "q": "What is the correct way to iterate through a list using iterators?",
    "o": [
      "for (list<int>::iterator it = myList.begin(); it != myList.end(); ++it) { }",
      "for (int it = 0; it < myList.size(); ++it) { }",
      "foreach (int it in myList) { }",
      "list<int>::iterator it = myList;"
    ]
  },
  {
    "q": "Which STL container provides bidirectional iteration but not random access?",
    "o": [
      "list",
      "vector",
      "array",
      "deque"
    ]
  },
  {
    "q": "What is the benefit of using class templates in C++?",
    "o": [
      "They allow creating a class to work with any data type.",
      "They restrict the class to a single data type.",
      "They prevent inheritance in classes.",
      "They slow down compilation for generic classes."
    ]
  },
  {
    "q": "What does this STL code snippet print?",
    "c": "#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nint main() {\n    vector<int> v = {1, 2, 3, 4, 5};\n    int count = count_if(v.begin(), v.end(), [](int x){ return x % 2 == 0; });\n    cout << count;\n    return 0;\n}",
    "o": [
      "2",
      "3",
      "5",
      "1"
    ]
  },
  {
    "q": "Which of the following is the correct way to define a lambda that captures a variable by reference?",
    "o": [
      "[&x]() { return x * 2; }",
      "[x]() { return x * 2; }",
      "[=x]() { return x * 2; }",
      "lambda x: x * 2"
    ]
  },
  {
    "q": "What will be the output of this code using map and iterators?",
    "c": "#include <iostream>\n#include <map>\nusing namespace std;\n\nint main() {\n    map<string, int> scores = {{\"A\", 90}, {\"B\", 80}};\n    for(auto it = scores.begin(); it != scores.end(); ++it) {\n        cout << it->first;\n        break;\n    }\n    return 0;\n}",
    "o": [
      "A",
      "B",
      "90",
      "Error"
    ]
  },
  {
    "q": "What is the correct way to declare a class template in C++?",
    "o": [
      "template <typename T> class MyClass { };",
      "template class <typename T> MyClass { };",
      "class template<typename T> MyClass { };",
      "MyClass template <T> { };"
    ]
  },
  {
    "q": "What does the following code output?",
    "c": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint main() {\n    vector<int> v = {1, 2, 3};\n    cout << v.back();\n    return 0;\n}",
    "o": [
      "3",
      "1",
      "2",
      "0"
    ]
  },
  {
    "q": "Which STL algorithm is used to apply a function to every element in a container?",
    "o": [
      "for_each",
      "apply_all",
      "map_each",
      "loop_all"
    ]
  },
  {
    "q": "Which of the following statements about `std::map` is TRUE?",
    "o": [
      "It stores unique keys in sorted order.",
      "It allows duplicate keys.",
      "It maintains insertion order.",
      "It provides constant-time access."
    ]
  },
  {
    "q": "What is the output of the following code snippet using a lambda?",
    "c": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int x = 10;\n    auto printX = [x]() { cout << x; };\n    x = 20;\n    printX();\n    return 0;\n}",
    "o": [
      "10",
      "20",
      "0",
      "Error"
    ]
  },
  {
    "q": "Which container would be most efficient for inserting elements at the front?",
    "o": [
      "list",
      "vector",
      "map",
      "array"
    ]
  },
  {
    "q": "Which of the following is a correct way to define a function template?",
    "o": [
      "template <typename T> T maxVal(T a, T b) { return (a > b) ? a : b; }",
      "template T maxVal(T a, T b) { return a > b ? a : b; }",
      "function template maxVal<T>(T a, T b)",
      "template function<T>(T a, T b)"
    ]
  },
  {
    "q": "What will this code print?",
    "c": "#include <iostream>\n#include <list>\n#include <algorithm>\nusing namespace std;\n\nint main() {\n    list<int> l = {1, 2, 3, 4};\n    auto it = find(l.begin(), l.end(), 3);\n    cout << *it;\n    return 0;\n}",
    "o": [
      "3",
      "4",
      "2",
      "1"
    ]
  },
  {
    "q": "Which of the following is TRUE about STL iterators?",
    "o": [
      "They provide a common interface to traverse different containers.",
      "They are used only with vectors.",
      "They are always constant.",
      "They can only be used in loops."
    ]
  },
  {
    "q": "Which lambda expression captures all variables by reference and is mutable?",
    "o": [
      "[&]() mutable { /*...*/ }",
      "[=]() const { /*...*/ }",
      "[x]() { /*...*/ }",
      "[]() { /*...*/ }"
    ]
  },
  {
    "q": "Which keyword is used to define a function template in C++?",
    "o": [
      "template",
      "function",
      "typename",
      "generic"
    ]
  },
  {
    "q": "What is the output of the following STL code?",
    "c": "#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nint main() {\n    vector<int> v = {4, 2, 1, 3};\n    sort(v.begin(), v.end());\n    cout << v[0];\n    return 0;\n}",
    "o": [
      "1",
      "4",
      "2",
      "3"
    ]
  },
  {
    "q": "Which STL container stores elements in contiguous memory locations and allows random access?",
    "o": [
      "vector",
      "list",
      "map",
      "set"
    ]
  },
  {
    "q": "Which of the following correctly defines a lambda that multiplies two numbers?",
    "o": [
      "[](int a, int b) { return a * b; }",
      "[](int a, int b) => a * b;",
      "(int a, int b) -> { return a * b; }",
      "lambda(a, b) { return a * b; }"
    ]
  },
  {
    "q": "Which STL algorithm removes elements based on a condition?",
    "o": [
      "remove_if",
      "erase_if",
      "delete_if",
      "filter_out"
    ]
  },
  {
    "q": "What is the correct way to declare a class template that takes two types?",
    "o": [
      "template <typename T, typename U> class Pair { };",
      "template class<T, U> Pair { };",
      "class template<T, U> Pair { };",
      "template <class Pair> T, U { };"
    ]
  },
  {
    "q": "What does this lambda expression capture?",
    "c": "int a = 10;\nauto f = [=]() { return a + 5; };",
    "o": [
      "Captures all external variables by value",
      "Captures all external variables by reference",
      "Captures only variable 'a' by reference",
      "Does not capture any variable"
    ]
  },
  {
    "q": "What will the following code output?",
    "c": "#include <iostream>\n#include <list>\nusing namespace std;\n\nint main() {\n    list<int> l = {10, 20, 30};\n    l.pop_front();\n    cout << l.front();\n    return 0;\n}",
    "o": [
      "20",
      "10",
      "30",
      "0"
    ]
  },
  {
    "q": "Which container does NOT allow random access using an index?",
    "o": [
      "list",
      "vector",
      "array",
      "deque"
    ]
  },
  {
    "q": "What will be the output of this program using a function template?",
    "c": "#include <iostream>\nusing namespace std;\n\ntemplate <typename T>\nT square(T x) {\n    return x * x;\n}\n\nint main() {\n    cout << square(3);\n    return 0;\n}",
    "o": [
      "9",
      "6",
      "3",
      "Error"
    ]
  },
  {
    "q": "Which of the following is the correct syntax for a class template specialization?",
    "o": [
      "template<> class MyClass<int> { /*...*/ };",
      "template<class int> MyClass { /*...*/ };",
      "class MyClass<template<int>> { /*...*/ };",
      "template<int> class MyClass { /*...*/ };"
    ]
  },
  {
    "q": "What will be the output of this lambda expression?",
    "c": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int a = 2, b = 3;\n    auto sum = [](int x, int y) { return x + y; };\n    cout << sum(a, b);\n    return 0;\n}",
    "o": [
      "5",
      "2",
      "3",
      "6"
    ]
  },
  {
    "q": "Which of the following STL containers maintains key-value pairs in sorted order?",
    "o": [
      "map",
      "unordered_map",
      "vector",
      "list"
    ]
  },
  {
    "q": "Which of these iterators allows traversal in both forward and backward directions?",
    "o": [
      "bidirectional_iterator",
      "random_access_iterator",
      "forward_iterator",
      "input_iterator"
    ]
  },
  {
    "q": "Which STL algorithm is used to count elements matching a condition?",
    "o": [
      "count_if",
      "match_count",
      "filter_count",
      "check_all"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint main() {\n    vector<int> nums(3, 7);\n    cout << nums.size();\n    return 0;\n}",
    "o": [
      "3",
      "7",
      "21",
      "0"
    ]
  },
  {
    "q": "Which syntax defines a lambda that captures all external variables by reference and takes no parameters?",
    "o": [
      "[&]() { /*...*/ }",
      "[=]() { /*...*/ }",
      "[]() -> void { /*...*/ }",
      "[&x]() { /*...*/ }"
    ]
  },
  {
    "q": "Which of the following is true about the `vector` container in STL?",
    "o": [
      "It allows random access to elements in constant time.",
      "It maintains a sorted order of elements.",
      "It is implemented as a doubly linked list.",
      "It supports key-value pairs."
    ]
  },
  {
    "q": "Which template feature allows a function to accept arguments of different types?",
    "o": [
      "Function template overloading",
      "Class template partial specialization",
      "Friend function inside template",
      "Variadic templates only"
    ]
  },
  {
    "q": "What is the correct way to iterate over a `map<string, int>` in C++ using iterators?",
    "o": [
      "for (auto it = m.begin(); it != m.end(); ++it) { cout << it->first << it->second; }",
      "for (int i = 0; i < m.size(); i++) { cout << m[i]; }",
      "foreach (string key in m) { cout << key; }",
      "while (map_iterator.hasNext()) { cout << key; }"
    ]
  },
  {
    "q": "What will the following code print?",
    "c": "#include <iostream>\n#include <map>\nusing namespace std;\n\nint main() {\n    map<char, int> m = {{'a', 1}, {'b', 2}};\n    cout << m['b'];\n    return 0;\n}",
    "o": [
      "2",
      "1",
      "0",
      "b"
    ]
  },
  {
    "q": "Which keyword is used to specify a placeholder type in a template?",
    "o": [
      "typename",
      "typedef",
      "auto",
      "class_name"
    ]
  },
  {
    "q": "What is the purpose of STL `list` over `vector`?",
    "o": [
      "Efficient insertion/deletion from anywhere",
      "Faster random access",
      "Sorting is automatic",
      "Memory usage is lower"
    ]
  },
  {
    "q": "What does this lambda expression do?",
    "c": "auto isEven = [](int x) { return x % 2 == 0; };",
    "o": [
      "Checks if a number is even",
      "Adds two numbers",
      "Returns true for odd numbers",
      "Prints even numbers"
    ]
  },
  {
    "q": "Which of the following best describes a `random access iterator`?",
    "o": [
      "Allows direct access using offset positions",
      "Allows only forward iteration",
      "Supports key-value lookups",
      "Is available only in maps"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nint main() {\n    vector<int> v = {10, 20, 30};\n    reverse(v.begin(), v.end());\n    cout << v[0];\n    return 0;\n}",
    "o": [
      "30",
      "10",
      "20",
      "0"
    ]
  },
  {
    "q": "Which STL algorithm finds the first occurrence of a value in a range?",
    "o": [
      "find",
      "search",
      "match",
      "locate"
    ]
  },
  {
    "q": "Which syntax correctly defines a class template?",
    "o": [
      "template <typename T> class MyClass { T value; };",
      "class template<T> MyClass { T value; };",
      "template class MyClass<T> { T value; };",
      "MyClass<template<T>> { T value; };"
    ]
  },
  {
    "q": "How is an `unordered_map` different from a `map`?",
    "o": [
      "unordered_map is not sorted",
      "unordered_map stores duplicate keys",
      "unordered_map allows indexing by integer",
      "unordered_map uses a list internally"
    ]
  },
  {
    "q": "What will be the result of this code?",
    "c": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint main() {\n    vector<int> v(5);\n    cout << v[2];\n    return 0;\n}",
    "o": [
      "0",
      "2",
      "Garbage value",
      "Error"
    ]
  },
  {
    "q": "Which of the following is a correct way to define a function template?",
    "o": [
      "template <typename T> T max(T a, T b) { return (a > b) ? a : b; }",
      "template (T) T max(T a, T b) { return (a > b) ? a : b; }",
      "function<T> max(T a, T b) { return a > b ? a : b; }",
      "template T max(T a, T b);"
    ]
  },
  {
    "q": "What does the following code output?",
    "c": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint main() {\n    vector<int> v = {1, 2, 3};\n    v.push_back(4);\n    cout << v.size();\n    return 0;\n}",
    "o": [
      "4",
      "3",
      "1",
      "5"
    ]
  },
  {
    "q": "Which STL container is implemented as a doubly linked list?",
    "o": [
      "list",
      "vector",
      "map",
      "deque"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "#include <iostream>\n#include <algorithm>\n#include <vector>\nusing namespace std;\n\nint main() {\n    vector<int> v = {5, 2, 9};\n    sort(v.begin(), v.end());\n    cout << v[0];\n    return 0;\n}",
    "o": [
      "2",
      "5",
      "9",
      "0"
    ]
  },
  {
    "q": "Which STL algorithm removes elements matching a value?",
    "o": [
      "remove",
      "delete",
      "erase",
      "pop"
    ]
  },
  {
    "q": "Which of the following defines a lambda that captures variable x by reference?",
    "o": [
      "[&x]() { return x * 2; }",
      "[x]() { return x * 2; }",
      "[](x) { return x * 2; }",
      "[=x]() { return x * 2; }"
    ]
  },
  {
    "q": "Which statement is true about class templates in C++?",
    "o": [
      "They allow a class to operate with generic data types.",
      "They can only be used with built-in types.",
      "They do not support constructors.",
      "They can’t be inherited."
    ]
  },
  {
    "q": "What is the default value stored in `vector<int> v(4);`?",
    "o": [
      "0 in all 4 elements",
      "Garbage values",
      "Uninitialized",
      "None of the above"
    ]
  },
  {
    "q": "What kind of iterator does the `map` container support?",
    "o": [
      "Bidirectional iterator",
      "Random access iterator",
      "Forward iterator",
      "Input iterator"
    ]
  },
  {
    "q": "Which STL algorithm checks if all elements satisfy a condition?",
    "o": [
      "all_of",
      "check_all",
      "for_all",
      "verify_all"
    ]
  },
  {
    "q": "Which of the following is a correct syntax to define a class template?",
    "o": [
      "template <class T> class MyClass { T data; };",
      "template class<T> MyClass { T data; };",
      "template (T) class MyClass { T data; };",
      "template MyClass<T> { T data; };"
    ]
  },
  {
    "q": "What does this code print?",
    "c": "#include <iostream>\n#include <list>\nusing namespace std;\n\nint main() {\n    list<int> l = {1, 2, 3};\n    l.pop_back();\n    cout << l.back();\n    return 0;\n}",
    "o": [
      "2",
      "1",
      "3",
      "0"
    ]
  },
  {
    "q": "Which of the following containers does NOT allow direct element access using operator[]?",
    "o": [
      "list",
      "vector",
      "map",
      "unordered_map"
    ]
  },
  {
    "q": "Which C++ feature allows creating a single function to operate on different data types?",
    "o": [
      "Templates",
      "Macros",
      "Overloading",
      "Inheritance"
    ]
  },
  {
    "q": "What is the output of this lambda?",
    "c": "#include <iostream>\nusing namespace std;\n\nint main() {\n    auto square = [](int x) { return x * x; };\n    cout << square(4);\n    return 0;\n}",
    "o": [
      "16",
      "8",
      "4",
      "2"
    ]
  },
  {
    "q": "Which algorithm returns an iterator to the maximum element in a range?",
    "o": [
      "max_element",
      "max",
      "maximum",
      "find_max"
    ]
  },
  {
    "q": "What is the time complexity of insertion in a std::map?",
    "o": [
      "O(log n)",
      "O(1)",
      "O(n)",
      "O(n log n)"
    ]
  },
  {
    "q": "What will this code output?",
    "c": "#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nint main() {\n    vector<int> v = {3, 1, 4};\n    sort(v.begin(), v.end());\n    cout << v[2];\n    return 0;\n}",
    "o": [
      "4",
      "3",
      "1",
      "0"
    ]
  },
  {
    "q": "Which iterator type is supported by std::vector?",
    "o": [
      "Random access iterator",
      "Bidirectional iterator",
      "Forward iterator only",
      "Input iterator"
    ]
  },
  {
    "q": "Which of the following is a correct lambda capturing all variables by value?",
    "o": [
      "[=]() { return 42; }",
      "[&]() { return 42; }",
      "[] { return 42; }",
      "[val]() { return 42; }"
    ]
  },
  {
    "q": "What is the correct syntax for calling a function template explicitly with int type?",
    "o": [
      "myFunction<int>(5);",
      "myFunction(5)<int>;",
      "myFunction(5)::int;",
      "int.myFunction(5);"
    ]
  },
  {
    "q": "What is the output of this code snippet?",
    "c": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint main() {\n    vector<int> v(3, 7);\n    cout << v[1];\n    return 0;\n}",
    "o": [
      "7",
      "3",
      "1",
      "0"
    ]
  },
  {
    "q": "Which STL container maintains sorted key-value pairs?",
    "o": [
      "map",
      "unordered_map",
      "vector",
      "list"
    ]
  },
  {
    "q": "What will this code output?",
    "c": "#include <iostream>\n#include <algorithm>\n#include <vector>\nusing namespace std;\n\nint main() {\n    vector<int> v = {1, 2, 3, 4};\n    int sum = 0;\n    for_each(v.begin(), v.end(), [&sum](int n) { sum += n; });\n    cout << sum;\n    return 0;\n}",
    "o": [
      "10",
      "6",
      "4",
      "8"
    ]
  },
  {
    "q": "Which of the following is a valid declaration of a lambda that returns the sum of two integers?",
    "o": [
      "[](int a, int b) { return a + b; }",
      "[a, b]() { return a + b; }",
      "lambda (a, b) -> a + b;",
      "def(a, b) => a + b;"
    ]
  },
  {
    "q": "Which of the following STL containers stores elements in contiguous memory?",
    "o": [
      "vector",
      "list",
      "map",
      "set"
    ]
  },
  {
    "q": "What does the following function template do?",
    "c": "template <typename T>\nT multiply(T a, T b) {\n    return a * b;\n}",
    "o": [
      "Multiplies two values of type T",
      "Adds two values of type T",
      "Divides two values of type T",
      "Subtracts two values of type T"
    ]
  },
  {
    "q": "Which of these is a valid way to iterate over a std::list using iterators?",
    "o": [
      "for (auto it = lst.begin(); it != lst.end(); ++it)",
      "for (int i = 0; i < lst.size(); ++i)",
      "for (it = 0; it < lst.size(); it++)",
      "foreach (int x in lst)"
    ]
  },
  {
    "q": "Which STL algorithm is used to apply a lambda function to every element in a container?",
    "o": [
      "for_each",
      "apply_to_all",
      "map_all",
      "loop_all"
    ]
  },
  {
    "q": "Which template keyword allows multiple template parameters?",
    "o": [
      "template <typename T, typename U>",
      "template <type T, type U>",
      "template [T, U]",
      "template using T, U"
    ]
  },
  {
    "q": "Which keyword is used to define a class template in C++?",
    "o": [
      "template",
      "class_template",
      "generic",
      "define"
    ]
  },
  {
    "q": "What is the output of this code snippet?",
    "c": "#include <iostream>\n#include <map>\nusing namespace std;\n\nint main() {\n    map<string, int> age;\n    age[\"Alice\"] = 30;\n    cout << age[\"Alice\"];\n    return 0;\n}",
    "o": [
      "30",
      "0",
      "Alice",
      "Compilation Error"
    ]
  },
  {
    "q": "Which STL container would you choose for fast lookup of key-value pairs in sorted order?",
    "o": [
      "map",
      "vector",
      "list",
      "stack"
    ]
  },
  {
    "q": "What will be the output of this code using a lambda?",
    "c": "#include <iostream>\nusing namespace std;\n\nint main() {\n    auto greet = [](string name) { return \"Hi, \" + name; };\n    cout << greet(\"Tom\");\n    return 0;\n}",
    "o": [
      "Hi, Tom",
      "Hello Tom",
      "Tom",
      "Hi"
    ]
  },
  {
    "q": "What does this function template return?",
    "c": "template <typename T>\nT getMax(T a, T b) {\n    return (a > b) ? a : b;\n}",
    "o": [
      "Returns the greater of two values",
      "Returns the smaller of two values",
      "Swaps two values",
      "Returns the average of two values"
    ]
  },
  {
    "q": "Which of the following can be used to iterate through a std::vector?",
    "o": [
      "Random access iterator",
      "Input iterator",
      "Reverse iterator only",
      "Forward iterator only"
    ]
  },
  {
    "q": "What is the default sorting order used by std::sort in C++?",
    "o": [
      "Ascending",
      "Descending",
      "Lexicographical",
      "Unsorted"
    ]
  },
  {
    "q": "Which STL container allows constant time insertion and deletion at both ends?",
    "o": [
      "list",
      "vector",
      "map",
      "set"
    ]
  },
  {
    "q": "What will the following code print?",
    "c": "#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nint main() {\n    vector<int> nums = {5, 2, 8, 1};\n    sort(nums.begin(), nums.end(), [](int a, int b) { return a > b; });\n    cout << nums[0];\n    return 0;\n}",
    "o": [
      "8",
      "1",
      "2",
      "5"
    ]
  },
  {
    "q": "Which lambda capture captures all external variables by reference?",
    "o": [
      "[&]",
      "[=]",
      "[this]",
      "[]"
    ]
  },
  {
    "q": "What is the output of this code snippet?",
    "c": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint main() {\n    vector<int> v = {10, 20, 30};\n    cout << *(v.begin() + 1);\n    return 0;\n}",
    "o": [
      "20",
      "10",
      "30",
      "0"
    ]
  },
  {
    "q": "Which of the following best describes a class template?",
    "o": [
      "A blueprint for a class that works with any data type",
      "A class with fixed data types",
      "A derived class from STL",
      "A class used for inheritance"
    ]
  },
  {
    "q": "Which STL container maintains the order of insertion and allows duplicates?",
    "o": [
      "list",
      "map",
      "set",
      "unordered_map"
    ]
  },
  {
    "q": "What is the output of this code snippet?",
    "c": "#include <iostream>\n#include <list>\nusing namespace std;\n\nint main() {\n    list<int> l = {1, 2, 3};\n    l.push_front(0);\n    cout << l.front();\n    return 0;\n}",
    "o": [
      "0",
      "1",
      "3",
      "2"
    ]
  },
  {
    "q": "Which algorithm is used to count occurrences of a value in a container?",
    "o": [
      "count",
      "find",
      "for_each",
      "accumulate"
    ]
  },
  {
    "q": "What does the following lambda capture list mean: `[=, &x]`?",
    "o": [
      "Capture all by value, except x by reference",
      "Capture x by reference only",
      "Capture all by reference, except x by value",
      "Capture x by value only"
    ]
  },
  {
    "q": "What is the output of this code snippet?",
    "c": "#include <iostream>\n#include <algorithm>\n#include <vector>\nusing namespace std;\n\nint main() {\n    vector<int> v = {1, 2, 3, 4};\n    int count_even = count_if(v.begin(), v.end(), [](int x) { return x % 2 == 0; });\n    cout << count_even;\n    return 0;\n}",
    "o": [
      "2",
      "1",
      "3",
      "4"
    ]
  },
  {
    "q": "Which container should be used when fast random access and dynamic resizing are both needed?",
    "o": [
      "vector",
      "list",
      "map",
      "deque"
    ]
  },
  {
    "q": "What is the output of this function template?",
    "c": "template <typename T>\nT square(T x) {\n    return x * x;\n}\n\nint main() {\n    cout << square(3);\n    return 0;\n}",
    "o": [
      "9",
      "6",
      "3",
      "Error"
    ]
  },
  {
    "q": "Which STL algorithm replaces all matching elements with a new value?",
    "o": [
      "replace",
      "transform",
      "fill",
      "generate"
    ]
  },
  {
    "q": "What will the following template function return?",
    "c": "template <typename T>\nT multiply(T a, T b) {\n    return a * b;\n}\n\nint main() {\n    cout << multiply(2, 3);\n    return 0;\n}",
    "o": [
      "6",
      "5",
      "Error",
      "23"
    ]
  },
  {
    "q": "Which STL container does not support random access iterators?",
    "o": [
      "list",
      "vector",
      "deque",
      "array"
    ]
  },
  {
    "q": "What does the following code print?",
    "c": "#include <iostream>\n#include <map>\nusing namespace std;\n\nint main() {\n    map<int, string> m;\n    m[1] = \"one\";\n    m[2] = \"two\";\n    cout << m.size();\n    return 0;\n}",
    "o": [
      "2",
      "1",
      "0",
      "Compilation error"
    ]
  },
  {
    "q": "Which lambda syntax captures nothing and takes two parameters?",
    "o": [
      "[](int a, int b) { return a + b; }",
      "[&](int a, int b) { return a + b; }",
      "[=](int a, int b) { return a + b; }",
      "[a, b]() { return a + b; }"
    ]
  },
  {
    "q": "Which STL algorithm is used to remove consecutive duplicate elements?",
    "o": [
      "unique",
      "remove",
      "replace",
      "find"
    ]
  },
  {
    "q": "What does this class template do?",
    "c": "template <typename T>\nclass Container {\n  T value;\npublic:\n  Container(T v) : value(v) {}\n  T get() { return value; }\n};",
    "o": [
      "Stores and returns a value of any type",
      "Creates an STL container",
      "Initializes STL iterators",
      "Performs type casting"
    ]
  },
  {
    "q": "Which of the following containers provides fast insertion and deletion at any position?",
    "o": [
      "list",
      "vector",
      "array",
      "map"
    ]
  },
  {
    "q": "What will this lambda expression return?",
    "c": "auto sub = [](int a, int b) -> int { return a - b; };\ncout << sub(10, 4);",
    "o": [
      "6",
      "14",
      "-6",
      "0"
    ]
  },
  {
    "q": "Which container automatically sorts elements by key?",
    "o": [
      "map",
      "unordered_map",
      "vector",
      "list"
    ]
  },
  {
    "q": "Which of the following correctly declares a template function with two types?",
    "o": [
      "template <typename T, typename U>",
      "template <class T; class U>",
      "function <typename T, typename U>",
      "template: T, U"
    ]
  },
  {
    "q": "What is the output of this code snippet?",
    "c": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint main() {\n    vector<int> v(3, 5);\n    cout << v[1];\n    return 0;\n}",
    "o": [
      "5",
      "1",
      "0",
      "3"
    ]
  },
  {
    "q": "Which container automatically prevents duplicate keys?",
    "o": [
      "map",
      "multimap",
      "vector",
      "list"
    ]
  },
  {
    "q": "Which is the correct syntax for declaring a class template?",
    "o": [
      "template <typename T> class MyClass {}",
      "template class <T> MyClass {}",
      "template MyClass<typename T> {}",
      "template MyClass<T> class {}"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "#include <iostream>\n#include <list>\nusing namespace std;\n\nint main() {\n    list<int> l = {1, 2, 3};\n    l.pop_back();\n    cout << l.back();\n    return 0;\n}",
    "o": [
      "2",
      "3",
      "1",
      "0"
    ]
  },
  {
    "q": "What is the purpose of `begin()` in STL containers?",
    "o": [
      "Returns an iterator pointing to the first element",
      "Inserts an element at the beginning",
      "Erases the first element",
      "Returns a pointer to the container"
    ]
  },
  {
    "q": "What does this lambda expression do?",
    "c": "[](int x, int y) { return x > y; }",
    "o": [
      "Returns true if x is greater than y",
      "Swaps x and y",
      "Adds x and y",
      "Returns true if x is less than y"
    ]
  },
  {
    "q": "Which algorithm finds the maximum element in a range?",
    "o": [
      "max_element",
      "accumulate",
      "copy_if",
      "count_if"
    ]
  },
  {
    "q": "What is the output of the following template code?",
    "c": "template <typename T>\nT identity(T val) {\n    return val;\n}\n\nint main() {\n    cout << identity<string>(\"Hi\");\n    return 0;\n}",
    "o": [
      "Hi",
      "Error",
      "identity",
      "0"
    ]
  },
  {
    "q": "Which container provides constant-time insertion and deletion at both ends?",
    "o": [
      "deque",
      "vector",
      "set",
      "map"
    ]
  },
  {
    "q": "Which iterator allows modifying elements and moving both forward and backward?",
    "o": [
      "bidirectional iterator",
      "input iterator",
      "forward iterator",
      "output iterator"
    ]
  },
  {
    "q": "Which of the following statements about templates is true?",
    "o": [
      "Templates allow writing generic and reusable code",
      "Templates execute faster than normal functions",
      "Templates are only used for mathematical operations",
      "Templates cannot be used with classes"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "#include <iostream>\n#include <map>\nusing namespace std;\n\nint main() {\n    map<string, int> m;\n    m[\"apple\"] = 10;\n    cout << m[\"apple\"];\n    return 0;\n}",
    "o": [
      "10",
      "0",
      "apple",
      "Error"
    ]
  },
  {
    "q": "Which STL container maintains elements in sorted order by default?",
    "o": [
      "map",
      "unordered_map",
      "vector",
      "list"
    ]
  },
  {
    "q": "What is the output of the following lambda expression?",
    "c": "auto greet = []() { return \"Hello\"; };\ncout << greet();",
    "o": [
      "Hello",
      "0",
      "greet",
      "Error"
    ]
  },
  {
    "q": "Which function is used to apply an operation to every element in a range?",
    "o": [
      "for_each",
      "copy",
      "transform",
      "remove_if"
    ]
  },
  {
    "q": "Which iterator type is required to use `reverse()` from `<algorithm>`?",
    "o": [
      "Bidirectional iterator",
      "Input iterator",
      "Forward iterator",
      "Output iterator"
    ]
  },
  {
    "q": "What does the following code output?",
    "c": "#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nint main() {\n    vector<int> v = {5, 1, 3};\n    sort(v.begin(), v.end());\n    cout << v[0];\n    return 0;\n}",
    "o": [
      "1",
      "5",
      "3",
      "0"
    ]
  },
  {
    "q": "Which of the following is a correct way to declare a function template with one type parameter?",
    "o": [
      "template <typename T> T max(T a, T b);",
      "template T max(T a, T b);",
      "function <T> max(T a, T b);",
      "template max(T a, T b);"
    ]
  },
  {
    "q": "Which STL container allows fast random access?",
    "o": [
      "vector",
      "list",
      "map",
      "set"
    ]
  },
  {
    "q": "Which of the following can be used to define an inline lambda that captures variables by reference?",
    "o": [
      "[&](int x){ return x + 1; }",
      "[](int x){ return x + 1; }",
      "[=](int x){ return x + 1; }",
      "[x](int y){ return x + y; }"
    ]
  },
  {
    "q": "Which of the following is a valid declaration of a class template with two type parameters?",
    "o": [
      "template <typename T, typename U> class MyClass { };",
      "template class <T, U> MyClass { };",
      "class MyClass <template T, U> { };",
      "template <T, U> class MyClass { };"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint main() {\n    vector<int> v = {10, 20, 30};\n    cout << *(v.begin() + 1);\n    return 0;\n}",
    "o": [
      "20",
      "10",
      "30",
      "0"
    ]
  },
  {
    "q": "Which STL container is best suited for fast insertions and deletions from anywhere in the container?",
    "o": [
      "list",
      "vector",
      "map",
      "array"
    ]
  },
  {
    "q": "What does this lambda function do?\n[](int a, int b) { return a * b; }",
    "o": [
      "Multiplies two integers",
      "Adds two integers",
      "Divides two integers",
      "Returns true if a is greater than b"
    ]
  },
  {
    "q": "Which algorithm is used to remove elements based on a condition but does not erase them from the container?",
    "o": [
      "remove_if",
      "erase",
      "find_if",
      "sort"
    ]
  },
  {
    "q": "What is the output of this function template code?",
    "c": "template <typename T>\nT square(T x) {\n    return x * x;\n}\nint main() {\n    cout << square(4.0);\n    return 0;\n}",
    "o": [
      "16",
      "8",
      "4",
      "Error"
    ]
  },
  {
    "q": "Which of the following iterators supports only forward movement?",
    "o": [
      "Forward iterator",
      "Bidirectional iterator",
      "Random access iterator",
      "Reverse iterator"
    ]
  },
  {
    "q": "Which STL container is best for storing key-value pairs with fast lookup?",
    "o": [
      "map",
      "vector",
      "list",
      "set"
    ]
  },
  {
    "q": "What is the correct way to define a lambda that captures variable x by value and y by reference?",
    "o": [
      "[x, &y](int z){ return x + y + z; }",
      "[&x, y](int z){ return x + y + z; }",
      "[=](int z){ return x + y + z; }",
      "[&](int z){ return x + y + z; }"
    ]
  },
  {
    "q": "Which header file is needed to use `std::map`?",
    "o": [
      "<map>",
      "<unordered_map>",
      "<list>",
      "<set>"
    ]
  },
  {
    "q": "Which of the following is a correct use of a class template?",
    "c": "template <class T>\nclass Box {\n  T value;\npublic:\n  Box(T v) : value(v) {}\n  T getValue() { return value; }\n};\n\nint main() {\n  Box<int> b(10);\n  cout << b.getValue();\n  return 0;\n}",
    "o": [
      "10",
      "0",
      "b",
      "Error"
    ]
  },
  {
    "q": "Which STL container does not allow duplicate keys?",
    "o": [
      "map",
      "multimap",
      "vector",
      "list"
    ]
  },
  {
    "q": "What does the following code output?",
    "c": "#include <iostream>\n#include <list>\nusing namespace std;\n\nint main() {\n    list<int> l = {2, 4, 6};\n    l.push_front(1);\n    cout << l.front();\n    return 0;\n}",
    "o": [
      "1",
      "2",
      "6",
      "Error"
    ]
  },
  {
    "q": "Which iterator type allows jumping to any element in constant time?",
    "o": [
      "Random access iterator",
      "Bidirectional iterator",
      "Forward iterator",
      "Input iterator"
    ]
  },
  {
    "q": "What is the output of this lambda function usage?",
    "c": "#include <iostream>\nusing namespace std;\n\nint main() {\n    auto add = [](int a, int b) { return a + b; };\n    cout << add(3, 4);\n    return 0;\n}",
    "o": [
      "7",
      "3",
      "4",
      "Error"
    ]
  },
  {
    "q": "Which algorithm finds the first element that satisfies a condition?",
    "o": [
      "find_if",
      "for_each",
      "count_if",
      "accumulate"
    ]
  },
  {
    "q": "What is the correct syntax for declaring a vector of 5 integers initialized to 0?",
    "o": [
      "vector<int> v(5, 0);",
      "vector<int> v = [5, 0];",
      "int v = vector<int>(5);",
      "vector<int> v(0, 5);"
    ]
  },
  {
    "q": "Which of the following is a valid function template call?",
    "c": "template <typename T>\nT multiply(T a, T b) {\n    return a * b;\n}\n\nint main() {\n    cout << multiply<int>(3, 4);\n    return 0;\n}",
    "o": [
      "12",
      "7",
      "0",
      "Error"
    ]
  },
  {
    "q": "Which algorithm would you use to count how many elements are greater than 10 in a container?",
    "o": [
      "count_if",
      "for_each",
      "find_if",
      "sort"
    ]
  },
  {
    "q": "Which capture mode allows a lambda to modify a local variable outside its scope?",
    "o": [
      "[&]",
      "[=]",
      "[x]",
      "[]"
    ]
  },
  {
    "q": "Which of the following is true about templates in C++?",
    "o": [
      "Templates allow functions and classes to operate with generic types",
      "Templates are only used for functions, not classes",
      "Templates can only be used with primitive types",
      "Templates must be instantiated manually in every case"
    ]
  },
  {
    "q": "What does the following code print?",
    "c": "#include <iostream>\n#include <vector>\nusing namespace std;\nint main() {\n  vector<int> v = {1, 2, 3};\n  cout << v.at(1);\n  return 0;\n}",
    "o": [
      "2",
      "1",
      "3",
      "0"
    ]
  },
  {
    "q": "Which STL container maintains sorted key-value pairs?",
    "o": [
      "map",
      "unordered_map",
      "vector",
      "list"
    ]
  },
  {
    "q": "What is the correct syntax for a lambda that takes no arguments and returns 5?",
    "o": [
      "[]() { return 5; }",
      "()[] { return 5; }",
      "[5]() { return; }",
      "[] return 5;"
    ]
  },
  {
    "q": "Which STL container provides constant-time insertion and removal from both ends?",
    "o": [
      "list",
      "vector",
      "map",
      "set"
    ]
  },
  {
    "q": "What does the following class template return?",
    "c": "template <typename T>\nclass Sample {\n  T x;\npublic:\n  Sample(T val) : x(val) {}\n  T get() { return x; }\n};\n\nint main() {\n  Sample<string> s(\"Hi\");\n  cout << s.get();\n  return 0;\n}",
    "o": [
      "Hi",
      "s",
      "get",
      "Error"
    ]
  },
  {
    "q": "Which algorithm is used to apply a function to a range of elements?",
    "o": [
      "for_each",
      "transform",
      "accumulate",
      "remove"
    ]
  },
  {
    "q": "Which of the following is a correct way to iterate over a vector using iterators?",
    "c": "#include <iostream>\n#include <vector>\nusing namespace std;\nint main() {\n  vector<int> v = {1, 2, 3};\n  for (vector<int>::iterator it = v.begin(); it != v.end(); ++it)\n    cout << *it << \" \";\n  return 0;\n}",
    "o": [
      "1 2 3 ",
      "3 2 1 ",
      "1 1 1 ",
      "Error"
    ]
  },
  {
    "q": "What is the output of this lambda with captured variable?",
    "c": "#include <iostream>\nusing namespace std;\nint main() {\n  int x = 5;\n  auto f = [=]() { return x + 2; };\n  cout << f();\n  return 0;\n}",
    "o": [
      "7",
      "5",
      "2",
      "Error"
    ]
  },
  {
    "q": "Which container is best when frequent insertions and deletions are required at arbitrary positions?",
    "o": [
      "list",
      "vector",
      "map",
      "array"
    ]
  },
  {
    "q": "Which of the following is a correct class template declaration?",
    "o": [
      "template <typename T> class Box { T item; };",
      "template class Box(T) { T item; };",
      "template <class> Box { T item; };",
      "class template<T> Box { T item; };"
    ]
  },
  {
    "q": "What does this code output?",
    "c": "#include <iostream>\n#include <vector>\nusing namespace std;\nint main() {\n  vector<int> nums = {4, 5, 6};\n  cout << nums.front();\n  return 0;\n}",
    "o": [
      "4",
      "5",
      "6",
      "Error"
    ]
  },
  {
    "q": "Which STL container allows fast lookup using keys?",
    "o": [
      "map",
      "vector",
      "list",
      "stack"
    ]
  },
  {
    "q": "Which of the following applies a lambda to each element in a container?",
    "o": [
      "for_each",
      "sort",
      "count_if",
      "find"
    ]
  },
  {
    "q": "What is the output of this lambda function?",
    "c": "#include <iostream>\nusing namespace std;\nint main() {\n  auto multiply = [](int a, int b) { return a * b; };\n  cout << multiply(3, 4);\n  return 0;\n}",
    "o": [
      "12",
      "7",
      "1",
      "Error"
    ]
  },
  {
    "q": "Which statement correctly defines a function template that swaps two values?",
    "o": [
      "template <typename T> void swapVals(T& a, T& b) { T temp = a; a = b; b = temp; }",
      "template <class T> swapVals(T a, T b) = a <-> b;",
      "void swapVals<T>(T& a, T& b) { T temp = a; a = b; b = temp; }",
      "template T swapVals(T& a, T& b) { swap(a, b); }"
    ]
  },
  {
    "q": "Which STL container does NOT allow duplicate keys?",
    "o": [
      "map",
      "multimap",
      "vector",
      "list"
    ]
  },
  {
    "q": "Which of the following algorithms is used to sort a range?",
    "o": [
      "sort",
      "reverse",
      "copy",
      "find_if"
    ]
  },
  {
    "q": "Which of the following iterators allows both read and write access?",
    "o": [
      "Bidirectional iterator",
      "Input iterator",
      "Forward iterator",
      "Output iterator"
    ]
  },
  {
    "q": "What is the result of the following STL usage?",
    "c": "#include <iostream>\n#include <list>\nusing namespace std;\nint main() {\n  list<int> l = {10, 20};\n  l.push_front(5);\n  cout << l.front();\n  return 0;\n}",
    "o": [
      "5",
      "10",
      "20",
      "0"
    ]
  },
  {
    "q": "Which STL container automatically sorts its elements by key?",
    "o": [
      "map",
      "vector",
      "unordered_map",
      "list"
    ]
  },
  {
    "q": "What will this C++ code output?",
    "c": "#include <iostream>\n#include <vector>\nusing namespace std;\nint main() {\n  vector<int> v = {1, 2, 3};\n  v.pop_back();\n  cout << v.size();\n  return 0;\n}",
    "o": [
      "2",
      "3",
      "1",
      "0"
    ]
  },
  {
    "q": "Which keyword is used to define a generic class in C++?",
    "o": [
      "template",
      "typename",
      "auto",
      "generic"
    ]
  },
  {
    "q": "What does this lambda expression do?\n`[](int x, int y){ return x < y; }`",
    "o": [
      "Returns true if x is less than y",
      "Returns the maximum of x and y",
      "Adds x and y",
      "Swaps x and y"
    ]
  },
  {
    "q": "What will be the output of the following code?",
    "c": "#include <iostream>\n#include <map>\nusing namespace std;\nint main() {\n  map<string, int> ages;\n  ages[\"Tom\"] = 25;\n  cout << ages[\"Tom\"];\n  return 0;\n}",
    "o": [
      "25",
      "0",
      "Error",
      "undefined"
    ]
  },
  {
    "q": "Which STL algorithm is used to count elements matching a condition?",
    "o": [
      "count_if",
      "find",
      "all_of",
      "accumulate"
    ]
  },
  {
    "q": "What kind of iterators does a vector support?",
    "o": [
      "Random access iterators",
      "Bidirectional iterators",
      "Forward iterators",
      "Input iterators"
    ]
  },
  {
    "q": "Which of the following is a correct use of a function template?",
    "o": [
      "template <typename T> T maxVal(T a, T b) { return (a > b) ? a : b; }",
      "template <T> maxVal(T a, T b) => a > b ? a : b;",
      "template <T> T maxVal(a, b) { return a > b ? a : b; }",
      "maxVal<T>(T a, T b) { return a > b ? a : b; }"
    ]
  },
  {
    "q": "Which STL container is implemented as a doubly linked list?",
    "o": [
      "list",
      "vector",
      "map",
      "deque"
    ]
  },
  {
    "q": "What does this code print?",
    "c": "#include <iostream>\n#include <algorithm>\n#include <vector>\nusing namespace std;\nint main() {\n  vector<int> v = {1, 2, 3, 4, 5};\n  int c = count_if(v.begin(), v.end(), [](int x){ return x % 2 == 0; });\n  cout << c;\n  return 0;\n}",
    "o": [
      "2",
      "3",
      "4",
      "5"
    ]
  },
  {
    "q": "Which STL container allows duplicate keys?",
    "o": [
      "multimap",
      "map",
      "set",
      "unordered_map"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "#include <iostream>\n#include <vector>\nusing namespace std;\nint main() {\n  vector<int> v(3, 7);\n  cout << v.front();\n  return 0;\n}",
    "o": [
      "7",
      "3",
      "0",
      "Error"
    ]
  },
  {
    "q": "Which of the following best describes a lambda function in C++?",
    "o": [
      "An anonymous inline function",
      "A macro",
      "A named function",
      "A class method"
    ]
  },
  {
    "q": "What is the correct syntax for creating a function template?",
    "o": [
      "template<typename T> void func(T x)",
      "template<T> func(T x)",
      "function template(T x)",
      "template() void func(T x)"
    ]
  },
  {
    "q": "Which algorithm returns an iterator to the first occurrence of a value in a range?",
    "o": [
      "find",
      "count",
      "copy_if",
      "accumulate"
    ]
  },
  {
    "q": "What will this code output?",
    "c": "#include <iostream>\n#include <list>\nusing namespace std;\nint main() {\n  list<int> l = {10, 20, 30};\n  l.pop_front();\n  cout << *l.begin();\n  return 0;\n}",
    "o": [
      "20",
      "10",
      "30",
      "Error"
    ]
  },
  {
    "q": "Which of these iterators is invalid for `std::list`?",
    "o": [
      "Random access iterator",
      "Bidirectional iterator",
      "Constant iterator",
      "Reverse iterator"
    ]
  },
  {
    "q": "How do you define a generic class in C++?",
    "o": [
      "template<class T> class MyClass { };",
      "class<T> MyClass { };",
      "MyClass<T> { };",
      "template T class MyClass { };"
    ]
  },
  {
    "q": "Which STL container maintains key-value pairs in a sorted order?",
    "o": [
      "map",
      "unordered_map",
      "vector",
      "list"
    ]
  },
  {
    "q": "What is the output of this lambda usage?",
    "c": "#include <iostream>\nusing namespace std;\nint main() {\n  auto sum = [](int a, int b) { return a + b; };\n  cout << sum(3, 4);\n  return 0;\n}",
    "o": [
      "7",
      "12",
      "34",
      "Error"
    ]
  },
  {
    "q": "Which STL container provides constant time insertion and deletion from both ends?",
    "o": [
      "deque",
      "vector",
      "map",
      "set"
    ]
  },
  {
    "q": "What is the output of this code snippet?",
    "c": "#include <iostream>\n#include <vector>\nusing namespace std;\nint main() {\n  vector<int> v = {1, 2, 3};\n  v.push_back(4);\n  cout << v.back();\n  return 0;\n}",
    "o": [
      "4",
      "3",
      "1",
      "Error"
    ]
  },
  {
    "q": "Which of the following best describes a function template?",
    "o": [
      "A blueprint for creating functions that work with any data type",
      "A runtime function overload",
      "A class that accepts function pointers",
      "A derived class for utility functions"
    ]
  },
  {
    "q": "Which STL algorithm is used to apply a function to each element in a range?",
    "o": [
      "for_each",
      "accumulate",
      "sort",
      "copy_if"
    ]
  },
  {
    "q": "What does this lambda function do?",
    "c": "auto multiply = [](int a, int b) { return a * b; };",
    "o": [
      "Returns the product of two integers",
      "Returns the sum of two integers",
      "Prints two integers",
      "Returns a pointer to a function"
    ]
  },
  {
    "q": "What will be the output of the following?",
    "c": "#include <iostream>\n#include <list>\nusing namespace std;\nint main() {\n  list<int> l = {2, 4, 6};\n  l.push_front(0);\n  cout << l.front();\n  return 0;\n}",
    "o": [
      "0",
      "2",
      "6",
      "Error"
    ]
  },
  {
    "q": "Which of the following containers stores elements in sorted key order and allows fast search?",
    "o": [
      "map",
      "vector",
      "list",
      "stack"
    ]
  },
  {
    "q": "What is the correct syntax to declare a lambda that captures all local variables by reference?",
    "o": [
      "[&]() { }",
      "[=]() { }",
      "[]() { }",
      "[this]() { }"
    ]
  },
  {
    "q": "Which of the following is a valid way to iterate through a `vector<int>` using iterators?",
    "c": "#include <vector>\n#include <iostream>\nusing namespace std;\nint main() {\n  vector<int> v = {1, 2, 3};\n  for (vector<int>::iterator it = v.begin(); it != v.end(); ++it)\n    cout << *it;\n  return 0;\n}",
    "o": [
      "123",
      "321",
      "112233",
      "Error"
    ]
  },
  {
    "q": "Which keyword is used to declare a class template?",
    "o": [
      "template",
      "typename",
      "class_template",
      "generics"
    ]
  },
  {
    "q": "Which of the following can be used as a key in std::map?",
    "o": [
      "Any type with defined < operator",
      "Only primitive types",
      "Only strings and integers",
      "Only user-defined types"
    ]
  },
  {
    "q": "What will the following code output?",
    "c": "#include <iostream>\n#include <map>\nusing namespace std;\nint main() {\n  map<char, int> m = {{'a', 1}, {'b', 2}};\n  cout << m['a'];\n  return 0;\n}",
    "o": [
      "1",
      "a",
      "2",
      "Error"
    ]
  },
  {
    "q": "Which STL container automatically maintains sorted order of keys?",
    "o": [
      "map",
      "unordered_map",
      "vector",
      "stack"
    ]
  },
  {
    "q": "What is the correct way to define a class template?",
    "o": [
      "template<typename T> class MyClass { };",
      "template class MyClass<T> { };",
      "class MyClass<T> { };",
      "template<MyClass> class T { };"
    ]
  },
  {
    "q": "What will this lambda expression return?",
    "c": "auto divide = [](float x, float y) { return x / y; };",
    "o": [
      "Quotient of x and y",
      "Product of x and y",
      "Sum of x and y",
      "Compilation error"
    ]
  },
  {
    "q": "Which of these iterators can be used with std::vector?",
    "o": [
      "Random access iterator",
      "Input iterator only",
      "Forward iterator only",
      "Bidirectional iterator only"
    ]
  },
  {
    "q": "Which STL algorithm is used to sort elements in a range?",
    "o": [
      "sort",
      "accumulate",
      "for_each",
      "find_if"
    ]
  },
  {
    "q": "What does the following code output?",
    "c": "#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\nint main() {\n  vector<int> v = {3, 1, 2};\n  sort(v.begin(), v.end());\n  cout << v[0];\n  return 0;\n}",
    "o": [
      "1",
      "3",
      "2",
      "Error"
    ]
  },
  {
    "q": "Which of the following is a correct way to capture variables in a lambda function?",
    "o": [
      "[=]",
      "capture()",
      "(=)",
      "{=}"
    ]
  },
  {
    "q": "Which header file is required for std::list?",
    "o": [
      "<list>",
      "<vector>",
      "<map>",
      "<set>"
    ]
  },
  {
    "q": "What is the advantage of function templates in C++?",
    "o": [
      "They allow writing generic code for multiple data types",
      "They execute faster than regular functions",
      "They only work for integer types",
      "They are required to use STL"
    ]
  },
  {
    "q": "What will be the output of the following code?",
    "c": "#include <iostream>\ntemplate<typename T>\nT multiply(T a, T b) {\n    return a * b;\n}\nint main() {\n    std::cout << multiply(2, 3);\n    return 0;\n}",
    "o": [
      "6",
      "23",
      "Error",
      "0"
    ]
  },
  {
    "q": "Which STL container allows duplicate keys?",
    "o": [
      "multimap",
      "map",
      "set",
      "unordered_map"
    ]
  },
  {
    "q": "What is the correct way to declare a lambda that captures nothing and returns the sum of two integers?",
    "o": [
      "[](int a, int b) { return a + b; }",
      "[a, b]() { return a + b; }",
      "lambda(int a, int b) => a + b;",
      "[&]() -> a + b;"
    ]
  },
  {
    "q": "Which of the following containers is best for fast random access?",
    "o": [
      "vector",
      "list",
      "map",
      "set"
    ]
  },
  {
    "q": "What does the following code print?",
    "c": "#include <iostream>\n#include <vector>\n#include <algorithm>\nint main() {\n  std::vector<int> nums = {4, 2, 7};\n  std::sort(nums.begin(), nums.end());\n  std::cout << nums.back();\n  return 0;\n}",
    "o": [
      "7",
      "4",
      "2",
      "0"
    ]
  },
  {
    "q": "What is the role of iterators in STL?",
    "o": [
      "They act as a bridge between containers and algorithms",
      "They store data like containers",
      "They perform sorting operations",
      "They define class templates"
    ]
  },
  {
    "q": "What will the following code do?",
    "c": "#include <iostream>\n#include <list>\nint main() {\n  std::list<int> l = {1, 2, 3};\n  l.push_front(0);\n  std::cout << l.front();\n  return 0;\n}",
    "o": [
      "0",
      "1",
      "2",
      "3"
    ]
  },
  {
    "q": "Which header is required for std::map?",
    "o": [
      "<map>",
      "<unordered_map>",
      "<vector>",
      "<list>"
    ]
  },
  {
    "q": "What does the following lambda expression do?\n`[&x]() { x += 1; }`",
    "o": [
      "Captures x by reference and increments it",
      "Captures x by value and increments it",
      "Does not capture x",
      "Captures all variables by value"
    ]
  },
  {
    "q": "Which STL container maintains key-value pairs in sorted order by default?",
    "o": [
      "map",
      "unordered_map",
      "vector",
      "list"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "#include <iostream>\n#include <vector>\nint main() {\n    std::vector<int> v = {1, 2, 3};\n    std::cout << v[1];\n    return 0;\n}",
    "o": [
      "2",
      "1",
      "3",
      "Error"
    ]
  },
  {
    "q": "Which of the following correctly defines a class template?",
    "o": [
      "template<typename T> class Box { T data; };",
      "template class Box<T> { T data; };",
      "class template Box<T> { T data; };",
      "Box<T> class template { T data; };"
    ]
  },
  {
    "q": "Which algorithm from STL can be used to find an element in a range?",
    "o": [
      "std::find",
      "std::search",
      "std::copy",
      "std::sort"
    ]
  },
  {
    "q": "What is the output of this code using lambda?",
    "c": "#include <iostream>\nint main() {\n    auto square = [](int x) { return x * x; };\n    std::cout << square(4);\n    return 0;\n}",
    "o": [
      "16",
      "8",
      "4",
      "0"
    ]
  },
  {
    "q": "Which STL container provides constant-time insertion and deletion at both ends?",
    "o": [
      "list",
      "vector",
      "map",
      "set"
    ]
  },
  {
    "q": "Which is the correct syntax to use a function template?",
    "o": [
      "myFunc<int>(5);",
      "myFunc<int, 5>();",
      "myFunc<T>(5);",
      "myFunc(5)<int>;"
    ]
  },
  {
    "q": "What is the default iterator category for std::vector?",
    "o": [
      "Random Access Iterator",
      "Bidirectional Iterator",
      "Input Iterator",
      "Forward Iterator"
    ]
  },
  {
    "q": "What does the following code do?",
    "c": "#include <map>\n#include <iostream>\nint main() {\n  std::map<std::string, int> m;\n  m[\"one\"] = 1;\n  std::cout << m[\"one\"];\n  return 0;\n}",
    "o": [
      "1",
      "0",
      "Error",
      "undefined"
    ]
  },
  {
    "q": "Which of the following lambda captures everything by reference?",
    "o": [
      "[&]",
      "[=]",
      "[this]",
      "[=, &x]"
    ]
  },
  {
    "q": "What will the following code output?",
    "c": "#include <iostream>\n#include <vector>\nint main() {\n    std::vector<int> v = {10, 20, 30};\n    std::cout << *(v.begin());\n    return 0;\n}",
    "o": [
      "10",
      "20",
      "30",
      "Compilation error"
    ]
  },
  {
    "q": "Which of the following is a correct way to define a function template?",
    "o": [
      "template<typename T> T max(T a, T b) { return (a > b) ? a : b; }",
      "template<class T> T max(T a, T b) return (a > b) ? a : b;",
      "template<T> max(T a, T b) { return (a > b) ? a : b; }",
      "template type T max(T a, T b) { return (a > b) ? a : b; }"
    ]
  },
  {
    "q": "Which container automatically maintains sorted keys and allows fast lookup?",
    "o": [
      "std::map",
      "std::list",
      "std::vector",
      "std::stack"
    ]
  },
  {
    "q": "What is the output of the following lambda expression?",
    "c": "#include <iostream>\nint main() {\n    auto add = [](int x, int y) { return x + y; };\n    std::cout << add(3, 4);\n    return 0;\n}",
    "o": [
      "7",
      "34",
      "1",
      "0"
    ]
  },
  {
    "q": "Which STL algorithm can be used to count the number of elements matching a value?",
    "o": [
      "std::count",
      "std::find",
      "std::copy",
      "std::equal"
    ]
  },
  {
    "q": "Which container is best suited for frequent insertion and deletion from both ends?",
    "o": [
      "std::list",
      "std::vector",
      "std::map",
      "std::set"
    ]
  },
  {
    "q": "What is the correct syntax for a lambda that captures no variables and returns void?",
    "o": [
      "[]() { std::cout << \"Hello\"; }",
      "[=]() -> void { std::cout << \"Hello\"; }",
      "[this]() { std::cout << \"Hello\"; }",
      "[&]() { return 0; }"
    ]
  },
  {
    "q": "Which of the following correctly creates an iterator for a vector of ints?",
    "o": [
      "std::vector<int>::iterator it;",
      "vector<int> it;",
      "std::list<int>::iterator it;",
      "std::map<int>::iterator it;"
    ]
  },
  {
    "q": "Which of these best describes STL's `std::list` container?",
    "o": [
      "Doubly linked list",
      "Dynamic array",
      "Hash table",
      "Binary search tree"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "#include <iostream>\n#include <list>\nint main() {\n    std::list<int> l = {1, 2, 3};\n    l.push_front(0);\n    std::cout << l.front();\n    return 0;\n}",
    "o": [
      "0",
      "1",
      "3",
      "Error"
    ]
  },
  {
    "q": "Which C++ feature allows writing generic functions that work with different data types?",
    "o": [
      "Function templates",
      "Virtual functions",
      "Overloaded operators",
      "Macros"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "#include <iostream>\n#include <vector>\nint main() {\n    std::vector<int> nums = {4, 5, 6};\n    nums.pop_back();\n    std::cout << nums.back();\n    return 0;\n}",
    "o": [
      "5",
      "6",
      "4",
      "Error"
    ]
  },
  {
    "q": "Which STL container does not support random access?",
    "o": [
      "std::list",
      "std::vector",
      "std::array",
      "std::deque"
    ]
  },
  {
    "q": "What does the following code print?",
    "c": "#include <iostream>\n#include <map>\nint main() {\n    std::map<char, int> freq;\n    freq['a'] = 3;\n    freq['b'] = 2;\n    std::cout << freq['a'];\n    return 0;\n}",
    "o": [
      "3",
      "2",
      "0",
      "a"
    ]
  },
  {
    "q": "Which keyword is used to define a class template in C++?",
    "o": [
      "template",
      "typename",
      "class",
      "generic"
    ]
  },
  {
    "q": "What is the correct syntax to declare a lambda function that captures all variables by reference?",
    "o": [
      "[&]() { return 1; }",
      "[=]() { return 1; }",
      "[this]() { return 1; }",
      "[]() { return 1; }"
    ]
  },
  {
    "q": "What will be the output of this code?",
    "c": "#include <iostream>\n#include <algorithm>\n#include <vector>\nint main() {\n    std::vector<int> v = {3, 1, 4};\n    std::sort(v.begin(), v.end());\n    std::cout << v[0];\n    return 0;\n}",
    "o": [
      "1",
      "3",
      "4",
      "Error"
    ]
  },
  {
    "q": "Which of the following allows bidirectional traversal in STL?",
    "o": [
      "Bidirectional iterator",
      "Forward iterator",
      "Random access iterator",
      "Output iterator"
    ]
  },
  {
    "q": "Which STL container uses key-value pairs and keeps the keys sorted?",
    "o": [
      "std::map",
      "std::unordered_map",
      "std::list",
      "std::set"
    ]
  },
  {
    "q": "Which of the following is a correct way to use `std::for_each` with a lambda?",
    "c": "#include <algorithm>\n#include <vector>\n#include <iostream>\nint main() {\n    std::vector<int> v = {1, 2, 3};\n    std::for_each(v.begin(), v.end(), [](int x){ std::cout << x << \" \"; });\n    return 0;\n}",
    "o": [
      "1 2 3 ",
      "3 2 1 ",
      "Compilation error",
      "Undefined behavior"
    ]
  },
  {
    "q": "Which of the following correctly defines a class template?",
    "o": [
      "template <typename T> class Box { T value; };",
      "template <class> void func();",
      "class template Box<T> {};",
      "template class <T> Box {};"
    ]
  },
  {
    "q": "What does the following C++ code print?",
    "c": "#include <iostream>\n#include <vector>\nint main() {\n    std::vector<int> v = {10, 20, 30};\n    std::cout << v.at(1);\n    return 0;\n}",
    "o": [
      "20",
      "10",
      "30",
      "Compilation error"
    ]
  },
  {
    "q": "Which container automatically sorts elements by key?",
    "o": [
      "std::map",
      "std::unordered_map",
      "std::vector",
      "std::stack"
    ]
  },
  {
    "q": "Which of the following is NOT a type of iterator in STL?",
    "o": [
      "Diagonal iterator",
      "Input iterator",
      "Forward iterator",
      "Bidirectional iterator"
    ]
  },
  {
    "q": "What will this lambda expression return: [] (int a, int b) { return a > b; } (4, 2)?",
    "o": [
      "true",
      "false",
      "4",
      "2"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "#include <iostream>\n#include <list>\nint main() {\n    std::list<char> letters = {'x', 'y', 'z'};\n    std::cout << letters.front();\n    return 0;\n}",
    "o": [
      "x",
      "y",
      "z",
      "Compilation error"
    ]
  },
  {
    "q": "Which algorithm in STL is used to count elements matching a condition?",
    "o": [
      "std::count_if",
      "std::find",
      "std::accumulate",
      "std::transform"
    ]
  },
  {
    "q": "How is a lambda that captures no variables written?",
    "o": [
      "[]() { return 42; }",
      "[&]() { return 42; }",
      "[=]() { return 42; }",
      "[this]() { return 42; }"
    ]
  },
  {
    "q": "Which of the following is a benefit of using function templates in C++?",
    "o": [
      "Code reusability for different types",
      "Better runtime performance",
      "Faster compilation time",
      "Automatic memory management"
    ]
  },
  {
    "q": "What does this code output?",
    "c": "#include <iostream>\n#include <map>\nint main() {\n    std::map<int, std::string> m;\n    m[1] = \"One\";\n    m[2] = \"Two\";\n    std::cout << m[2];\n    return 0;\n}",
    "o": [
      "Two",
      "One",
      "2",
      "Compilation error"
    ]
  },
  {
    "q": "What is the purpose of a class template in C++?",
    "o": [
      "To define a class that works with any data type",
      "To create multiple instances of the same class",
      "To inherit from multiple classes",
      "To create only integer-type classes"
    ]
  },
  {
    "q": "What is the output of this code snippet?",
    "c": "#include <iostream>\n#include <vector>\nint main() {\n    std::vector<int> v = {1, 2, 3};\n    std::cout << v.size();\n    return 0;\n}",
    "o": [
      "3",
      "2",
      "1",
      "0"
    ]
  },
  {
    "q": "Which of the following containers allows fast insertion and deletion at both ends?",
    "o": [
      "std::list",
      "std::vector",
      "std::map",
      "std::array"
    ]
  },
  {
    "q": "Which of the following is a correct declaration of a lambda capturing 'a' by value and 'b' by reference?",
    "o": [
      "[a, &b]() { return a + b; }",
      "[&a, b]() { return a + b; }",
      "[=, &b]() { return a + b; }",
      "[&, a]() { return a + b; }"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "#include <iostream>\n#include <map>\nint main() {\n    std::map<std::string, int> age;\n    age[\"Tom\"] = 25;\n    age[\"Jerry\"] = 22;\n    std::cout << age[\"Tom\"];\n    return 0;\n}",
    "o": [
      "25",
      "22",
      "0",
      "Compilation error"
    ]
  },
  {
    "q": "Which STL algorithm is used to apply a function to each element in a range?",
    "o": [
      "std::for_each",
      "std::transform",
      "std::copy_if",
      "std::remove_if"
    ]
  },
  {
    "q": "How do you declare a function template?",
    "o": [
      "template <typename T> T max(T a, T b);",
      "function<T> max(T a, T b);",
      "template function max<T>(T a, T b);",
      "T max(template<T> a, b);"
    ]
  },
  {
    "q": "What will this lambda return?",
    "c": "auto sum = [](int x, int y) { return x + y; };\nstd::cout << sum(3, 4);",
    "o": [
      "7",
      "34",
      "3",
      "Error"
    ]
  },
  {
    "q": "Which of the following is a correct way to iterate over a std::vector using an iterator?",
    "o": [
      "for(auto it = v.begin(); it != v.end(); ++it)",
      "for(int it = 0; it < v.size(); it++)",
      "for(it : v)",
      "while(*it)"
    ]
  },
  {
    "q": "Which STL container stores elements in key-value pairs and maintains sorted order?",
    "o": [
      "std::map",
      "std::unordered_map",
      "std::set",
      "std::vector"
    ]
  },
  {
    "q": "Which C++ feature allows creating a single function that works with different data types?",
    "o": [
      "Function Template",
      "Function Overloading",
      "Macro",
      "Inheritance"
    ]
  },
  {
    "q": "What is the output of this code snippet?",
    "c": "#include <iostream>\n#include <list>\nint main() {\n    std::list<int> l = {1, 2, 3};\n    l.pop_front();\n    std::cout << l.front();\n    return 0;\n}",
    "o": [
      "2",
      "1",
      "3",
      "Compilation error"
    ]
  },
  {
    "q": "Which STL container maintains unique sorted keys?",
    "o": [
      "std::map",
      "std::vector",
      "std::list",
      "std::deque"
    ]
  },
  {
    "q": "Which iterator type allows both read and write operations and supports forward and backward traversal?",
    "o": [
      "Bidirectional iterator",
      "Input iterator",
      "Output iterator",
      "Forward iterator"
    ]
  },
  {
    "q": "What does the following code print?",
    "c": "#include <iostream>\n#include <vector>\n#include <algorithm>\nint main() {\n    std::vector<int> v = {5, 3, 9};\n    std::sort(v.begin(), v.end());\n    std::cout << v[0];\n    return 0;\n}",
    "o": [
      "3",
      "5",
      "9",
      "0"
    ]
  },
  {
    "q": "How do you define a lambda that captures all external variables by reference?",
    "o": [
      "[&]() { }",
      "[=]() { }",
      "[&, =]() { }",
      "[this]() { }"
    ]
  },
  {
    "q": "Which of these can be used as a key type in std::map?",
    "o": [
      "Any type with a defined '<' operator",
      "Only primitive types",
      "Only strings",
      "Only integers"
    ]
  },
  {
    "q": "What will this code output?",
    "c": "#include <iostream>\ntemplate <typename T>\nT multiply(T a, T b) {\n    return a * b;\n}\nint main() {\n    std::cout << multiply(3, 4);\n    return 0;\n}",
    "o": [
      "12",
      "7",
      "3",
      "0"
    ]
  },
  {
    "q": "Which of these STL containers provides random access in constant time?",
    "o": [
      "std::vector",
      "std::list",
      "std::map",
      "std::set"
    ]
  },
  {
    "q": "Which STL algorithm is best suited to count how many times a specific element appears in a container?",
    "o": [
      "std::count",
      "std::find",
      "std::accumulate",
      "std::for_each"
    ]
  },
  {
    "q": "Which of the following defines a class template correctly in C++?",
    "o": [
      "template <typename T> class MyClass { T data; };",
      "template class MyClass { T data; };",
      "class MyClass<T> { T data; };",
      "template <T> class MyClass { T data; };"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "#include <iostream>\n#include <vector>\nint main() {\n    std::vector<int> nums = {10, 20, 30};\n    std::cout << nums.at(2);\n    return 0;\n}",
    "o": [
      "30",
      "10",
      "20",
      "Out of range"
    ]
  },
  {
    "q": "Which STL container allows inserting and deleting elements from both ends efficiently?",
    "o": [
      "std::deque",
      "std::vector",
      "std::map",
      "std::set"
    ]
  },
  {
    "q": "Which iterator type supports random access?",
    "o": [
      "Random access iterator",
      "Forward iterator",
      "Bidirectional iterator",
      "Output iterator"
    ]
  },
  {
    "q": "What will the following code print?",
    "c": "#include <iostream>\n#include <map>\nint main() {\n    std::map<char, int> m;\n    m['a'] = 100;\n    m['b'] = 200;\n    std::cout << m.size();\n    return 0;\n}",
    "o": [
      "2",
      "1",
      "0",
      "100"
    ]
  },
  {
    "q": "Which of the following uses lambda with a parameter in C++?",
    "o": [
      "[](int x){ return x + 1; }",
      "[] -> int { return 5; }",
      "[x]() { return x; }",
      "[](int x) => x + 1;"
    ]
  },
  {
    "q": "Which of these algorithms can be used to copy elements from one container to another?",
    "o": [
      "std::copy",
      "std::accumulate",
      "std::find_if",
      "std::count_if"
    ]
  },
  {
    "q": "Which of the following is a correct way to declare a function template with two types?",
    "o": [
      "template <typename T, typename U> void func(T a, U b);",
      "template func(T a, U b);",
      "template <class> void func(T, U);",
      "template <T, U> void func(T a, U b);"
    ]
  },
  {
    "q": "What is the default sorting order of std::sort() on a vector of integers?",
    "o": [
      "Ascending",
      "Descending",
      "Random",
      "Undefined"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "#include <iostream>\n#include <vector>\n#include <algorithm>\nint main() {\n    std::vector<int> v = {3, 1, 4};\n    std::sort(v.begin(), v.end(), [](int a, int b){ return a > b; });\n    std::cout << v[0];\n    return 0;\n}",
    "o": [
      "4",
      "1",
      "3",
      "0"
    ]
  },
  {
    "q": "Which STL container maintains key-value pairs in sorted order?",
    "o": [
      "std::map",
      "std::unordered_map",
      "std::vector",
      "std::list"
    ]
  },
  {
    "q": "Which of the following code correctly creates a function template to find maximum of two values?",
    "c": "template <typename T>\nT maxVal(T a, T b) {\n    return (a > b) ? a : b;\n}",
    "o": [
      "This is a valid function template.",
      "Only works for integers.",
      "Returns incorrect results for float.",
      "Compilation error due to return type."
    ]
  },
  {
    "q": "Which C++ feature allows passing anonymous functions?",
    "o": [
      "Lambda functions",
      "Macros",
      "Function templates",
      "Functors"
    ]
  },
  {
    "q": "What will be the output of this code using lambda?",
    "c": "#include <iostream>\nint main() {\n    auto add = [](int x, int y) { return x + y; };\n    std::cout << add(3, 4);\n    return 0;\n}",
    "o": [
      "7",
      "34",
      "1",
      "0"
    ]
  },
  {
    "q": "Which STL container does not support random access iterators?",
    "o": [
      "std::list",
      "std::vector",
      "std::array",
      "std::deque"
    ]
  },
  {
    "q": "How to declare a class template with two generic types?",
    "o": [
      "template <typename T, typename U> class MyClass;",
      "template <T, U> class MyClass;",
      "template <class> class MyClass;",
      "class MyClass<T, U>;"
    ]
  },
  {
    "q": "Which STL algorithm returns the number of elements matching a value?",
    "o": [
      "std::count",
      "std::find",
      "std::for_each",
      "std::transform"
    ]
  },
  {
    "q": "What does this code output?",
    "c": "#include <iostream>\n#include <vector>\n#include <algorithm>\nint main() {\n    std::vector<int> v = {5, 3, 2};\n    std::sort(v.begin(), v.end());\n    std::cout << v[0];\n}",
    "o": [
      "2",
      "3",
      "5",
      "0"
    ]
  },
  {
    "q": "Which STL container allows duplicate keys?",
    "o": [
      "std::multimap",
      "std::map",
      "std::set",
      "std::unordered_set"
    ]
  },
  {
    "q": "Which of the following lambda captures by reference?",
    "o": [
      "[&x]() { return x + 1; }",
      "[x]() { return x + 1; }",
      "[=]() { return x + 1; }",
      "[&]() { int y = x; return y + 1; }"
    ]
  },
  {
    "q": "Which keyword is used to define a function template in C++?",
    "o": [
      "template",
      "define",
      "function",
      "typename"
    ]
  },
  {
    "q": "What will be the output of this code using a class template?",
    "c": "#include <iostream>\ntemplate <class T>\nclass Box {\n  T value;\npublic:\n  Box(T v) : value(v) {}\n  void show() { std::cout << value; }\n};\nint main() {\n  Box<int> b(42);\n  b.show();\n  return 0;\n}",
    "o": [
      "42",
      "0",
      "Compilation Error",
      "value"
    ]
  },
  {
    "q": "Which STL container is best suited for LIFO operations?",
    "o": [
      "std::vector (used with push_back and pop_back)",
      "std::map",
      "std::list",
      "std::set"
    ]
  },
  {
    "q": "Which type of iterator allows moving both forward and backward?",
    "o": [
      "Bidirectional Iterator",
      "Forward Iterator",
      "Input Iterator",
      "Output Iterator"
    ]
  },
  {
    "q": "Which STL container maintains insertion order but not sorted order?",
    "o": [
      "std::list",
      "std::map",
      "std::set",
      "std::unordered_map"
    ]
  },
  {
    "q": "What is the output of the following lambda code?",
    "c": "#include <iostream>\nint main() {\n  int x = 10;\n  auto f = [=]() { return x * 2; };\n  std::cout << f();\n  return 0;\n}",
    "o": [
      "20",
      "10",
      "0",
      "Compilation Error"
    ]
  },
  {
    "q": "Which STL algorithm can be used to check if all elements satisfy a condition?",
    "o": [
      "std::all_of",
      "std::find_if",
      "std::for_each",
      "std::transform"
    ]
  },
  {
    "q": "Which syntax correctly declares a lambda that captures all variables by value?",
    "o": [
      "[=]() { /* code */ };",
      "[&]() { /* code */ };",
      "[x]() { /* code */ };",
      "[]() { /* code */ };"
    ]
  },
  {
    "q": "Which function is used to insert a key-value pair into a map?",
    "o": [
      "insert()",
      "push_back()",
      "append()",
      "emplace_back()"
    ]
  },
  {
    "q": "Which STL container is implemented as a balanced binary search tree?",
    "o": [
      "std::map",
      "std::unordered_map",
      "std::vector",
      "std::array"
    ]
  },
  {
    "q": "Which of the following is a benefit of function templates in C++?",
    "o": [
      "They enable code reusability for different data types.",
      "They make the code execute faster.",
      "They eliminate the need for classes.",
      "They convert all data types to string."
    ]
  },
  {
    "q": "What is the output of this code using `std::vector`?",
    "c": "#include <iostream>\n#include <vector>\nint main() {\n  std::vector<int> v = {1, 2, 3};\n  v.push_back(4);\n  std::cout << v[3];\n  return 0;\n}",
    "o": [
      "4",
      "3",
      "1",
      "Compilation Error"
    ]
  },
  {
    "q": "Which container in STL allows fast access via keys and keeps the elements sorted by key?",
    "o": [
      "std::map",
      "std::vector",
      "std::list",
      "std::stack"
    ]
  },
  {
    "q": "What is the result of this code using a lambda function?",
    "c": "#include <iostream>\nint main() {\n  int a = 3;\n  auto square = [](int x) { return x * x; };\n  std::cout << square(a);\n  return 0;\n}",
    "o": [
      "9",
      "6",
      "3",
      "Compilation Error"
    ]
  },
  {
    "q": "Which iterator type is required to use `std::advance`?",
    "o": [
      "Input Iterator or higher",
      "Only Random Access Iterator",
      "Output Iterator",
      "Reverse Iterator"
    ]
  },
  {
    "q": "Which of the following is the correct way to define a class template?",
    "o": [
      "template <typename T> class MyClass { T val; };",
      "template class MyClass<T> { T val; };",
      "typename <template T> class MyClass { T val; };",
      "template <T> class MyClass { T val; };"
    ]
  },
  {
    "q": "Which algorithm returns the number of elements matching a condition?",
    "o": [
      "std::count_if",
      "std::accumulate",
      "std::find_if",
      "std::all_of"
    ]
  },
  {
    "q": "Which of the following containers supports constant time insertion/removal at both ends?",
    "o": [
      "std::list",
      "std::vector",
      "std::map",
      "std::set"
    ]
  },
  {
    "q": "What does this lambda do?",
    "c": "auto add = [](int x, int y) -> int { return x + y; };",
    "o": [
      "Adds two integers and returns the result",
      "Subtracts two integers",
      "Captures all variables by reference",
      "Returns a lambda without arguments"
    ]
  },
  {
    "q": "Which container automatically prevents duplicate keys?",
    "o": [
      "std::map",
      "std::vector",
      "std::list",
      "std::deque"
    ]
  },
  {
    "q": "Which of the following correctly instantiates a function template for type `double`?",
    "o": [
      "myFunction<double>(3.14, 2.71);",
      "myFunction(3.14, 2.71);",
      "myFunction<T>(3.14, 2.71);",
      "myFunction(3.14);"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "#include <iostream>\n#include <vector>\nint main() {\n  std::vector<int> v = {10, 20, 30};\n  std::cout << v.front();\n  return 0;\n}",
    "o": [
      "10",
      "30",
      "20",
      "Compilation Error"
    ]
  },
  {
    "q": "Which STL container is best for maintaining a sorted collection with key-value pairs?",
    "o": [
      "std::map",
      "std::vector",
      "std::list",
      "std::queue"
    ]
  },
  {
    "q": "What is the purpose of `begin()` and `end()` in STL containers?",
    "o": [
      "To return iterators to the start and end of the container",
      "To remove elements from the beginning and end",
      "To initialize and destroy the container",
      "To find the middle of the container"
    ]
  },
  {
    "q": "What does this lambda expression return?",
    "c": "auto multiply = [](int a, int b) { return a * b; };\nstd::cout << multiply(2, 4);",
    "o": [
      "8",
      "6",
      "2",
      "4"
    ]
  },
  {
    "q": "Which STL container allows efficient insertion/removal from both ends and middle?",
    "o": [
      "std::list",
      "std::vector",
      "std::map",
      "std::array"
    ]
  },
  {
    "q": "What is the output of this class template instantiation?",
    "c": "template <typename T>\nclass MyBox {\n  T value;\npublic:\n  MyBox(T v) : value(v) {}\n  T get() { return value; }\n};\n\nint main() {\n  MyBox<std::string> box(\"Hello\");\n  std::cout << box.get();\n}",
    "o": [
      "Hello",
      "box",
      "value",
      "MyBox"
    ]
  },
  {
    "q": "Which of the following algorithms can be used to sort elements in a container?",
    "o": [
      "std::sort",
      "std::accumulate",
      "std::advance",
      "std::copy_if"
    ]
  },
  {
    "q": "What type of iterator is required by `std::sort`?",
    "o": [
      "Random Access Iterator",
      "Bidirectional Iterator",
      "Input Iterator",
      "Output Iterator"
    ]
  },
  {
    "q": "What is the correct way to create a lambda that captures a variable by reference?",
    "o": [
      "[&x]() { return x * 2; }",
      "[x]() { return x * 2; }",
      "[=]() { return x * 2; }",
      "[] -> { return x * 2; }"
    ]
  },
  {
    "q": "Which of the following defines a generic function template correctly?",
    "o": [
      "template<typename T> T max(T a, T b) { return (a > b) ? a : b; }",
      "template class<T> T max(T a, T b) { return (a > b) ? a : b; }",
      "template T max(T a, T b);",
      "template<typename> T max(T a, T b);"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "#include <iostream>\n#include <vector>\nint main() {\n  std::vector<int> v = {2, 4, 6};\n  std::cout << v.size();\n  return 0;\n}",
    "o": [
      "3",
      "2",
      "6",
      "Compilation error"
    ]
  },
  {
    "q": "Which STL container automatically keeps elements sorted by key?",
    "o": [
      "std::map",
      "std::vector",
      "std::unordered_map",
      "std::deque"
    ]
  },
  {
    "q": "Which function is used to find an element in a vector using algorithms?",
    "o": [
      "std::find",
      "std::map::find",
      "vector::search",
      "std::search"
    ]
  },
  {
    "q": "What is the output of this lambda expression?",
    "c": "auto square = [](int x) { return x * x; };\nstd::cout << square(7);",
    "o": [
      "49",
      "14",
      "7",
      "None"
    ]
  },
  {
    "q": "Which of these is a valid class template declaration?",
    "o": [
      "template<class T> class Container { T value; };",
      "template<T> class Container { T value; };",
      "template<> class Container { T value; };",
      "class<T> Container { T value; };"
    ]
  },
  {
    "q": "Which iterator category is supported by `std::list`?",
    "o": [
      "Bidirectional Iterator",
      "Random Access Iterator",
      "Output Iterator",
      "Contiguous Iterator"
    ]
  },
  {
    "q": "What is the output of this map usage?",
    "c": "#include <iostream>\n#include <map>\nint main() {\n  std::map<char, int> m;\n  m['x'] = 42;\n  std::cout << m['x'];\n}",
    "o": [
      "42",
      "0",
      "'x'",
      "Compilation error"
    ]
  },
  {
    "q": "Which header file must be included to use `std::vector`?",
    "o": [
      "#include <vector>",
      "#include <list>",
      "#include <array>",
      "#include <deque>"
    ]
  },
  {
    "q": "What will `std::for_each` typically require to operate?",
    "o": [
      "An iterator range and a callable (like a lambda or function)",
      "A container and a size",
      "Two containers of same type",
      "Only a function"
    ]
  },
  {
    "q": "Which line correctly calls a function template?",
    "o": [
      "max<int>(5, 10);",
      "max(5, 10);",
      "max<>5, 10;",
      "call max(5, 10);"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "#include <iostream>\n#include <list>\nint main() {\n  std::list<int> lst = {1, 2, 3};\n  lst.push_back(4);\n  std::cout << lst.back();\n  return 0;\n}",
    "o": [
      "4",
      "3",
      "1",
      "Compilation Error"
    ]
  },
  {
    "q": "Which of the following allows you to define a template class?",
    "o": [
      "template<typename T> class Box { T val; };",
      "template<class T> class() Box { T val; };",
      "template(T) class Box { T val; };",
      "template<class> class Box<T> { T val; };"
    ]
  },
  {
    "q": "Which of the following containers does NOT support random access?",
    "o": [
      "std::list",
      "std::vector",
      "std::deque",
      "std::array"
    ]
  },
  {
    "q": "What does the following code output?",
    "c": "#include <iostream>\n#include <map>\nint main() {\n  std::map<int, int> m = {{1, 10}, {2, 20}};\n  std::cout << m[1];\n  return 0;\n}",
    "o": [
      "10",
      "1",
      "20",
      "0"
    ]
  },
  {
    "q": "What is a lambda function in C++?",
    "o": [
      "A nameless function that can be defined inline",
      "A predefined macro",
      "A type of STL container",
      "A recursive function"
    ]
  },
  {
    "q": "Which header is required for `std::for_each`?",
    "o": [
      "#include <algorithm>",
      "#include <utility>",
      "#include <iterator>",
      "#include <tuple>"
    ]
  },
  {
    "q": "What will this code print?",
    "c": "#include <iostream>\n#include <vector>\n#include <algorithm>\nint main() {\n  std::vector<int> v = {3, 1, 4};\n  std::sort(v.begin(), v.end());\n  std::cout << v[0];\n  return 0;\n}",
    "o": [
      "1",
      "3",
      "4",
      "0"
    ]
  },
  {
    "q": "Which is a valid lambda syntax to capture all variables by value?",
    "o": [
      "[=]() { return 1; }",
      "[&]() { return 1; }",
      "[this]() { return 1; }",
      "[*]() { return 1; }"
    ]
  },
  {
    "q": "Which algorithm can be used to count how many times an element appears in a container?",
    "o": [
      "std::count",
      "std::repeat",
      "std::count_if_not",
      "std::sum"
    ]
  },
  {
    "q": "What is the purpose of using templates in C++?",
    "o": [
      "To write generic and reusable code",
      "To increase compilation time",
      "To hide function implementation",
      "To improve runtime performance only"
    ]
  },
  {
    "q": "What does the following code output?",
    "c": "#include <iostream>\n#include <vector>\nint main() {\n  std::vector<int> v = {1, 2, 3};\n  std::cout << v.at(1);\n  return 0;\n}",
    "o": [
      "2",
      "1",
      "3",
      "0"
    ]
  },
  {
    "q": "Which STL container maintains sorted key-value pairs?",
    "o": [
      "std::map",
      "std::vector",
      "std::list",
      "std::stack"
    ]
  },
  {
    "q": "What is the output of the following lambda function?",
    "c": "#include <iostream>\nint main() {\n  auto square = [](int x) { return x * x; };\n  std::cout << square(4);\n  return 0;\n}",
    "o": [
      "16",
      "8",
      "4",
      "12"
    ]
  },
  {
    "q": "Which of these is a valid way to define a function template?",
    "o": [
      "template<typename T> T max(T a, T b) { return (a > b) ? a : b; }",
      "template<class T> max(T a, T b) { return a > b ? a : b; }",
      "function template<T>(T a, T b)",
      "template<T> T max(T a, T b)"
    ]
  },
  {
    "q": "Which iterator type allows both read and write access and random access?",
    "o": [
      "Random access iterator",
      "Forward iterator",
      "Input iterator",
      "Bidirectional iterator"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "#include <iostream>\n#include <map>\nint main() {\n  std::map<std::string, int> m;\n  m[\"apple\"] = 5;\n  std::cout << m.size();\n  return 0;\n}",
    "o": [
      "1",
      "0",
      "5",
      "apple"
    ]
  },
  {
    "q": "Which algorithm checks if all elements in a container satisfy a condition?",
    "o": [
      "std::all_of",
      "std::any_of",
      "std::count_if",
      "std::none_of"
    ]
  },
  {
    "q": "Which of the following correctly uses `std::for_each` with a lambda?",
    "o": [
      "std::for_each(v.begin(), v.end(), [](int x){ std::cout << x; });",
      "for_each(lambda(x), v);",
      "std::for_each(v, [](x){ std::cout << x; });",
      "for_each(v.begin(), v.end(), std::cout << x);"
    ]
  },
  {
    "q": "What will be the result of this code?",
    "c": "#include <iostream>\n#include <vector>\n#include <algorithm>\nint main() {\n  std::vector<int> v = {10, 20, 30};\n  std::reverse(v.begin(), v.end());\n  std::cout << v[0];\n  return 0;\n}",
    "o": [
      "30",
      "10",
      "20",
      "0"
    ]
  },
  {
    "q": "Which of the following is a correct way to instantiate a class template?",
    "o": [
      "MyClass<int> obj;",
      "MyClass obj<int>;",
      "MyClass<> obj;",
      "obj = MyClass<int>();"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "#include <iostream>\n#include <list>\nint main() {\n  std::list<int> l = {1, 2, 3};\n  l.pop_front();\n  std::cout << l.front();\n  return 0;\n}",
    "o": [
      "2",
      "1",
      "3",
      "0"
    ]
  },
  {
    "q": "Which STL container allows constant time insertion and removal from both ends?",
    "o": [
      "std::list",
      "std::vector",
      "std::map",
      "std::set"
    ]
  },
  {
    "q": "What is the correct way to declare a lambda that captures no variables and returns a double?",
    "o": [
      "[]() -> double { return 3.14; }",
      "[=] double { return 3.14; }",
      "[&] { return double 3.14; }",
      "[return 3.14] () -> double"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "#include <iostream>\n#include <vector>\nint main() {\n  std::vector<int> v(5, 2);\n  std::cout << v.size();\n  return 0;\n}",
    "o": [
      "5",
      "2",
      "10",
      "0"
    ]
  },
  {
    "q": "Which algorithm in STL is used to remove all elements equal to a given value?",
    "o": [
      "std::remove",
      "std::erase",
      "std::filter",
      "std::discard"
    ]
  },
  {
    "q": "What does this code print?",
    "c": "#include <iostream>\n#include <algorithm>\n#include <vector>\nint main() {\n  std::vector<int> v = {1, 2, 3, 4};\n  std::for_each(v.begin(), v.end(), [](int &n){ n *= 2; });\n  std::cout << v[2];\n  return 0;\n}",
    "o": [
      "6",
      "4",
      "2",
      "8"
    ]
  },
  {
    "q": "What does the 'auto' keyword do when used with a lambda function?",
    "o": [
      "Automatically deduces the type of the lambda expression",
      "Automatically deduces return type only",
      "Ignores the lambda body",
      "Specifies the lambda to be inline"
    ]
  },
  {
    "q": "Which of the following is a valid use of an iterator with a std::map?",
    "o": [
      "std::map<std::string, int>::iterator it = myMap.begin();",
      "std::map<int>::iterator it = myMap.start();",
      "iterator = myMap.get_iterator();",
      "std::map::iterator it = myMap.front();"
    ]
  },
  {
    "q": "Which keyword is used to define a class template in C++?",
    "o": [
      "template",
      "typename",
      "class_template",
      "generic"
    ]
  },
  {
    "q": "What is the correct syntax to define a function template that adds two values?",
    "o": [
      "template<typename T> T add(T a, T b) { return a + b; }",
      "template<class T> add(T a, T b) -> T { return a + b; }",
      "function<T>(T a, T b) { return a + b; }",
      "template add(a, b) { return a + b; }"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "#include <iostream>\n#include <vector>\nint main() {\n  std::vector<int> v = {4, 5, 6};\n  std::cout << *(v.begin());\n  return 0;\n}",
    "o": [
      "4",
      "5",
      "6",
      "0"
    ]
  },
  {
    "q": "Which STL container maintains the order of insertion and allows duplicates?",
    "o": [
      "std::vector",
      "std::map",
      "std::set",
      "std::unordered_map"
    ]
  },
  {
    "q": "What is the purpose of the `std::for_each` algorithm?",
    "o": [
      "Applies a function to each element in a given range",
      "Sorts a range of elements",
      "Finds the maximum element in a range",
      "Removes duplicates from a container"
    ]
  },
  {
    "q": "What will this code output?",
    "c": "#include <iostream>\n#include <map>\nint main() {\n  std::map<std::string, int> m;\n  m[\"a\"] = 1;\n  m[\"b\"] = 2;\n  std::cout << m.size();\n  return 0;\n}",
    "o": [
      "2",
      "1",
      "0",
      "3"
    ]
  },
  {
    "q": "Which of the following is true about `std::list`?",
    "o": [
      "It is a doubly linked list allowing fast insertion/deletion at both ends",
      "It is a dynamically resizable array",
      "It does not allow duplicate elements",
      "It uses hash-based indexing"
    ]
  },
  {
    "q": "Which C++ feature allows writing a single function to work with multiple types?",
    "o": [
      "Templates",
      "Overloading",
      "Inheritance",
      "Macros"
    ]
  },
  {
    "q": "What does this lambda function do?\n\n[](int a, int b){ return a > b; }",
    "o": [
      "Returns true if a is greater than b",
      "Swaps a and b",
      "Sorts elements in ascending order",
      "Returns the smaller of a and b"
    ]
  },
  {
    "q": "Which iterator type is used to read from and write to a container?",
    "o": [
      "Forward iterator",
      "Input iterator",
      "Output iterator",
      "Constant iterator"
    ]
  },
  {
    "q": "What is the correct syntax to declare a class template?",
    "o": [
      "template<typename T> class MyClass { };",
      "template(class T) class MyClass { };",
      "class template<T> MyClass { };",
      "template class MyClass<T> { };"
    ]
  },
  {
    "q": "Which of the following defines a class template correctly?",
    "o": [
      "template<typename T> class Box { T value; };",
      "class<T> Box { T value; };",
      "template<T> class Box { T value; };",
      "template class<T> Box { T value; };"
    ]
  },
  {
    "q": "What does the following code print?",
    "c": "#include <iostream>\n#include <vector>\nint main() {\n  std::vector<int> v = {10, 20, 30};\n  std::cout << v.back();\n  return 0;\n}",
    "o": [
      "30",
      "10",
      "20",
      "0"
    ]
  },
  {
    "q": "Which STL container automatically maintains key-value pairs in sorted order by key?",
    "o": [
      "std::map",
      "std::unordered_map",
      "std::vector",
      "std::list"
    ]
  },
  {
    "q": "Which keyword is used to create a generic function in C++?",
    "o": [
      "template",
      "typename",
      "auto",
      "generic"
    ]
  },
  {
    "q": "What is the result of this code?",
    "c": "#include <iostream>\n#include <list>\nint main() {\n  std::list<int> l = {1, 2, 3};\n  l.push_front(0);\n  std::cout << l.front();\n  return 0;\n}",
    "o": [
      "0",
      "1",
      "2",
      "3"
    ]
  },
  {
    "q": "What is the purpose of `std::find` algorithm?",
    "o": [
      "Searches for a value in a range and returns an iterator to it",
      "Sorts the range in ascending order",
      "Removes elements from a container",
      "Finds the maximum value in a range"
    ]
  },
  {
    "q": "Which container allows direct access by index?",
    "o": [
      "std::vector",
      "std::map",
      "std::list",
      "std::set"
    ]
  },
  {
    "q": "Which of the following defines a lambda that captures all external variables by reference?",
    "o": [
      "[&]() { return x + y; }",
      "[=]() { return x + y; }",
      "[]() { return x + y; }",
      "[x, y]() { return x + y; }"
    ]
  },
  {
    "q": "What is the correct way to iterate over a map using iterators?",
    "o": [
      "for (auto it = m.begin(); it != m.end(); ++it)",
      "for (int it = 0; it < m.size(); ++it)",
      "foreach (pair in m)",
      "for (auto i : m.begin())"
    ]
  },
  {
    "q": "Which header file is needed to use `std::vector`?",
    "o": [
      "#include <vector>",
      "#include <array>",
      "#include <map>",
      "#include <list>"
    ]
  },
  {
    "q": "Which C++ feature allows a single function to operate on different data types?",
    "o": [
      "Function templates",
      "Overloading",
      "Virtual functions",
      "Macros"
    ]
  },
  {
    "q": "What does this template function output?",
    "c": "template<typename T>\nT multiply(T a, T b) {\n    return a * b;\n}\nint main() {\n    std::cout << multiply(3, 4);\n    return 0;\n}",
    "o": [
      "12",
      "7",
      "0",
      "Compilation error"
    ]
  },
  {
    "q": "Which container is best suited for fast insertions and deletions at both ends?",
    "o": [
      "std::list",
      "std::vector",
      "std::map",
      "std::set"
    ]
  },
  {
    "q": "How is a lambda with no capture and no parameter list declared?",
    "o": [
      "[]() { /*...*/ }",
      "[=] { /*...*/ }",
      "[&] { /*...*/ }",
      "[this] { /*...*/ }"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "#include <vector>\n#include <iostream>\nint main() {\n    std::vector<int> v = {1, 2, 3};\n    std::cout << *(v.begin() + 1);\n}",
    "o": [
      "2",
      "1",
      "3",
      "Compilation error"
    ]
  },
  {
    "q": "Which of the following containers does NOT allow duplicate keys?",
    "o": [
      "std::map",
      "std::multimap",
      "std::vector",
      "std::list"
    ]
  },
  {
    "q": "What does this lambda do?\n`auto f = [](int a, int b){ return a > b; };`",
    "o": [
      "Returns true if a is greater than b",
      "Returns true if b is greater than a",
      "Always returns true",
      "Always returns false"
    ]
  },
  {
    "q": "What is the correct way to define a class template?",
    "o": [
      "template<class T> class Stack { /*...*/ };",
      "template Stack<T> class { /*...*/ };",
      "template<class> T class Stack { /*...*/ };",
      "template(T) class Stack { /*...*/ };"
    ]
  },
  {
    "q": "What will be the result of applying `std::sort` on a vector of integers?",
    "o": [
      "It will sort the elements in ascending order by default",
      "It will sort the elements in descending order by default",
      "It will reverse the elements",
      "It will leave the vector unchanged"
    ]
  },
  {
    "q": "Which STL component supports bidirectional iteration but not random access?",
    "o": [
      "std::list",
      "std::vector",
      "std::array",
      "std::string"
    ]
  },
  {
    "q": "What keyword is used to create a function template in C++?",
    "o": [
      "template",
      "typename",
      "function",
      "define"
    ]
  },
  {
    "q": "What will this code output?",
    "c": "#include <iostream>\n#include <list>\nint main() {\n    std::list<int> l = {10, 20, 30};\n    auto it = l.begin();\n    ++it;\n    std::cout << *it;\n    return 0;\n}",
    "o": [
      "20",
      "10",
      "30",
      "Compilation error"
    ]
  },
  {
    "q": "Which of the following STL containers stores elements in key-value pairs with sorted keys?",
    "o": [
      "std::map",
      "std::vector",
      "std::list",
      "std::stack"
    ]
  },
  {
    "q": "What is the output of the following lambda expression?",
    "c": "#include <iostream>\nint main() {\n    auto square = [](int x){ return x * x; };\n    std::cout << square(5);\n    return 0;\n}",
    "o": [
      "25",
      "10",
      "5",
      "0"
    ]
  },
  {
    "q": "Which container allows random access iteration?",
    "o": [
      "std::vector",
      "std::list",
      "std::set",
      "std::map"
    ]
  },
  {
    "q": "What is the purpose of `typename` or `class` in a template declaration?",
    "o": [
      "To specify a generic type",
      "To include standard headers",
      "To declare a namespace",
      "To define a macro"
    ]
  },
  {
    "q": "Which STL algorithm is used to count occurrences of a value in a container?",
    "o": [
      "std::count",
      "std::accumulate",
      "std::for_each",
      "std::find"
    ]
  },
  {
    "q": "What will be printed by this code?",
    "c": "#include <iostream>\n#include <vector>\nint main() {\n    std::vector<int> v = {1, 2, 3};\n    for (auto it = v.rbegin(); it != v.rend(); ++it)\n        std::cout << *it;\n    return 0;\n}",
    "o": [
      "321",
      "123",
      "132",
      "312"
    ]
  },
  {
    "q": "Which STL algorithm is used to sort elements in a container?",
    "o": [
      "std::sort",
      "std::order",
      "std::arrange",
      "std::filter"
    ]
  },
  {
    "q": "What is the correct syntax for defining a lambda function that captures all variables by reference?",
    "o": [
      "[&]() { /* code */ }",
      "[=]() { /* code */ }",
      "[this]() { /* code */ }",
      "[]() { /* code */ }"
    ]
  },
  {
    "q": "Which C++ feature allows writing functions that work with any data type?",
    "o": [
      "Templates",
      "Macros",
      "Namespaces",
      "Inheritance"
    ]
  },
  {
    "q": "What does the following code print?",
    "c": "#include <iostream>\n#include <vector>\nint main() {\n    std::vector<int> v = {1, 2, 3, 4};\n    std::cout << v.at(2);\n    return 0;\n}",
    "o": [
      "3",
      "2",
      "4",
      "1"
    ]
  },
  {
    "q": "Which STL container maintains elements in sorted key order and prevents duplicates?",
    "o": [
      "std::map",
      "std::unordered_map",
      "std::vector",
      "std::list"
    ]
  },
  {
    "q": "What is the purpose of `std::for_each` in C++?",
    "o": [
      "Applies a function to a range of elements",
      "Sorts elements in a range",
      "Removes duplicates",
      "Reverses a container"
    ]
  },
  {
    "q": "What is the output of this code snippet?",
    "c": "#include <iostream>\ntemplate<typename T>\nT multiply(T a, T b) {\n    return a * b;\n}\nint main() {\n    std::cout << multiply(3, 4);\n    return 0;\n}",
    "o": [
      "12",
      "7",
      "34",
      "0"
    ]
  },
  {
    "q": "What type of iterator does `std::list` support?",
    "o": [
      "Bidirectional",
      "Random access",
      "Input only",
      "Output only"
    ]
  },
  {
    "q": "Which of the following is a correct declaration of a class template?",
    "o": [
      "template<class T> class MyClass { };",
      "template(T) class MyClass { };",
      "template type T class MyClass { };",
      "template class MyClass<T> { };"
    ]
  },
  {
    "q": "What will be printed by this lambda expression?",
    "c": "#include <iostream>\nint main() {\n    auto greet = [](const std::string& name) {\n        return \"Hi \" + name;\n    };\n    std::cout << greet(\"Sam\");\n    return 0;\n}",
    "o": [
      "Hi Sam",
      "Hello Sam",
      "Sam",
      "Hi"
    ]
  },
  {
    "q": "Which STL container allows insertion and deletion from both ends efficiently?",
    "o": [
      "std::list",
      "std::vector",
      "std::map",
      "std::set"
    ]
  },
  {
    "q": "What is the time complexity of `std::vector::push_back()` in average case?",
    "o": [
      "O(1)",
      "O(log n)",
      "O(n)",
      "O(n log n)"
    ]
  },
  {
    "q": "Which STL container uses a doubly linked list for element storage?",
    "o": [
      "std::list",
      "std::vector",
      "std::map",
      "std::queue"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "#include <iostream>\n#include <vector>\nint main() {\n    std::vector<int> v = {10, 20, 30};\n    std::cout << *(v.begin() + 1);\n    return 0;\n}",
    "o": [
      "20",
      "10",
      "30",
      "Compilation error"
    ]
  },
  {
    "q": "Which function template declaration is valid?",
    "o": [
      "template<typename T> T add(T a, T b);",
      "template<T> T add(T a, T b);",
      "template<class> T add(a, b);",
      "function template<T>(T a, T b);"
    ]
  },
  {
    "q": "Which of the following is NOT an associative container?",
    "o": [
      "std::vector",
      "std::map",
      "std::set",
      "std::unordered_map"
    ]
  },
  {
    "q": "What will be the output of the following lambda expression?",
    "c": "#include <iostream>\nint main() {\n    int x = 5;\n    auto lambda = [=]() { return x * 2; };\n    std::cout << lambda();\n    return 0;\n}",
    "o": [
      "10",
      "5",
      "25",
      "0"
    ]
  },
  {
    "q": "Which STL algorithm removes elements based on a condition?",
    "o": [
      "std::remove_if",
      "std::erase",
      "std::delete_if",
      "std::filter"
    ]
  },
  {
    "q": "What is required to use `std::sort` on a container of user-defined types?",
    "o": [
      "A comparison operator or custom comparator",
      "A lambda to print the container",
      "A hashing function",
      "Nothing special"
    ]
  },
  {
    "q": "What is the default time complexity of insertion in `std::map`?",
    "o": [
      "O(log n)",
      "O(1)",
      "O(n)",
      "O(n log n)"
    ]
  },
  {
    "q": "Which STL container automatically resizes when needed and provides contiguous memory?",
    "o": [
      "std::vector",
      "std::list",
      "std::map",
      "std::stack"
    ]
  },
  {
    "q": "Which iterator type does `std::set` support?",
    "o": [
      "Bidirectional",
      "Random Access",
      "Forward Only",
      "None"
    ]
  },
  {
    "q": "Which of the following can be used to create a generic class in C++?",
    "o": [
      "template<typename T> class MyClass { };",
      "template(class T) class MyClass { };",
      "generic<T> class MyClass { };",
      "define template<T> class MyClass { };"
    ]
  },
  {
    "q": "Which STL container maintains sorted key-value pairs?",
    "o": [
      "std::map",
      "std::vector",
      "std::list",
      "std::queue"
    ]
  },
  {
    "q": "What is the output of this code snippet?",
    "c": "#include <iostream>\n#include <map>\nint main() {\n    std::map<int, int> m;\n    m[1] = 100;\n    m[2] = 200;\n    std::cout << m[1];\n    return 0;\n}",
    "o": [
      "100",
      "1",
      "200",
      "Compilation error"
    ]
  },
  {
    "q": "Which algorithm is used to find an element in a range using a condition?",
    "o": [
      "std::find_if",
      "std::search",
      "std::accumulate",
      "std::sort"
    ]
  },
  {
    "q": "What is captured in this lambda expression?\n\n`[&x]() { return x * 2; };`",
    "o": [
      "x is captured by reference",
      "x is captured by value",
      "Nothing is captured",
      "Syntax error"
    ]
  },
  {
    "q": "Which of the following is true about std::list?",
    "o": [
      "It allows constant time insertion/removal at any position",
      "It stores elements in contiguous memory",
      "It supports random access via indexing",
      "It is implemented as a vector internally"
    ]
  },
  {
    "q": "Which is a correct way to define a function template with two type parameters?",
    "o": [
      "template<typename T, typename U> void func(T a, U b);",
      "template T, U> void func(a, b);",
      "template<class T> void func(T a, U b);",
      "function<T, U>(a, b);"
    ]
  },
  {
    "q": "Which of the following can be used to iterate over a std::vector?",
    "o": [
      "std::vector<int>::iterator it = v.begin();",
      "auto it = v.start();",
      "v.iterator it = begin();",
      "vector_iter it = v.iterator();"
    ]
  },
  {
    "q": "What does std::for_each do?",
    "o": [
      "Applies a function to each element in a range",
      "Sorts elements",
      "Deletes elements",
      "Finds duplicates"
    ]
  },
  {
    "q": "Which of the following correctly uses a lambda with std::sort?",
    "c": "#include <algorithm>\n#include <vector>\n\nstd::vector<int> v = {3, 1, 2};\nstd::sort(v.begin(), v.end(), [](int a, int b) {\n    return a > b;\n});",
    "o": [
      "Sorts in descending order",
      "Sorts in ascending order",
      "Compilation error",
      "Does nothing"
    ]
  },
  {
    "q": "Which of the following is a correct function template definition?",
    "o": [
      "template<typename T> T maxVal(T a, T b) { return (a > b) ? a : b; }",
      "template<> T maxVal(T a, T b) { return (a > b) ? a : b; }",
      "template<class> T maxVal(T a, T b);",
      "template int maxVal(T a, T b);"
    ]
  },
  {
    "q": "Which STL container does not allow duplicate keys?",
    "o": [
      "std::map",
      "std::multimap",
      "std::vector",
      "std::list"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "#include <vector>\n#include <iostream>\nint main() {\n    std::vector<int> v = {1, 2, 3};\n    v.push_back(4);\n    std::cout << v[3];\n    return 0;\n}",
    "o": [
      "4",
      "3",
      "Compilation Error",
      "Segmentation Fault"
    ]
  },
  {
    "q": "Which of the following is used to remove all elements from an STL list?",
    "o": [
      "list.clear()",
      "list.erase()",
      "list.pop()",
      "list.empty()"
    ]
  },
  {
    "q": "Which STL algorithm counts elements that satisfy a condition?",
    "o": [
      "std::count_if",
      "std::find_if",
      "std::accumulate",
      "std::for_each"
    ]
  },
  {
    "q": "What does the following lambda do?\n\n`[](int x){ return x % 2 == 0; }`",
    "o": [
      "Checks if a number is even",
      "Checks if a number is odd",
      "Returns x as it is",
      "Returns true for all numbers"
    ]
  },
  {
    "q": "Which of these correctly defines a class template with a default type?",
    "o": [
      "template<typename T = int> class MyClass { };",
      "template<T = int> class MyClass { };",
      "template<int T> class MyClass { };",
      "template<typename T> class MyClass<int> { };"
    ]
  },
  {
    "q": "Which operation is valid on a std::map?",
    "o": [
      "Accessing a value using a key: m[key]",
      "Indexing with an integer position: m[0]",
      "Using push_back to insert elements",
      "Sorting using std::sort"
    ]
  },
  {
    "q": "Which of the following iterators supports bidirectional traversal?",
    "o": [
      "std::list::iterator",
      "std::vector::iterator",
      "std::array::iterator",
      "std::forward_list::iterator"
    ]
  },
  {
    "q": "What is the result of this code snippet?",
    "c": "#include <algorithm>\n#include <vector>\n#include <iostream>\nint main() {\n    std::vector<int> v = {5, 2, 9};\n    std::sort(v.begin(), v.end());\n    std::cout << v[0];\n    return 0;\n}",
    "o": [
      "2",
      "5",
      "9",
      "Compilation error"
    ]
  },
  {
    "q": "Which of the following allows writing a single function that works with different data types?",
    "o": [
      "Function templates",
      "Function overloading",
      "Virtual functions",
      "Macros"
    ]
  },
  {
    "q": "Which STL container is best suited for fast insertion/removal at both ends?",
    "o": [
      "std::list",
      "std::vector",
      "std::array",
      "std::map"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "#include <vector>\n#include <iostream>\nint main() {\n    std::vector<int> v = {10, 20};\n    v.insert(v.begin(), 5);\n    std::cout << v.front();\n    return 0;\n}",
    "o": [
      "5",
      "10",
      "20",
      "0"
    ]
  },
  {
    "q": "Which is the correct syntax for a class template in C++?",
    "o": [
      "template<typename T> class MyClass { };",
      "template<class> MyClass { };",
      "class template<typename T> MyClass { };",
      "template<MyClass> class T { };"
    ]
  },
  {
    "q": "Which algorithm is used to apply a lambda to each element in a container?",
    "o": [
      "std::for_each",
      "std::transform",
      "std::copy_if",
      "std::accumulate"
    ]
  },
  {
    "q": "Which of the following defines a lambda that captures all variables by reference?",
    "o": [
      "[&]() { }",
      "[=]() { }",
      "[this]() { }",
      "[]() { }"
    ]
  },
  {
    "q": "What does the `begin()` function return for STL containers?",
    "o": [
      "An iterator to the first element",
      "A pointer to the first element",
      "A reference to the first element",
      "A copy of the container"
    ]
  },
  {
    "q": "What is the output of this code snippet?",
    "c": "#include <map>\n#include <iostream>\nint main() {\n    std::map<char, int> m;\n    m['a'] = 100;\n    m['b'] = 200;\n    std::cout << m['a'];\n    return 0;\n}",
    "o": [
      "100",
      "200",
      "'a'",
      "Compilation Error"
    ]
  },
  {
    "q": "Which STL container automatically keeps elements sorted by key?",
    "o": [
      "std::map",
      "std::unordered_map",
      "std::vector",
      "std::list"
    ]
  },
  {
    "q": "Which of the following is the correct way to define a lambda that adds 2 numbers?",
    "o": [
      "[](int a, int b){ return a + b; }",
      "[=](a, b){ return a + b; }",
      "[a, b] -> int { return a + b; }",
      "lambda(int a, int b){ return a + b; }"
    ]
  },
  {
    "q": "What keyword is used to declare a function template in C++?",
    "o": [
      "template",
      "typename",
      "function",
      "generic"
    ]
  },
  {
    "q": "Which STL container maintains the order of insertion and provides random access?",
    "o": [
      "vector",
      "list",
      "map",
      "set"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "#include <vector>\n#include <iostream>\nint main() {\n    std::vector<int> v = {2, 4, 6};\n    std::cout << *(v.begin() + 1);\n    return 0;\n}",
    "o": [
      "4",
      "2",
      "6",
      "1"
    ]
  },
  {
    "q": "Which STL algorithm can be used to remove elements that satisfy a condition using a lambda?",
    "o": [
      "std::remove_if",
      "std::for_each",
      "std::sort",
      "std::accumulate"
    ]
  },
  {
    "q": "Which of the following defines a class template?",
    "o": [
      "template<class T> class Box { T val; };",
      "template<T> class Box { T val; };",
      "class template<T> Box { T val; };",
      "class Box<T> { T val; };"
    ]
  },
  {
    "q": "What is the output of this code snippet using a lambda?",
    "c": "#include <iostream>\nint main() {\n    auto add = [](int a, int b){ return a + b; };\n    std::cout << add(3, 4);\n    return 0;\n}",
    "o": [
      "7",
      "34",
      "0",
      "Error"
    ]
  },
  {
    "q": "Which STL container uses a key-value pair and maintains sorted keys?",
    "o": [
      "map",
      "unordered_map",
      "vector",
      "set"
    ]
  },
  {
    "q": "What is the purpose of `std::find` algorithm?",
    "o": [
      "To search for a specific value in a range",
      "To sort a container",
      "To copy elements from one container to another",
      "To remove duplicates"
    ]
  },
  {
    "q": "Which container is most efficient for inserting/removing elements in the middle?",
    "o": [
      "list",
      "vector",
      "array",
      "map"
    ]
  },
  {
    "q": "Which of the following defines a lambda that captures variable x by value?",
    "o": [
      "[x]() { return x + 1; }",
      "[&x]() { return x + 1; }",
      "[=]() { return x + 1; }",
      "[]() { return x + 1; }"
    ]
  },
  {
    "q": "Which of the following correctly creates a function template for swapping two values?",
    "o": [
      "template<typename T> void swapVals(T &a, T &b) { T temp = a; a = b; b = temp; }",
      "template<class T> void swapVals(T a, T b) { a = b; b = a; }",
      "template<T> void swapVals(T a, T b) { T temp = a; a = b; b = temp; }",
      "void swapVals(auto a, auto b) { T temp = a; a = b; b = temp; }"
    ]
  },
  {
    "q": "Which STL container is best suited for Last-In-First-Out (LIFO) operations?",
    "o": [
      "stack",
      "queue",
      "vector",
      "set"
    ]
  },
  {
    "q": "What is the output of this lambda expression code?",
    "c": "#include <iostream>\nint main() {\n    int x = 10;\n    auto print = [=]() { std::cout << x; };\n    print();\n    return 0;\n}",
    "o": [
      "10",
      "0",
      "Error",
      "Undefined"
    ]
  },
  {
    "q": "Which of the following containers does not allow duplicate keys?",
    "o": [
      "map",
      "multimap",
      "vector",
      "list"
    ]
  },
  {
    "q": "Which iterator type is required for the std::sort algorithm?",
    "o": [
      "Random access iterator",
      "Bidirectional iterator",
      "Forward iterator",
      "Input iterator"
    ]
  },
  {
    "q": "How can you iterate through all elements of a std::list?",
    "o": [
      "Using bidirectional iterators",
      "Using random access iterators",
      "Using array indexing",
      "Using std::list::get()"
    ]
  },
  {
    "q": "What is the correct way to pass a lambda to std::for_each?",
    "o": [
      "std::for_each(v.begin(), v.end(), [](int n){ std::cout << n; });",
      "std::for_each(v.begin(), [](int n){ std::cout << n; });",
      "std::for_each(v, [](int n){ std::cout << n; });",
      "for_each(v, [](int n){ std::cout << n; });"
    ]
  },
  {
    "q": "Which STL container is implemented as a doubly linked list?",
    "o": [
      "list",
      "vector",
      "set",
      "map"
    ]
  },
  {
    "q": "What does the following code print?",
    "c": "#include <vector>\n#include <iostream>\nint main() {\n  std::vector<int> v = {1, 2, 3};\n  std::cout << v.back();\n  return 0;\n}",
    "o": [
      "3",
      "1",
      "2",
      "0"
    ]
  },
  {
    "q": "What is the purpose of using templates in C++?",
    "o": [
      "To write generic and reusable code",
      "To enforce type-checking at runtime",
      "To allow dynamic memory allocation",
      "To speed up compilation"
    ]
  },
  {
    "q": "Which STL container maintains key-value pairs in sorted order and allows fast lookup?",
    "o": [
      "map",
      "vector",
      "list",
      "stack"
    ]
  },
  {
    "q": "What is the output of this code snippet using a class template?",
    "c": "template<typename T>\nclass Calculator {\npublic:\n    T add(T a, T b) { return a + b; }\n};\n\nint main() {\n    Calculator<int> calc;\n    std::cout << calc.add(3, 7);\n    return 0;\n}",
    "o": [
      "10",
      "37",
      "Compile Error",
      "Runtime Error"
    ]
  },
  {
    "q": "Which of the following is a correct declaration of a lambda function in C++?",
    "o": [
      "auto square = [](int x) { return x * x; };",
      "lambda square = int x -> x * x;",
      "def square(x): return x * x;",
      "auto square = (int x) -> { return x * x; };"
    ]
  },
  {
    "q": "Which algorithm in STL is used to search for an element in a container?",
    "o": [
      "std::find",
      "std::copy",
      "std::for_each",
      "std::sort"
    ]
  },
  {
    "q": "What does the following code output using a lambda with capture by reference?",
    "c": "#include <iostream>\nint main() {\n  int count = 0;\n  auto inc = [&]() { count++; };\n  inc(); inc();\n  std::cout << count;\n  return 0;\n}",
    "o": [
      "2",
      "0",
      "1",
      "Compile Error"
    ]
  },
  {
    "q": "Which STL container provides constant-time insertion and deletion from both ends?",
    "o": [
      "deque",
      "vector",
      "set",
      "map"
    ]
  },
  {
    "q": "Which type of iterator does std::list provide?",
    "o": [
      "Bidirectional",
      "Random access",
      "Forward only",
      "Input"
    ]
  },
  {
    "q": "What is the purpose of class templates in C++?",
    "o": [
      "To allow generic classes that can work with any data type",
      "To overload class constructors",
      "To dynamically allocate memory",
      "To implement multiple inheritance"
    ]
  },
  {
    "q": "Which of these STL containers guarantees unique keys?",
    "o": [
      "map",
      "multimap",
      "vector",
      "list"
    ]
  },
  {
    "q": "What does the following code print?",
    "c": "#include <vector>\n#include <iostream>\nint main() {\n  std::vector<int> v = {5, 10, 15};\n  std::cout << *(v.begin() + 1);\n  return 0;\n}",
    "o": [
      "10",
      "5",
      "15",
      "Compile Error"
    ]
  },
  {
    "q": "What is the primary benefit of using function templates in C++?",
    "o": [
      "They allow the same function to work with different data types",
      "They increase execution speed",
      "They reduce memory usage",
      "They prevent runtime errors"
    ]
  },
  {
    "q": "What does the following code output?",
    "c": "#include <iostream>\n#include <vector>\nint main() {\n  std::vector<int> v = {1, 2, 3};\n  for (auto it = v.rbegin(); it != v.rend(); ++it) {\n    std::cout << *it;\n  }\n  return 0;\n}",
    "o": [
      "321",
      "123",
      "Error",
      "Nothing"
    ]
  },
  {
    "q": "Which of the following STL containers does not support random access iterators?",
    "o": [
      "list",
      "vector",
      "deque",
      "array"
    ]
  },
  {
    "q": "Which line defines a class template correctly?",
    "o": [
      "template<typename T> class MyClass { };",
      "template<class> class MyClass() { };",
      "template int class MyClass { };",
      "class template<typename T> MyClass { };"
    ]
  },
  {
    "q": "What is the output of the following lambda function usage?",
    "c": "#include <iostream>\nint main() {\n  auto sum = [](int a, int b) { return a + b; };\n  std::cout << sum(4, 6);\n  return 0;\n}",
    "o": [
      "10",
      "46",
      "0",
      "Compile Error"
    ]
  },
  {
    "q": "Which STL algorithm applies a function to each element in a range?",
    "o": [
      "std::for_each",
      "std::find_if",
      "std::transform",
      "std::accumulate"
    ]
  },
  {
    "q": "What is the correct way to declare a map that maps strings to integers?",
    "o": [
      "std::map<std::string, int>",
      "map<string, int>",
      "std::map<int, std::string>",
      "map<string>"
    ]
  },
  {
    "q": "What is the output of this code using a template function?",
    "c": "template<typename T>\nT multiply(T a, T b) {\n  return a * b;\n}\n\nint main() {\n  std::cout << multiply<double>(2.5, 4.0);\n  return 0;\n}",
    "o": [
      "10",
      "6.5",
      "2.5",
      "Compile Error"
    ]
  },
  {
    "q": "Which container is best suited for fast insertions/removals at both ends but no random access?",
    "o": [
      "list",
      "vector",
      "array",
      "set"
    ]
  },
  {
    "q": "Which of the following is a valid lambda that captures a local variable by value?",
    "o": [
      "auto func = [x]() { return x + 5; };",
      "auto func = [&x]() { return x + 5; };",
      "auto func = x[]() { return x + 5; };",
      "auto func = ()[x] { return x + 5; };"
    ]
  },
  {
    "q": "Which of the following is a correct use of a function template with type deduction?",
    "c": "template<typename T>\nT maxVal(T a, T b) {\n  return (a > b) ? a : b;\n}\n\nint main() {\n  std::cout << maxVal(4, 7);\n  return 0;\n}",
    "o": [
      "7",
      "4",
      "maxVal",
      "Compile Error"
    ]
  },
  {
    "q": "Which STL container is best for key-value pairs with fast lookup?",
    "o": [
      "map",
      "vector",
      "list",
      "deque"
    ]
  },
  {
    "q": "Which type of iterator is supported by std::list but not by std::vector?",
    "o": [
      "Bidirectional",
      "Random access",
      "Input",
      "Output"
    ]
  },
  {
    "q": "What is the output of the following lambda with capture by reference?",
    "c": "#include <iostream>\nint main() {\n  int a = 5;\n  auto f = [&]() { a += 10; };\n  f();\n  std::cout << a;\n  return 0;\n}",
    "o": [
      "15",
      "5",
      "10",
      "Compile Error"
    ]
  },
  {
    "q": "What is the result of using std::find with iterators if the element is not found?",
    "o": [
      "It returns the end iterator",
      "It throws an exception",
      "It returns -1",
      "It crashes the program"
    ]
  },
  {
    "q": "What keyword is used to create a class template?",
    "o": [
      "template",
      "typename",
      "generic",
      "using"
    ]
  },
  {
    "q": "What is the time complexity of insertion in std::map?",
    "o": [
      "O(log n)",
      "O(1)",
      "O(n)",
      "O(n log n)"
    ]
  },
  {
    "q": "What does the following code print using a vector iterator?",
    "c": "#include <iostream>\n#include <vector>\nint main() {\n  std::vector<int> v = {1, 2, 3};\n  auto it = v.begin();\n  ++it;\n  std::cout << *it;\n  return 0;\n}",
    "o": [
      "2",
      "1",
      "3",
      "Compile Error"
    ]
  },
  {
    "q": "Which STL algorithm can sort elements in a vector?",
    "o": [
      "std::sort",
      "std::find",
      "std::for_each",
      "std::copy"
    ]
  },
  {
    "q": "Which lambda syntax captures all local variables by value and allows parameter input?",
    "o": [
      "auto l = [=](int x) { return x * 2; };",
      "auto l = [](=int x) { return x * 2; };",
      "auto l = [int x]() { return x * 2; };",
      "auto l = ()[=] { return x * 2; };"
    ]
  },
  {
    "q": "Which of the following correctly defines a class template?",
    "c": "template <typename T>\nclass MyClass {\n  T value;\npublic:\n  MyClass(T v) : value(v) {}\n  T getValue() { return value; }\n};",
    "o": [
      "template <typename T> class MyClass {...}",
      "class MyClass<T> {...}",
      "template class MyClass {...}",
      "MyClass<T> template {...}"
    ]
  },
  {
    "q": "Which STL container maintains sorted key-value pairs?",
    "o": [
      "std::map",
      "std::vector",
      "std::list",
      "std::stack"
    ]
  },
  {
    "q": "What is the output of the following code using a lambda expression?",
    "c": "#include <iostream>\n#include <algorithm>\n#include <vector>\nint main() {\n  std::vector<int> v = {1, 2, 3};\n  std::for_each(v.begin(), v.end(), [](int n){ std::cout << n * 2 << \" \"; });\n  return 0;\n}",
    "o": [
      "2 4 6 ",
      "1 2 3 ",
      "2 2 2 ",
      "Compile Error"
    ]
  },
  {
    "q": "Which STL algorithm is used to apply a function to all elements in a range?",
    "o": [
      "std::for_each",
      "std::copy",
      "std::accumulate",
      "std::sort"
    ]
  },
  {
    "q": "Which of the following allows iteration over a std::map?",
    "c": "#include <map>\nstd::map<std::string, int> m = { {\"a\", 1}, {\"b\", 2} };\nfor (auto it = m.begin(); it != m.end(); ++it) {\n  std::cout << it->first << \" \" << it->second;\n}",
    "o": [
      "Iterator returns key-value pairs",
      "Iterator returns only keys",
      "Iterator returns only values",
      "Iteration not supported"
    ]
  },
  {
    "q": "Which type of container is best for random access and dynamic resizing at the end?",
    "o": [
      "std::vector",
      "std::map",
      "std::list",
      "std::set"
    ]
  },
  {
    "q": "What is true about lambda expressions in C++?",
    "o": [
      "They can capture variables from the surrounding scope.",
      "They must return void.",
      "They cannot take parameters.",
      "They can only be used with algorithms."
    ]
  },
  {
    "q": "What is the output of this function template instantiation?",
    "c": "template<typename T>\nT multiply(T a, T b) {\n  return a * b;\n}\nint main() {\n  std::cout << multiply(3.0, 2.0);\n}",
    "o": [
      "6.0",
      "5.0",
      "3.0",
      "Compile Error"
    ]
  },
  {
    "q": "Which STL container allows duplicate keys?",
    "o": [
      "std::multimap",
      "std::map",
      "std::set",
      "std::unordered_map"
    ]
  },
  {
    "q": "Which keyword is used to define a generic function or class in C++?",
    "o": [
      "template",
      "generic",
      "define",
      "auto"
    ]
  },
  {
    "q": "Which C++ keyword is used to define a generic function?",
    "o": [
      "template",
      "typename",
      "generic",
      "auto"
    ]
  },
  {
    "q": "What is the output of the following lambda expression?",
    "c": "#include <iostream>\nint main() {\n  auto square = [](int x) { return x * x; };\n  std::cout << square(6);\n  return 0;\n}",
    "o": [
      "36",
      "12",
      "6",
      "Error"
    ]
  },
  {
    "q": "Which container is best suited for inserting or removing elements in the middle frequently?",
    "o": [
      "std::list",
      "std::vector",
      "std::array",
      "std::map"
    ]
  },
  {
    "q": "Which of the following is a correct way to create a vector of integers with 5 elements initialized to 0?",
    "o": [
      "std::vector<int> v(5, 0);",
      "std::vector<int> v = {0, 0, 0, 0, 0};",
      "std::vector<int> v(0, 5);",
      "std::vector v<int>(5);"
    ]
  },
  {
    "q": "What does the following code output?",
    "c": "#include <iostream>\n#include <vector>\n#include <algorithm>\nint main() {\n  std::vector<int> v = {3, 1, 4};\n  std::sort(v.begin(), v.end());\n  for (int i : v) std::cout << i << ' ';\n}",
    "o": [
      "1 3 4 ",
      "3 1 4 ",
      "4 3 1 ",
      "1 4 3 "
    ]
  },
  {
    "q": "What is the purpose of 'auto' in the context of STL iterators?",
    "o": [
      "It automatically deduces the type of iterator.",
      "It creates a generic container.",
      "It initializes all elements.",
      "It defines the iterator manually."
    ]
  },
  {
    "q": "Which of the following is a correct way to define a class template with two types?",
    "o": [
      "template<typename T, typename U> class Pair { ... };",
      "class Pair<T, U> template { ... };",
      "template<class> class Pair<T, U> { ... };",
      "Pair template<class T, U> { ... };"
    ]
  },
  {
    "q": "Which STL algorithm is used to count occurrences of a value in a container?",
    "o": [
      "std::count",
      "std::accumulate",
      "std::find",
      "std::equal"
    ]
  },
  {
    "q": "Which iterator category allows bidirectional movement?",
    "o": [
      "Bidirectional Iterator",
      "Input Iterator",
      "Forward Iterator",
      "Output Iterator"
    ]
  },
  {
    "q": "What is the role of capture list in a lambda expression?",
    "o": [
      "To access variables from the surrounding scope",
      "To define return type",
      "To create containers",
      "To define template parameters"
    ]
  },
  {
    "q": "What is the correct syntax for a function template with one type parameter?",
    "o": [
      "template<typename T> T max(T a, T b);",
      "function<T> max(T a, T b);",
      "template<class T> max(T a, T b);",
      "template<max> T function(T a, T b);"
    ]
  },
  {
    "q": "What does the following code print?",
    "c": "#include <iostream>\n#include <map>\nint main() {\n  std::map<std::string, int> ages = {{\"John\", 25}, {\"Alice\", 30}};\n  std::cout << ages[\"Alice\"];\n}",
    "o": [
      "30",
      "25",
      "0",
      "Error"
    ]
  },
  {
    "q": "Which STL container maintains elements in a sorted key order?",
    "o": [
      "std::map",
      "std::unordered_map",
      "std::vector",
      "std::list"
    ]
  },
  {
    "q": "Which of the following correctly uses a lambda to check if a number is even?",
    "o": [
      "[](int x){ return x % 2 == 0; }",
      "lambda(int x) => x % 2 == 0",
      "function(x) { return x % 2 == 0; }",
      "[](x) => x % 2 == 0"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "#include <vector>\n#include <iostream>\nint main() {\n  std::vector<int> v = {1, 2, 3};\n  std::cout << v.front();\n}",
    "o": [
      "1",
      "2",
      "3",
      "Error"
    ]
  },
  {
    "q": "Which of the following correctly initializes a list with three values?",
    "o": [
      "std::list<int> l = {10, 20, 30};",
      "std::list<int> l(10, 20, 30);",
      "std::list<int> l = new list(10, 20, 30);",
      "list<int> l{10, 20, 30};"
    ]
  },
  {
    "q": "What is required to make a class template work with multiple data types?",
    "o": [
      "template<typename T, typename U>",
      "class<T, U>",
      "type T, U class",
      "template<classname T, U>"
    ]
  },
  {
    "q": "What will this code output?",
    "c": "#include <algorithm>\n#include <vector>\n#include <iostream>\nint main() {\n  std::vector<int> v = {5, 1, 4};\n  auto it = std::max_element(v.begin(), v.end());\n  std::cout << *it;\n}",
    "o": [
      "5",
      "4",
      "1",
      "Error"
    ]
  },
  {
    "q": "Which type of iterator allows modification of the container elements?",
    "o": [
      "Non-const iterator",
      "Const iterator",
      "Forward iterator",
      "Input iterator"
    ]
  },
  {
    "q": "Which C++ standard first introduced lambda expressions?",
    "o": [
      "C++11",
      "C++03",
      "C++98",
      "C++17"
    ]
  },
  {
    "q": "Which keyword is used to define a function template in C++?",
    "o": [
      "template",
      "function",
      "define",
      "macro"
    ]
  },
  {
    "q": "What is the output of this code snippet?",
    "c": "#include <iostream>\ntemplate<typename T>\nT square(T x) {\n    return x * x;\n}\nint main() {\n    std::cout << square(4);\n}",
    "o": [
      "16",
      "8",
      "4",
      "Error"
    ]
  },
  {
    "q": "Which STL container is best suited for frequent insertions and deletions at both ends?",
    "o": [
      "std::list",
      "std::vector",
      "std::map",
      "std::array"
    ]
  },
  {
    "q": "What is the purpose of std::find in C++?",
    "o": [
      "To search for an element in a range",
      "To sort the elements",
      "To remove an element",
      "To count the elements"
    ]
  },
  {
    "q": "Which of the following lambda expressions captures all external variables by reference?",
    "o": [
      "[&]() { return a + b; }",
      "[=]() { return a + b; }",
      "[a, b]() { return a + b; }",
      "[]() { return a + b; }"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "#include <vector>\n#include <iostream>\nint main() {\n  std::vector<int> v = {10, 20, 30};\n  std::cout << v.at(1);\n}",
    "o": [
      "20",
      "10",
      "30",
      "Error"
    ]
  },
  {
    "q": "What is the time complexity of inserting into a std::map?",
    "o": [
      "O(log n)",
      "O(1)",
      "O(n)",
      "O(n log n)"
    ]
  },
  {
    "q": "Which of the following is a correct syntax for a class template?",
    "o": [
      "template<class T> class MyClass { };",
      "template class<T> MyClass { };",
      "class template<T> MyClass { };",
      "template<class T> MyClass class { };"
    ]
  },
  {
    "q": "What will this code output?",
    "c": "#include <algorithm>\n#include <vector>\n#include <iostream>\nint main() {\n  std::vector<int> v = {1, 3, 2};\n  std::sort(v.begin(), v.end());\n  std::cout << v[0];\n}",
    "o": [
      "1",
      "2",
      "3",
      "Error"
    ]
  },
  {
    "q": "Which of the following is an example of a lambda with explicit return type?",
    "o": [
      "[](int x) -> int { return x + 1; }",
      "[](int x) { return x + 1; }",
      "[](int x): int { return x + 1; }",
      "[] -> int (int x) { return x + 1; }"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "#include <iostream>\n#include <vector>\nint main() {\n  std::vector<int> v{1, 2, 3};\n  std::cout << v.front();\n}",
    "o": [
      "1",
      "2",
      "3",
      "Error"
    ]
  },
  {
    "q": "Which iterator type allows both forward and backward traversal in STL containers?",
    "o": [
      "Bidirectional iterator",
      "Forward iterator",
      "Input iterator",
      "Output iterator"
    ]
  },
  {
    "q": "Which STL container automatically maintains key-value pairs in sorted order?",
    "o": [
      "std::map",
      "std::vector",
      "std::list",
      "std::stack"
    ]
  },
  {
    "q": "What is the output of this code snippet?",
    "c": "#include <iostream>\n#include <list>\nint main() {\n  std::list<int> l = {5, 10, 15};\n  std::cout << l.back();\n}",
    "o": [
      "15",
      "5",
      "10",
      "Error"
    ]
  },
  {
    "q": "Which STL algorithm is used to remove all elements equal to a specific value from a container?",
    "o": [
      "std::remove",
      "std::erase",
      "std::delete",
      "std::filter"
    ]
  },
  {
    "q": "Which is a correct syntax to define a generic function template?",
    "o": [
      "template<typename T> T max(T a, T b) { return (a > b) ? a : b; }",
      "template T max(T a, T b) { return (a > b) ? a : b; }",
      "function<T> max(T a, T b) { return (a > b) ? a : b; }",
      "template<type T> max(T a, T b) { return (a > b) ? a : b; }"
    ]
  },
  {
    "q": "Which lambda correctly captures variable `x` by value and `y` by reference?",
    "o": [
      "[x, &y]() { return x + y; }",
      "[=, &y]() { return x + y; }",
      "[&x, y]() { return x + y; }",
      "[&]() { return x + y; }"
    ]
  },
  {
    "q": "What will this code output?",
    "c": "#include <iostream>\n#include <map>\nint main() {\n  std::map<int, std::string> m;\n  m[1] = \"One\";\n  m[2] = \"Two\";\n  std::cout << m[2];\n}",
    "o": [
      "Two",
      "One",
      "0",
      "Error"
    ]
  },
  {
    "q": "Which STL algorithm is used to count the number of occurrences of a value?",
    "o": [
      "std::count",
      "std::find",
      "std::accumulate",
      "std::search"
    ]
  },
  {
    "q": "What kind of iterator does std::vector support?",
    "o": [
      "Random access iterator",
      "Bidirectional iterator",
      "Forward iterator",
      "Input iterator"
    ]
  },
  {
    "q": "Which of the following correctly defines a function template in C++?",
    "o": [
      "template <typename T> T max(T a, T b) { return (a > b) ? a : b; }",
      "template function max(T a, T b) { return (a > b) ? a : b; }",
      "template <class T> T max(a, b) { return (a > b) ? a : b; }",
      "function template max(T a, T b) { return (a > b) ? a : b; }"
    ]
  },
  {
    "q": "What is the output of the following C++ code?",
    "c": "#include <iostream>\n#include <vector>\n\nint main() {\n    std::vector<int> v = {1, 2, 3, 4};\n    std::cout << v[2];\n    return 0;\n}",
    "o": [
      "3",
      "2",
      "4",
      "1"
    ]
  },
  {
    "q": "Which of the following containers in STL maintains the elements in sorted order by default?",
    "o": [
      "std::map",
      "std::vector",
      "std::list",
      "std::unordered_map"
    ]
  },
  {
    "q": "What is the output of the following code using STL algorithm?",
    "c": "#include <iostream>\n#include <algorithm>\n#include <vector>\n\nint main() {\n    std::vector<int> v = {5, 3, 8, 1};\n    std::sort(v.begin(), v.end());\n    std::cout << v[0];\n    return 0;\n}",
    "o": [
      "1",
      "5",
      "8",
      "3"
    ]
  },
  {
    "q": "Which keyword is used to define a class template in C++?",
    "o": [
      "template",
      "class_template",
      "define",
      "typename_class"
    ]
  },
  {
    "q": "What will be the output of the following code?",
    "c": "#include <iostream>\n#include <map>\n\nint main() {\n    std::map<int, std::string> m;\n    m[1] = \"Apple\";\n    m[2] = \"Banana\";\n    std::cout << m[2];\n    return 0;\n}",
    "o": [
      "Banana",
      "Apple",
      "2",
      "Error"
    ]
  },
  {
    "q": "Which of the following correctly defines a lambda function in C++?",
    "o": [
      "auto add = [](int a, int b) { return a + b; };",
      "auto add(int a, int b) => a + b;",
      "lambda add = (int a, int b) -> a + b;",
      "function add = [](int a, int b) { return a + b; };"
    ]
  },
  {
    "q": "Which of the following is true about STL iterators?",
    "o": [
      "They behave like pointers and are used to access container elements.",
      "They are only used with vectors and lists.",
      "They store the size of the container.",
      "They automatically sort the container."
    ]
  },
  {
    "q": "Which of the following is a benefit of using function templates in C++?",
    "o": [
      "They allow code reuse for different data types.",
      "They increase the size of the executable.",
      "They prevent type checking at compile time.",
      "They require manual instantiation for every type."
    ]
  },
  {
    "q": "What will be the output of the following C++ code snippet?",
    "c": "#include <iostream>\n#include <vector>\n\nint main() {\n    std::vector<char> v = {'a', 'b', 'c'};\n    std::cout << v.at(1);\n    return 0;\n}",
    "o": [
      "b",
      "a",
      "c",
      "1"
    ]
  },
  {
    "q": "Which STL container allows insertion and deletion from both ends efficiently?",
    "o": [
      "std::list",
      "std::vector",
      "std::map",
      "std::set"
    ]
  },
  {
    "q": "Which of the following is the correct syntax for defining a class template?",
    "o": [
      "template <class T> class MyClass { T data; };",
      "class template <typename T> MyClass { T data; };",
      "template class <T> MyClass { T data; };",
      "class MyClass <T> template { T data; };"
    ]
  },
  {
    "q": "Which of the following correctly initializes an iterator for a std::vector<int> v?",
    "o": [
      "std::vector<int>::iterator it = v.begin();",
      "auto it = v.iterator();",
      "int* it = v.begin();",
      "iterator it = vector.begin();"
    ]
  },
  {
    "q": "What is the output of the following code using a lambda expression?",
    "c": "#include <iostream>\n\nint main() {\n    auto greet = []() { std::cout << \"Hello from lambda!\"; };\n    greet();\n    return 0;\n}",
    "o": [
      "Hello from lambda!",
      "lambda",
      "Error",
      "Nothing"
    ]
  },
  {
    "q": "Which of the following STL containers stores key-value pairs in a sorted order?",
    "o": [
      "std::map",
      "std::unordered_map",
      "std::vector",
      "std::queue"
    ]
  },
  {
    "q": "Which STL algorithm can be used to count elements in a container based on a condition?",
    "o": [
      "std::count_if",
      "std::for_each",
      "std::accumulate",
      "std::transform"
    ]
  },
  {
    "q": "What is the role of 'typename' in template declaration?",
    "o": [
      "It is used to declare a generic type parameter.",
      "It defines the return type of the template.",
      "It restricts template to integral types only.",
      "It initializes template variables."
    ]
  },
  {
    "q": "What will be the output of the following code?",
    "c": "#include <iostream>\n#include <list>\n\nint main() {\n    std::list<int> lst = {10, 20, 30};\n    lst.pop_front();\n    std::cout << lst.front();\n    return 0;\n}",
    "o": [
      "20",
      "10",
      "30",
      "0"
    ]
  },
  {
    "q": "Which of the following best describes a class template?",
    "o": [
      "A blueprint for generating classes based on data types",
      "A runtime-generated class",
      "A way to create multiple inheritance",
      "A pointer to a base class"
    ]
  },
  {
    "q": "What is the output of the following C++ program?",
    "c": "#include <iostream>\ntemplate <typename T>\nT square(T x) {\n    return x * x;\n}\nint main() {\n    std::cout << square(4);\n    return 0;\n}",
    "o": [
      "16",
      "8",
      "4",
      "Error"
    ]
  },
  {
    "q": "Which of the following is a correct use of std::for_each with a lambda?",
    "o": [
      "std::for_each(v.begin(), v.end(), [](int x){ std::cout << x; });",
      "for_each(v, [](x){ std::cout << x; });",
      "foreach(v.begin(), v.end(), lambda(x){ print(x); });",
      "std::for_each(v, [](int x) => std::cout << x);"
    ]
  },
  {
    "q": "Which STL container automatically maintains unique keys in sorted order?",
    "o": [
      "std::map",
      "std::vector",
      "std::list",
      "std::multimap"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "#include <iostream>\n#include <vector>\nint main() {\n    std::vector<int> v = {2, 4, 6};\n    std::cout << v.size();\n    return 0;\n}",
    "o": [
      "3",
      "6",
      "2",
      "1"
    ]
  },
  {
    "q": "Which of the following best defines a lambda with no capture and one parameter?",
    "o": [
      "[](int x) { return x * 2; }",
      "(int x) => x * 2",
      "lambda(int x) { x * 2; }",
      "function(x) { return x * 2; }"
    ]
  },
  {
    "q": "Which C++ STL algorithm is used to remove consecutive duplicate elements from a container?",
    "o": [
      "std::unique",
      "std::remove",
      "std::erase",
      "std::copy_if"
    ]
  },
  {
    "q": "What does the following template class declaration do?",
    "c": "template <typename T>\nclass Box {\n    T value;\n};",
    "o": [
      "Creates a class template with a generic type T",
      "Creates a class with multiple inheritance",
      "Defines a macro with a type",
      "Instantiates a new object of type T"
    ]
  },
  {
    "q": "What is the output of this code snippet using iterators?",
    "c": "#include <iostream>\n#include <vector>\nint main() {\n    std::vector<int> v = {1, 2, 3};\n    std::vector<int>::iterator it = v.begin();\n    std::cout << *it;\n    return 0;\n}",
    "o": [
      "1",
      "2",
      "3",
      "Error"
    ]
  },
  {
    "q": "Which STL container allows fast lookup of elements using keys and stores them in an unordered manner?",
    "o": [
      "std::unordered_map",
      "std::map",
      "std::vector",
      "std::list"
    ]
  },
  {
    "q": "Which of the following is a feature of class templates in C++?",
    "o": [
      "They allow the creation of classes that work with any data type.",
      "They reduce the need for object-oriented programming.",
      "They enforce compile-time polymorphism.",
      "They prevent the use of STL containers."
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "#include <iostream>\n#include <list>\n\nint main() {\n    std::list<int> l = {1, 2, 3};\n    l.push_front(0);\n    std::cout << l.front();\n    return 0;\n}",
    "o": [
      "0",
      "1",
      "3",
      "Error"
    ]
  },
  {
    "q": "Which STL algorithm is used to apply a function to each element in a range?",
    "o": [
      "std::for_each",
      "std::transform",
      "std::accumulate",
      "std::copy"
    ]
  },
  {
    "q": "What does the following lambda expression capture?",
    "c": "int a = 10;\nauto f = [a]() { return a * 2; };",
    "o": [
      "Captures variable 'a' by value",
      "Captures variable 'a' by reference",
      "Does not capture anything",
      "Causes a compile-time error"
    ]
  },
  {
    "q": "What is the output of this C++ code using std::map?",
    "c": "#include <iostream>\n#include <map>\nint main() {\n    std::map<char, int> m;\n    m['x'] = 42;\n    std::cout << m['x'];\n    return 0;\n}",
    "o": [
      "42",
      "x",
      "0",
      "Error"
    ]
  },
  {
    "q": "Which of the following is a correct syntax for declaring a function template?",
    "o": [
      "template <typename T> T multiply(T a, T b);",
      "function <typename T> T multiply(T a, T b);",
      "T multiply<T>(T a, T b);",
      "template function multiply(T a, T b);"
    ]
  },
  {
    "q": "Which of the following correctly declares a lambda that captures all variables by reference?",
    "o": [
      "[&]() { std::cout << \"Captured by reference\"; }",
      "[]() { std::cout << \"Captured by reference\"; }",
      "[=]() { std::cout << \"Captured by reference\"; }",
      "[&x]() { std::cout << \"Captured by reference\"; }"
    ]
  },
  {
    "q": "What is the purpose of std::transform in the STL?",
    "o": [
      "It applies a function to a range and stores the result in another range.",
      "It rearranges elements into sorted order.",
      "It deletes elements based on a predicate.",
      "It finds the minimum value in a range."
    ]
  },
  {
    "q": "Which STL container provides constant time access using an index?",
    "o": [
      "std::vector",
      "std::list",
      "std::map",
      "std::set"
    ]
  },
  {
    "q": "What will the following template function return?",
    "c": "template <class T>\nT min_value(T x, T y) {\n    return (x < y) ? x : y;\n}",
    "o": [
      "The smaller of x and y",
      "The larger of x and y",
      "Always x",
      "Always y"
    ]
  },
  {
    "q": "Which of the following correctly creates a vector of 5 integers initialized to 0?",
    "o": [
      "std::vector<int> v(5, 0);",
      "std::vector<int> v = {0, 0, 0, 0, 0};",
      "std::vector<int> v{5};",
      "std::vector<int> v = 0;"
    ]
  },
  {
    "q": "Which STL container allows insertion and deletion from both front and back in constant time?",
    "o": [
      "std::list",
      "std::vector",
      "std::set",
      "std::stack"
    ]
  },
  {
    "q": "Which line correctly declares a lambda that takes two integers and returns their sum?",
    "o": [
      "auto add = [](int a, int b) { return a + b; };",
      "lambda add(int a, int b) => a + b;",
      "auto add(int a, int b) = [] { return a + b; };",
      "auto add = (int a, int b) -> { return a + b; };"
    ]
  },
  {
    "q": "What does the following C++ code output?",
    "c": "#include <iostream>\n#include <vector>\nint main() {\n    std::vector<int> v = {10, 20, 30};\n    std::cout << *(v.begin() + 1);\n    return 0;\n}",
    "o": [
      "20",
      "10",
      "30",
      "0"
    ]
  },
  {
    "q": "Which of the following is a valid use of std::find?",
    "o": [
      "std::find(v.begin(), v.end(), 5);",
      "find(v, 5);",
      "v.find(5);",
      "find(begin(v), 5);"
    ]
  },
  {
    "q": "What will be the result of the following code?",
    "c": "#include <iostream>\ntemplate <typename T>\nT identity(T x) {\n    return x;\n}\nint main() {\n    std::cout << identity<std::string>(\"C++\");\n    return 0;\n}",
    "o": [
      "C++",
      "identity",
      "Error",
      "template"
    ]
  },
  {
    "q": "Which container in STL provides fastest lookup by key in average-case?",
    "o": [
      "std::unordered_map",
      "std::map",
      "std::vector",
      "std::list"
    ]
  },
  {
    "q": "Which of the following describes what happens when std::map[key] is accessed but key does not exist?",
    "o": [
      "A new element with default value is inserted.",
      "An exception is thrown.",
      "The program crashes.",
      "It returns null."
    ]
  },
  {
    "q": "What will this code output?",
    "c": "#include <iostream>\n#include <algorithm>\n#include <vector>\nint main() {\n    std::vector<int> v = {3, 1, 4};\n    std::sort(v.begin(), v.end());\n    std::cout << v[0];\n    return 0;\n}",
    "o": [
      "1",
      "3",
      "4",
      "0"
    ]
  },
  {
    "q": "What is a key characteristic of function templates?",
    "o": [
      "They allow a single function to work with multiple types.",
      "They are used only with primitive types.",
      "They must return void.",
      "They cannot have multiple parameters."
    ]
  },
  {
    "q": "Which of the following is true about std::vector in C++?",
    "o": [
      "It provides dynamic array functionality with contiguous memory allocation.",
      "It maintains elements in sorted order by default.",
      "It allows constant-time insertion at the beginning.",
      "It uses linked list internally."
    ]
  },
  {
    "q": "What will the following code output?",
    "c": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nint main() {\n    std::vector<int> v = {3, 5, 7};\n    std::for_each(v.begin(), v.end(), [](int x){ std::cout << x * 2 << ' '; });\n    return 0;\n}",
    "o": [
      "6 10 14 ",
      "3 5 7 ",
      "2 4 6 ",
      "14 10 6 "
    ]
  },
  {
    "q": "What is the correct syntax to create a class template that works for any type?",
    "o": [
      "template <typename T> class MyClass { T value; };",
      "class<T> MyClass { T value; };",
      "template class MyClass<T> { T value; };",
      "template class<T> MyClass { T value; };"
    ]
  },
  {
    "q": "Which algorithm can be used to copy only elements that satisfy a condition?",
    "o": [
      "std::copy_if",
      "std::copy",
      "std::transform",
      "std::for_each"
    ]
  },
  {
    "q": "What will be the output of the following code using a lambda?",
    "c": "#include <iostream>\nint main() {\n    int a = 5;\n    auto doubleValue = [=]() { return a * 2; };\n    std::cout << doubleValue();\n    return 0;\n}",
    "o": [
      "10",
      "5",
      "2",
      "Compilation error"
    ]
  },
  {
    "q": "Which of the following containers maintains a sorted order of key-value pairs?",
    "o": [
      "std::map",
      "std::vector",
      "std::unordered_map",
      "std::list"
    ]
  },
  {
    "q": "Which keyword is required to define a function template?",
    "o": [
      "template",
      "typename",
      "class",
      "define"
    ]
  },
  {
    "q": "What does the following code output?",
    "c": "#include <iostream>\n#include <list>\nint main() {\n    std::list<int> lst = {1, 2, 3};\n    lst.pop_back();\n    std::cout << lst.back();\n    return 0;\n}",
    "o": [
      "2",
      "1",
      "3",
      "0"
    ]
  },
  {
    "q": "Which of the following is a property of STL iterators?",
    "o": [
      "They provide a uniform way to traverse elements of containers.",
      "They can only be used with vectors.",
      "They must be declared using auto.",
      "They are always const by default."
    ]
  },
  {
    "q": "What is the purpose of capture lists in C++ lambdas?",
    "o": [
      "To define how external variables are accessed inside the lambda",
      "To specify return type of the lambda",
      "To define the parameters of the lambda",
      "To initialize the lambda at runtime"
    ]
  },
  {
    "q": "Which of the following is the correct way to define a class template with two type parameters?",
    "o": [
      "template <typename T, typename U> class MyClass { };",
      "template <T, U> class MyClass { };",
      "class MyClass<T, U> { };",
      "template class MyClass(T, U);"
    ]
  },
  {
    "q": "What does the following code output?",
    "c": "#include <iostream>\n#include <map>\nint main() {\n    std::map<int, std::string> m;\n    m[1] = \"One\";\n    m[2] = \"Two\";\n    std::cout << m.size();\n    return 0;\n}",
    "o": [
      "2",
      "1",
      "0",
      "Error"
    ]
  },
  {
    "q": "Which algorithm is best suited to count how many elements satisfy a condition?",
    "o": [
      "std::count_if",
      "std::accumulate",
      "std::find_if",
      "std::for_each"
    ]
  },
  {
    "q": "Which line correctly defines a lambda that captures `a` by reference and returns `a * 3`?",
    "o": [
      "[&a]() { return a * 3; };",
      "[=a]() { return a * 3; };",
      "[a]() { return a * 3; };",
      "[&]() { return a + 3; };"
    ]
  },
  {
    "q": "What will be the output of the following code?",
    "c": "#include <iostream>\ntemplate <typename T>\nvoid print_twice(T value) {\n    std::cout << value << value;\n}\nint main() {\n    print_twice(7);\n    return 0;\n}",
    "o": [
      "77",
      "14",
      "7",
      "Error"
    ]
  },
  {
    "q": "Which STL container allows random access iterators?",
    "o": [
      "std::vector",
      "std::list",
      "std::map",
      "std::set"
    ]
  },
  {
    "q": "What is the effect of calling `sort(v.begin(), v.end())` on an STL vector?",
    "o": [
      "It sorts the elements in ascending order.",
      "It reverses the vector.",
      "It removes duplicates from the vector.",
      "It creates a new sorted vector."
    ]
  },
  {
    "q": "What does the following code output?",
    "c": "#include <iostream>\n#include <vector>\nint main() {\n    std::vector<int> v = {1, 2, 3};\n    std::cout << *(v.end() - 1);\n    return 0;\n}",
    "o": [
      "3",
      "1",
      "2",
      "Error"
    ]
  },
  {
    "q": "What is the purpose of using `auto` with iterators in C++11 and later?",
    "o": [
      "To simplify syntax and avoid explicitly writing long iterator types",
      "To make the iterator constant",
      "To generate a new container",
      "To automatically sort the container"
    ]
  },
  {
    "q": "Which STL container guarantees unique keys and uses a hash table internally?",
    "o": [
      "std::unordered_map",
      "std::map",
      "std::vector",
      "std::list"
    ]
  },
  {
    "q": "Which of the following is the correct way to declare a function template with a default type?",
    "o": [
      "template <typename T = int> T add(T a, T b) { return a + b; }",
      "template <T = int> T add(T a, T b);",
      "template <class T> = int add(T a, T b);",
      "template default <typename T> T add(T a, T b);"
    ]
  },
  {
    "q": "What will the following code print?",
    "c": "#include <iostream>\n#include <list>\nint main() {\n    std::list<char> letters = {'A', 'B', 'C'};\n    std::cout << letters.front();\n    return 0;\n}",
    "o": [
      "A",
      "B",
      "C",
      "Error"
    ]
  },
  {
    "q": "Which of the following is a correct lambda that captures all variables by value and multiplies two arguments?",
    "o": [
      "[=](int x, int y) { return x * y; }",
      "[&](int x, int y) -> int { return x * y; }",
      "[=, &x, &y]() { return x * y; }",
      "[](int x, int y) return x * y;"
    ]
  },
  {
    "q": "Which C++ feature allows a template to work for user-defined types like classes?",
    "o": [
      "Function and class templates",
      "Preprocessor macros",
      "Virtual functions",
      "Friend functions"
    ]
  },
  {
    "q": "What is the result of the following code?",
    "c": "#include <iostream>\n#include <vector>\nint main() {\n    std::vector<int> v = {9, 8, 7};\n    v.push_back(6);\n    std::cout << v.size();\n    return 0;\n}",
    "o": [
      "4",
      "3",
      "6",
      "0"
    ]
  },
  {
    "q": "Which STL algorithm is used to transform elements from one container to another?",
    "o": [
      "std::transform",
      "std::copy",
      "std::move",
      "std::accumulate"
    ]
  },
  {
    "q": "Which of the following correctly defines a class template named Stack with one generic type?",
    "o": [
      "template <typename T> class Stack { };",
      "template class Stack<T> { };",
      "template <class> Stack<T> { };",
      "template type T class Stack { };"
    ]
  },
  {
    "q": "Which iterator type is NOT valid in STL?",
    "o": [
      "bidirectional_random_iterator",
      "random_access_iterator",
      "bidirectional_iterator",
      "input_iterator"
    ]
  },
  {
    "q": "What is the output of this code snippet?",
    "c": "#include <iostream>\n#include <algorithm>\n#include <vector>\nint main() {\n    std::vector<int> v = {2, 4, 6};\n    auto it = std::find(v.begin(), v.end(), 4);\n    std::cout << *it;\n    return 0;\n}",
    "o": [
      "4",
      "2",
      "6",
      "0"
    ]
  },
  {
    "q": "What is the advantage of using lambda expressions in STL algorithms?",
    "o": [
      "They allow inline function-like behavior without needing named functions.",
      "They increase compile time but reduce runtime.",
      "They always improve performance.",
      "They automatically parallelize loops."
    ]
  },
  {
    "q": "Which STL container is most suitable when frequent insertions and deletions are needed at both ends?",
    "o": [
      "std::list",
      "std::vector",
      "std::map",
      "std::set"
    ]
  },
  {
    "q": "What will be the output of this program?",
    "c": "#include <iostream>\n#include <vector>\nint main() {\n    std::vector<int> nums = {1, 2, 3};\n    std::cout << nums.at(1);\n    return 0;\n}",
    "o": [
      "2",
      "1",
      "3",
      "Error"
    ]
  },
  {
    "q": "Which of the following correctly creates a lambda function that returns the square of a number?",
    "o": [
      "[](int x) { return x * x; }",
      "[x]() { return x * x; }",
      "[&](x) { return x * x; }",
      "[](int x): return x * x;"
    ]
  },
  {
    "q": "What is the purpose of `typename` in template declarations?",
    "o": [
      "To indicate a placeholder for a data type",
      "To create a derived class",
      "To define an inline function",
      "To access private members"
    ]
  },
  {
    "q": "What does the following code print?",
    "c": "#include <iostream>\n#include <map>\nint main() {\n    std::map<char, int> m = {{'a', 1}, {'b', 2}};\n    std::cout << m['b'];\n    return 0;\n}",
    "o": [
      "2",
      "1",
      "b",
      "Error"
    ]
  },
  {
    "q": "Which algorithm applies a function to a range of elements without modifying them?",
    "o": [
      "std::for_each",
      "std::transform",
      "std::replace_if",
      "std::generate"
    ]
  },
  {
    "q": "Which of the following correctly defines a function template for a max function?",
    "o": [
      "template <typename T> T max(T a, T b) { return (a > b) ? a : b; }",
      "template max(T a, T b) { return a > b ? a : b; }",
      "T max<T>(T a, T b) { return a > b ? a : b; }",
      "function template max(T a, T b)"
    ]
  },
  {
    "q": "Which STL container stores elements as key-value pairs and does not maintain order?",
    "o": [
      "std::unordered_map",
      "std::map",
      "std::multimap",
      "std::vector"
    ]
  },
  {
    "q": "What will the following code print?",
    "c": "#include <iostream>\n#include <algorithm>\n#include <vector>\nint main() {\n    std::vector<int> v = {10, 20, 30};\n    auto result = std::find(v.begin(), v.end(), 40);\n    std::cout << (result == v.end());\n    return 0;\n}",
    "o": [
      "1",
      "0",
      "30",
      "Error"
    ]
  },
  {
    "q": "Which iterator category supports pointer arithmetic like addition and subtraction?",
    "o": [
      "Random access iterator",
      "Bidirectional iterator",
      "Forward iterator",
      "Input iterator"
    ]
  },
  {
    "q": "Which keyword is used to define a function template in C++?",
    "o": [
      "template",
      "define",
      "typedef",
      "template_func"
    ]
  },
  {
    "q": "What will this code output?",
    "c": "#include <iostream>\n#include <vector>\n#include <algorithm>\nint main() {\n    std::vector<int> v = {1, 2, 3};\n    std::reverse(v.begin(), v.end());\n    std::cout << v[0];\n    return 0;\n}",
    "o": [
      "3",
      "1",
      "2",
      "0"
    ]
  },
  {
    "q": "Which STL container is implemented as a doubly-linked list?",
    "o": [
      "std::list",
      "std::vector",
      "std::map",
      "std::set"
    ]
  },
  {
    "q": "What is a major benefit of class templates?",
    "o": [
      "They enable the creation of generic classes for multiple data types.",
      "They execute faster than regular classes.",
      "They reduce memory usage.",
      "They automatically generate constructors."
    ]
  },
  {
    "q": "What does this code print?",
    "c": "#include <iostream>\n#include <map>\nint main() {\n    std::map<int, int> m;\n    m[5] = 50;\n    m[3] = 30;\n    std::cout << m.begin()->first;\n    return 0;\n}",
    "o": [
      "3",
      "5",
      "50",
      "0"
    ]
  },
  {
    "q": "Which of the following correctly declares a lambda that captures all local variables by reference?",
    "o": [
      "[&]() { return 42; }",
      "[=]() { return 42; }",
      "[]&() { return 42; }",
      "[this]() { return 42; }"
    ]
  },
  {
    "q": "Which STL algorithm is used to check if all elements in a range satisfy a condition?",
    "o": [
      "std::all_of",
      "std::any_of",
      "std::none_of",
      "std::find_if"
    ]
  },
  {
    "q": "Which of the following is a correct specialization of a template function?",
    "o": [
      "template<> int max<int>(int a, int b) { return (a > b) ? a : b; }",
      "template<> max<int>(int a, int b) { return (a > b) ? a : b; }",
      "template specialization max<int>(int a, int b)",
      "function template<int> max(a, b)"
    ]
  },
  {
    "q": "What does this program print?",
    "c": "#include <iostream>\n#include <list>\nint main() {\n    std::list<int> l = {10, 20, 30};\n    l.pop_front();\n    std::cout << l.front();\n    return 0;\n}",
    "o": [
      "20",
      "10",
      "30",
      "Error"
    ]
  },
  {
    "q": "Which STL container allows duplicate keys?",
    "o": [
      "std::multimap",
      "std::map",
      "std::unordered_map",
      "std::set"
    ]
  },
  {
    "q": "Which STL container maintains elements in sorted order by key?",
    "o": [
      "std::map",
      "std::unordered_map",
      "std::vector",
      "std::stack"
    ]
  },
  {
    "q": "What will this code output?",
    "c": "#include <iostream>\n#include <vector>\n#include <algorithm>\nint main() {\n    std::vector<int> v = {5, 1, 3};\n    std::sort(v.begin(), v.end());\n    std::cout << v[0];\n    return 0;\n}",
    "o": [
      "1",
      "3",
      "5",
      "0"
    ]
  },
  {
    "q": "What is the correct syntax for a lambda that takes no parameters and returns 100?",
    "o": [
      "[]() { return 100; }",
      "[=] { return 100; }",
      "[&]() return 100;",
      "[] -> int { return 100 }"
    ]
  },
  {
    "q": "What is the main benefit of using iterators in STL?",
    "o": [
      "They provide a uniform way to traverse different container types.",
      "They reduce memory usage of containers.",
      "They allow faster insertion of elements.",
      "They avoid the need for template usage."
    ]
  },
  {
    "q": "What will this code print?",
    "c": "#include <iostream>\n#include <deque>\nint main() {\n    std::deque<int> d = {1, 2, 3};\n    d.push_front(0);\n    std::cout << d.front();\n    return 0;\n}",
    "o": [
      "0",
      "1",
      "3",
      "2"
    ]
  },
  {
    "q": "Which of the following correctly defines a class template with two type parameters?",
    "o": [
      "template <typename T, typename U> class Pair { };",
      "template (T, U) class Pair { };",
      "template <class T, class U> Pair {};",
      "template class<T, U> class Pair {};"
    ]
  },
  {
    "q": "Which STL algorithm removes elements based on a condition but does not resize the container?",
    "o": [
      "std::remove_if",
      "std::erase_if",
      "std::transform",
      "std::filter"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "#include <iostream>\n#include <set>\nint main() {\n    std::set<int> s;\n    s.insert(2);\n    s.insert(2);\n    std::cout << s.size();\n    return 0;\n}",
    "o": [
      "1",
      "2",
      "0",
      "Error"
    ]
  },
  {
    "q": "Which of the following is a correct way to declare a vector of strings?",
    "o": [
      "std::vector<std::string> names;",
      "vector<string> names;",
      "std::list<std::string> names;",
      "std::map<std::string> names;"
    ]
  },
  {
    "q": "What does this code print?",
    "c": "#include <iostream>\n#include <vector>\nint main() {\n    std::vector<int> v = {10, 20, 30};\n    for (auto it = v.rbegin(); it != v.rend(); ++it)\n        std::cout << *it << \" \";\n    return 0;\n}",
    "o": [
      "30 20 10 ",
      "10 20 30 ",
      "10 30 20 ",
      "20 10 30 "
    ]
  },
  {
    "q": "Which STL container should you use for constant-time access by index?",
    "o": [
      "std::vector",
      "std::list",
      "std::set",
      "std::map"
    ]
  },
  {
    "q": "What does the following code output?",
    "c": "#include <iostream>\n#include <vector>\n#include <algorithm>\nint main() {\n    std::vector<int> v = {4, 7, 1};\n    std::sort(v.begin(), v.end());\n    std::reverse(v.begin(), v.end());\n    std::cout << v[0];\n    return 0;\n}",
    "o": [
      "7",
      "1",
      "4",
      "0"
    ]
  },
  {
    "q": "Which keyword is necessary to define a function template in C++?",
    "o": [
      "template",
      "typename",
      "function",
      "class"
    ]
  },
  {
    "q": "Which of the following containers automatically prevents duplicate entries?",
    "o": [
      "std::set",
      "std::list",
      "std::vector",
      "std::map"
    ]
  },
  {
    "q": "What will this lambda function return?\n\n`auto f = [](int x) { return x + 10; }; std::cout << f(5);`",
    "o": [
      "15",
      "5",
      "10",
      "50"
    ]
  },
  {
    "q": "Which STL algorithm is used to count how many elements match a value?",
    "o": [
      "std::count",
      "std::find",
      "std::any_of",
      "std::accumulate"
    ]
  },
  {
    "q": "Which of the following defines a class template with a single type parameter?",
    "o": [
      "template<typename T> class MyClass { };",
      "class template<T> MyClass { };",
      "template class MyClass<T> { };",
      "template(class T) class MyClass { };"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "#include <iostream>\n#include <map>\nint main() {\n    std::map<std::string, int> scores = {{\"Alice\", 90}, {\"Bob\", 85}};\n    std::cout << scores[\"Bob\"];\n    return 0;\n}",
    "o": [
      "85",
      "90",
      "Alice",
      "0"
    ]
  },
  {
    "q": "Which iterator allows traversal in both forward and reverse directions?",
    "o": [
      "Bidirectional iterator",
      "Input iterator",
      "Forward iterator",
      "Output iterator"
    ]
  },
  {
    "q": "What is the correct way to apply a lambda to each element of a vector?",
    "o": [
      "std::for_each(v.begin(), v.end(), [](int n){ std::cout << n; });",
      "for_each(v, [](n){ std::cout << n; });",
      "foreach(v.begin(), v.end(), [](int n){ std::cout << n; });",
      "lambda(n) { std::cout << n; };"
    ]
  },
  {
    "q": "Which of the following is used to declare a lambda that captures variables by value?",
    "o": [
      "[=]() { return 1; }",
      "[&]() { return 1; }",
      "[] -> int { return 1; }",
      "[this]() { return 1; }"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "#include <iostream>\n#include <vector>\nint main() {\n    std::vector<int> v = {1, 2, 3};\n    std::cout << v.at(1);\n    return 0;\n}",
    "o": [
      "2",
      "1",
      "3",
      "0"
    ]
  },
  {
    "q": "Which of the following containers allows fast insertion and deletion at both ends?",
    "o": [
      "std::deque",
      "std::vector",
      "std::set",
      "std::map"
    ]
  },
  {
    "q": "Which is the correct way to declare a function template with one type parameter?",
    "o": [
      "template<typename T> T max(T a, T b);",
      "template T max(T a, T b);",
      "template<T> T max(T a, T b);",
      "template<class> max(T a, T b);"
    ]
  },
  {
    "q": "Which of the following best describes a random-access iterator?",
    "o": [
      "It supports direct access to any element using arithmetic operations.",
      "It only supports forward traversal.",
      "It allows insertion but not deletion.",
      "It can only be used with std::list."
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "#include <iostream>\n#include <algorithm>\n#include <vector>\nint main() {\n    std::vector<int> v = {2, 4, 6};\n    std::transform(v.begin(), v.end(), v.begin(), [](int x){ return x * 2; });\n    std::cout << v[1];\n    return 0;\n}",
    "o": [
      "8",
      "4",
      "6",
      "2"
    ]
  },
  {
    "q": "Which STL algorithm returns true if at least one element satisfies a condition?",
    "o": [
      "std::any_of",
      "std::all_of",
      "std::none_of",
      "std::find_if"
    ]
  },
  {
    "q": "Which of the following containers provides key-value storage with unique keys?",
    "o": [
      "std::map",
      "std::multimap",
      "std::vector",
      "std::list"
    ]
  },
  {
    "q": "What is the result of this program?",
    "c": "#include <iostream>\n#include <list>\nint main() {\n    std::list<int> lst = {5, 10};\n    lst.push_back(15);\n    std::cout << lst.back();\n    return 0;\n}",
    "o": [
      "15",
      "10",
      "5",
      "0"
    ]
  },
  {
    "q": "What is the correct way to declare a lambda that takes two `int` parameters and returns their sum?",
    "o": [
      "[](int a, int b) { return a + b; }",
      "[=](a, b) { return a + b; }",
      "[]int a, int b -> int { return a + b; }",
      "[](a + b)"
    ]
  },
  {
    "q": "Which STL container should you use if you need fast retrieval of elements by key and allow multiple entries with the same key?",
    "o": [
      "std::multimap",
      "std::map",
      "std::unordered_map",
      "std::vector"
    ]
  },
  {
    "q": "What does the following code output?",
    "c": "#include <iostream>\n#include <vector>\n#include <algorithm>\nint main() {\n    std::vector<int> v = {1, 2, 3, 4};\n    int sum = std::accumulate(v.begin(), v.end(), 0);\n    std::cout << sum;\n    return 0;\n}",
    "o": [
      "10",
      "6",
      "4",
      "0"
    ]
  },
  {
    "q": "What is the purpose of `std::find_if` in STL?",
    "o": [
      "It finds the first element that satisfies a given predicate.",
      "It checks if all elements match a condition.",
      "It removes matching elements from the container.",
      "It sorts a container using a custom comparator."
    ]
  },
  {
    "q": "Which keyword is used to specify a type parameter in a function template?",
    "o": [
      "typename",
      "type",
      "parameter",
      "T"
    ]
  },
  {
    "q": "Which of the following best defines a generic class?",
    "o": [
      "A class that uses templates to support multiple data types.",
      "A class that can only hold one type of data.",
      "A class defined inside a function.",
      "A class with only static functions."
    ]
  },
  {
    "q": "What will the following lambda return?\n\n`auto add = [](int x, int y) { return x + y; }; std::cout << add(3, 4);`",
    "o": [
      "7",
      "12",
      "34",
      "0"
    ]
  },
  {
    "q": "What is the correct way to define a class template with a default type argument?",
    "o": [
      "template <typename T = int> class MyClass { };",
      "class MyClass<T = int> { };",
      "template <T = int> class MyClass { };",
      "template class MyClass<int> { };"
    ]
  },
  {
    "q": "What will the following code output?",
    "c": "#include <iostream>\n#include <list>\nint main() {\n    std::list<int> l = {1, 2, 3};\n    l.pop_front();\n    std::cout << l.front();\n    return 0;\n}",
    "o": [
      "2",
      "1",
      "3",
      "0"
    ]
  },
  {
    "q": "Which algorithm checks whether a container is sorted?",
    "o": [
      "std::is_sorted",
      "std::check_sorted",
      "std::is_ordered",
      "std::sort_check"
    ]
  },
  {
    "q": "Which of the following STL containers does not allow random access iterators?",
    "o": [
      "std::list",
      "std::vector",
      "std::deque",
      "std::array"
    ]
  },
  {
    "q": "Which STL container maintains the elements in sorted order automatically?",
    "o": [
      "std::set",
      "std::vector",
      "std::unordered_set",
      "std::list"
    ]
  },
  {
    "q": "What does this lambda expression do?\n\n`[](int x){ return x % 2 == 0; }`",
    "o": [
      "Checks if a number is even",
      "Checks if a number is odd",
      "Doubles a number",
      "Always returns true"
    ]
  },
  {
    "q": "What will be the output of this code?",
    "c": "#include <iostream>\n#include <vector>\nint main() {\n    std::vector<int> v = {10, 20};\n    v.push_back(30);\n    std::cout << v.size();\n    return 0;\n}",
    "o": [
      "3",
      "2",
      "1",
      "0"
    ]
  },
  {
    "q": "Which STL container is implemented as a doubly linked list?",
    "o": [
      "std::list",
      "std::vector",
      "std::deque",
      "std::map"
    ]
  },
  {
    "q": "What does this template function do?\n\n`template<typename T>\nT square(T x) { return x * x; }`",
    "o": [
      "Returns the square of a number",
      "Returns the double of a number",
      "Returns the cube of a number",
      "Returns x + x"
    ]
  },
  {
    "q": "Which algorithm checks if all elements in a range satisfy a predicate?",
    "o": [
      "std::all_of",
      "std::any_of",
      "std::none_of",
      "std::for_each"
    ]
  },
  {
    "q": "Which of these iterators does `std::vector` support?",
    "o": [
      "Random access iterator",
      "Bidirectional iterator",
      "Forward iterator",
      "Input iterator"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "#include <iostream>\n#include <map>\nint main() {\n    std::map<int, char> m = {{1, 'A'}, {2, 'B'}};\n    std::cout << m[1];\n    return 0;\n}",
    "o": [
      "A",
      "1",
      "B",
      "2"
    ]
  },
  {
    "q": "Which container allows duplicate keys and maintains sorted order?",
    "o": [
      "std::multimap",
      "std::map",
      "std::unordered_map",
      "std::set"
    ]
  },
  {
    "q": "What is the correct way to define a class template with two type parameters?",
    "o": [
      "template<typename T, typename U> class Pair { };",
      "template<T, U> class Pair { };",
      "template(class T, class U) Pair { };",
      "template types T, U class Pair { };"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "#include <iostream>\n#include <vector>\nint main() {\n    std::vector<int> v = {1, 3, 5};\n    std::cout << v.front();\n    return 0;\n}",
    "o": [
      "1",
      "3",
      "5",
      "0"
    ]
  },
  {
    "q": "Which STL algorithm applies a function to each element in a range?",
    "o": [
      "std::for_each",
      "std::transform",
      "std::accumulate",
      "std::copy_if"
    ]
  },
  {
    "q": "What does the following lambda return?\n\n`[](int x, int y) { return x > y ? x : y; }`",
    "o": [
      "The greater of x and y",
      "The smaller of x and y",
      "The sum of x and y",
      "Always x"
    ]
  },
  {
    "q": "Which STL container is best suited for LIFO (Last-In-First-Out) operations?",
    "o": [
      "std::stack",
      "std::queue",
      "std::list",
      "std::vector"
    ]
  },
  {
    "q": "What is the purpose of `typename` keyword in template declarations?",
    "o": [
      "It declares a type parameter in a template.",
      "It allocates memory for generic types.",
      "It defines a member function.",
      "It instantiates a class."
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "#include <iostream>\n#include <deque>\nint main() {\n    std::deque<int> d = {4, 8};\n    d.push_front(2);\n    std::cout << d.front();\n    return 0;\n}",
    "o": [
      "2",
      "4",
      "8",
      "0"
    ]
  },
  {
    "q": "Which iterator type allows both forward and backward traversal?",
    "o": [
      "Bidirectional iterator",
      "Input iterator",
      "Forward iterator",
      "Output iterator"
    ]
  },
  {
    "q": "Which of the following defines a template class with one default type?",
    "o": [
      "template<typename T = int> class Box {};",
      "template<class T: int> class Box {};",
      "template<type T = int> Box {};",
      "template int Box<T>;"
    ]
  },
  {
    "q": "Which STL container allows duplicate values and does not maintain any order?",
    "o": [
      "std::unordered_multiset",
      "std::vector",
      "std::map",
      "std::deque"
    ]
  },
  {
    "q": "What will this code print?",
    "c": "#include <iostream>\n#include <algorithm>\n#include <vector>\nint main() {\n    std::vector<int> v = {2, 4, 6};\n    auto it = std::find(v.begin(), v.end(), 4);\n    std::cout << *it;\n    return 0;\n}",
    "o": [
      "4",
      "2",
      "6",
      "0"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "#include <iostream>\n#include <algorithm>\n#include <vector>\nint main() {\n    std::vector<int> v = {5, 1, 4};\n    std::sort(v.begin(), v.end());\n    std::cout << v[0];\n    return 0;\n}",
    "o": [
      "1",
      "4",
      "5",
      "0"
    ]
  },
  {
    "q": "Which of the following defines a generic function in C++?",
    "o": [
      "template<typename T> T max(T a, T b) { return (a > b) ? a : b; }",
      "function<T> T max(T a, T b);",
      "T max<T>(T a, T b) { return a > b; }",
      "template T max(a, b);"
    ]
  },
  {
    "q": "Which STL container does not guarantee any specific order of elements?",
    "o": [
      "std::unordered_map",
      "std::set",
      "std::map",
      "std::multimap"
    ]
  },
  {
    "q": "What will be the output of this lambda expression?\n\n`auto f = [](int x){ return x * 3; }; std::cout << f(4);`",
    "o": [
      "12",
      "7",
      "9",
      "3"
    ]
  },
  {
    "q": "What kind of iterators does `std::list` support?",
    "o": [
      "Bidirectional",
      "Random access",
      "Forward only",
      "Output only"
    ]
  },
  {
    "q": "Which algorithm removes all elements matching a condition but doesn't shrink container size?",
    "o": [
      "std::remove_if",
      "std::erase",
      "std::pop_back",
      "std::clear"
    ]
  },
  {
    "q": "What is the purpose of `std::transform` in STL?",
    "o": [
      "To apply a function to a range and store results in another range",
      "To remove elements from a container",
      "To reverse a container",
      "To sort a container"
    ]
  },
  {
    "q": "Which STL container is implemented using a hash table?",
    "o": [
      "std::unordered_map",
      "std::map",
      "std::set",
      "std::list"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "#include <iostream>\n#include <vector>\nint main() {\n    std::vector<int> v;\n    std::cout << v.empty();\n    return 0;\n}",
    "o": [
      "1",
      "0",
      "true",
      "false"
    ]
  },
  {
    "q": "Which STL algorithm finds the first occurrence of a specific value in a range?",
    "o": [
      "std::find",
      "std::accumulate",
      "std::copy",
      "std::replace"
    ]
  },
  {
    "q": "Which C++ construct allows defining a class that works with any data type?",
    "o": [
      "Class template",
      "Inheritance",
      "Macro",
      "Polymorphism"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "#include <iostream>\n#include <vector>\nint main() {\n    std::vector<int> nums = {7, 8, 9};\n    std::cout << nums.back();\n    return 0;\n}",
    "o": [
      "9",
      "7",
      "8",
      "0"
    ]
  },
  {
    "q": "Which STL algorithm is used to count how many times a value appears in a range?",
    "o": [
      "std::count",
      "std::accumulate",
      "std::find",
      "std::for_each"
    ]
  },
  {
    "q": "Which of these is the correct way to capture variables by reference in a lambda function?",
    "o": [
      "[&](){ /* code */ }",
      "[=](){ /* code */ }",
      "[this](){ /* code */ }",
      "[*](){ /* code */ }"
    ]
  },
  {
    "q": "Which container should you use for constant-time insertions at both ends?",
    "o": [
      "std::deque",
      "std::vector",
      "std::map",
      "std::array"
    ]
  },
  {
    "q": "Which of the following STL containers maintains key-value pairs in sorted order?",
    "o": [
      "std::map",
      "std::unordered_map",
      "std::vector",
      "std::list"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "#include <iostream>\n#include <list>\nint main() {\n    std::list<int> lst = {1, 2, 3};\n    lst.pop_back();\n    std::cout << lst.back();\n    return 0;\n}",
    "o": [
      "2",
      "3",
      "1",
      "0"
    ]
  },
  {
    "q": "Which keyword is used to create a template with a placeholder for a data type?",
    "o": [
      "template",
      "typedef",
      "typename",
      "default"
    ]
  },
  {
    "q": "Which iterator type allows read/write access and supports arithmetic operations?",
    "o": [
      "Random access iterator",
      "Bidirectional iterator",
      "Forward iterator",
      "Output iterator"
    ]
  },
  {
    "q": "Which algorithm can be used to reverse the elements of a container?",
    "o": [
      "std::reverse",
      "std::sort",
      "std::rotate",
      "std::shuffle"
    ]
  },
  {
    "q": "Which of the following correctly defines a lambda function that returns the square of a number?",
    "o": [
      "[](int x) { return x * x; }",
      "lambda x: x * x",
      "[] x -> x * x;",
      "[int x] -> x * x;"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "#include <iostream>\n#include <map>\nint main() {\n    std::map<char, int> m;\n    m['a'] = 1;\n    m['b'] = 2;\n    std::cout << m.size();\n    return 0;\n}",
    "o": [
      "2",
      "1",
      "0",
      "3"
    ]
  },
  {
    "q": "What is the result of calling `clear()` on a vector?",
    "o": [
      "It removes all elements from the vector.",
      "It sets all elements to zero.",
      "It deletes the vector from memory.",
      "It resets the vector capacity."
    ]
  },
  {
    "q": "Which STL container is ideal for maintaining a sequence with frequent insertions and deletions in the middle?",
    "o": [
      "std::list",
      "std::vector",
      "std::array",
      "std::stack"
    ]
  },
  {
    "q": "Which of the following correctly declares a function template that returns the smaller of two values?",
    "o": [
      "template<typename T> T min(T a, T b) { return (a < b) ? a : b; }",
      "template<class T> min(T a, T b) = a < b ? a : b;",
      "template T min(T a, T b);",
      "template<typename T> T min = T();"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "#include <iostream>\n#include <vector>\n#include <algorithm>\nint main() {\n    std::vector<int> v = {1, 2, 3};\n    std::reverse(v.begin(), v.end());\n    std::cout << v[0];\n    return 0;\n}",
    "o": [
      "3",
      "1",
      "2",
      "0"
    ]
  },
  {
    "q": "Which of the following allows iteration over an STL container using a lambda function?",
    "o": [
      "std::for_each",
      "std::transform",
      "std::accumulate",
      "std::generate"
    ]
  },
  {
    "q": "Which STL container does not allow duplicate values and automatically sorts elements?",
    "o": [
      "std::set",
      "std::vector",
      "std::unordered_set",
      "std::multiset"
    ]
  },
  {
    "q": "What kind of iterators does `std::map` provide?",
    "o": [
      "Bidirectional",
      "Random access",
      "Forward only",
      "Output only"
    ]
  },
  {
    "q": "Which STL algorithm would you use to check if any element in a container is negative?",
    "o": [
      "std::any_of",
      "std::all_of",
      "std::none_of",
      "std::count_if"
    ]
  },
  {
    "q": "Which keyword is used to define both function and class templates in C++?",
    "o": [
      "template",
      "typename",
      "generic",
      "define"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "#include <iostream>\n#include <vector>\nint main() {\n    std::vector<int> v(3, 7);\n    std::cout << v[1];\n    return 0;\n}",
    "o": [
      "7",
      "3",
      "1",
      "0"
    ]
  },
  {
    "q": "Which STL algorithm replaces all elements equal to a specific value?",
    "o": [
      "std::replace",
      "std::transform",
      "std::copy_if",
      "std::fill"
    ]
  },
  {
    "q": "Which of the following containers does **not** support random access?",
    "o": [
      "std::list",
      "std::vector",
      "std::deque",
      "std::array"
    ]
  },
  {
    "q": "What will be the output of this code using lambda?",
    "c": "#include <iostream>\nint main() {\n    auto multiply = [](int a, int b) { return a * b; };\n    std::cout << multiply(3, 4);\n    return 0;\n}",
    "o": [
      "12",
      "7",
      "34",
      "1"
    ]
  },
  {
    "q": "Which STL container provides key-value pairs with fast lookup using hashing?",
    "o": [
      "std::unordered_map",
      "std::map",
      "std::list",
      "std::deque"
    ]
  },
  {
    "q": "Which of the following can be overloaded using a class template?",
    "o": [
      "Operators and functions",
      "Only functions",
      "Only constructors",
      "None of the above"
    ]
  },
  {
    "q": "Which STL algorithm applies a lambda and stores the results in another range?",
    "o": [
      "std::transform",
      "std::copy_if",
      "std::find_if",
      "std::generate"
    ]
  },
  {
    "q": "What is the output of the following STL code?",
    "c": "#include <iostream>\n#include <vector>\n#include <algorithm>\nint main() {\n    std::vector<int> v = {1, 2, 3};\n    std::for_each(v.begin(), v.end(), [](int n){ std::cout << n << \" \"; });\n    return 0;\n}",
    "o": [
      "1 2 3 ",
      "3 2 1 ",
      "1 2 ",
      "2 3 "
    ]
  },
  {
    "q": "Which iterator type provides the most functionality in STL?",
    "o": [
      "Random access iterator",
      "Forward iterator",
      "Bidirectional iterator",
      "Input iterator"
    ]
  },
  {
    "q": "Which STL container is best suited for fast insertion and deletion at both ends?",
    "o": [
      "std::deque",
      "std::vector",
      "std::map",
      "std::set"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "#include <iostream>\n#include <vector>\nint main() {\n    std::vector<int> v = {10, 20, 30};\n    v.pop_back();\n    std::cout << v.size();\n    return 0;\n}",
    "o": [
      "2",
      "3",
      "1",
      "0"
    ]
  },
  {
    "q": "Which STL algorithm is used to copy only elements that satisfy a condition?",
    "o": [
      "std::copy_if",
      "std::copy",
      "std::transform",
      "std::replace_if"
    ]
  },
  {
    "q": "Which capture mode in lambdas allows access to external variables by value?",
    "o": [
      "[=]",
      "[&]",
      "[this]",
      "[*]"
    ]
  },
  {
    "q": "Which container guarantees unique keys and keeps them sorted?",
    "o": [
      "std::map",
      "std::multimap",
      "std::unordered_map",
      "std::vector"
    ]
  },
  {
    "q": "What will the following function template return?\n\n`template<typename T> T identity(T x) { return x; }`",
    "o": [
      "Returns the input value unchanged",
      "Returns the type of the input",
      "Returns a copy of the address",
      "Always returns 0"
    ]
  },
  {
    "q": "Which type of iterator is required by `std::sort()`?",
    "o": [
      "Random access iterator",
      "Bidirectional iterator",
      "Input iterator",
      "Forward iterator"
    ]
  },
  {
    "q": "What is the output of this code using a lambda with capture by reference?",
    "c": "#include <iostream>\nint main() {\n    int x = 5;\n    auto f = [&]() { x += 2; };\n    f();\n    std::cout << x;\n    return 0;\n}",
    "o": [
      "7",
      "5",
      "2",
      "0"
    ]
  },
  {
    "q": "What is required for a class to be used as a template argument?",
    "o": [
      "It must support the operations used in the template",
      "It must inherit from a base class",
      "It must be default-constructible",
      "It must have operator= overloaded"
    ]
  },
  {
    "q": "Which of the following allows element-wise addition using a lambda?",
    "o": [
      "std::transform",
      "std::accumulate",
      "std::fill",
      "std::generate_n"
    ]
  },
  {
    "q": "Which STL container is implemented as a doubly linked list?",
    "o": [
      "std::list",
      "std::deque",
      "std::vector",
      "std::set"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "#include <iostream>\n#include <map>\nint main() {\n    std::map<std::string, int> scores;\n    scores[\"Tom\"] = 90;\n    std::cout << scores[\"Tom\"];\n    return 0;\n}",
    "o": [
      "90",
      "0",
      "Tom",
      "1"
    ]
  },
  {
    "q": "Which of these defines a class template?",
    "o": [
      "template<typename T> class MyClass { T data; };",
      "template<T> class MyClass { T data; };",
      "class MyClass<T> { T data; };",
      "template class MyClass { T data; };"
    ]
  },
  {
    "q": "What is the main advantage of using STL algorithms with iterators?",
    "o": [
      "They work uniformly across different container types",
      "They reduce memory usage",
      "They increase inheritance capabilities",
      "They improve compile-time polymorphism"
    ]
  },
  {
    "q": "Which of the following lambda captures allows you to modify external variables?",
    "o": [
      "[&]",
      "[=]",
      "[=, &var]",
      "[this]"
    ]
  },
  {
    "q": "Which algorithm finds the first element matching a condition in a range?",
    "o": [
      "std::find_if",
      "std::count_if",
      "std::for_each",
      "std::accumulate"
    ]
  },
  {
    "q": "What is the output of the following code using a lambda?",
    "c": "#include <iostream>\n#include <algorithm>\n#include <vector>\nint main() {\n    std::vector<int> v = {1, 2, 3};\n    std::for_each(v.begin(), v.end(), [](int x){ std::cout << x * 2 << ' '; });\n    return 0;\n}",
    "o": [
      "2 4 6 ",
      "1 2 3 ",
      "6 4 2 ",
      "3 3 3 "
    ]
  },
  {
    "q": "What does the 'auto' keyword do in lambda declarations?",
    "o": [
      "It deduces the type automatically",
      "It creates a reference",
      "It creates a pointer",
      "It disables type checking"
    ]
  },
  {
    "q": "Which container is not sequence-based?",
    "o": [
      "std::map",
      "std::vector",
      "std::list",
      "std::deque"
    ]
  },
  {
    "q": "What is the correct way to create a vector of strings with 3 elements all set to \"Hi\"?",
    "o": [
      "std::vector<std::string> v(3, \"Hi\");",
      "std::vector<string> v = {\"Hi\", \"Hi\", \"Hi\"};",
      "vector<string> v = [\"Hi\", \"Hi\", \"Hi\"]",
      "string v[3] = \"Hi\";"
    ]
  },
  {
    "q": "Which of the following best describes a function template?",
    "o": [
      "A blueprint for creating multiple functions with different data types",
      "A precompiled header file",
      "A macro replacement",
      "An inline function"
    ]
  },
  {
    "q": "What will be the output of this code?",
    "c": "#include <iostream>\ntemplate<typename T>\nT maxVal(T a, T b) {\n    return (a > b) ? a : b;\n}\nint main() {\n    std::cout << maxVal(4.5, 2.1);\n    return 0;\n}",
    "o": [
      "4.5",
      "2.1",
      "6.6",
      "0"
    ]
  },
  {
    "q": "Which STL container automatically sorts elements by key?",
    "o": [
      "std::map",
      "std::vector",
      "std::unordered_map",
      "std::list"
    ]
  },
  {
    "q": "Which of these containers is implemented as a hash table?",
    "o": [
      "std::unordered_map",
      "std::map",
      "std::deque",
      "std::set"
    ]
  },
  {
    "q": "Which of the following allows modification of external variables in a lambda?",
    "o": [
      "[&]",
      "[=]",
      "[this]",
      "[*]"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "#include <iostream>\n#include <vector>\n#include <algorithm>\nint main() {\n    std::vector<int> v = {1, 2, 3, 4};\n    int sum = 0;\n    std::for_each(v.begin(), v.end(), [&](int x){ sum += x; });\n    std::cout << sum;\n    return 0;\n}",
    "o": [
      "10",
      "4",
      "1234",
      "0"
    ]
  },
  {
    "q": "Which STL algorithm would you use to sort a container?",
    "o": [
      "std::sort",
      "std::order",
      "std::arrange",
      "std::shuffle"
    ]
  },
  {
    "q": "Which iterator type is supported by `std::list`?",
    "o": [
      "Bidirectional",
      "Random access",
      "Input only",
      "Contiguous"
    ]
  },
  {
    "q": "How do you create a function template that returns the square of a value?",
    "o": [
      "template<typename T> T square(T x) { return x * x; }",
      "template<T> T square(T x) { return x ^ 2; }",
      "template<class T> square(T x) = x * x;",
      "template square<T>(T x) { return x * x; }"
    ]
  },
  {
    "q": "What is the output of the following STL code?",
    "c": "#include <iostream>\n#include <vector>\n#include <algorithm>\nint main() {\n    std::vector<int> v = {5, 3, 4};\n    std::sort(v.begin(), v.end());\n    std::cout << v[0];\n    return 0;\n}",
    "o": [
      "3",
      "5",
      "4",
      "0"
    ]
  },
  {
    "q": "What will the following class template do?",
    "c": "template<typename T>\nclass Container {\n    T value;\n  public:\n    Container(T val) : value(val) {}\n    T get() { return value; }\n};",
    "o": [
      "Creates a generic class that can store and return any data type",
      "Creates a specialized class for integers",
      "Creates an abstract base class",
      "Creates a container that only stores strings"
    ]
  },
  {
    "q": "Which STL container does not allow duplicate keys?",
    "o": [
      "std::map",
      "std::multimap",
      "std::unordered_multimap",
      "std::vector"
    ]
  },
  {
    "q": "Which algorithm counts elements based on a predicate?",
    "o": [
      "std::count_if",
      "std::count",
      "std::find_if",
      "std::accumulate"
    ]
  },
  {
    "q": "What does this lambda expression do?\n\n`[](int x) { return x % 2 == 0; }`",
    "o": [
      "Returns true if x is even",
      "Returns true if x is odd",
      "Always returns false",
      "Throws a compile error"
    ]
  },
  {
    "q": "Which type of iterator is needed for reverse iteration in `std::vector`?",
    "o": [
      "Reverse iterator",
      "Bidirectional iterator",
      "Input iterator",
      "Forward iterator"
    ]
  },
  {
    "q": "What is the output of this STL map usage?",
    "c": "#include <iostream>\n#include <map>\nint main() {\n    std::map<char, int> m = {{'a', 1}, {'b', 2}};\n    m['c'] = 3;\n    std::cout << m.size();\n    return 0;\n}",
    "o": [
      "3",
      "2",
      "1",
      "0"
    ]
  },
  {
    "q": "What is the correct way to apply a lambda to all elements in a list?",
    "o": [
      "std::for_each(list.begin(), list.end(), [](int x){ std::cout << x; });",
      "list.foreach([](int x){ std::cout << x; });",
      "for(list : [](int x) { });",
      "list.apply([](int x){ });"
    ]
  },
  {
    "q": "Which function template specialization is valid?",
    "o": [
      "template<> int max<int>(int a, int b) { return a > b ? a : b; }",
      "template int max(int a, int b) { return a > b ? a : b; }",
      "template<> max(int a, int b) { return a > b ? a : b; }",
      "specialize max<int> for (int a, int b) { return a; }"
    ]
  },
  {
    "q": "Which STL container allows constant-time insertion and removal at both ends?",
    "o": [
      "std::deque",
      "std::vector",
      "std::map",
      "std::set"
    ]
  },
  {
    "q": "What is the role of `typename` in template definitions?",
    "o": [
      "Specifies that the parameter is a type",
      "Declares a variable",
      "Specifies a function return type",
      "Is equivalent to `const`"
    ]
  },
  {
    "q": "What does the following lambda expression return?\n\n`auto f = [](int a, int b) { return a + b; };`",
    "o": [
      "The sum of a and b",
      "The difference of a and b",
      "A reference to a and b",
      "Nothing, it's invalid"
    ]
  },
  {
    "q": "Which of the following containers keeps the insertion order?",
    "o": [
      "std::list",
      "std::map",
      "std::set",
      "std::unordered_map"
    ]
  },
  {
    "q": "What is the output of the following program?",
    "c": "#include <iostream>\n#include <vector>\n#include <algorithm>\nint main() {\n    std::vector<int> v = {1, 2, 3};\n    std::reverse(v.begin(), v.end());\n    std::cout << v[0];\n    return 0;\n}",
    "o": [
      "3",
      "1",
      "2",
      "0"
    ]
  },
  {
    "q": "Which keyword is used to define a function template?",
    "o": [
      "template",
      "typename",
      "function",
      "define"
    ]
  },
  {
    "q": "Which of the following is a valid use of `std::transform`?",
    "o": [
      "std::transform(v.begin(), v.end(), v.begin(), [](int x){ return x * 2; });",
      "std::transform(v.begin(), [](int x){ return x * 2; });",
      "std::transform(v, v.begin(), [](int x){ return x + 1; });",
      "std::transform(begin(v), [](auto x){ return ++x; });"
    ]
  },
  {
    "q": "What is the purpose of `std::accumulate`?",
    "o": [
      "To compute the sum (or reduction) of a range of values",
      "To sort a container",
      "To count the number of occurrences",
      "To remove duplicates"
    ]
  },
  {
    "q": "Which of the following creates a map with string keys and int values?",
    "o": [
      "std::map<std::string, int> m;",
      "map<string, int> m();",
      "std::map<int, std::string> m;",
      "map<std::string> m<int>;"
    ]
  },
  {
    "q": "What will this code print?",
    "c": "#include <iostream>\ntemplate <typename T>\nT multiply(T a, T b) {\n    return a * b;\n}\nint main() {\n    std::cout << multiply(3, 4);\n    return 0;\n}",
    "o": [
      "12",
      "7",
      "3",
      "0"
    ]
  },
  {
    "q": "Which STL container is best suited for key-value pair storage with automatic ordering?",
    "o": [
      "std::map",
      "std::vector",
      "std::deque",
      "std::list"
    ]
  },
  {
    "q": "Which iterator is not supported by `std::forward_list`?",
    "o": [
      "Bidirectional iterator",
      "Forward iterator",
      "Input iterator",
      "Output iterator"
    ]
  },
  {
    "q": "What is the output of the following program?",
    "c": "#include <iostream>\n#include <vector>\nint main() {\n    std::vector<int> v = {10, 20, 30};\n    std::cout << v.at(1);\n    return 0;\n}",
    "o": [
      "20",
      "10",
      "30",
      "1"
    ]
  },
  {
    "q": "Which of the following best describes a class template?",
    "o": [
      "A generic class that works with different data types",
      "A base class that must be inherited",
      "A macro-based class",
      "A class used only with STL containers"
    ]
  },
  {
    "q": "Which container allows efficient insertion and deletion at both ends?",
    "o": [
      "std::deque",
      "std::vector",
      "std::map",
      "std::set"
    ]
  },
  {
    "q": "Which of the following creates a lambda that captures nothing and returns `true` if a number is odd?",
    "o": [
      "[](int x) { return x % 2 != 0; }",
      "[=](int x) { return x % 2 != 0; }",
      "[&](int x) { return x % 2 != 0; }",
      "[x] { return x % 2 != 0; }"
    ]
  },
  {
    "q": "What is the role of `typename` in template declarations?",
    "o": [
      "It defines a placeholder for a type",
      "It creates a new object",
      "It generates runtime type info",
      "It acts like a typedef"
    ]
  },
  {
    "q": "Which STL algorithm finds the first element matching a condition?",
    "o": [
      "std::find_if",
      "std::count_if",
      "std::transform",
      "std::accumulate"
    ]
  },
  {
    "q": "Which of the following is the correct syntax to declare a vector of strings?",
    "o": [
      "std::vector<std::string> names;",
      "vector<string> names()",
      "std::vector<string()> names;",
      "std::string<vector> names;"
    ]
  },
  {
    "q": "What is the output of the following lambda expression?",
    "c": "#include <iostream>\nint main() {\n    auto square = [](int x) { return x * x; };\n    std::cout << square(5);\n    return 0;\n}",
    "o": [
      "25",
      "10",
      "5",
      "0"
    ]
  },
  {
    "q": "Which container should be used for unique, sorted elements?",
    "o": [
      "std::set",
      "std::list",
      "std::vector",
      "std::unordered_map"
    ]
  },
  {
    "q": "Which of these is the correct function template declaration?",
    "o": [
      "template<typename T> T min(T a, T b) { return (a < b) ? a : b; }",
      "template<T> min(T a, T b) => T",
      "function<T> min(T a, T b);",
      "template <min> (T a, T b)"
    ]
  },
  {
    "q": "What is the correct way to declare a function template that returns the larger of two values?",
    "o": [
      "template<typename T> T max(T a, T b) { return (a > b) ? a : b; }",
      "template<class T> max(T a, T b) => T",
      "function<T> max(a, b)",
      "template T max(T a, T b)"
    ]
  },
  {
    "q": "Which STL container automatically keeps elements sorted by key?",
    "o": [
      "std::map",
      "std::unordered_map",
      "std::vector",
      "std::deque"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "#include <iostream>\n#include <list>\nint main() {\n    std::list<int> l = {1, 2, 3};\n    l.push_front(0);\n    std::cout << *l.begin();\n    return 0;\n}",
    "o": [
      "0",
      "1",
      "3",
      "2"
    ]
  },
  {
    "q": "What does this lambda expression do?\n\n`auto f = [](int x){ return x * 3; };`",
    "o": [
      "Returns the value of x multiplied by 3",
      "Returns x divided by 3",
      "Multiplies x with itself",
      "Always returns 3"
    ]
  },
  {
    "q": "Which STL algorithm is used to sort elements?",
    "o": [
      "std::sort",
      "std::find",
      "std::count",
      "std::fill"
    ]
  },
  {
    "q": "What is the default sorting order of `std::sort()`?",
    "o": [
      "Ascending",
      "Descending",
      "Lexicographic",
      "Unspecified"
    ]
  },
  {
    "q": "Which of the following is true about `std::unordered_map`?",
    "o": [
      "It stores key-value pairs without sorting them",
      "It automatically sorts keys in ascending order",
      "It doesn't support key-value pairs",
      "It uses a binary search tree"
    ]
  },
  {
    "q": "What will be the output of the following code?",
    "c": "#include <iostream>\n#include <algorithm>\n#include <vector>\nint main() {\n    std::vector<int> v = {1, 2, 3, 4};\n    int count = std::count_if(v.begin(), v.end(), [](int x){ return x > 2; });\n    std::cout << count;\n    return 0;\n}",
    "o": [
      "2",
      "3",
      "4",
      "1"
    ]
  },
  {
    "q": "What is the purpose of `std::advance` in iterators?",
    "o": [
      "Moves the iterator forward by a specified number of positions",
      "Resets the iterator to the beginning",
      "Checks for end of container",
      "Compares two iterators"
    ]
  },
  {
    "q": "Which of the following is a valid use of a class template?",
    "o": [
      "template <typename T> class Box { T value; };",
      "class<T> Box { T value; };",
      "template class Box<T> { T value; };",
      "define template Box<T>"
    ]
  },
  {
    "q": "What is the main advantage of using function templates in C++?",
    "o": [
      "They allow functions to operate with generic types",
      "They make functions execute faster",
      "They reduce memory usage at runtime",
      "They avoid the use of STL containers"
    ]
  },
  {
    "q": "Which of the following creates a class template for a pair of values?",
    "o": [
      "template<typename T1, typename T2> class Pair { T1 first; T2 second; };",
      "template<class T1> Pair<T1> { T1 first; T1 second; };",
      "template T Pair { T first; T second; };",
      "class Pair<typename T1, typename T2> { T1 a; T2 b; };"
    ]
  },
  {
    "q": "Which STL container does not allow duplicate keys?",
    "o": [
      "std::map",
      "std::multimap",
      "std::vector",
      "std::list"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "#include <iostream>\n#include <vector>\nint main() {\n    std::vector<int> v = {4, 5, 6};\n    std::cout << v.size();\n    return 0;\n}",
    "o": [
      "3",
      "2",
      "6",
      "0"
    ]
  },
  {
    "q": "What is the time complexity of inserting an element at the end of a `std::vector` (amortized)?",
    "o": [
      "O(1)",
      "O(n)",
      "O(log n)",
      "O(n log n)"
    ]
  },
  {
    "q": "Which algorithm removes elements based on a condition but does not resize the container?",
    "o": [
      "std::remove_if",
      "std::erase_if",
      "std::find_if_not",
      "std::unique"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "#include <iostream>\n#include <map>\nint main() {\n    std::map<int, std::string> m;\n    m[1] = \"One\";\n    m[2] = \"Two\";\n    std::cout << m[2];\n    return 0;\n}",
    "o": [
      "Two",
      "One",
      "1",
      "undefined"
    ]
  },
  {
    "q": "Which of the following lambda captures is used to capture all local variables by reference?",
    "o": [
      "[&]",
      "[=]",
      "[]",
      "[this]"
    ]
  },
  {
    "q": "Which STL container should you use to store elements with frequent insertions/removals at both ends?",
    "o": [
      "std::deque",
      "std::vector",
      "std::map",
      "std::set"
    ]
  },
  {
    "q": "What is the correct syntax for a lambda that takes no parameters and returns 42?",
    "o": [
      "[]() { return 42; }",
      "[=]() -> int { return 42; }",
      "[&] { return 42; }",
      "[x]() { return 42; }"
    ]
  },
  {
    "q": "What will be the output of the following C++ program?",
    "c": "#include <iostream>\ntemplate<typename T>\nT multiply(T a, T b) {\n    return a * b;\n}\nint main() {\n    std::cout << multiply(3, 4);\n    return 0;\n}",
    "o": [
      "12",
      "7",
      "3",
      "Compilation error"
    ]
  },
  {
    "q": "Which container is most suitable for fast key-based lookups where key order doesn't matter?",
    "o": [
      "std::unordered_map",
      "std::map",
      "std::list",
      "std::vector"
    ]
  },
  {
    "q": "What does the following lambda expression do?\n\n`auto inc = [](int& x){ x++; };`",
    "o": [
      "Increments the passed variable by reference",
      "Returns x + 1",
      "Creates a copy of x and increments it",
      "Increments x by 2"
    ]
  },
  {
    "q": "Which STL container maintains insertion order and allows duplicates?",
    "o": [
      "std::list",
      "std::map",
      "std::set",
      "std::unordered_map"
    ]
  },
  {
    "q": "Which algorithm can be used to apply a function to each element of a container?",
    "o": [
      "std::for_each",
      "std::transform",
      "std::find_if",
      "std::sort"
    ]
  },
  {
    "q": "Which of the following is the correct syntax for a class template with one type parameter?",
    "o": [
      "template<class T> class MyClass { };",
      "template T class MyClass { };",
      "template<typename> class MyClass(T);",
      "class MyClass<template T> { };"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "#include <iostream>\n#include <vector>\n#include <algorithm>\nint main() {\n    std::vector<int> v = {1, 2, 3, 4};\n    std::transform(v.begin(), v.end(), v.begin(), [](int x){ return x * 2; });\n    std::cout << v[2];\n    return 0;\n}",
    "o": [
      "6",
      "4",
      "2",
      "8"
    ]
  },
  {
    "q": "Which type of iterator does `std::map` provide?",
    "o": [
      "Bidirectional iterator",
      "Random access iterator",
      "Forward iterator",
      "Input iterator"
    ]
  },
  {
    "q": "Which STL algorithm is used to calculate the sum of elements?",
    "o": [
      "std::accumulate",
      "std::reduce",
      "std::partial_sum",
      "std::count_if"
    ]
  },
  {
    "q": "Which container should you use for FIFO behavior?",
    "o": [
      "std::queue",
      "std::stack",
      "std::set",
      "std::vector"
    ]
  },
  {
    "q": "Which header file is required to use STL containers like vector and map?",
    "o": [
      "<vector>, <map>",
      "<stl>",
      "<containers>",
      "<stdcontainer>"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "#include <iostream>\n#include <vector>\nint main() {\n    std::vector<int> v(5, 10);\n    std::cout << v[0];\n    return 0;\n}",
    "o": [
      "10",
      "5",
      "0",
      "Compilation error"
    ]
  },
  {
    "q": "Which of the following correctly defines a function template for swapping two values?",
    "o": [
      "template<typename T> void swap(T& a, T& b) { T temp = a; a = b; b = temp; }",
      "template<T> void swap(T a, T b)",
      "template<class> void swap(a, b)",
      "template<typename T> T swap(a, b)"
    ]
  },
  {
    "q": "Which container allows constant-time insertion and deletion from both ends?",
    "o": [
      "std::deque",
      "std::vector",
      "std::map",
      "std::set"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "#include <iostream>\n#include <list>\nint main() {\n    std::list<int> lst = {2, 4, 6};\n    lst.push_back(8);\n    std::cout << lst.back();\n    return 0;\n}",
    "o": [
      "8",
      "6",
      "2",
      "4"
    ]
  },
  {
    "q": "Which keyword is used to specify that a lambda can modify captured variables?",
    "o": [
      "mutable",
      "modify",
      "changeable",
      "capture"
    ]
  },
  {
    "q": "Which algorithm finds the first element in a range satisfying a condition?",
    "o": [
      "std::find_if",
      "std::for_each",
      "std::accumulate",
      "std::fill"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "#include <iostream>\n#include <map>\nint main() {\n    std::map<std::string, int> scores;\n    scores[\"Alice\"] = 90;\n    scores[\"Bob\"] = 85;\n    std::cout << scores.size();\n    return 0;\n}",
    "o": [
      "2",
      "90",
      "85",
      "1"
    ]
  },
  {
    "q": "Which STL container uses a hashing mechanism internally?",
    "o": [
      "std::unordered_map",
      "std::vector",
      "std::list",
      "std::deque"
    ]
  },
  {
    "q": "What does the following lambda do?\n\n`[](int a, int b) { return a < b; }`",
    "o": [
      "Returns true if a is less than b",
      "Returns true if a is greater than b",
      "Adds a and b",
      "Subtracts b from a"
    ]
  },
  {
    "q": "Which of the following best describes a function template?",
    "o": [
      "A blueprint for creating functions with generic types",
      "A function that uses recursion internally",
      "A function that returns a template object",
      "A wrapper for function overloading"
    ]
  },
  {
    "q": "What will the following code print?",
    "c": "#include <iostream>\n#include <vector>\nint main() {\n    std::vector<char> v = {'A', 'B', 'C'};\n    std::cout << v.at(1);\n    return 0;\n}",
    "o": [
      "B",
      "A",
      "C",
      "Runtime error"
    ]
  },
  {
    "q": "Which of the following is true about std::map?",
    "o": [
      "It stores unique keys in sorted order",
      "It allows duplicate keys",
      "It maintains insertion order",
      "It uses a hashing mechanism"
    ]
  },
  {
    "q": "How do you define a class template that accepts two types?",
    "o": [
      "template<typename T1, typename T2> class MyClass { };",
      "template<class T1> class MyClass<T2> { };",
      "class MyClass<template T1, T2> { };",
      "template(T1, T2) class MyClass { };"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "#include <iostream>\n#include <algorithm>\n#include <vector>\nint main() {\n    std::vector<int> v = {1, 2, 3, 4};\n    auto it = std::find(v.begin(), v.end(), 3);\n    std::cout << *it;\n    return 0;\n}",
    "o": [
      "3",
      "2",
      "4",
      "1"
    ]
  },
  {
    "q": "Which of the following is a correct lambda that captures all variables by value and returns the sum of two parameters?",
    "o": [
      "[=](int a, int b) { return a + b; }",
      "[&](int a, int b) -> int { return a + b; }",
      "[](int a, int b) { return a + b; }",
      "[sum](int a, int b) { return sum(a, b); }"
    ]
  },
  {
    "q": "Which STL container allows quick insertion/removal at both front and back?",
    "o": [
      "std::deque",
      "std::vector",
      "std::map",
      "std::stack"
    ]
  },
  {
    "q": "Which STL algorithm is best suited for sorting elements in a vector?",
    "o": [
      "std::sort",
      "std::accumulate",
      "std::equal",
      "std::copy_if"
    ]
  },
  {
    "q": "What will the following code print?",
    "c": "#include <iostream>\n#include <list>\nint main() {\n    std::list<int> lst = {1, 2, 3};\n    lst.pop_front();\n    std::cout << *lst.begin();\n    return 0;\n}",
    "o": [
      "2",
      "1",
      "3",
      "Runtime error"
    ]
  },
  {
    "q": "Which STL container is internally implemented using a balanced binary tree?",
    "o": [
      "std::map",
      "std::unordered_map",
      "std::deque",
      "std::queue"
    ]
  },
  {
    "q": "What will the following code output?",
    "c": "#include <iostream>\ntemplate<typename T>\nT square(T x) {\n    return x * x;\n}\nint main() {\n    std::cout << square(5);\n    return 0;\n}",
    "o": [
      "25",
      "10",
      "5",
      "Compilation error"
    ]
  },
  {
    "q": "Which of the following STL containers maintains sorted key-value pairs?",
    "o": [
      "std::map",
      "std::unordered_map",
      "std::vector",
      "std::list"
    ]
  },
  {
    "q": "What does the following lambda expression do?\n\n`auto is_even = [](int x){ return x % 2 == 0; };`",
    "o": [
      "Returns true if x is even",
      "Returns true if x is odd",
      "Returns x divided by 2",
      "Increments x by 2"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "#include <iostream>\n#include <vector>\n#include <algorithm>\nint main() {\n    std::vector<int> nums = {1, 2, 3};\n    std::for_each(nums.begin(), nums.end(), [](int n){ std::cout << n * 2 << ' '; });\n    return 0;\n}",
    "o": [
      "2 4 6 ",
      "1 2 3 ",
      "0 1 2 ",
      "6 4 2 "
    ]
  },
  {
    "q": "Which of the following best describes a class template?",
    "o": [
      "A way to define a class with generic data types",
      "A function inside a class",
      "A class without member variables",
      "A special type of inheritance"
    ]
  },
  {
    "q": "Which algorithm is used to count elements matching a condition?",
    "o": [
      "std::count_if",
      "std::accumulate",
      "std::copy_if",
      "std::transform"
    ]
  },
  {
    "q": "Which STL container allows random access iterators?",
    "o": [
      "std::vector",
      "std::list",
      "std::set",
      "std::map"
    ]
  },
  {
    "q": "What does this code output?",
    "c": "#include <iostream>\n#include <map>\nint main() {\n    std::map<int, std::string> m = {{1, \"one\"}, {2, \"two\"}};\n    std::cout << m[2];\n    return 0;\n}",
    "o": [
      "two",
      "one",
      "2",
      "Compilation error"
    ]
  },
  {
    "q": "Which of the following correctly declares a lambda with no captures and two parameters?",
    "o": [
      "[](int a, int b) { return a * b; }",
      "[&](int a, int b) { return a * b; }",
      "[=](int a, int b) { return a * b; }",
      "[x, y](int a, int b) { return a * b; }"
    ]
  },
  {
    "q": "Which STL container is implemented as a doubly linked list?",
    "o": [
      "std::list",
      "std::vector",
      "std::stack",
      "std::queue"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "#include <iostream>\ntemplate<class T>\nT maxVal(T a, T b) {\n    return (a > b) ? a : b;\n}\nint main() {\n    std::cout << maxVal(3.5, 2.1);\n    return 0;\n}",
    "o": [
      "3.5",
      "2.1",
      "0",
      "Compilation error"
    ]
  },
  {
    "q": "Which STL container automatically maintains elements in sorted order?",
    "o": [
      "std::set",
      "std::vector",
      "std::unordered_map",
      "std::deque"
    ]
  },
  {
    "q": "Which of the following is a correct way to define a function template with one type parameter?",
    "o": [
      "template<typename T> T func(T a)",
      "template<class> func(T a)",
      "template<T> T func(a)",
      "template<class T> func(T a)"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "#include <iostream>\n#include <list>\nint main() {\n    std::list<int> l = {10, 20, 30};\n    l.pop_back();\n    std::cout << l.back();\n    return 0;\n}",
    "o": [
      "20",
      "30",
      "10",
      "Compilation error"
    ]
  },
  {
    "q": "Which lambda capture mode allows modifying captured variables?",
    "o": [
      "[&] (mutable)",
      "[=]",
      "[]",
      "[this]"
    ]
  },
  {
    "q": "Which of the following algorithms copies elements based on a condition?",
    "o": [
      "std::copy_if",
      "std::remove_if",
      "std::find_if",
      "std::fill_if"
    ]
  },
  {
    "q": "Which STL container uses hashing to organize its elements?",
    "o": [
      "std::unordered_set",
      "std::map",
      "std::list",
      "std::vector"
    ]
  },
  {
    "q": "What does the following code do?",
    "c": "#include <iostream>\n#include <vector>\n#include <algorithm>\nint main() {\n    std::vector<int> v = {5, 2, 8};\n    std::sort(v.begin(), v.end());\n    std::cout << v[0];\n    return 0;\n}",
    "o": [
      "2",
      "5",
      "8",
      "0"
    ]
  },
  {
    "q": "Which STL algorithm returns an iterator to the maximum element?",
    "o": [
      "std::max_element",
      "std::max",
      "std::find_max",
      "std::greatest"
    ]
  },
  {
    "q": "What will this lambda return?\n\n`auto mul = [](int x, int y) { return x * y; };`",
    "o": [
      "The product of x and y",
      "The sum of x and y",
      "True if x equals y",
      "x raised to the power y"
    ]
  },
  {
    "q": "Which feature makes templates powerful in C++?",
    "o": [
      "They allow code reuse for multiple data types",
      "They improve runtime speed",
      "They allow pointer arithmetic",
      "They enable dynamic memory allocation"
    ]
  },
  {
    "q": "What does the following code print?",
    "c": "#include <iostream>\n#include <vector>\nint main() {\n    std::vector<int> nums = {10, 20, 30};\n    std::cout << nums.front();\n    return 0;\n}",
    "o": [
      "10",
      "20",
      "30",
      "Compilation error"
    ]
  },
  {
    "q": "Which of the following correctly defines a class template?",
    "o": [
      "template<typename T> class Box { T data; };",
      "template class Box<T> { T data; };",
      "template<T> class Box { T data; };",
      "template<Box> class T { T data; };"
    ]
  },
  {
    "q": "Which algorithm checks if all elements satisfy a given condition?",
    "o": [
      "std::all_of",
      "std::any_of",
      "std::none_of",
      "std::for_each"
    ]
  },
  {
    "q": "Which of the following is a correct lambda that captures no variables and returns true if input is negative?",
    "o": [
      "[](int x){ return x < 0; }",
      "[=](int x){ return x < 0; }",
      "[&](int x){ return x < 0; }",
      "[x](int x){ return x < 0; }"
    ]
  },
  {
    "q": "Which of the following is true about std::vector?",
    "o": [
      "It stores elements in contiguous memory",
      "It uses linked nodes for storage",
      "It only supports forward iterators",
      "It does not allow resizing"
    ]
  },
  {
    "q": "What will the following code output?",
    "c": "#include <iostream>\n#include <map>\nint main() {\n    std::map<std::string, int> age = { {\"Tom\", 25}, {\"Bob\", 30} };\n    std::cout << age[\"Bob\"];\n    return 0;\n}",
    "o": [
      "30",
      "25",
      "0",
      "Compilation error"
    ]
  },
  {
    "q": "Which of the following STL containers maintains insertion order but is not sorted?",
    "o": [
      "std::list",
      "std::map",
      "std::set",
      "std::unordered_map"
    ]
  },
  {
    "q": "Which of these STL algorithms is used to apply a function to a range of elements?",
    "o": [
      "std::for_each",
      "std::count_if",
      "std::remove_if",
      "std::sort"
    ]
  },
  {
    "q": "What does this lambda expression return?\n\n`auto square = [](int x) { return x * x; };`",
    "o": [
      "The square of the input",
      "The square root of the input",
      "The cube of the input",
      "Nothing, it causes a compile error"
    ]
  },
  {
    "q": "Which of the following is true about class templates in C++?",
    "o": [
      "They allow defining generic classes that work with any data type",
      "They can only be used with primitive types",
      "They must define all member functions inside the class",
      "They cannot have member variables"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "#include <iostream>\n#include <vector>\nint main() {\n    std::vector<char> letters = {'a', 'b', 'c'};\n    std::cout << letters.at(1);\n    return 0;\n}",
    "o": [
      "b",
      "a",
      "c",
      "IndexError"
    ]
  },
  {
    "q": "Which STL container allows fast insertion and deletion at both ends?",
    "o": [
      "std::deque",
      "std::vector",
      "std::map",
      "std::set"
    ]
  },
  {
    "q": "Which of the following best describes std::transform?",
    "o": [
      "Applies a function to each element and stores the result",
      "Removes elements matching a condition",
      "Copies elements to another container",
      "Sorts the elements"
    ]
  },
  {
    "q": "What does the following lambda expression do?\n\n`[](int a, int b) { return a < b; }`",
    "o": [
      "Compares two integers and returns true if the first is smaller",
      "Adds two integers",
      "Subtracts the second integer from the first",
      "Multiplies two integers"
    ]
  },
  {
    "q": "Which of these is a requirement for using std::map?",
    "o": [
      "The key type must be comparable",
      "The value type must be a class",
      "Keys must be strings",
      "The container must be sorted manually"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "#include <iostream>\n#include <list>\nint main() {\n    std::list<int> l = {4, 5, 6};\n    l.push_front(3);\n    std::cout << l.front();\n    return 0;\n}",
    "o": [
      "3",
      "4",
      "6",
      "0"
    ]
  },
  {
    "q": "Which algorithm is used to sort a container?",
    "o": [
      "std::sort",
      "std::copy",
      "std::reverse",
      "std::find_if"
    ]
  },
  {
    "q": "Which STL container is best for fast key-based lookup with no specific order?",
    "o": [
      "std::unordered_map",
      "std::vector",
      "std::list",
      "std::set"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "#include <iostream>\ntemplate<typename T>\nT multiply(T a, T b) { return a * b; }\nint main() {\n    std::cout << multiply(2, 4);\n    return 0;\n}",
    "o": [
      "8",
      "6",
      "4",
      "2"
    ]
  },
  {
    "q": "Which of the following is a correct use of a function template to swap values?",
    "c": "#include <iostream>\ntemplate<typename T>\nvoid swapVals(T &a, T &b) {\n    T temp = a;\n    a = b;\n    b = temp;\n}",
    "o": [
      "swapVals(x, y);",
      "swapVals<int>(x);",
      "swapVals<>(x, y, z);",
      "swapVals<T>(x, y, z);"
    ]
  },
  {
    "q": "Which of the following containers supports random access iterators?",
    "o": [
      "std::vector",
      "std::list",
      "std::map",
      "std::set"
    ]
  },
  {
    "q": "What is the result of the following code?",
    "c": "#include <iostream>\n#include <map>\nint main() {\n    std::map<int, int> m;\n    m[10] = 100;\n    m[5] = 50;\n    std::cout << m.begin()->first;\n    return 0;\n}",
    "o": [
      "5",
      "10",
      "100",
      "Compilation error"
    ]
  },
  {
    "q": "Which statement best describes STL iterators?",
    "o": [
      "They provide a uniform way to access elements of containers",
      "They are only used with arrays",
      "They can be used only for writing to containers",
      "They replace container constructors"
    ]
  },
  {
    "q": "Which lambda expression captures all variables by value and adds two integers?",
    "o": [
      "[=](int a, int b) { return a + b; }",
      "[&](int a, int b) { return a + b; }",
      "[a, b]() { return a + b; }",
      "[](int a, int b) { a + b; }"
    ]
  },
  {
    "q": "What is the primary advantage of using templates in C++?",
    "o": [
      "Code can work with different data types without duplication",
      "It improves garbage collection",
      "It enhances memory management",
      "It allows polymorphism at runtime"
    ]
  },
  {
    "q": "Which container would you use to store unique elements in sorted order?",
    "o": [
      "std::set",
      "std::vector",
      "std::unordered_map",
      "std::list"
    ]
  },
  {
    "q": "What is the output of the following lambda function?",
    "c": "#include <iostream>\nint main() {\n    auto square = [](int x) { return x * x; };\n    std::cout << square(6);\n    return 0;\n}",
    "o": [
      "36",
      "12",
      "6",
      "Compilation error"
    ]
  },
  {
    "q": "Which STL container allows key-value pairs and maintains order based on the key?",
    "o": [
      "std::map",
      "std::unordered_map",
      "std::vector",
      "std::stack"
    ]
  },
  {
    "q": "What is required to use std::sort with a custom class?",
    "o": [
      "Define operator< for the class",
      "Make the class a template",
      "Use std::vector only",
      "Use std::list only"
    ]
  },
  {
    "q": "Which keyword is used to define a function template in C++?",
    "o": [
      "template",
      "typename",
      "define",
      "function"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "#include <iostream>\n#include <vector>\nint main() {\n    std::vector<int> v = {1, 2, 3};\n    std::cout << v.size();\n    return 0;\n}",
    "o": [
      "3",
      "2",
      "0",
      "1"
    ]
  },
  {
    "q": "Which STL algorithm finds the first occurrence of a value?",
    "o": [
      "std::find",
      "std::accumulate",
      "std::copy_if",
      "std::count"
    ]
  },
  {
    "q": "What will the following code print?",
    "c": "#include <iostream>\n#include <list>\nint main() {\n    std::list<int> l = {1, 2, 3};\n    l.pop_back();\n    std::cout << l.back();\n    return 0;\n}",
    "o": [
      "2",
      "3",
      "1",
      "Compilation error"
    ]
  },
  {
    "q": "Which lambda captures everything by reference?",
    "o": [
      "[&]() { return x + y; }",
      "[=]() { return x + y; }",
      "[x, y]() { return x + y; }",
      "[]() { return x + y; }"
    ]
  },
  {
    "q": "What is the default sorting order of std::sort in C++?",
    "o": [
      "Ascending",
      "Descending",
      "Random",
      "Undefined"
    ]
  },
  {
    "q": "Which container would you use to implement a LIFO structure in STL?",
    "o": [
      "std::stack",
      "std::queue",
      "std::set",
      "std::map"
    ]
  },
  {
    "q": "What does the following function template return?",
    "c": "template<typename T>\nT maxVal(T a, T b) {\n    return (a > b) ? a : b;\n}",
    "o": [
      "The maximum of two values",
      "The minimum of two values",
      "The average of two values",
      "Compilation error"
    ]
  },
  {
    "q": "Which container guarantees unique keys and sorted order?",
    "o": [
      "std::map",
      "std::unordered_map",
      "std::multimap",
      "std::vector"
    ]
  },
  {
    "q": "What is the correct way to define a generic class?",
    "o": [
      "template<class T> class MyClass { };",
      "template T class MyClass { };",
      "template::class T MyClass { };",
      "class template<T> MyClass { };"
    ]
  },
  {
    "q": "Which of the following correctly defines a class template?",
    "o": [
      "template<typename T> class Box { T value; };",
      "class Box<T> { T value; };",
      "template<class> Box { T value; };",
      "template<class T> class Box() { T value; };"
    ]
  },
  {
    "q": "What will be the output of this code?",
    "c": "#include <iostream>\n#include <map>\nint main() {\n    std::map<std::string, int> scores;\n    scores[\"Alice\"] = 90;\n    std::cout << scores[\"Alice\"];\n    return 0;\n}",
    "o": [
      "90",
      "0",
      "Alice",
      "Compilation error"
    ]
  },
  {
    "q": "Which of the following C++ STL containers does not allow duplicate keys?",
    "o": [
      "std::map",
      "std::multimap",
      "std::unordered_multimap",
      "std::multiset"
    ]
  },
  {
    "q": "What is the purpose of 'std::accumulate' algorithm in C++?",
    "o": [
      "To calculate the sum of a range of elements",
      "To sort a container",
      "To count elements",
      "To remove duplicates"
    ]
  },
  {
    "q": "Which lambda expression captures only variable 'x' by value?",
    "o": [
      "[x](int y) { return x + y; }",
      "[=](int y) { return x + y; }",
      "[&](int y) { return x + y; }",
      "[&x](int y) { return x + y; }"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "#include <iostream>\ntemplate<typename T>\nT square(T x) { return x * x; }\nint main() {\n    std::cout << square(7.0);\n    return 0;\n}",
    "o": [
      "49",
      "14",
      "7",
      "Compilation error"
    ]
  },
  {
    "q": "Which algorithm removes all elements equal to a given value?",
    "o": [
      "std::remove",
      "std::find",
      "std::copy",
      "std::fill"
    ]
  },
  {
    "q": "Which container would be most appropriate for frequent insertions at both ends?",
    "o": [
      "std::deque",
      "std::vector",
      "std::map",
      "std::unordered_set"
    ]
  },
  {
    "q": "Which of the following is required for a class to be used with std::set?",
    "o": [
      "It must define operator<",
      "It must be a template",
      "It must be default-constructible",
      "It must overload operator[]"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "#include <iostream>\n#include <vector>\n#include <algorithm>\nint main() {\n    std::vector<int> v = {3, 1, 2};\n    std::sort(v.begin(), v.end());\n    std::cout << v[0];\n    return 0;\n}",
    "o": [
      "1",
      "2",
      "3",
      "0"
    ]
  },
  {
    "q": "What is the correct syntax to declare a function template with two different types?",
    "o": [
      "template<typename T1, typename T2>",
      "template<class> typename T1, T2",
      "template<class T1; class T2>",
      "template(T1, T2)"
    ]
  },
  {
    "q": "Which STL container provides direct access using an integer index?",
    "o": [
      "std::vector",
      "std::map",
      "std::set",
      "std::list"
    ]
  },
  {
    "q": "What will be the output of this program?",
    "c": "#include <iostream>\n#include <list>\nint main() {\n    std::list<int> l = {1, 2, 3};\n    l.push_front(0);\n    std::cout << *l.begin();\n    return 0;\n}",
    "o": [
      "0",
      "1",
      "3",
      "Compilation error"
    ]
  },
  {
    "q": "Which STL container is best suited for key-value pairs with fast lookup?",
    "o": [
      "std::unordered_map",
      "std::vector",
      "std::list",
      "std::deque"
    ]
  },
  {
    "q": "What is the result of the lambda function below?",
    "c": "#include <iostream>\nint main() {\n    auto doubleIt = [](int x) { return x * 2; };\n    std::cout << doubleIt(4);\n    return 0;\n}",
    "o": [
      "8",
      "4",
      "16",
      "Error"
    ]
  },
  {
    "q": "Which STL algorithm would you use to count how many times a value appears?",
    "o": [
      "std::count",
      "std::find",
      "std::sort",
      "std::remove"
    ]
  },
  {
    "q": "What does this code print?",
    "c": "#include <iostream>\ntemplate<class T>\nT identity(T val) { return val; }\nint main() {\n    std::cout << identity<char>('X');\n    return 0;\n}",
    "o": [
      "X",
      "identity",
      "val",
      "Compilation error"
    ]
  },
  {
    "q": "What kind of iterators does std::list support?",
    "o": [
      "Bidirectional",
      "Random access",
      "Forward only",
      "Contiguous"
    ]
  },
  {
    "q": "Which container maintains insertion order but allows duplicates?",
    "o": [
      "std::list",
      "std::set",
      "std::map",
      "std::unordered_set"
    ]
  },
  {
    "q": "Which lambda correctly captures all variables by reference and takes no parameters?",
    "o": [
      "[&]() { return x + y; }",
      "[=]() { return x + y; }",
      "[x, &y]() { return x + y; }",
      "[&, x]() { return x + y; }"
    ]
  },
  {
    "q": "Which of the following allows you to create a generic function that works with multiple data types?",
    "o": [
      "Function Template",
      "Macro",
      "Function Pointer",
      "Overloading"
    ]
  },
  {
    "q": "What will be the output of this code?",
    "c": "#include <iostream>\n#include <algorithm>\n#include <vector>\nint main() {\n    std::vector<int> v = {5, 2, 9};\n    std::sort(v.begin(), v.end());\n    std::cout << v[1];\n    return 0;\n}",
    "o": [
      "5",
      "2",
      "9",
      "0"
    ]
  },
  {
    "q": "Which STL container keeps elements in sorted order and ensures uniqueness?",
    "o": [
      "std::set",
      "std::vector",
      "std::list",
      "std::unordered_map"
    ]
  },
  {
    "q": "Which of the following iterators supports random access?",
    "o": [
      "std::vector::iterator",
      "std::list::iterator",
      "std::set::iterator",
      "std::map::iterator"
    ]
  },
  {
    "q": "What does this lambda expression do: [](int x, int y){ return x * y; };",
    "o": [
      "Returns the product of two integers",
      "Returns the sum of two integers",
      "Returns the division result",
      "Returns true if x > y"
    ]
  },
  {
    "q": "What is the purpose of 'typename' in a class template?",
    "o": [
      "To define a generic type",
      "To define a constant",
      "To include a header",
      "To return from a function"
    ]
  },
  {
    "q": "What will be the output of this template function?",
    "c": "template<typename T>\nT triple(T x) { return x * 3; }\n\nint main() {\n    std::cout << triple(4);\n    return 0;\n}",
    "o": [
      "12",
      "3",
      "8",
      "Compile error"
    ]
  },
  {
    "q": "Which algorithm removes all elements that satisfy a condition?",
    "o": [
      "std::remove_if",
      "std::sort",
      "std::fill",
      "std::find"
    ]
  },
  {
    "q": "Which of the following correctly creates a lambda that captures variable 'x' by value?",
    "o": [
      "[x]() { return x; }",
      "[&x]() { return x; }",
      "[] x { return x; }",
      "[=x]() { return x; }"
    ]
  },
  {
    "q": "Which STL container is implemented as a doubly linked list?",
    "o": [
      "std::list",
      "std::deque",
      "std::vector",
      "std::stack"
    ]
  },
  {
    "q": "Which C++ STL container uses hashing for fast key-based lookup?",
    "o": [
      "std::unordered_map",
      "std::map",
      "std::vector",
      "std::list"
    ]
  },
  {
    "q": "What will this code output?",
    "c": "#include <iostream>\n#include <vector>\n#include <algorithm>\nint main() {\n    std::vector<int> nums = {1, 2, 3};\n    std::for_each(nums.begin(), nums.end(), [](int n){ std::cout << n << ' '; });\n    return 0;\n}",
    "o": [
      "1 2 3 ",
      "3 2 1 ",
      "123",
      "Compile error"
    ]
  },
  {
    "q": "What is the correct syntax for a class template with two type parameters?",
    "o": [
      "template<typename T, typename U>",
      "template(class T, class U)",
      "template(T, U)",
      "template<class T> class<U>"
    ]
  },
  {
    "q": "Which of the following is **not** a valid STL algorithm?",
    "o": [
      "std::sum",
      "std::sort",
      "std::find",
      "std::copy"
    ]
  },
  {
    "q": "Which STL container would be most appropriate for implementing a stack (LIFO)?",
    "o": [
      "std::stack",
      "std::queue",
      "std::list",
      "std::map"
    ]
  },
  {
    "q": "What is the result of this lambda expression?",
    "c": "#include <iostream>\nint main() {\n    int a = 3, b = 4;\n    auto f = [=]() { return a + b; };\n    std::cout << f();\n    return 0;\n}",
    "o": [
      "7",
      "12",
      "0",
      "Compile-time error"
    ]
  },
  {
    "q": "Which container maintains the order of insertion and provides bidirectional iteration?",
    "o": [
      "std::list",
      "std::set",
      "std::unordered_map",
      "std::stack"
    ]
  },
  {
    "q": "Which algorithm would you use to reverse the order of elements in a container?",
    "o": [
      "std::reverse",
      "std::swap",
      "std::rotate",
      "std::flip"
    ]
  },
  {
    "q": "What does the following code output?",
    "c": "template <class T> T maxVal(T a, T b) {\n    return (a > b) ? a : b;\n}\nint main() {\n    std::cout << maxVal(10, 20);\n    return 0;\n}",
    "o": [
      "20",
      "10",
      "maxVal",
      "Compilation error"
    ]
  },
  {
    "q": "Which type of iterator is required for random-access operations like indexing?",
    "o": [
      "Random-access iterator",
      "Bidirectional iterator",
      "Forward iterator",
      "Input iterator"
    ]
  },
  {
    "q": "Which keyword is mandatory when defining a function template in C++?",
    "o": [
      "template",
      "typename",
      "class",
      "auto"
    ]
  },
  {
    "q": "What does the following code print?",
    "c": "template<typename T>\nT square(T x) { return x * x; }\n\nint main() {\n    std::cout << square(6.0);\n    return 0;\n}",
    "o": [
      "36",
      "6",
      "12",
      "Error"
    ]
  },
  {
    "q": "Which STL container is ideal for implementing a first-in-first-out (FIFO) structure?",
    "o": [
      "std::queue",
      "std::stack",
      "std::vector",
      "std::map"
    ]
  },
  {
    "q": "What is the output of this lambda expression?",
    "c": "#include <iostream>\nint main() {\n    int x = 7;\n    auto printX = [&]() { std::cout << x; };\n    printX();\n    return 0;\n}",
    "o": [
      "7",
      "x",
      "0",
      "Error"
    ]
  },
  {
    "q": "Which iterator type allows traversal in both directions but not random access?",
    "o": [
      "Bidirectional iterator",
      "Random-access iterator",
      "Forward iterator",
      "Input iterator"
    ]
  },
  {
    "q": "Which of the following algorithms modifies the container to remove elements equal to a value?",
    "o": [
      "std::remove",
      "std::find_if",
      "std::accumulate",
      "std::equal"
    ]
  },
  {
    "q": "Which of the following is true about class templates in C++?",
    "o": [
      "They allow the creation of generic classes",
      "They can only be used with built-in types",
      "They are slower than non-templated classes",
      "They must always use `typename` and not `class`"
    ]
  },
  {
    "q": "What will this code output?",
    "c": "#include <map>\n#include <iostream>\nint main() {\n    std::map<std::string, int> age = { {\"Bob\", 25}, {\"Alice\", 30} };\n    std::cout << age[\"Alice\"];\n    return 0;\n}",
    "o": [
      "30",
      "25",
      "Alice",
      "0"
    ]
  },
  {
    "q": "What does the lambda `[&a, b]() { return a + b; }` mean?",
    "o": [
      "Captures `a` by reference and `b` by value",
      "Captures both `a` and `b` by value",
      "Captures both `a` and `b` by reference",
      "Captures nothing"
    ]
  },
  {
    "q": "Which STL container is implemented as a dynamically resizing array?",
    "o": [
      "std::vector",
      "std::deque",
      "std::set",
      "std::list"
    ]
  },
  {
    "q": "Which of the following can be used to apply an operation to all elements in a container?",
    "o": [
      "std::for_each",
      "std::accumulate",
      "std::remove_if",
      "std::transform"
    ]
  },
  {
    "q": "What will be printed by the following code?",
    "c": "#include <vector>\n#include <iostream>\nint main() {\n    std::vector<int> v(3, 10);\n    std::cout << v.size();\n    return 0;\n}",
    "o": [
      "3",
      "10",
      "0",
      "Compile error"
    ]
  },
  {
    "q": "Which feature allows templates to accept non-type parameters such as integers?",
    "o": [
      "Template non-type parameters",
      "Function overloading",
      "Partial specialization",
      "Default template arguments"
    ]
  },
  {
    "q": "Which STL algorithm copies elements from one range to another?",
    "o": [
      "std::copy",
      "std::move",
      "std::replace",
      "std::fill"
    ]
  },
  {
    "q": "What will the following lambda return?",
    "c": "auto add = [](int x, int y) { return x + y; };\nstd::cout << add(3, 4);",
    "o": [
      "7",
      "34",
      "Compile-time error",
      "0"
    ]
  },
  {
    "q": "Which STL container maintains elements in sorted key order and allows key-based access?",
    "o": [
      "std::map",
      "std::unordered_map",
      "std::list",
      "std::vector"
    ]
  },
  {
    "q": "What will this function template return?",
    "c": "template<typename T>\nT minVal(T a, T b) {\n    return (a < b) ? a : b;\n}\nint main() {\n    std::cout << minVal(3.2, 5.1);\n}",
    "o": [
      "3.2",
      "5.1",
      "8.3",
      "minVal"
    ]
  },
  {
    "q": "Which type of iterator allows only forward traversal?",
    "o": [
      "Forward iterator",
      "Bidirectional iterator",
      "Random-access iterator",
      "Reverse iterator"
    ]
  },
  {
    "q": "What is the correct syntax to define a lambda that captures all external variables by reference?",
    "o": [
      "[&]()",
      "[=]()",
      "[this]()",
      "[x, &y]()"
    ]
  },
  {
    "q": "Which of the following allows iteration through a container in reverse?",
    "o": [
      "rbegin() and rend()",
      "begin() and end()",
      "cbegin() and cend()",
      "front() and back()"
    ]
  },
  {
    "q": "Which C++ keyword is used to define a generic class or function?",
    "o": [
      "template",
      "generic",
      "define",
      "auto"
    ]
  },
  {
    "q": "What will this code output?",
    "c": "#include <list>\n#include <iostream>\nint main() {\n    std::list<int> lst = {5, 10, 15};\n    std::cout << lst.front();\n    return 0;\n}",
    "o": [
      "5",
      "10",
      "15",
      "0"
    ]
  },
  {
    "q": "What is the correct way to write a function template that returns the maximum of two values?",
    "o": [
      "template <typename T> T max(T a, T b) { return (a > b) ? a : b; }",
      "template <T> T max(a, b) { return a > b ? a : b; }",
      "template <class T> max(T a, T b) => T",
      "function<T>(T a, T b) { return a > b ? a : b; }"
    ]
  },
  {
    "q": "Which STL container guarantees unique keys and sorted order?",
    "o": [
      "std::map",
      "std::unordered_map",
      "std::vector",
      "std::multimap"
    ]
  },
  {
    "q": "Which of the following algorithms counts the number of elements satisfying a condition?",
    "o": [
      "std::count_if",
      "std::find_if",
      "std::accumulate",
      "std::all_of"
    ]
  },
  {
    "q": "What will this lambda function output?",
    "c": "#include <iostream>\nint main() {\n    int x = 4;\n    auto doubleVal = [=]() { return x * 2; };\n    std::cout << doubleVal();\n    return 0;\n}",
    "o": [
      "8",
      "4",
      "2",
      "Compile error"
    ]
  },
  {
    "q": "Which function is used to get the last element of a vector?",
    "o": [
      "back()",
      "end()",
      "top()",
      "last()"
    ]
  },
  {
    "q": "Which template feature allows creating special behavior for specific data types?",
    "o": [
      "Template specialization",
      "Function overloading",
      "Type casting",
      "Friend function"
    ]
  },
  {
    "q": "What type of iterator is required by `std::sort()`?",
    "o": [
      "Random-access iterator",
      "Bidirectional iterator",
      "Forward iterator",
      "Input iterator"
    ]
  },
  {
    "q": "What will this code output?",
    "c": "#include <vector>\n#include <iostream>\n#include <algorithm>\nint main() {\n    std::vector<int> v = {1, 2, 3};\n    std::reverse(v.begin(), v.end());\n    std::cout << v[0];\n    return 0;\n}",
    "o": [
      "3",
      "1",
      "2",
      "Compile error"
    ]
  },
  {
    "q": "Which C++ STL container allows fast access to elements using keys without preserving order?",
    "o": [
      "std::unordered_map",
      "std::map",
      "std::list",
      "std::deque"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "#include <vector>\n#include <iostream>\nint main() {\n    std::vector<int> v = {2, 4, 6};\n    std::cout << *(v.begin());\n    return 0;\n}",
    "o": [
      "2",
      "4",
      "6",
      "0"
    ]
  },
  {
    "q": "What does the `typename` keyword indicate in a template definition?",
    "o": [
      "It specifies a placeholder for a data type",
      "It declares a type alias",
      "It indicates a new class",
      "It returns a value type"
    ]
  },
  {
    "q": "Which function is used to apply a lambda or function to a range of elements?",
    "o": [
      "std::for_each",
      "std::accumulate",
      "std::copy_if",
      "std::replace_if"
    ]
  },
  {
    "q": "What does the following lambda expression return?",
    "c": "int x = 2;\nauto multiply = [x](int y) { return x * y; };\nstd::cout << multiply(5);",
    "o": [
      "10",
      "7",
      "25",
      "2"
    ]
  },
  {
    "q": "Which of the following is a correct declaration of a class template?",
    "o": [
      "template<class T> class MyClass { T data; };",
      "template<> class MyClass<T> { T data; };",
      "class template<T> MyClass { T data; };",
      "template class<T> MyClass { T data; };"
    ]
  },
  {
    "q": "Which algorithm is used to fill a container with a specific value?",
    "o": [
      "std::fill",
      "std::generate",
      "std::replace",
      "std::assign"
    ]
  },
  {
    "q": "What will the following code output?",
    "c": "#include <list>\n#include <iostream>\nint main() {\n    std::list<int> l = {3, 6, 9};\n    l.pop_front();\n    std::cout << l.front();\n    return 0;\n}",
    "o": [
      "6",
      "3",
      "9",
      "0"
    ]
  },
  {
    "q": "Which of the following is true about lambda expressions in C++?",
    "o": [
      "They can capture variables from the enclosing scope",
      "They must be assigned to a function pointer",
      "They cannot take parameters",
      "They require a return type"
    ]
  },
  {
    "q": "Which STL container allows fast insertion and removal from both ends?",
    "o": [
      "std::deque",
      "std::vector",
      "std::map",
      "std::set"
    ]
  },
  {
    "q": "Which of the following allows a function to operate with generic types in C++?",
    "o": [
      "Function templates",
      "Function overloading",
      "Virtual functions",
      "Macros"
    ]
  },
  {
    "q": "What will be the output of the code below?",
    "c": "#include <map>\n#include <iostream>\nint main() {\n    std::map<int, std::string> m;\n    m[1] = \"One\";\n    m[2] = \"Two\";\n    std::cout << m[2];\n    return 0;\n}",
    "o": [
      "Two",
      "One",
      "0",
      "Compile error"
    ]
  },
  {
    "q": "Which C++ feature enables a class template to be specialized for a specific data type?",
    "o": [
      "Template specialization",
      "Function overloading",
      "Inheritance",
      "Lambda expressions"
    ]
  },
  {
    "q": "Which algorithm modifies each element in a range using a unary operation?",
    "o": [
      "std::transform",
      "std::copy_if",
      "std::remove_if",
      "std::for_each"
    ]
  },
  {
    "q": "What will be printed by this lambda?",
    "c": "int a = 10;\nauto f = [&]() { a += 5; return a; };\nstd::cout << f();",
    "o": [
      "15",
      "10",
      "5",
      "Compile error"
    ]
  },
  {
    "q": "Which STL container provides constant-time insertion and deletion at both ends?",
    "o": [
      "std::deque",
      "std::vector",
      "std::map",
      "std::set"
    ]
  },
  {
    "q": "How do you declare a vector of doubles named `prices`?",
    "o": [
      "std::vector<double> prices;",
      "vector<double> prices();",
      "prices = new vector<double>();",
      "vector prices<double>;"
    ]
  },
  {
    "q": "Which iterator type is required to use `std::advance()`?",
    "o": [
      "Input iterator or better",
      "Only random-access iterator",
      "Only bidirectional iterator",
      "Output iterator only"
    ]
  },
  {
    "q": "Which lambda expression correctly captures variable `x` by reference?",
    "o": [
      "[&x]() { return x; }",
      "[x]() { return x; }",
      "[&]() { return y; }",
      "[=x]() { return x; }"
    ]
  },
  {
    "q": "What will this code output?",
    "c": "#include <vector>\n#include <iostream>\nint main() {\n    std::vector<int> v = {3, 6, 9};\n    v.pop_back();\n    std::cout << v.back();\n    return 0;\n}",
    "o": [
      "6",
      "9",
      "3",
      "0"
    ]
  },
  {
    "q": "What does a class template allow in C++?",
    "o": [
      "Creation of classes that work with any data type",
      "Compile-time inheritance",
      "Runtime polymorphism",
      "Code encryption at compile time"
    ]
  },
  {
    "q": "What will the following code output?",
    "c": "#include <vector>\n#include <iostream>\nint main() {\n    std::vector<int> v = {1, 2, 3};\n    std::cout << v.size();\n    return 0;\n}",
    "o": [
      "3",
      "2",
      "1",
      "0"
    ]
  },
  {
    "q": "Which STL container is typically implemented as a doubly-linked list?",
    "o": [
      "std::list",
      "std::vector",
      "std::deque",
      "std::set"
    ]
  },
  {
    "q": "Which STL algorithm checks if all elements satisfy a condition?",
    "o": [
      "std::all_of",
      "std::any_of",
      "std::none_of",
      "std::find_if"
    ]
  },
  {
    "q": "What is the result of this lambda expression?",
    "c": "#include <iostream>\nint main() {\n    int a = 3;\n    auto square = [=]() { return a * a; };\n    std::cout << square();\n    return 0;\n}",
    "o": [
      "9",
      "6",
      "3",
      "Compile error"
    ]
  },
  {
    "q": "How can you define a function template with two types?",
    "o": [
      "template <typename T1, typename T2>",
      "function <T1, T2>",
      "template types <T1, T2>",
      "template class <T1, T2>"
    ]
  },
  {
    "q": "Which container automatically sorts keys?",
    "o": [
      "std::map",
      "std::unordered_map",
      "std::vector",
      "std::deque"
    ]
  },
  {
    "q": "Which of the following best describes iterators in STL?",
    "o": [
      "Objects that point to elements in containers",
      "Functions that perform traversal",
      "Templates that store addresses",
      "Pointer constants"
    ]
  },
  {
    "q": "What is the output of this code snippet?",
    "c": "#include <map>\n#include <iostream>\nint main() {\n    std::map<char, int> m = {{'a', 1}, {'b', 2}};\n    std::cout << m.size();\n    return 0;\n}",
    "o": [
      "2",
      "1",
      "0",
      "Compile error"
    ]
  },
  {
    "q": "Which syntax correctly defines a lambda that takes two integers and returns their sum?",
    "o": [
      "[](int a, int b) { return a + b; }",
      "[a, b] => a + b",
      "lambda(int a, int b) -> a + b",
      "function<int, int> (a, b) { return a + b; }"
    ]
  },
  {
    "q": "Which of the following allows creation of reusable classes for multiple data types?",
    "o": [
      "Class templates",
      "Function pointers",
      "Inheritance",
      "Macros"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "#include <list>\n#include <iostream>\nint main() {\n    std::list<int> lst = {10, 20, 30};\n    lst.pop_front();\n    std::cout << lst.front();\n    return 0;\n}",
    "o": [
      "20",
      "10",
      "30",
      "0"
    ]
  },
  {
    "q": "What does `std::find` return if an element is not found?",
    "o": [
      "The end iterator of the container",
      "The first element",
      "A null pointer",
      "The container size"
    ]
  },
  {
    "q": "Which of the following correctly defines a function template?",
    "o": [
      "template<typename T> T max(T a, T b) { return (a > b) ? a : b; }",
      "template<T> T max(a, b) { return a > b ? a : b; }",
      "T max(T a, T b) template<typename T> { return a > b ? a : b; }",
      "function<T> max(T a, T b) { return a > b ? a : b; }"
    ]
  },
  {
    "q": "What is the output of this code using a lambda?",
    "c": "#include <iostream>\nint main() {\n    auto add = [](int x, int y) { return x + y; };\n    std::cout << add(4, 6);\n    return 0;\n}",
    "o": [
      "10",
      "46",
      "0",
      "Compile-time error"
    ]
  },
  {
    "q": "Which STL container stores unique keys in sorted order?",
    "o": [
      "std::set",
      "std::map",
      "std::vector",
      "std::unordered_set"
    ]
  },
  {
    "q": "What is a requirement for using `std::sort` on a container?",
    "o": [
      "The container must support random-access iterators",
      "The elements must be strings",
      "The container must be sorted before use",
      "The container must be a map"
    ]
  },
  {
    "q": "Which C++ feature allows for writing a single function that works with any data type?",
    "o": [
      "Templates",
      "Virtual functions",
      "Macros",
      "Inheritance"
    ]
  },
  {
    "q": "What does `std::accumulate` do in STL?",
    "o": [
      "Computes the sum (or result) of a range of elements",
      "Sorts the container in place",
      "Filters out duplicate values",
      "Fills a container with default values"
    ]
  },
  {
    "q": "What will be printed by the code below?",
    "c": "#include <vector>\n#include <iostream>\nint main() {\n    std::vector<int> v = {1, 2, 3, 4};\n    std::cout << v.at(2);\n    return 0;\n}",
    "o": [
      "3",
      "2",
      "4",
      "1"
    ]
  },
  {
    "q": "Which keyword is used to define a function template in C++?",
    "o": [
      "template",
      "typename",
      "function",
      "generic"
    ]
  },
  {
    "q": "What will this code output?",
    "c": "#include <vector>\n#include <iostream>\nint main() {\n    std::vector<int> v = {4, 5, 6};\n    std::cout << v.front();\n    return 0;\n}",
    "o": [
      "4",
      "5",
      "6",
      "0"
    ]
  },
  {
    "q": "What is the purpose of `std::for_each` in the STL?",
    "o": [
      "Applies a function to each element in a range",
      "Sorts the elements in the container",
      "Filters elements based on a condition",
      "Reverses the order of elements"
    ]
  },
  {
    "q": "Which of the following defines a class template with a single type parameter T?",
    "o": [
      "template <typename T> class MyClass { };",
      "class MyClass <T> { };",
      "template class MyClass(T) { };",
      "template class<T> MyClass { };"
    ]
  },
  {
    "q": "What will this lambda expression return?",
    "c": "int x = 10;\nauto f = [x]() { return x * 2; };\nstd::cout << f();",
    "o": [
      "20",
      "10",
      "2",
      "0"
    ]
  },
  {
    "q": "Which STL container does not allow duplicate keys?",
    "o": [
      "std::map",
      "std::multimap",
      "std::vector",
      "std::list"
    ]
  },
  {
    "q": "Which algorithm is used to count elements that satisfy a condition?",
    "o": [
      "std::count_if",
      "std::find_if",
      "std::transform",
      "std::accumulate"
    ]
  },
  {
    "q": "What kind of iterator does `std::vector` support?",
    "o": [
      "Random-access iterator",
      "Bidirectional iterator",
      "Forward iterator",
      "Input iterator"
    ]
  },
  {
    "q": "Which of the following is a valid lambda that captures all variables by value?",
    "o": [
      "[=]() { return 1; }",
      "[&]() { return 1; }",
      "[x]() { return x; }",
      "[&, x]() { return x; }"
    ]
  },
  {
    "q": "What will the following code print?",
    "c": "#include <list>\n#include <iostream>\nint main() {\n    std::list<int> l = {7, 8, 9};\n    std::cout << l.back();\n    return 0;\n}",
    "o": [
      "9",
      "8",
      "7",
      "0"
    ]
  },
  {
    "q": "Which STL algorithm replaces all occurrences of a value with another value?",
    "o": [
      "std::replace",
      "std::fill",
      "std::transform",
      "std::generate"
    ]
  },
  {
    "q": "What is the output of this code snippet?",
    "c": "#include <vector>\n#include <iostream>\nint main() {\n    std::vector<int> v(5, 2);\n    std::cout << v[4];\n    return 0;\n}",
    "o": [
      "2",
      "4",
      "5",
      "0"
    ]
  },
  {
    "q": "Which STL container allows fast access using keys and keeps them sorted?",
    "o": [
      "std::map",
      "std::unordered_map",
      "std::vector",
      "std::list"
    ]
  },
  {
    "q": "What is the purpose of `typename` in a template declaration?",
    "o": [
      "Specifies a generic data type",
      "Specifies a function return type",
      "Declares a namespace",
      "Defines a constructor"
    ]
  },
  {
    "q": "Which type of iterator is required by `std::sort`?",
    "o": [
      "Random-access iterator",
      "Forward iterator",
      "Input iterator",
      "Bidirectional iterator"
    ]
  },
  {
    "q": "What is the result of executing this lambda expression?",
    "c": "int y = 7;\nauto f = [y]() { return y + 3; };\nstd::cout << f();",
    "o": [
      "10",
      "7",
      "3",
      "Compile error"
    ]
  },
  {
    "q": "Which of the following is true about `std::unordered_map`?",
    "o": [
      "It does not maintain key order",
      "It keeps keys sorted",
      "It is based on a tree structure",
      "It uses bidirectional iterators"
    ]
  },
  {
    "q": "What is the output of the following function template usage?",
    "c": "template<typename T>\nT multiply(T a, T b) { return a * b; }\n\nint main() {\n    std::cout << multiply(3, 4);\n}",
    "o": [
      "12",
      "7",
      "1",
      "Compile error"
    ]
  },
  {
    "q": "Which of these containers supports constant-time insertion/removal at both ends?",
    "o": [
      "std::deque",
      "std::vector",
      "std::map",
      "std::set"
    ]
  },
  {
    "q": "Which of the following STL algorithms reverses the order of elements in a range?",
    "o": [
      "std::reverse",
      "std::rotate",
      "std::copy",
      "std::fill"
    ]
  },
  {
    "q": "What will be the output of the following code?",
    "c": "#include <vector>\n#include <iostream>\nint main() {\n    std::vector<int> v = {1, 2, 3};\n    v.push_back(4);\n    std::cout << v.size();\n    return 0;\n}",
    "o": [
      "4",
      "3",
      "5",
      "Compile error"
    ]
  },
  {
    "q": "What does a class template allow in C++?",
    "o": [
      "Creating classes that can operate with generic data types",
      "Creating abstract classes only",
      "Enabling multiple inheritance automatically",
      "Defining runtime type checks"
    ]
  },
  {
    "q": "Which STL container allows fast random access and stores elements in contiguous memory?",
    "o": [
      "std::vector",
      "std::list",
      "std::map",
      "std::set"
    ]
  },
  {
    "q": "What will this code output?",
    "c": "#include <map>\n#include <iostream>\nint main() {\n    std::map<char, int> m = {{'a', 1}, {'b', 2}};\n    std::cout << m['b'];\n    return 0;\n}",
    "o": [
      "2",
      "1",
      "0",
      "b"
    ]
  },
  {
    "q": "Which of the following is a correct way to capture variable `x` by reference in a lambda?",
    "o": [
      "[&x]() { return x * 2; }",
      "[=x]() { return x * 2; }",
      "[x]() { x = x * 2; }",
      "[*x]() { return x * 2; }"
    ]
  },
  {
    "q": "Which STL algorithm copies elements that match a condition to another container?",
    "o": [
      "std::copy_if",
      "std::for_each",
      "std::transform",
      "std::accumulate"
    ]
  },
  {
    "q": "Which of the following defines a function template for squaring a value?",
    "o": [
      "template<typename T> T square(T x) { return x * x; }",
      "template<class T> T square(x) { return x * x; }",
      "template<T> square(T x) { return x * x; }",
      "template<T> T square(T x) => x * x;"
    ]
  },
  {
    "q": "Which STL container is best suited for frequent insertions/removals in the middle?",
    "o": [
      "std::list",
      "std::vector",
      "std::map",
      "std::stack"
    ]
  },
  {
    "q": "What type of iterator does `std::list` support?",
    "o": [
      "Bidirectional",
      "Random-access",
      "Forward-only",
      "Input-only"
    ]
  },
  {
    "q": "What will be printed by the following lambda code?",
    "c": "#include <iostream>\nint main() {\n    int a = 3, b = 5;\n    auto max = [=]() { return (a > b) ? a : b; };\n    std::cout << max();\n    return 0;\n}",
    "o": [
      "5",
      "3",
      "8",
      "0"
    ]
  },
  {
    "q": "Which of the following is a correct way to define a class template that can accept two different types?",
    "o": [
      "template <typename T, typename U> class MyClass { };",
      "template <T, U> class MyClass { };",
      "template <class T, class U> MyClass { };",
      "template <typename T<U>> class MyClass { };"
    ]
  },
  {
    "q": "What will be the output of the following code?",
    "c": "#include <vector>\n#include <iostream>\nint main() {\n    std::vector<int> v = {10, 20, 30};\n    v.push_back(40);\n    std::cout << v.back();\n    return 0;\n}",
    "o": [
      "40",
      "30",
      "20",
      "10"
    ]
  },
  {
    "q": "Which STL container provides a key-value mapping but does not maintain order?",
    "o": [
      "std::unordered_map",
      "std::map",
      "std::set",
      "std::list"
    ]
  },
  {
    "q": "Which of the following correctly defines a function template for adding two values?",
    "o": [
      "template <typename T> T add(T a, T b) { return a + b; }",
      "template <class T> T add(T a, T b) { return a + b; }",
      "template <T> T add(T a, T b) { return a + b; }",
      "template <typename T> add(T a, T b) { return a + b; }"
    ]
  },
  {
    "q": "What is the output of the following lambda expression?",
    "c": "int a = 5;\nauto f = [a]() { return a + 10; };\nstd::cout << f();",
    "o": [
      "15",
      "5",
      "10",
      "0"
    ]
  },
  {
    "q": "Which of the following is a valid way to capture all variables by reference in a lambda?",
    "o": [
      "[&]() { return 1; }",
      "[=]() { return 1; }",
      "[x]() { return x * 2; }",
      "[*x]() { return x * 2; }"
    ]
  },
  {
    "q": "Which STL algorithm is used to count the occurrences of a specific element in a container?",
    "o": [
      "std::count",
      "std::find",
      "std::accumulate",
      "std::copy"
    ]
  },
  {
    "q": "What is the main difference between `std::map` and `std::unordered_map`?",
    "o": [
      "`std::map` maintains sorted keys, while `std::unordered_map` does not",
      "`std::unordered_map` maintains sorted keys, while `std::map` does not",
      "`std::map` is faster for lookups",
      "`std::unordered_map` allows duplicate keys"
    ]
  },
  {
    "q": "Which STL container allows insertion and deletion of elements only at the front and back of the container?",
    "o": [
      "std::deque",
      "std::vector",
      "std::map",
      "std::list"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "c": "#include <map>\n#include <iostream>\nint main() {\n    std::map<int, std::string> m = {{1, \"apple\"}, {2, \"banana\"}};\n    std::cout << m[1];\n    return 0;\n}",
    "o": [
      "apple",
      "banana",
      "1",
      "0"
    ]
  },
  {
    "q": "Which of the following is the correct syntax for declaring a template class with two type parameters?",
    "o": [
      "template <typename T, typename U> class MyClass { };",
      "template <T, U> class MyClass { };",
      "template <class T, class U> MyClass { };",
      "template <T<U>> class MyClass { };"
    ]
  },
  {
    "q": "What is the result of the following code snippet?",
    "c": "#include <vector>\n#include <iostream>\nint main() {\n    std::vector<int> v = {10, 20, 30};\n    v.pop_back();\n    std::cout << v.size();\n    return 0;\n}",
    "o": [
      "2",
      "3",
      "1",
      "4"
    ]
  },
  {
    "q": "Which of the following STL containers does not allow duplicate elements?",
    "o": [
      "std::set",
      "std::map",
      "std::vector",
      "std::list"
    ]
  },
  {
    "q": "Which of the following code snippets correctly uses a lambda function to return the sum of two values?",
    "o": [
      "auto sum = [](int a, int b) { return a + b; };",
      "auto sum = [a, b]() { return a + b; };",
      "auto sum = [](a, b) { return a + b; };",
      "sum = [] { return a + b; };"
    ]
  },
  {
    "q": "What is the result of the following lambda function?",
    "c": "int x = 10;\nauto f = [x]() { return x * 2; };\nstd::cout << f();",
    "o": [
      "20",
      "10",
      "5",
      "40"
    ]
  },
  {
    "q": "Which STL container allows efficient insertion and deletion at both ends, but not in the middle?",
    "o": [
      "std::deque",
      "std::vector",
      "std::set",
      "std::map"
    ]
  },
  {
    "q": "What is the output of this code that uses `std::accumulate`?",
    "c": "#include <numeric>\n#include <vector>\n#include <iostream>\nint main() {\n    std::vector<int> v = {1, 2, 3, 4};\n    int result = std::accumulate(v.begin(), v.end(), 0);\n    std::cout << result;\n    return 0;\n}",
    "o": [
      "10",
      "24",
      "1",
      "0"
    ]
  },
  {
    "q": "Which type of iterator is required for `std::sort`?",
    "o": [
      "Random-access iterator",
      "Bidirectional iterator",
      "Input iterator",
      "Forward iterator"
    ]
  },
  {
    "q": "Which of the following expressions is a valid instantiation of a template function in C++?",
    "o": [
      "int result = add<int>(3, 4);",
      "add<int>(3, 4);",
      "int result = add(3, 4);",
      "int result = add(3, 4.5);"
    ]
  },
  {
    "q": "Which STL algorithm finds the first occurrence of an element in a container?",
    "o": [
      "std::find",
      "std::count",
      "std::accumulate",
      "std::fill"
    ]
  },
  {
    "q": "Which of the following correctly defines a template function to swap two values?",
    "o": [
      "template <typename T> void swap(T& a, T& b) { T temp = a; a = b; b = temp; }",
      "template <typename T> void swap(T a, T b) { T temp = a; a = b; b = temp; }",
      "template <T> void swap(T& a, T& b) { T temp = a; a = b; b = temp; }",
      "template <T> void swap(T a, T b) { a = b; b = a; }"
    ]
  },
  {
    "q": "Which of the following is a valid declaration of a function template in C++?",
    "o": [
      "template <typename T> T add(T a, T b) { return a + b; }",
      "template <T> T add(T a, T b) { return a + b; }",
      "template <typename T> add(T a, T b) { return a + b; }",
      "template <typename T> T add(a, b) { return a + b; }"
    ]
  },
  {
    "q": "Which of the following is the correct method to access elements in a `std::map`?",
    "o": [
      "map[key]",
      "map.at(key)",
      "Both map[key] and map.at(key)",
      "map.first(key)"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "c": "#include <list>\n#include <iostream>\nint main() {\n    std::list<int> l = {1, 2, 3, 4, 5};\n    auto it = l.begin();\n    std::advance(it, 2);\n    std::cout << *it;\n    return 0;\n}",
    "o": [
      "3",
      "1",
      "2",
      "4"
    ]
  },
  {
    "q": "Which STL container provides constant-time insertions and deletions at both ends but not in the middle?",
    "o": [
      "std::deque",
      "std::list",
      "std::vector",
      "std::set"
    ]
  },
  {
    "q": "Which of the following correctly defines a lambda function that accepts two integers and returns their product?",
    "o": [
      "auto product = [](int a, int b) { return a * b; };",
      "auto product = [](int a, b) { return a * b; };",
      "auto product = [](int a, int b) -> int { return a * b; };",
      "product = [](int a, b) { return a * b; };"
    ]
  },
  {
    "q": "What is the correct syntax to define a class template with a default parameter type in C++?",
    "o": [
      "template <typename T = int> class MyClass { };",
      "template <class T = int> class MyClass { };",
      "template <T = int> class MyClass { };",
      "template <typename T> class MyClass = int { };"
    ]
  },
  {
    "q": "Which STL container is best suited for storing unique elements in sorted order?",
    "o": [
      "std::set",
      "std::unordered_map",
      "std::vector",
      "std::list"
    ]
  },
  {
    "q": "What does the `std::accumulate` function do in C++?",
    "o": [
      "It calculates the sum of elements in a range",
      "It multiplies all elements in a range",
      "It finds the maximum element in a range",
      "It copies elements from one container to another"
    ]
  },
  {
    "q": "What type of iterator does a `std::list` use?",
    "o": [
      "Bidirectional iterator",
      "Random-access iterator",
      "Forward iterator",
      "Input iterator"
    ]
  },
  {
    "q": "Which of the following defines a class template that accepts two parameters of different types?",
    "o": [
      "template <typename T, typename U> class MyClass { };",
      "template <T, U> class MyClass { };",
      "template <class T, class U> class MyClass { };",
      "template <T<U>> class MyClass { };"
    ]
  },
  {
    "q": "What will the following code output?\n#include <vector>\n#include <iostream>\nint main() {\n    std::vector<int> v = {1, 2, 3, 4, 5};\n    v.push_back(6);\n    std::cout << v[5];\n    return 0;\n}",
    "o": [
      "6",
      "5",
      "4",
      "3"
    ]
  },
  {
    "q": "Which of the following is the correct way to use a lambda function to add two integers in C++?",
    "o": [
      "auto add = [](int a, int b) { return a + b; };",
      "auto add = [a, b]() { return a + b; };",
      "auto add = [] { return a + b; };",
      "add = [](int a, b) { return a + b; };"
    ]
  },
  {
    "q": "Which STL container automatically keeps elements sorted and allows fast lookups by key?",
    "o": [
      "std::map",
      "std::unordered_map",
      "std::vector",
      "std::list"
    ]
  },
  {
    "q": "What is the purpose of `std::advance` in C++?",
    "o": [
      "To move an iterator forward or backward by a specified number of steps",
      "To sort elements in a container",
      "To check if an iterator has reached the end of a container",
      "To insert elements in a container at a specific position"
    ]
  },
  {
    "q": "Which of the following containers would be most suitable for storing a sequence of elements with constant-time insertion and deletion at both ends?",
    "o": [
      "std::deque",
      "std::vector",
      "std::list",
      "std::set"
    ]
  },
  {
    "q": "What will be the output of the following code?\n#include <map>\n#include <iostream>\nint main() {\n    std::map<int, std::string> m = {{1, \"apple\"}, {2, \"banana\"}};\n    std::cout << m[2];\n    return 0;\n}",
    "o": [
      "banana",
      "apple",
      "2",
      "1"
    ]
  },
  {
    "q": "Which STL algorithm can be used to reverse the elements in a container?",
    "o": [
      "std::reverse",
      "std::sort",
      "std::reverse_copy",
      "std::accumulate"
    ]
  },
  {
    "q": "Which of the following correctly uses a lambda function to multiply two values and store the result in a variable?",
    "o": [
      "auto multiply = [](int a, int b) { return a * b; }; int result = multiply(3, 4);",
      "auto multiply = [a, b]() { return a * b; }; int result = multiply(3, 4);",
      "auto multiply = [] { return a * b; }; int result = multiply(3, 4);",
      "multiply = [](int a, int b) { return a * b; }; int result = multiply(3, 4);"
    ]
  },
  {
    "q": "What is the output of this C++ code?\n#include <vector>\n#include <iostream>\nint main() {\n    std::vector<int> v = {10, 20, 30};\n    auto it = v.begin();\n    std::cout << *it;\n    return 0;\n}",
    "o": [
      "10",
      "20",
      "30",
      "None"
    ]
  },
  {
    "q": "Which of the following is the correct syntax to define a function template that adds two values?",
    "o": [
      "template <typename T> T add(T a, T b) { return a + b; }",
      "template <typename T> void add(T a, T b) { return a + b; }",
      "template <T> T add(T a, T b) { return a + b; }",
      "template <typename T> T add(T a, T b) { return a + b; return a; }"
    ]
  },
  {
    "q": "What will the following code output?\n#include <map>\n#include <iostream>\nint main() {\n    std::map<int, std::string> m = {{1, \"apple\"}, {2, \"banana\"}};\n    std::cout << m[3];\n    return 0;\n}",
    "o": [
      "empty string",
      "apple",
      "banana",
      "3"
    ]
  },
  {
    "q": "What is the correct way to define a lambda function in C++ that takes two integers and returns their difference?",
    "o": [
      "auto diff = [](int a, int b) { return a - b; };",
      "auto diff = [a, b]() { return a - b; };",
      "auto diff = [] { return a - b; };",
      "diff = [](int a, b) { return a - b; };"
    ]
  },
  {
    "q": "Which of the following containers allows for fast random access to elements by index in C++?",
    "o": [
      "std::vector",
      "std::list",
      "std::map",
      "std::set"
    ]
  },
  {
    "q": "What will the following code print?\n#include <list>\n#include <iostream>\nint main() {\n    std::list<int> l = {10, 20, 30};\n    auto it = l.begin();\n    std::advance(it, 1);\n    std::cout << *it;\n    return 0;\n}",
    "o": [
      "20",
      "10",
      "30",
      "None"
    ]
  },
  {
    "q": "Which of the following defines a valid class template for a generic stack?",
    "o": [
      "template <typename T> class Stack { private: std::vector<T> elements; };",
      "template <T> class Stack { private: std::vector<T> elements; };",
      "template <typename T> class Stack { private: std::vector elements<T>; };",
      "template <typename T> Stack { private: std::vector<T> elements; };"
    ]
  },
  {
    "q": "Which of the following C++ algorithms can be used to find the minimum value in a container?",
    "o": [
      "std::min_element",
      "std::max_element",
      "std::find",
      "std::accumulate"
    ]
  },
  {
    "q": "Which of the following correctly defines a lambda that multiplies a number by 5 and prints the result?",
    "o": [
      "auto multiply_by_five = [](int a) { std::cout << a * 5; };",
      "auto multiply_by_five = [](int a) { return a * 5; };",
      "auto multiply_by_five = [a]() { std::cout << a * 5; };",
      "auto multiply_by_five = [](int a, b) { return a * b; };"
    ]
  },
  {
    "q": "Which of the following STL containers maintains the order of insertion and allows for fast lookup by key?",
    "o": [
      "std::map",
      "std::unordered_map",
      "std::set",
      "std::vector"
    ]
  },
  {
    "q": "What will the following code output?\n#include <vector>\n#include <iostream>\nint main() {\n    std::vector<int> v = {10, 20, 30, 40};\n    auto it = v.begin();\n    std::advance(it, 2);\n    std::cout << *it;\n    return 0;\n}",
    "o": [
      "30",
      "10",
      "20",
      "40"
    ]
  }
]