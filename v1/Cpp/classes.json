[
  {
    "q": "Which of the following correctly defines a class in C++?",
    "o": [
      "class MyClass { public: int x; };",
      "class MyClass() { int x; }",
      "class: MyClass { int x; }",
      "MyClass class { int x; };"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass MyClass {\npublic:\n    int x;\n};\n\nint main() {\n    MyClass obj;\n    obj.x = 10;\n    cout << obj.x;\n    return 0;\n}",
    "o": [
      "10",
      "0",
      "Compilation error",
      "Garbage value"
    ]
  },
  {
    "q": "Which access specifier allows members to be accessible only within the same class?",
    "o": [
      "private",
      "public",
      "protected",
      "internal"
    ]
  },
  {
    "q": "What will be the output of the following code?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass MyClass {\nprivate:\n    int x;\npublic:\n    MyClass() { x = 42; }\n    void print() { cout << x; }\n};\n\nint main() {\n    MyClass obj;\n    obj.print();\n    return 0;\n}",
    "o": [
      "42",
      "0",
      "Compilation error",
      "Undefined"
    ]
  },
  {
    "q": "Which of the following best describes a constructor in C++?",
    "o": [
      "A special function that is automatically called when an object is created",
      "A function that destroys the object",
      "A function that can be called only once",
      "A static function inside the class"
    ]
  },
  {
    "q": "What will be the output of this code involving a constructor?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass MyClass {\npublic:\n    MyClass() {\n        cout << \"Constructor called\";\n    }\n};\n\nint main() {\n    MyClass obj;\n    return 0;\n}",
    "o": [
      "Constructor called",
      "Constructor not called",
      "Runtime error",
      "No output"
    ]
  },
  {
    "q": "Which of the following correctly defines a destructor in C++?",
    "o": [
      "~MyClass() {}",
      "destructor MyClass() {}",
      "delete MyClass() {}",
      "MyClass::~() {}"
    ]
  },
  {
    "q": "What is the use of 'this' pointer in C++?",
    "o": [
      "It refers to the current object of the class",
      "It stores the address of the parent class",
      "It is used to allocate memory",
      "It is a pointer to the main function"
    ]
  },
  {
    "q": "What will the following code print?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass MyClass {\n    int x;\npublic:\n    MyClass(int x) {\n        this->x = x;\n    }\n    void display() {\n        cout << this->x;\n    }\n};\n\nint main() {\n    MyClass obj(7);\n    obj.display();\n    return 0;\n}",
    "o": [
      "7",
      "0",
      "Compilation error",
      "Garbage value"
    ]
  },
  {
    "q": "Which of the following access specifiers allows members to be accessible from anywhere in the program?",
    "o": [
      "public",
      "private",
      "protected",
      "static"
    ]
  },
  {
    "q": "Which of the following statements about constructors is true?",
    "o": [
      "Constructors can be overloaded in C++.",
      "Constructors must have a return type.",
      "Constructors can be virtual.",
      "Constructors are called manually by the user."
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Sample {\npublic:\n    Sample() {\n        cout << \"Default constructor\" << endl;\n    }\n};\n\nint main() {\n    Sample s;\n    return 0;\n}",
    "o": [
      "Default constructor",
      "Compilation error",
      "No output",
      "Runtime error"
    ]
  },
  {
    "q": "Which keyword is used to make a member accessible outside the class?",
    "o": [
      "public",
      "private",
      "protected",
      "friend"
    ]
  },
  {
    "q": "Which of the following is NOT a valid feature of the 'this' pointer?",
    "o": [
      "It can be used to return the current object from a member function.",
      "It holds the address of the object for which the member function is called.",
      "It can be dereferenced to access members directly.",
      "It can be assigned a new value."
    ]
  },
  {
    "q": "What is the output of this code with constructor and 'this' pointer?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Box {\n    int length;\npublic:\n    Box(int length) {\n        this->length = length;\n    }\n    void show() {\n        cout << length << endl;\n    }\n};\n\nint main() {\n    Box b(20);\n    b.show();\n    return 0;\n}",
    "o": [
      "20",
      "0",
      "Compilation error",
      "Garbage value"
    ]
  },
  {
    "q": "Which of the following is a correct way to define an object in C++?",
    "o": [
      "MyClass obj;",
      "obj = MyClass();",
      "class obj = MyClass;",
      "object MyClass obj;"
    ]
  },
  {
    "q": "What will the following code print?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Demo {\npublic:\n    ~Demo() {\n        cout << \"Destructor called\";\n    }\n};\n\nint main() {\n    Demo d;\n    return 0;\n}",
    "o": [
      "Destructor called",
      "Constructor called",
      "No output",
      "Runtime error"
    ]
  },
  {
    "q": "Which access specifier makes class members accessible only within the class and its derived classes?",
    "o": [
      "protected",
      "public",
      "private",
      "friend"
    ]
  },
  {
    "q": "Which of the following is true about destructors in C++?",
    "o": [
      "A class can have only one destructor.",
      "Destructors can be overloaded.",
      "Destructors can return a value.",
      "Destructors can take arguments."
    ]
  },
  {
    "q": "What is the use of 'this' pointer in constructor chaining?",
    "o": [
      "To refer to the current object while calling another constructor",
      "To call the base class constructor",
      "To invoke destructor",
      "To free memory manually"
    ]
  },
  {
    "q": "Which of the following correctly creates an object of class Car?",
    "o": [
      "Car myCar;",
      "object Car myCar;",
      "Car = myCar();",
      "Car->myCar();"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Test {\npublic:\n    Test() {\n        cout << \"Constructor\" << endl;\n    }\n    ~Test() {\n        cout << \"Destructor\" << endl;\n    }\n};\n\nint main() {\n    Test obj;\n    return 0;\n}",
    "o": [
      "Constructor\nDestructor",
      "Destructor\nConstructor",
      "Constructor",
      "No output"
    ]
  },
  {
    "q": "Which of the following access specifiers restricts access to class members from outside the class?",
    "o": [
      "private",
      "public",
      "friend",
      "virtual"
    ]
  },
  {
    "q": "Which of the following is a characteristic of a constructor?",
    "o": [
      "It has the same name as the class",
      "It must return an int",
      "It is called manually",
      "It can take no arguments only"
    ]
  },
  {
    "q": "What is the use of the 'this' pointer inside a class method?",
    "o": [
      "To access the invoking objectâ€™s members",
      "To create a new object",
      "To destroy the current object",
      "To initialize a static member"
    ]
  },
  {
    "q": "What will be the output of this code using 'this' pointer?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Point {\n    int x;\npublic:\n    Point(int x) {\n        this->x = x;\n    }\n    void show() {\n        cout << this->x;\n    }\n};\n\nint main() {\n    Point p(100);\n    p.show();\n    return 0;\n}",
    "o": [
      "100",
      "0",
      "Garbage value",
      "Compilation error"
    ]
  },
  {
    "q": "Which of the following is NOT true about constructors?",
    "o": [
      "They can be virtual.",
      "They can be overloaded.",
      "They can be parameterized.",
      "They initialize objects."
    ]
  },
  {
    "q": "How many destructors can a class have in C++?",
    "o": [
      "Only one",
      "One per object",
      "Multiple with different names",
      "As many as needed"
    ]
  },
  {
    "q": "What does the following code print?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Alpha {\npublic:\n    Alpha() {\n        cout << \"Alpha created\" << endl;\n    }\n    ~Alpha() {\n        cout << \"Alpha destroyed\" << endl;\n    }\n};\n\nint main() {\n    Alpha a;\n    return 0;\n}",
    "o": [
      "Alpha created\nAlpha destroyed",
      "Alpha destroyed\nAlpha created",
      "Only Alpha created",
      "Only Alpha destroyed"
    ]
  },
  {
    "q": "Which of the following shows correct syntax to access private data with a public method?",
    "o": [
      "obj.getData();",
      "obj.data;",
      "getData().obj;",
      "data->obj;"
    ]
  },
  {
    "q": "What does a class provide in C++?",
    "o": [
      "A blueprint for creating objects",
      "A function to perform calculations",
      "Only static members",
      "Only private data"
    ]
  },
  {
    "q": "What is the output of this constructor overloading example?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Test {\npublic:\n    Test() { cout << \"Default\" << endl; }\n    Test(int x) { cout << \"Param: \" << x << endl; }\n};\n\nint main() {\n    Test a;\n    Test b(5);\n    return 0;\n}",
    "o": [
      "Default\nParam: 5",
      "Param: 5\nDefault",
      "Only Default",
      "Only Param: 5"
    ]
  },
  {
    "q": "Which of the following best defines an object in C++?",
    "o": [
      "An instance of a class",
      "A function call",
      "A memory address",
      "A static method"
    ]
  },
  {
    "q": "What will be printed by this destructor example?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Goodbye {\npublic:\n    ~Goodbye() {\n        cout << \"Bye!\";\n    }\n};\n\nint main() {\n    Goodbye g;\n    return 0;\n}",
    "o": [
      "Bye!",
      "No output",
      "Compilation error",
      "Hello!"
    ]
  },
  {
    "q": "What keyword allows a class to grant access to its private members to another function or class?",
    "o": [
      "friend",
      "protected",
      "public",
      "this"
    ]
  },
  {
    "q": "Which of the following is true about the 'this' pointer?",
    "o": [
      "It is implicitly passed to all non-static member functions",
      "It must be passed manually to constructors",
      "It can be used outside class methods",
      "It is only valid in static functions"
    ]
  },
  {
    "q": "What will the following code print?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Number {\n    int n;\npublic:\n    Number(int n) {\n        this->n = n;\n    }\n    void show() {\n        cout << \"Number: \" << n;\n    }\n};\n\nint main() {\n    Number obj(25);\n    obj.show();\n    return 0;\n}",
    "o": [
      "Number: 25",
      "Number: 0",
      "Compilation error",
      "Garbage value"
    ]
  },
  {
    "q": "Which of the following is NOT a valid access specifier in C++?",
    "o": [
      "internal",
      "private",
      "protected",
      "public"
    ]
  },
  {
    "q": "When is a constructor executed?",
    "o": [
      "When an object of the class is created",
      "When the program ends",
      "Before the main function",
      "After calling a method"
    ]
  },
  {
    "q": "Choose the correct statement about destructors:",
    "o": [
      "They are called automatically when an object goes out of scope",
      "They must be called manually",
      "They can be overloaded",
      "They can take arguments"
    ]
  },
  {
    "q": "Which of the following correctly declares a class named Student?",
    "o": [
      "class Student { };",
      "Student class { };",
      "declare class Student { };",
      "class: Student { };"
    ]
  },
  {
    "q": "What is the output of the following program?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Demo {\npublic:\n    Demo() {\n        cout << \"Constructor called\" << endl;\n    }\n};\n\nint main() {\n    Demo d1, d2;\n    return 0;\n}",
    "o": [
      "Constructor called\nConstructor called",
      "Constructor called",
      "No output",
      "Compilation error"
    ]
  },
  {
    "q": "Which access specifier allows inherited classes to access the member but restricts other access?",
    "o": [
      "protected",
      "public",
      "private",
      "static"
    ]
  },
  {
    "q": "What is the role of the 'this' pointer in C++?",
    "o": [
      "To refer to the current object",
      "To refer to the base class object",
      "To create a static method",
      "To point to the main function"
    ]
  },
  {
    "q": "Which of the following is a correct way to use a constructor with parameters?",
    "o": [
      "MyClass obj(5);",
      "MyClass obj = constructor(5);",
      "obj.MyClass(5);",
      "MyClass = new(5);"
    ]
  },
  {
    "q": "What does the following code output?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Example {\n    int val;\npublic:\n    Example(int v) {\n        val = v;\n    }\n    void print() {\n        cout << val;\n    }\n};\n\nint main() {\n    Example ex(9);\n    ex.print();\n    return 0;\n}",
    "o": [
      "9",
      "0",
      "Compilation error",
      "Random number"
    ]
  },
  {
    "q": "How is a destructor different from a constructor?",
    "o": [
      "A destructor has a tilde (~) before the class name and takes no parameters.",
      "A destructor must be called manually.",
      "A destructor can take parameters like constructors.",
      "There is no difference."
    ]
  },
  {
    "q": "What happens if you don't define a destructor in a C++ class?",
    "o": [
      "A default destructor is provided by the compiler.",
      "The program will not compile.",
      "The object will never be destroyed.",
      "An error will occur at runtime."
    ]
  },
  {
    "q": "Which of the following is an invalid use of the 'this' pointer?",
    "o": [
      "Using it in a static function",
      "Using it in a non-static member function",
      "Passing it to another function",
      "Returning it from a method"
    ]
  },
  {
    "q": "What is the output of this program with destructor?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Temp {\npublic:\n    ~Temp() {\n        cout << \"Destroyed\";\n    }\n};\n\nint main() {\n    Temp t;\n    return 0;\n}",
    "o": [
      "Destroyed",
      "No output",
      "Compilation error",
      "Constructor"
    ]
  },
  {
    "q": "Which of the following statements is true about a C++ class?",
    "o": [
      "A class can have both data members and member functions.",
      "A class can contain only data members.",
      "A class can contain only one constructor.",
      "A class must have at least one object to be valid."
    ]
  },
  {
    "q": "What does the following code print?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Person {\npublic:\n    Person() {\n        cout << \"Person created\" << endl;\n    }\n};\n\nint main() {\n    Person p;\n    return 0;\n}",
    "o": [
      "Person created",
      "Person",
      "created",
      "Compilation error"
    ]
  },
  {
    "q": "Which access specifier allows unrestricted access to members of a class?",
    "o": [
      "public",
      "private",
      "protected",
      "internal"
    ]
  },
  {
    "q": "How many times is a constructor called during object creation?",
    "o": [
      "Once per object",
      "Only once for all objects",
      "Twice per object",
      "As many times as the class is defined"
    ]
  },
  {
    "q": "What is the main purpose of the 'this' pointer?",
    "o": [
      "To refer to the current object inside a member function",
      "To store address of the base class",
      "To call static members",
      "To invoke destructors explicitly"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Point {\n    int x;\npublic:\n    Point(int x) {\n        this->x = x;\n    }\n    void print() {\n        cout << x;\n    }\n};\n\nint main() {\n    Point pt(42);\n    pt.print();\n    return 0;\n}",
    "o": [
      "42",
      "0",
      "Compilation error",
      "Garbage value"
    ]
  },
  {
    "q": "Which of the following is true about destructors?",
    "o": [
      "They release resources when an object is destroyed.",
      "They can return a value.",
      "They can be overloaded.",
      "They must be public only."
    ]
  },
  {
    "q": "Which of the following correctly declares a parameterized constructor?",
    "o": [
      "MyClass(int a) { }",
      "constructor MyClass(int a) { }",
      "MyClass() int a { }",
      "MyClass::MyClass = function(int a) { }"
    ]
  },
  {
    "q": "Which access specifier makes class members accessible only within the same class?",
    "o": [
      "private",
      "protected",
      "internal",
      "public"
    ]
  },
  {
    "q": "What does the following code output?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Test {\npublic:\n    Test() {\n        cout << \"Constructor\" << endl;\n    }\n    ~Test() {\n        cout << \"Destructor\" << endl;\n    }\n};\n\nint main() {\n    Test obj;\n    return 0;\n}",
    "o": [
      "Constructor\nDestructor",
      "Destructor\nConstructor",
      "Constructor only",
      "No output"
    ]
  },
  {
    "q": "Which of the following correctly creates an object of class Book?",
    "o": [
      "Book myBook;",
      "object Book;",
      "Book = new();",
      "Book::Book();"
    ]
  },
  {
    "q": "What will be the output of the following code?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Sample {\npublic:\n    Sample() {\n        cout << \"Hello from constructor\";\n    }\n};\n\nint main() {\n    Sample s;\n    return 0;\n}",
    "o": [
      "Hello from constructor",
      "Constructor",
      "No output",
      "Runtime error"
    ]
  },
  {
    "q": "Which access specifier is the default in C++ class members?",
    "o": [
      "private",
      "public",
      "protected",
      "internal"
    ]
  },
  {
    "q": "Which of the following best describes a destructor?",
    "o": [
      "It is invoked automatically when an object goes out of scope.",
      "It is called manually to delete an object.",
      "It is used to initialize objects.",
      "It returns an int by default."
    ]
  },
  {
    "q": "What is the purpose of the 'this' pointer in constructors?",
    "o": [
      "To distinguish between class members and parameters with the same name",
      "To allocate memory to the object",
      "To call other constructors",
      "To reference the base class"
    ]
  },
  {
    "q": "What does the following code print?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Box {\n    int length;\npublic:\n    Box(int length) {\n        this->length = length;\n    }\n    void show() {\n        cout << \"Length is: \" << length;\n    }\n};\n\nint main() {\n    Box b(20);\n    b.show();\n    return 0;\n}",
    "o": [
      "Length is: 20",
      "Length is: 0",
      "Length is: ",
      "Compilation error"
    ]
  },
  {
    "q": "Which of these members cannot be accessed directly from outside the class?",
    "o": [
      "private",
      "public",
      "static",
      "inline"
    ]
  },
  {
    "q": "Which of the following is automatically created when an object is declared?",
    "o": [
      "Constructor call",
      "Destructor call",
      "Function call",
      "Exception"
    ]
  },
  {
    "q": "How many destructors can a class have in C++?",
    "o": [
      "Only one (cannot be overloaded)",
      "Unlimited",
      "One per object",
      "None if constructor is not defined"
    ]
  },
  {
    "q": "What is the output of this destructor example?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass LifeCycle {\npublic:\n    LifeCycle() {\n        cout << \"Start\\n\";\n    }\n    ~LifeCycle() {\n        cout << \"End\";\n    }\n};\n\nint main() {\n    LifeCycle obj;\n    return 0;\n}",
    "o": [
      "Start\nEnd",
      "Start",
      "End",
      "No output"
    ]
  },
  {
    "q": "What will the following code output?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Message {\npublic:\n    Message() {\n        cout << \"Object created\";\n    }\n};\n\nint main() {\n    Message m;\n    return 0;\n}",
    "o": [
      "Object created",
      "Created",
      "No output",
      "Error"
    ]
  },
  {
    "q": "Which of the following best defines a constructor?",
    "o": [
      "A special function that initializes an object when it's created",
      "A function that destroys the object",
      "A function that returns an int",
      "A function that must be called manually"
    ]
  },
  {
    "q": "What does the 'this' pointer store?",
    "o": [
      "The address of the current object",
      "The return address of the constructor",
      "A pointer to the base class",
      "A static memory location"
    ]
  },
  {
    "q": "What does the following program print?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Value {\n    int x;\npublic:\n    Value(int x) {\n        this->x = x + 1;\n    }\n    void show() {\n        cout << x;\n    }\n};\n\nint main() {\n    Value v(9);\n    v.show();\n    return 0;\n}",
    "o": [
      "10",
      "9",
      "0",
      "Compilation error"
    ]
  },
  {
    "q": "Which access specifier allows a class member to be accessed only within the class and its derived classes?",
    "o": [
      "protected",
      "private",
      "public",
      "sealed"
    ]
  },
  {
    "q": "What happens when an object with a destructor goes out of scope?",
    "o": [
      "Its destructor is automatically called",
      "Its constructor is called again",
      "It causes a segmentation fault",
      "Nothing happens"
    ]
  },
  {
    "q": "Which line correctly creates an object of class Dog?",
    "o": [
      "Dog d1;",
      "class Dog();",
      "object Dog;",
      "Dog -> d1();"
    ]
  },
  {
    "q": "How is a constructor different from a normal function?",
    "o": [
      "It has the same name as the class and no return type",
      "It must return an int",
      "It can be static",
      "It is always private"
    ]
  },
  {
    "q": "Which of the following will result in a compilation error?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Test {\nprivate:\n    int a;\n};\n\nint main() {\n    Test t;\n    t.a = 10;\n    return 0;\n}",
    "o": [
      "Accessing private member 'a' outside the class",
      "Declaring object t",
      "Creating class Test",
      "Compiling the program"
    ]
  },
  {
    "q": "Which of the following is true about the destructor?",
    "o": [
      "It has the same name as the class prefixed with a tilde (~)",
      "It can take arguments",
      "It can return values",
      "It can be overloaded"
    ]
  },
  {
    "q": "Which of the following correctly defines a class named `Car`?",
    "o": [
      "class Car { };",
      "Car class() { }",
      "def class Car() { }",
      "create Car() { }"
    ]
  },
  {
    "q": "What is the output of the following C++ code?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Test {\npublic:\n    Test() {\n        cout << \"Constructed\";\n    }\n};\n\nint main() {\n    Test t;\n    return 0;\n}",
    "o": [
      "Constructed",
      "Constructor",
      "Compiled",
      "No output"
    ]
  },
  {
    "q": "Which access specifier should be used if you want class members to be accessible from outside the class?",
    "o": [
      "public",
      "private",
      "protected",
      "friend"
    ]
  },
  {
    "q": "Which of the following best describes the role of a destructor in C++?",
    "o": [
      "It cleans up resources when an object is destroyed.",
      "It initializes class members.",
      "It returns object pointers.",
      "It runs at the beginning of the program."
    ]
  },
  {
    "q": "Why is the `this` pointer used in a class?",
    "o": [
      "To access the current object's members",
      "To call static members",
      "To pass the class as a parameter",
      "To declare constructors"
    ]
  },
  {
    "q": "What does the following code display?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass MyClass {\n    int x;\npublic:\n    MyClass(int x) {\n        this->x = x * 2;\n    }\n    void print() {\n        cout << x;\n    }\n};\n\nint main() {\n    MyClass obj(7);\n    obj.print();\n    return 0;\n}",
    "o": [
      "14",
      "7",
      "0",
      "Compilation error"
    ]
  },
  {
    "q": "Which keyword is not an access specifier in C++?",
    "o": [
      "internal",
      "public",
      "private",
      "protected"
    ]
  },
  {
    "q": "How many constructors can a class have?",
    "o": [
      "As many as needed (they can be overloaded)",
      "Only one",
      "One per object",
      "Only if destructor exists"
    ]
  },
  {
    "q": "What is the output of this code when the object goes out of scope?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Tracker {\npublic:\n    ~Tracker() {\n        cout << \"Object destroyed\";\n    }\n};\n\nint main() {\n    Tracker t;\n    return 0;\n}",
    "o": [
      "Object destroyed",
      "Destructor",
      "No output",
      "Error"
    ]
  },
  {
    "q": "Which of the following is true about class objects in C++?",
    "o": [
      "An object is an instance of a class.",
      "An object is another word for class.",
      "An object is a static method.",
      "An object is a type of function."
    ]
  },
  {
    "q": "Which of the following statements about C++ classes is true?",
    "o": [
      "A class is a blueprint for creating objects.",
      "A class must always have a constructor.",
      "Classes can only contain variables, not functions.",
      "You cannot create multiple objects from a single class."
    ]
  },
  {
    "q": "What does this C++ code print?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Greet {\npublic:\n    Greet() {\n        cout << \"Hi there!\";\n    }\n};\n\nint main() {\n    Greet g;\n    return 0;\n}",
    "o": [
      "Hi there!",
      "Hello!",
      "Constructor called",
      "Nothing"
    ]
  },
  {
    "q": "Which access specifier allows members to be inherited but not accessed outside the class directly?",
    "o": [
      "protected",
      "private",
      "public",
      "friend"
    ]
  },
  {
    "q": "What is the main feature of a destructor?",
    "o": [
      "It has no return type and is preceded by a tilde (~).",
      "It can be overloaded like constructors.",
      "It is always called manually.",
      "It can take parameters."
    ]
  },
  {
    "q": "What is the value of `x` printed by this program?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Number {\n    int x;\npublic:\n    Number(int x) {\n        this->x = x + 5;\n    }\n    void show() {\n        cout << x;\n    }\n};\n\nint main() {\n    Number n(15);\n    n.show();\n    return 0;\n}",
    "o": [
      "20",
      "15",
      "5",
      "0"
    ]
  },
  {
    "q": "Which of the following allows an object to access its own members?",
    "o": [
      "this pointer",
      "self",
      "current",
      "object"
    ]
  },
  {
    "q": "Which of the following is the correct way to define a destructor for class `Alpha`?",
    "o": [
      "~Alpha() { }",
      "destructor Alpha() { }",
      "Alpha.~Alpha() { }",
      "~Alpha[]() { }"
    ]
  },
  {
    "q": "What happens if you do not define a constructor in a class?",
    "o": [
      "The compiler provides a default constructor.",
      "The class cannot be instantiated.",
      "The program will crash on compilation.",
      "Only static members can be used."
    ]
  },
  {
    "q": "What does this program output?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Test {\n    int x;\npublic:\n    Test(int a) {\n        x = a;\n    }\n    void print() {\n        cout << this->x;\n    }\n};\n\nint main() {\n    Test obj(9);\n    obj.print();\n    return 0;\n}",
    "o": [
      "9",
      "0",
      "a",
      "Error"
    ]
  },
  {
    "q": "What happens when an object with no dynamic memory goes out of scope?",
    "o": [
      "Its destructor is called automatically.",
      "Its constructor is re-executed.",
      "Memory leak occurs.",
      "The program terminates immediately."
    ]
  },
  {
    "q": "Which keyword is used to define a class in C++?",
    "o": [
      "class",
      "struct",
      "object",
      "define"
    ]
  },
  {
    "q": "What will the following code print?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass A {\npublic:\n    A() {\n        cout << \"Constructor called\" << endl;\n    }\n    ~A() {\n        cout << \"Destructor called\" << endl;\n    }\n};\n\nint main() {\n    A obj;\n    return 0;\n}",
    "o": [
      "Constructor called\nDestructor called",
      "Destructor called\nConstructor called",
      "Only Constructor called",
      "Only Destructor called"
    ]
  },
  {
    "q": "What is the default access level of members in a C++ struct?",
    "o": [
      "public",
      "private",
      "protected",
      "internal"
    ]
  },
  {
    "q": "Which of the following can be overloaded in C++?",
    "o": [
      "Constructor",
      "Destructor",
      "this pointer",
      "Access specifiers"
    ]
  },
  {
    "q": "Why is the `this` pointer necessary in some class member functions?",
    "o": [
      "To differentiate between member variables and parameters with the same name",
      "To call the base class constructor",
      "To access static members",
      "To destroy the current object"
    ]
  },
  {
    "q": "What is printed by the code below?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Box {\n    int width;\npublic:\n    Box(int width) {\n        this->width = width * 3;\n    }\n    void print() {\n        cout << width;\n    }\n};\n\nint main() {\n    Box b(4);\n    b.print();\n    return 0;\n}",
    "o": [
      "12",
      "4",
      "3",
      "0"
    ]
  },
  {
    "q": "What happens if you do not provide a destructor in your class?",
    "o": [
      "The compiler provides a default destructor.",
      "Your program will fail to compile.",
      "Memory will leak automatically.",
      "The constructor will run instead."
    ]
  },
  {
    "q": "Which of the following is NOT a valid access specifier in C++?",
    "o": [
      "internal",
      "public",
      "protected",
      "private"
    ]
  },
  {
    "q": "What is the purpose of defining a class constructor with parameters?",
    "o": [
      "To allow initializing objects with custom values",
      "To prevent object creation",
      "To overload the destructor",
      "To define private access rules"
    ]
  },
  {
    "q": "What is the output of the following program?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Test {\n    int val;\npublic:\n    Test(int val) {\n        this->val = val * 2;\n    }\n    void show() {\n        cout << val;\n    }\n};\n\nint main() {\n    Test obj(6);\n    obj.show();\n    return 0;\n}",
    "o": [
      "12",
      "6",
      "0",
      "Error"
    ]
  },
  {
    "q": "Which of the following is necessary to create an object in C++?",
    "o": [
      "A class definition",
      "A struct definition",
      "A typedef statement",
      "An include directive"
    ]
  },
  {
    "q": "What does the following program print?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Sample {\n    int data;\npublic:\n    Sample(int d) {\n        data = d;\n    }\n    void print() {\n        cout << this->data;\n    }\n};\n\nint main() {\n    Sample s(25);\n    s.print();\n    return 0;\n}",
    "o": [
      "25",
      "0",
      "Compilation Error",
      "Undefined"
    ]
  },
  {
    "q": "Which access specifier prevents members from being accessed outside the class?",
    "o": [
      "private",
      "public",
      "protected",
      "external"
    ]
  },
  {
    "q": "When is a class destructor automatically called?",
    "o": [
      "When the object goes out of scope",
      "When the object is created",
      "Only at program termination",
      "After calling a constructor"
    ]
  },
  {
    "q": "What is the correct syntax to declare a constructor in C++?",
    "o": [
      "ClassName();",
      "constructor ClassName();",
      "~ClassName();",
      "void ClassName();"
    ]
  },
  {
    "q": "What will the following program output?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Counter {\n    int count;\npublic:\n    Counter() {\n        count = 100;\n    }\n    void display() {\n        cout << count;\n    }\n};\n\nint main() {\n    Counter c;\n    c.display();\n    return 0;\n}",
    "o": [
      "100",
      "0",
      "undefined",
      "compilation error"
    ]
  },
  {
    "q": "Which of the following members can access private members of a class directly?",
    "o": [
      "Member functions",
      "Any function",
      "Global variables",
      "Other classes"
    ]
  },
  {
    "q": "Why is the destructor name preceded by a tilde (~)?",
    "o": [
      "To distinguish it from the constructor",
      "Because it's a macro",
      "It's a legacy feature from C",
      "To indicate static behavior"
    ]
  },
  {
    "q": "Which of the following lines will result in a syntax error?",
    "c": "class Demo {\n    int x;\npublic:\n    void show();\nprivate:\n    int y;\nprotected:\n    float z;\nexternal:\n    int m;\n};",
    "o": [
      "external: int m;",
      "int x;",
      "float z;",
      "int y;"
    ]
  },
  {
    "q": "What is the role of the `this` pointer in a non-static member function?",
    "o": [
      "It refers to the calling object",
      "It refers to the base class",
      "It holds the function address",
      "It is null by default"
    ]
  },
  {
    "q": "Which of the following creates an object of a class `Person`?",
    "o": [
      "Person p1;",
      "Person->p1();",
      "Person::p1();",
      "Person = new object();"
    ]
  },
  {
    "q": "What does this code output?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Alpha {\npublic:\n    Alpha() {\n        cout << \"Alpha Created\";\n    }\n};\n\nint main() {\n    Alpha a;\n    return 0;\n}",
    "o": [
      "Alpha Created",
      "Alpha",
      "Created",
      "No output"
    ]
  },
  {
    "q": "Which access specifier allows access from within the same class only?",
    "o": [
      "private",
      "public",
      "protected",
      "static"
    ]
  },
  {
    "q": "Which of the following correctly defines a parameterized constructor?",
    "o": [
      "MyClass(int a) { this->val = a; }",
      "~MyClass(int a) { val = a; }",
      "int MyClass(int a) { val = a; }",
      "constructor MyClass(a) { val = a; }"
    ]
  },
  {
    "q": "Which member function does not take any arguments and is called automatically when an object is destroyed?",
    "o": [
      "Destructor",
      "Constructor",
      "Main function",
      "Private method"
    ]
  },
  {
    "q": "What will this C++ code output?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Point {\n    int x;\npublic:\n    Point(int x) {\n        this->x = x + 10;\n    }\n    void print() {\n        cout << x;\n    }\n};\n\nint main() {\n    Point p(5);\n    p.print();\n    return 0;\n}",
    "o": [
      "15",
      "10",
      "5",
      "0"
    ]
  },
  {
    "q": "Which of the following best describes the `this` pointer in C++?",
    "o": [
      "A pointer to the current object",
      "A pointer to the base class",
      "A pointer to the constructor",
      "A static pointer"
    ]
  },
  {
    "q": "Which of these members can be accessed directly by a class object?",
    "o": [
      "public",
      "private",
      "protected",
      "friend"
    ]
  },
  {
    "q": "What is the result of running this code?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Tracker {\npublic:\n    ~Tracker() {\n        cout << \"Destroyed\";\n    }\n};\n\nint main() {\n    Tracker t;\n    return 0;\n}",
    "o": [
      "Destroyed",
      "Tracker",
      "Created",
      "No output"
    ]
  },
  {
    "q": "Which of the following is NOT allowed in a constructor?",
    "o": [
      "Returning a value",
      "Using parameters",
      "Using the `this` pointer",
      "Calling other methods"
    ]
  },
  {
    "q": "Which line correctly creates an object of the class `Student`?",
    "o": [
      "Student s1;",
      "object s1 = new Student();",
      "new Student s1();",
      "Student(s1);"
    ]
  },
  {
    "q": "What will the following program print?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Book {\n    int pages;\npublic:\n    Book(int p) {\n        pages = p;\n    }\n    void show() {\n        cout << pages;\n    }\n};\n\nint main() {\n    Book b(300);\n    b.show();\n    return 0;\n}",
    "o": [
      "300",
      "0",
      "Error",
      "Undefined"
    ]
  },
  {
    "q": "Which of the following keywords is used to define members that should not be accessed outside the class?",
    "o": [
      "private",
      "public",
      "friend",
      "external"
    ]
  },
  {
    "q": "What distinguishes a constructor from a normal member function?",
    "o": [
      "It has no return type",
      "It must be private",
      "It must return an int",
      "It cannot have parameters"
    ]
  },
  {
    "q": "Which feature allows access to the calling object from within a member function?",
    "o": [
      "this pointer",
      "object reference",
      "constructor",
      "static keyword"
    ]
  },
  {
    "q": "What will the following code output?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Demo {\npublic:\n    ~Demo() {\n        cout << \"Destroyed\";\n    }\n};\n\nint main() {\n    Demo d;\n    return 0;\n}",
    "o": [
      "Destroyed",
      "Compiled",
      "Created",
      "Nothing"
    ]
  },
  {
    "q": "Which of the following statements is true about constructors?",
    "o": [
      "They initialize objects at creation.",
      "They can be inherited from a base class.",
      "They must be virtual.",
      "They can return values."
    ]
  },
  {
    "q": "Which access specifier allows unrestricted access to class members?",
    "o": [
      "public",
      "private",
      "protected",
      "global"
    ]
  },
  {
    "q": "What is the correct way to access a private data member of a class?",
    "o": [
      "Through a public member function",
      "By direct access using dot operator",
      "By making the data public temporarily",
      "It is not accessible even from inside the class"
    ]
  },
  {
    "q": "What is the output of this program?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Value {\n    int num;\npublic:\n    Value(int num) {\n        this->num = num + 2;\n    }\n    void display() {\n        cout << num;\n    }\n};\n\nint main() {\n    Value v(8);\n    v.display();\n    return 0;\n}",
    "o": [
      "10",
      "8",
      "2",
      "0"
    ]
  },
  {
    "q": "Which of the following best defines a class in C++?",
    "o": [
      "A user-defined blueprint for creating objects",
      "A function template",
      "An integer container",
      "A type of header file"
    ]
  },
  {
    "q": "What does the following code display?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Car {\n    string model;\npublic:\n    Car(string m) {\n        model = m;\n    }\n    void show() {\n        cout << model;\n    }\n};\n\nint main() {\n    Car c(\"Sedan\");\n    c.show();\n    return 0;\n}",
    "o": [
      "Sedan",
      "Car",
      "model",
      "0"
    ]
  },
  {
    "q": "Which specifier allows inherited classes to access a member but prevents access from outside?",
    "o": [
      "protected",
      "private",
      "public",
      "internal"
    ]
  },
  {
    "q": "Which member function is automatically invoked when an object goes out of scope?",
    "o": [
      "Destructor",
      "Constructor",
      "Virtual function",
      "Friend function"
    ]
  },
  {
    "q": "What is a key feature of the `this` pointer?",
    "o": [
      "It holds the address of the current object",
      "It refers to the base class",
      "It is used to call static methods",
      "It contains the constructorâ€™s memory address"
    ]
  },
  {
    "q": "What will this code output?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Item {\n    int id;\npublic:\n    Item(int id) {\n        this->id = id * 5;\n    }\n    void print() {\n        cout << id;\n    }\n};\n\nint main() {\n    Item i(3);\n    i.print();\n    return 0;\n}",
    "o": [
      "15",
      "3",
      "5",
      "0"
    ]
  },
  {
    "q": "Which of the following is true about destructors in C++?",
    "o": [
      "They have the same name as the class prefixed with ~",
      "They can take arguments",
      "They can be overloaded",
      "They return an integer"
    ]
  },
  {
    "q": "Which of the following defines a public member variable correctly?",
    "o": [
      "public:\n    int age;",
      "private int age;",
      "access public int age;",
      "int age public;"
    ]
  },
  {
    "q": "Which of these statements about constructors is correct?",
    "o": [
      "Constructors can be overloaded",
      "Constructors must return void",
      "Constructors are always private",
      "Constructors cannot take arguments"
    ]
  },
  {
    "q": "What does this program print?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Example {\n    int value;\npublic:\n    Example(int value) {\n        this->value = value + 7;\n    }\n    void show() {\n        cout << value;\n    }\n};\n\nint main() {\n    Example ex(5);\n    ex.show();\n    return 0;\n}",
    "o": [
      "12",
      "7",
      "5",
      "0"
    ]
  },
  {
    "q": "What is the purpose of a constructor in a class?",
    "o": [
      "To initialize an object when it is created",
      "To destroy an object after use",
      "To call private functions",
      "To inherit from another class"
    ]
  },
  {
    "q": "What will this code output?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Counter {\n    int count;\npublic:\n    Counter() {\n        count = 1;\n    }\n    void show() {\n        cout << count;\n    }\n};\n\nint main() {\n    Counter c;\n    c.show();\n    return 0;\n}",
    "o": [
      "1",
      "0",
      "Error",
      "Undefined"
    ]
  },
  {
    "q": "Which access specifier allows access only from within the class and its friend functions?",
    "o": [
      "private",
      "public",
      "protected",
      "inline"
    ]
  },
  {
    "q": "Which of these is a correct destructor declaration for a class named `Node`?",
    "o": [
      "~Node();",
      "destructor Node();",
      "Node.~();",
      "void ~Node();"
    ]
  },
  {
    "q": "What is the role of the `this` pointer in C++?",
    "o": [
      "It stores the address of the current object",
      "It creates a new object",
      "It deletes an object",
      "It refers to the base class only"
    ]
  },
  {
    "q": "What will be the output of this program?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass MyClass {\n    int x;\npublic:\n    MyClass(int x) {\n        this->x = x * 2;\n    }\n    void print() {\n        cout << x;\n    }\n};\n\nint main() {\n    MyClass obj(6);\n    obj.print();\n    return 0;\n}",
    "o": [
      "12",
      "6",
      "2",
      "0"
    ]
  },
  {
    "q": "Which of the following correctly defines a class?",
    "o": [
      "class Sample { int a; };",
      "Sample class { int a; };",
      "int class Sample { };",
      "define class Sample { };"
    ]
  },
  {
    "q": "What happens if a class does not have a user-defined destructor?",
    "o": [
      "A default destructor is provided by the compiler",
      "The program will not compile",
      "Object memory is never released",
      "Only static data members are destroyed"
    ]
  },
  {
    "q": "Which keyword allows other classes to access private members?",
    "o": [
      "friend",
      "public",
      "protected",
      "extern"
    ]
  },
  {
    "q": "What will be the result of the following code?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Box {\n    int size;\npublic:\n    Box(int s) {\n        this->size = s + 3;\n    }\n    void display() {\n        cout << size;\n    }\n};\n\nint main() {\n    Box b(4);\n    b.display();\n    return 0;\n}",
    "o": [
      "7",
      "4",
      "3",
      "0"
    ]
  },
  {
    "q": "Which of the following is used to create an instance of a class in C++?",
    "o": [
      "ClassName obj;",
      "ClassName->obj();",
      "new ClassName;",
      "object ClassName();"
    ]
  },
  {
    "q": "What will the following code print?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Temp {\n    int t;\npublic:\n    Temp() {\n        t = 42;\n    }\n    void show() {\n        cout << t;\n    }\n};\n\nint main() {\n    Temp a;\n    a.show();\n    return 0;\n}",
    "o": [
      "42",
      "0",
      "Error",
      "Undefined"
    ]
  },
  {
    "q": "Which access specifier allows class members to be accessible from anywhere in the program?",
    "o": [
      "public",
      "private",
      "protected",
      "global"
    ]
  },
  {
    "q": "Which of the following statements is true about constructors?",
    "o": [
      "Constructors have the same name as the class",
      "Constructors must have a return type",
      "Constructors can be virtual",
      "Constructors are always private"
    ]
  },
  {
    "q": "What is the purpose of the `this` pointer in a member function?",
    "o": [
      "It points to the object that invoked the function",
      "It points to the base class",
      "It points to the function itself",
      "It stores the function address"
    ]
  },
  {
    "q": "What will be the output of this C++ program?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Multiply {\n    int val;\npublic:\n    Multiply(int val) {\n        this->val = val * 3;\n    }\n    void print() {\n        cout << val;\n    }\n};\n\nint main() {\n    Multiply m(4);\n    m.print();\n    return 0;\n}",
    "o": [
      "12",
      "4",
      "3",
      "0"
    ]
  },
  {
    "q": "Which of these can access private members of a class?",
    "o": [
      "Friend functions",
      "Derived classes",
      "Other objects",
      "Global variables"
    ]
  },
  {
    "q": "Which of the following best describes a destructor?",
    "o": [
      "It is called automatically when an object is destroyed",
      "It is called when an object is created",
      "It must be called manually",
      "It is only used with dynamic memory"
    ]
  },
  {
    "q": "Which line correctly defines a class named `Book` with a public title?",
    "o": [
      "class Book { public: string title; };",
      "Book class { string title public; };",
      "define class Book: string title;",
      "public class Book { string title; };"
    ]
  },
  {
    "q": "What is the output of this code snippet?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Value {\n    int x;\npublic:\n    Value(int x) {\n        this->x = x + 1;\n    }\n    void show() {\n        cout << x;\n    }\n};\n\nint main() {\n    Value v(9);\n    v.show();\n    return 0;\n}",
    "o": [
      "10",
      "9",
      "1",
      "0"
    ]
  },
  {
    "q": "Which of the following statements correctly declares an object of a class named `Employee`?",
    "o": [
      "Employee e1;",
      "class e1 = Employee();",
      "Employee -> e1;",
      "object e1 = Employee();"
    ]
  },
  {
    "q": "What will be the output of the following program?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Box {\n    int length;\npublic:\n    Box() {\n        length = 20;\n    }\n    void display() {\n        cout << length;\n    }\n};\n\nint main() {\n    Box b;\n    b.display();\n    return 0;\n}",
    "o": [
      "20",
      "0",
      "10",
      "Compilation error"
    ]
  },
  {
    "q": "Which of the following access specifiers makes a class member accessible only within the class itself?",
    "o": [
      "private",
      "protected",
      "public",
      "internal"
    ]
  },
  {
    "q": "What will this code output?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Test {\n    int x;\npublic:\n    Test(int val) {\n        this->x = val + 5;\n    }\n    void show() {\n        cout << x;\n    }\n};\n\nint main() {\n    Test t(3);\n    t.show();\n    return 0;\n}",
    "o": [
      "8",
      "3",
      "5",
      "0"
    ]
  },
  {
    "q": "What does a class destructor typically do?",
    "o": [
      "Releases resources and performs cleanup when an object is destroyed",
      "Initializes an object",
      "Overloads operators",
      "Creates object arrays"
    ]
  },
  {
    "q": "Which of the following statements is true about the `this` pointer in C++?",
    "o": [
      "It is available in non-static member functions",
      "It can be used in static functions",
      "It always points to the base class",
      "It is optional in constructors"
    ]
  },
  {
    "q": "Which of the following correctly defines a class with a public constructor?",
    "o": [
      "class Demo { public: Demo() { } };",
      "class Demo { constructor Demo() { } };",
      "class Demo { Demo(public) { } };",
      "class Demo public: Demo() { }"
    ]
  },
  {
    "q": "What will be the result of this code?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Data {\n    int n;\npublic:\n    Data(int x) {\n        this->n = x * 2;\n    }\n    void get() {\n        cout << n;\n    }\n};\n\nint main() {\n    Data d(7);\n    d.get();\n    return 0;\n}",
    "o": [
      "14",
      "7",
      "2",
      "0"
    ]
  },
  {
    "q": "Which of the following is automatically called when an object is created?",
    "o": [
      "Constructor",
      "Destructor",
      "Friend function",
      "Static method"
    ]
  },
  {
    "q": "Which of these statements is valid for defining a public method in a class?",
    "o": [
      "public: void show();",
      "void show() public;",
      "show() public void;",
      "access public void show();"
    ]
  },
  {
    "q": "Which keyword is used to define a class in C++?",
    "o": [
      "class",
      "struct",
      "define",
      "object"
    ]
  },
  {
    "q": "What will the following code output?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Sample {\n    int a;\npublic:\n    Sample(int x) {\n        a = x;\n    }\n    void print() {\n        cout << a;\n    }\n};\n\nint main() {\n    Sample s(25);\n    s.print();\n    return 0;\n}",
    "o": [
      "25",
      "0",
      "1",
      "Error"
    ]
  },
  {
    "q": "Which of these members is not accessible outside the class unless accessed through friend functions?",
    "o": [
      "private",
      "public",
      "protected",
      "inline"
    ]
  },
  {
    "q": "Which of the following is NOT a valid constructor syntax in C++?",
    "o": [
      "MyClass(int x); // declaration only",
      "MyClass() { } // default constructor",
      "~MyClass() { } // destructor, not constructor",
      "MyClass(int x) { this->x = x; }"
    ]
  },
  {
    "q": "What will this code output?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Alpha {\n    int num;\npublic:\n    Alpha() {\n        num = 100;\n    }\n    void show() {\n        cout << num;\n    }\n};\n\nint main() {\n    Alpha a;\n    a.show();\n    return 0;\n}",
    "o": [
      "100",
      "0",
      "null",
      "undefined"
    ]
  },
  {
    "q": "When is a destructor automatically called?",
    "o": [
      "When an object goes out of scope",
      "When an object is created",
      "At the beginning of the program",
      "Only for static members"
    ]
  },
  {
    "q": "Which of the following code snippets demonstrates the use of `this` pointer correctly?",
    "c": "class Number {\n    int n;\npublic:\n    void set(int n) {\n        this->n = n;\n    }\n};",
    "o": [
      "Correct use of `this` to differentiate between local and member variable",
      "Incorrect because `this` is not allowed",
      "`this` can only be used in constructors",
      "It should use static instead of `this`"
    ]
  },
  {
    "q": "Which specifier would you use to allow access from derived classes but not outside?",
    "o": [
      "protected",
      "private",
      "public",
      "inline"
    ]
  },
  {
    "q": "How is a destructor distinguished from a constructor in syntax?",
    "o": [
      "It uses a tilde (~) before the class name",
      "It uses the `delete` keyword",
      "It ends with a semicolon",
      "It is written as `destructor()`"
    ]
  },
  {
    "q": "What will be the output of this program?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Point {\n    int x;\npublic:\n    Point(int x) {\n        this->x = x + 10;\n    }\n    void display() {\n        cout << x;\n    }\n};\n\nint main() {\n    Point p(5);\n    p.display();\n    return 0;\n}",
    "o": [
      "15",
      "10",
      "5",
      "0"
    ]
  },
  {
    "q": "Which of the following creates an object of a class named `Circle`?",
    "o": [
      "Circle c;",
      "object c = Circle();",
      "create Circle as c;",
      "Circle -> c();"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Demo {\n    int a;\npublic:\n    Demo() { a = 30; }\n    void show() { cout << a; }\n};\n\nint main() {\n    Demo d;\n    d.show();\n    return 0;\n}",
    "o": [
      "30",
      "0",
      "Error",
      "Undefined"
    ]
  },
  {
    "q": "Which access specifier allows members to be accessed only within the class and by friend functions?",
    "o": [
      "private",
      "public",
      "protected",
      "internal"
    ]
  },
  {
    "q": "Which of the following correctly describes a constructor?",
    "o": [
      "A special method called when an object is created",
      "A method that deletes an object",
      "A static function used for initialization",
      "A private function called manually"
    ]
  },
  {
    "q": "What does the `this` pointer refer to?",
    "o": [
      "The current object instance",
      "The calling function",
      "A global object",
      "Static members only"
    ]
  },
  {
    "q": "What will be printed by this program?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Counter {\n    int count;\npublic:\n    Counter(int c) { this->count = c * 2; }\n    void print() { cout << count; }\n};\n\nint main() {\n    Counter obj(6);\n    obj.print();\n    return 0;\n}",
    "o": [
      "12",
      "6",
      "2",
      "0"
    ]
  },
  {
    "q": "Which of the following is true about a destructor?",
    "o": [
      "It has the same name as the class with a `~` prefix",
      "It must return an integer",
      "It is called using `delete` keyword only",
      "It is always private"
    ]
  },
  {
    "q": "Which line correctly sets a member variable using the `this` pointer?",
    "c": "class Temp {\n    int val;\npublic:\n    void set(int val) {\n        this->val = val;\n    }\n};",
    "o": [
      "`this->val = val;` sets the class member correctly",
      "`val = this->val;` sets the value in reverse",
      "`this = val;` assigns value to pointer",
      "`set->val = this;` is valid syntax"
    ]
  },
  {
    "q": "What happens if a constructor is not defined in a class?",
    "o": [
      "A default constructor is provided by the compiler",
      "The class cannot be instantiated",
      "An error is thrown",
      "Only static functions can run"
    ]
  },
  {
    "q": "Which keyword allows a class to define members accessible from outside the class?",
    "o": [
      "public",
      "private",
      "protected",
      "open"
    ]
  },
  {
    "q": "Which of the following is the correct way to define an empty class in C++?",
    "o": [
      "class MyClass {};",
      "class MyClass() {}",
      "class MyClass[] {}",
      "define class MyClass {}"
    ]
  },
  {
    "q": "What will the following code output?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Hello {\n    int x;\npublic:\n    Hello() {\n        x = 99;\n    }\n    void print() {\n        cout << x;\n    }\n};\n\nint main() {\n    Hello h;\n    h.print();\n    return 0;\n}",
    "o": [
      "99",
      "0",
      "Garbage value",
      "Error"
    ]
  },
  {
    "q": "Which access specifier is the most restrictive in terms of visibility?",
    "o": [
      "private",
      "protected",
      "public",
      "extern"
    ]
  },
  {
    "q": "What is the primary role of a constructor?",
    "o": [
      "To initialize objects of the class",
      "To destroy objects at the end of scope",
      "To overload member functions",
      "To return values from class"
    ]
  },
  {
    "q": "Which pointer is used to refer to the calling object in non-static member functions?",
    "o": [
      "this",
      "self",
      "object",
      "instance"
    ]
  },
  {
    "q": "What will be printed by the following code?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Number {\n    int n;\npublic:\n    Number(int x) {\n        this->n = x + 2;\n    }\n    void show() {\n        cout << n;\n    }\n};\n\nint main() {\n    Number obj(3);\n    obj.show();\n    return 0;\n}",
    "o": [
      "5",
      "3",
      "2",
      "0"
    ]
  },
  {
    "q": "Which of the following is NOT true about destructors?",
    "o": [
      "They can be overloaded",
      "They have no parameters",
      "They have the same name as the class prefixed by ~",
      "They are called automatically when an object goes out of scope"
    ]
  },
  {
    "q": "What does this code demonstrate?",
    "c": "class Example {\n    int val;\npublic:\n    Example(int val) {\n        this->val = val;\n    }\n};",
    "o": [
      "Disambiguation using the `this` pointer",
      "Incorrect constructor syntax",
      "Static method call",
      "Friend function access"
    ]
  },
  {
    "q": "What is the output of this program?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Temp {\n    int t;\npublic:\n    Temp() {\n        t = 50;\n    }\n    ~Temp() {\n        cout << \"Destroyed\";\n    }\n};\n\nint main() {\n    Temp obj;\n    return 0;\n}",
    "o": [
      "Destroyed",
      "No output",
      "Compilation error",
      "50"
    ]
  },
  {
    "q": "Which of these methods is automatically called when an object is deleted or goes out of scope?",
    "o": [
      "Destructor",
      "Constructor",
      "Friend function",
      "Operator function"
    ]
  },
  {
    "q": "Which of the following best describes a class in C++?",
    "o": [
      "A user-defined blueprint for creating objects",
      "A built-in type for data storage",
      "A function template",
      "An operator overload"
    ]
  },
  {
    "q": "What will the following code output?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Test {\n    int a;\npublic:\n    Test() {\n        a = 42;\n    }\n    void display() {\n        cout << a;\n    }\n};\n\nint main() {\n    Test obj;\n    obj.display();\n    return 0;\n}",
    "o": [
      "42",
      "0",
      "Error",
      "Undefined"
    ]
  },
  {
    "q": "Which keyword is used to limit access to class members to within the class itself?",
    "o": [
      "private",
      "public",
      "protected",
      "internal"
    ]
  },
  {
    "q": "Which statement about constructors is true?",
    "o": [
      "Constructors do not have a return type",
      "Constructors must return an int",
      "Constructors can be virtual",
      "Constructors are called manually"
    ]
  },
  {
    "q": "Which of these is the correct way to access a member variable using the `this` pointer?",
    "c": "class Item {\n    int price;\npublic:\n    void setPrice(int price) {\n        this->price = price;\n    }\n};",
    "o": [
      "`this->price = price;` correctly assigns the value",
      "`this.price = price;` uses incorrect syntax",
      "`*this.price = price;` is invalid",
      "`this(price) = price;` does not compile"
    ]
  },
  {
    "q": "Which member function is invoked when an object is destroyed?",
    "o": [
      "Destructor",
      "Constructor",
      "Virtual function",
      "Inline function"
    ]
  },
  {
    "q": "What is printed by the code below?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass X {\n    int val;\npublic:\n    X(int v) {\n        this->val = v + 10;\n    }\n    void show() {\n        cout << val;\n    }\n};\n\nint main() {\n    X x(2);\n    x.show();\n    return 0;\n}",
    "o": [
      "12",
      "10",
      "2",
      "0"
    ]
  },
  {
    "q": "Which of the following correctly defines a destructor?",
    "o": [
      "~ClassName();",
      "~ClassName[];",
      "ClassName.~();",
      "ClassName();"
    ]
  },
  {
    "q": "What will the following output be?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Greet {\npublic:\n    Greet() {\n        cout << \"Hello \";\n    }\n    ~Greet() {\n        cout << \"World\";\n    }\n};\n\nint main() {\n    Greet g;\n    return 0;\n}",
    "o": [
      "Hello World",
      "World Hello",
      "Hello",
      "World"
    ]
  },
  {
    "q": "Which of the following is a characteristic of the `this` pointer?",
    "o": [
      "It holds the address of the calling object",
      "It can point to any class",
      "It refers to the class type, not the object",
      "It is only available in static functions"
    ]
  },
  {
    "q": "Which of the following is used to declare an object of a class?",
    "o": [
      "ClassName obj;",
      "declare obj = ClassName();",
      "object ClassName = new();",
      "obj : ClassName;"
    ]
  },
  {
    "q": "What will the following code output?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Alpha {\n    int x;\npublic:\n    Alpha(int val) {\n        x = val;\n    }\n    void show() {\n        cout << x;\n    }\n};\n\nint main() {\n    Alpha a(7);\n    a.show();\n    return 0;\n}",
    "o": [
      "7",
      "0",
      "Error",
      "Garbage value"
    ]
  },
  {
    "q": "Which of the following keywords exposes class members to outside code?",
    "o": [
      "public",
      "private",
      "protected",
      "exposed"
    ]
  },
  {
    "q": "Which statement is true about constructors?",
    "o": [
      "They are automatically invoked when an object is created",
      "They must always be declared private",
      "They can return a value",
      "They must be called manually"
    ]
  },
  {
    "q": "What will this code print?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Sample {\n    int x;\npublic:\n    Sample(int x) {\n        this->x = x + 1;\n    }\n    void print() {\n        cout << x;\n    }\n};\n\nint main() {\n    Sample s(4);\n    s.print();\n    return 0;\n}",
    "o": [
      "5",
      "4",
      "0",
      "Error"
    ]
  },
  {
    "q": "What is a destructor used for in C++?",
    "o": [
      "To release resources when an object is destroyed",
      "To initialize data members",
      "To call a class constructor",
      "To create dynamic arrays"
    ]
  },
  {
    "q": "What does the `this` pointer contain inside a non-static member function?",
    "o": [
      "The memory address of the calling object",
      "The memory address of the class itself",
      "A reference to the constructor",
      "A null value"
    ]
  },
  {
    "q": "Identify the output of this program.",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Demo {\n    int val;\npublic:\n    Demo() {\n        val = 25;\n    }\n    ~Demo() {\n        cout << val * 2;\n    }\n};\n\nint main() {\n    Demo d;\n    return 0;\n}",
    "o": [
      "50",
      "25",
      "Error",
      "0"
    ]
  },
  {
    "q": "What is true about member functions using `this` pointer?",
    "o": [
      "They can access the calling objectâ€™s members",
      "They can modify static members only",
      "They are automatically static",
      "They must return a pointer"
    ]
  },
  {
    "q": "Which of the following is a correct constructor declaration?",
    "o": [
      "MyClass();",
      "void MyClass();",
      "constructor MyClass();",
      "MyClass.create();"
    ]
  },
  {
    "q": "Which of the following correctly creates an object from a class named `Book`?",
    "o": [
      "Book myBook;",
      "object Book myBook;",
      "class Book = new myBook();",
      "Book = myBook();"
    ]
  },
  {
    "q": "What will the following C++ program print?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass MyClass {\n    int value;\npublic:\n    MyClass() {\n        value = 20;\n    }\n    void display() {\n        cout << value;\n    }\n};\n\nint main() {\n    MyClass obj;\n    obj.display();\n    return 0;\n}",
    "o": [
      "20",
      "0",
      "Error",
      "Garbage value"
    ]
  },
  {
    "q": "Which of the following access specifiers allows access only within the same class?",
    "o": [
      "private",
      "protected",
      "public",
      "external"
    ]
  },
  {
    "q": "Which constructor type takes no parameters?",
    "o": [
      "Default constructor",
      "Copy constructor",
      "Parameterized constructor",
      "Virtual constructor"
    ]
  },
  {
    "q": "What does this C++ code demonstrate?",
    "c": "class Box {\n    int length;\npublic:\n    Box(int length) {\n        this->length = length;\n    }\n};",
    "o": [
      "Use of `this` pointer to resolve naming conflict",
      "Dynamic memory allocation",
      "Inheritance of constructors",
      "Invalid syntax"
    ]
  },
  {
    "q": "Which of the following functions will be called when an object is created?",
    "o": [
      "Constructor",
      "Destructor",
      "Virtual function",
      "Inline function"
    ]
  },
  {
    "q": "What will the following code output?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Test {\n    int x;\npublic:\n    Test(int x) {\n        this->x = x * 2;\n    }\n    void show() {\n        cout << x;\n    }\n};\n\nint main() {\n    Test t(6);\n    t.show();\n    return 0;\n}",
    "o": [
      "12",
      "6",
      "0",
      "Error"
    ]
  },
  {
    "q": "Which of the following is NOT true about the `this` pointer?",
    "o": [
      "It can be used in static member functions",
      "It holds the address of the invoking object",
      "It can be used to return the object from a function",
      "It helps resolve name conflicts in constructors"
    ]
  },
  {
    "q": "What happens if a class does not define a constructor?",
    "o": [
      "A default constructor is provided automatically",
      "The program will not compile",
      "The destructor won't work",
      "You must manually define one"
    ]
  },
  {
    "q": "Which line correctly defines a destructor for a class named `Person`?",
    "o": [
      "~Person();",
      "destructor Person();",
      "delete Person();",
      "~Person[]();"
    ]
  },
  {
    "q": "Which of the following correctly defines a class in C++?",
    "o": [
      "class Car { };",
      "def class Car { }",
      "Car = class { }",
      "object Car { }"
    ]
  },
  {
    "q": "What is the output of this program?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Sample {\n    int data;\npublic:\n    Sample() {\n        data = 100;\n    }\n    void show() {\n        cout << data;\n    }\n};\n\nint main() {\n    Sample s;\n    s.show();\n    return 0;\n}",
    "o": [
      "100",
      "0",
      "Garbage value",
      "Compile error"
    ]
  },
  {
    "q": "Which of the following access specifiers allows inherited classes to access members, but not outside functions?",
    "o": [
      "protected",
      "private",
      "public",
      "internal"
    ]
  },
  {
    "q": "Which constructor is invoked when an object is created with another object of the same class?",
    "o": [
      "Copy constructor",
      "Default constructor",
      "Parameterized constructor",
      "Move constructor"
    ]
  },
  {
    "q": "What does this code illustrate?",
    "c": "class Number {\n    int n;\npublic:\n    Number(int n) {\n        this->n = n;\n    }\n};",
    "o": [
      "Resolving variable shadowing using `this` pointer",
      "Use of a static variable",
      "Constructor overloading",
      "Inheritance"
    ]
  },
  {
    "q": "Which of the following is NOT a characteristic of a destructor?",
    "o": [
      "It can take parameters",
      "It has the same name as the class prefixed with ~",
      "It is automatically called when an object is destroyed",
      "It has no return type"
    ]
  },
  {
    "q": "What will this C++ code output?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Temp {\npublic:\n    ~Temp() {\n        cout << \"Destructor called\";\n    }\n};\n\nint main() {\n    Temp t;\n    return 0;\n}",
    "o": [
      "Destructor called",
      "Constructor called",
      "No output",
      "Runtime error"
    ]
  },
  {
    "q": "Which of the following best describes the purpose of the `this` pointer?",
    "o": [
      "It points to the object that invoked the member function",
      "It points to the base class",
      "It stores the address of the parent class",
      "It is used to invoke static functions"
    ]
  },
  {
    "q": "If a class only has a private constructor, what does it imply?",
    "o": [
      "Objects cannot be created directly from outside the class",
      "The class is abstract",
      "Objects can be created freely",
      "The constructor is protected by default"
    ]
  },
  {
    "q": "Which of the following defines a parameterized constructor correctly?",
    "o": [
      "MyClass(int x) { }",
      "MyClass() int x { }",
      "constructor MyClass(x) { }",
      "MyClass(x int) { }"
    ]
  },
  {
    "q": "Which of the following creates an object from the class `Student`?",
    "o": [
      "Student s1;",
      "new Student();",
      "Student = object();",
      "class Student();"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Test {\n    int num;\npublic:\n    Test(int n) {\n        num = n;\n    }\n    void print() {\n        cout << num;\n    }\n};\n\nint main() {\n    Test t(42);\n    t.print();\n    return 0;\n}",
    "o": [
      "42",
      "0",
      "Compile-time error",
      "Garbage value"
    ]
  },
  {
    "q": "Which keyword ensures that members can only be accessed from within the class?",
    "o": [
      "private",
      "public",
      "protected",
      "internal"
    ]
  },
  {
    "q": "What is the main role of a destructor in C++?",
    "o": [
      "To release resources before the object is destroyed",
      "To create new instances of a class",
      "To initialize data members",
      "To return object values"
    ]
  },
  {
    "q": "Which of the following best describes the `this` pointer?",
    "o": [
      "It stores the address of the calling object",
      "It stores the class name",
      "It refers to static data members",
      "It refers to the constructor only"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Demo {\n    int x;\npublic:\n    Demo(int x) {\n        this->x = x + 10;\n    }\n    void show() {\n        cout << x;\n    }\n};\n\nint main() {\n    Demo d(5);\n    d.show();\n    return 0;\n}",
    "o": [
      "15",
      "10",
      "5",
      "Compile-time error"
    ]
  },
  {
    "q": "What type of constructor is called when an object is declared without arguments?",
    "o": [
      "Default constructor",
      "Copy constructor",
      "Move constructor",
      "Virtual constructor"
    ]
  },
  {
    "q": "Which of the following is true about a class in C++?",
    "o": [
      "It is a blueprint for creating objects",
      "It holds only functions",
      "It can only be used as a base for inheritance",
      "It cannot include private members"
    ]
  },
  {
    "q": "What will be printed by this code?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Counter {\n    static int count;\npublic:\n    Counter() {\n        count++;\n    }\n    static void print() {\n        cout << count;\n    }\n};\n\nint Counter::count = 0;\n\nint main() {\n    Counter a, b, c;\n    Counter::print();\n    return 0;\n}",
    "o": [
      "3",
      "0",
      "1",
      "Compile-time error"
    ]
  },
  {
    "q": "Which of the following is a valid class declaration?",
    "o": [
      "class MyClass { public: void fun(); };",
      "class: MyClass { void fun(); }",
      "public class MyClass()",
      "MyClass class { void fun(); }"
    ]
  },
  {
    "q": "Which keyword is used to specify that a member of a class is accessible from anywhere?",
    "o": [
      "public",
      "private",
      "protected",
      "external"
    ]
  },
  {
    "q": "What is the output of the following program?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Point {\n    int x;\npublic:\n    Point(int a) { x = a; }\n    void display() { cout << x; }\n};\n\nint main() {\n    Point p(8);\n    p.display();\n    return 0;\n}",
    "o": [
      "8",
      "0",
      "Compile error",
      "Garbage value"
    ]
  },
  {
    "q": "Which of the following best describes the function of a constructor?",
    "o": [
      "It initializes an object when it is created",
      "It deletes an object",
      "It returns the current object",
      "It overloads the operator"
    ]
  },
  {
    "q": "What is the correct syntax for defining a destructor in a class named `Book`?",
    "o": [
      "~Book();",
      "destructor Book();",
      "void ~Book();",
      "~Book[]();"
    ]
  },
  {
    "q": "What does the `this` pointer contain?",
    "o": [
      "Address of the invoking object",
      "Name of the current class",
      "Address of the class definition",
      "A reference to the main function"
    ]
  },
  {
    "q": "Which of the following code snippets demonstrates constructor overloading?",
    "c": "class Sample {\npublic:\n    Sample() {}\n    Sample(int a) {}\n};",
    "o": [
      "Two constructors with different parameters",
      "Two classes with the same name",
      "Constructor calling another constructor",
      "A class with no constructor"
    ]
  },
  {
    "q": "If no constructor is defined in a class, what happens?",
    "o": [
      "Compiler provides a default constructor",
      "The class cannot be instantiated",
      "You must declare a destructor",
      "The class becomes abstract"
    ]
  },
  {
    "q": "What will be the output of the following program?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Alpha {\n    int val;\npublic:\n    Alpha(int val) {\n        this->val = val + 1;\n    }\n    void show() { cout << val; }\n};\n\nint main() {\n    Alpha a(4);\n    a.show();\n    return 0;\n}",
    "o": [
      "5",
      "4",
      "0",
      "Compile error"
    ]
  },
  {
    "q": "Which access specifier allows access to class members from the same class and derived classes only?",
    "o": [
      "protected",
      "public",
      "private",
      "global"
    ]
  },
  {
    "q": "What is the correct way to declare a parameterized constructor in a class called `Shape` that takes an integer?",
    "o": [
      "Shape(int sides);",
      "constructor Shape(int sides);",
      "Shape = int sides();",
      "Shape(int) sides;"
    ]
  },
  {
    "q": "Which of the following statements is true about objects in C++?",
    "o": [
      "Objects are instances of a class",
      "Objects cannot be created without inheritance",
      "Objects are only used for function overloading",
      "Objects cannot contain data"
    ]
  },
  {
    "q": "What does the following code output?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Box {\n    int length;\npublic:\n    Box(int l) {\n        length = l;\n    }\n    void show() {\n        cout << length;\n    }\n};\n\nint main() {\n    Box b(12);\n    b.show();\n    return 0;\n}",
    "o": [
      "12",
      "0",
      "Compile error",
      "Undefined"
    ]
  },
  {
    "q": "What is the purpose of the `private` access specifier in a class?",
    "o": [
      "It restricts access to class members from outside the class",
      "It allows access to class members from anywhere",
      "It allows access only from derived classes",
      "It hides the entire class from the compiler"
    ]
  },
  {
    "q": "How is a destructor defined for a class named `Logger`?",
    "o": [
      "~Logger();",
      "Logger#();",
      "destruct Logger();",
      "Logger::~();"
    ]
  },
  {
    "q": "What will be printed by this program?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass ID {\n    int id;\npublic:\n    ID(int id) {\n        this->id = id + 100;\n    }\n    void show() { cout << id; }\n};\n\nint main() {\n    ID obj(7);\n    obj.show();\n    return 0;\n}",
    "o": [
      "107",
      "7",
      "100",
      "0"
    ]
  },
  {
    "q": "What does a default constructor do?",
    "o": [
      "It initializes objects without requiring any arguments",
      "It deletes objects after use",
      "It restricts access to the constructor",
      "It copies one object to another"
    ]
  },
  {
    "q": "Which of the following code snippets demonstrates the correct use of the `this` pointer?",
    "c": "class Example {\n    int val;\npublic:\n    void setVal(int val) {\n        this->val = val;\n    }\n};",
    "o": [
      "It resolves ambiguity between parameter and member variable",
      "It prevents access to private members",
      "It creates a deep copy of the object",
      "It points to the base class object"
    ]
  },
  {
    "q": "Which access specifier makes class members accessible only within the class itself?",
    "o": [
      "private",
      "protected",
      "public",
      "readonly"
    ]
  },
  {
    "q": "What happens if no destructor is explicitly defined in a class?",
    "o": [
      "The compiler generates a default destructor",
      "The class will not compile",
      "The object cannot be deleted",
      "Destructor must be manually invoked"
    ]
  },
  {
    "q": "Which of the following correctly initializes an object of class `Circle` using a parameterized constructor?",
    "o": [
      "Circle c(5);",
      "Circle c = Circle[];",
      "Circle c => new Circle;",
      "Circle c();"
    ]
  },
  {
    "q": "What is the output of the following program?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Car {\n    int speed;\npublic:\n    Car(int s) { speed = s; }\n    void display() { cout << speed; }\n};\n\nint main() {\n    Car c(90);\n    c.display();\n    return 0;\n}",
    "o": [
      "90",
      "0",
      "Compile error",
      "Undefined"
    ]
  },
  {
    "q": "Which access specifier allows access to class members from derived classes and friends?",
    "o": [
      "protected",
      "private",
      "public",
      "static"
    ]
  },
  {
    "q": "What is the correct way to invoke a destructor explicitly for an object `obj` of class `Data`?",
    "o": [
      "obj.~Data();",
      "delete obj;",
      "~obj();",
      "destroy obj;"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Temp {\n    int val;\npublic:\n    Temp(int val) {\n        this->val = val * 2;\n    }\n    void print() { cout << val; }\n};\n\nint main() {\n    Temp t(4);\n    t.print();\n    return 0;\n}",
    "o": [
      "8",
      "4",
      "0",
      "Compile error"
    ]
  },
  {
    "q": "Which of the following is NOT true about constructors?",
    "o": [
      "Constructors can have return types",
      "Constructors can be overloaded",
      "Constructors are automatically called on object creation",
      "Constructors can be parameterized"
    ]
  },
  {
    "q": "Which of the following defines a class named `Person` correctly?",
    "o": [
      "class Person { };",
      "Person class() { };",
      "def Person { };",
      "class = Person { };"
    ]
  },
  {
    "q": "Which member function is automatically invoked when an object goes out of scope?",
    "o": [
      "Destructor",
      "Constructor",
      "Virtual function",
      "Friend function"
    ]
  },
  {
    "q": "What is the purpose of `this->member` usage in a class method?",
    "o": [
      "To distinguish between class member and method parameter with the same name",
      "To reference the base class",
      "To call a virtual function",
      "To create a new object"
    ]
  },
  {
    "q": "What will be the output of this program?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Counter {\n    int count;\npublic:\n    Counter() {\n        count = 100;\n    }\n    ~Counter() {\n        cout << \"Destroyed\";\n    }\n    void show() { cout << count; }\n};\n\nint main() {\n    Counter c;\n    c.show();\n    return 0;\n}",
    "o": [
      "100",
      "Destroyed",
      "0",
      "Compile error"
    ]
  },
  {
    "q": "Which of the following is used to allocate memory dynamically for an object in C++?",
    "o": [
      "new",
      "malloc",
      "alloc",
      "create"
    ]
  },
  {
    "q": "Which of the following correctly defines a class and creates an object?",
    "o": [
      "class Student {}; Student s1;",
      "Student class {}; s1 = Student();",
      "def class Student {}; Student();",
      "Student = class {}; Student s1;"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Test {\n    int x;\npublic:\n    Test(int a) { x = a; }\n    void display() { cout << x * 2; }\n};\n\nint main() {\n    Test t(6);\n    t.display();\n    return 0;\n}",
    "o": [
      "12",
      "6",
      "0",
      "Compile-time error"
    ]
  },
  {
    "q": "What is true about constructors in C++?",
    "o": [
      "Constructors do not have a return type",
      "Constructors must be private",
      "Constructors must be virtual",
      "Constructors are called manually"
    ]
  },
  {
    "q": "Which of the following is a valid default constructor?",
    "o": [
      "MyClass() {}",
      "void MyClass() {}",
      "MyClass(void) -> {}",
      "constructor MyClass() {}"
    ]
  },
  {
    "q": "What is the correct way to declare a private integer in a class?",
    "o": [
      "private: int num;",
      "int private num;",
      "private int num;",
      "int num : private;"
    ]
  },
  {
    "q": "What is the use of `this` pointer in C++?",
    "o": [
      "To refer to the current object",
      "To refer to the parent class",
      "To destroy the current object",
      "To create a static variable"
    ]
  },
  {
    "q": "What will be the output of this code?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Data {\n    int val;\npublic:\n    Data(int val) {\n        this->val = val;\n    }\n    void show() { cout << val + 1; }\n};\n\nint main() {\n    Data d(9);\n    d.show();\n    return 0;\n}",
    "o": [
      "10",
      "9",
      "0",
      "Compile error"
    ]
  },
  {
    "q": "Which access specifier gives the least access to class members?",
    "o": [
      "private",
      "protected",
      "public",
      "internal"
    ]
  },
  {
    "q": "When is a destructor automatically called?",
    "o": [
      "When an object goes out of scope",
      "At the start of main()",
      "Only when manually invoked",
      "During constructor execution"
    ]
  },
  {
    "q": "Which of the following is correct for overloading constructors?",
    "o": [
      "Using multiple constructors with different parameter lists",
      "Using multiple destructors",
      "Using virtual constructors",
      "Defining constructors outside the class"
    ]
  },
  {
    "q": "Which member function is called automatically when an object is created?",
    "o": [
      "Constructor",
      "Destructor",
      "Copy assignment operator",
      "Virtual function"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Sample {\n    int x;\npublic:\n    Sample(int x) {\n        this->x = x;\n    }\n    void display() { cout << x; }\n};\n\nint main() {\n    Sample obj(25);\n    obj.display();\n    return 0;\n}",
    "o": [
      "25",
      "0",
      "Compile error",
      "Undefined"
    ]
  },
  {
    "q": "Which of the following correctly creates an object of a class named `Book`?",
    "o": [
      "Book myBook;",
      "Book = new();",
      "new Book;",
      "object Book;"
    ]
  },
  {
    "q": "What is the primary purpose of a destructor?",
    "o": [
      "To release resources when an object is destroyed",
      "To initialize objects",
      "To copy data between objects",
      "To protect data from being modified"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass MyClass {\n    int val;\npublic:\n    MyClass(int v) {\n        val = v;\n    }\n    ~MyClass() {\n        cout << \"Destructor called\";\n    }\n};\n\nint main() {\n    MyClass obj(10);\n    return 0;\n}",
    "o": [
      "Destructor called",
      "10",
      "Compile error",
      "No output"
    ]
  },
  {
    "q": "Which access specifier allows access to class members from anywhere in the program?",
    "o": [
      "public",
      "private",
      "protected",
      "internal"
    ]
  },
  {
    "q": "What does the `this` pointer refer to?",
    "o": [
      "The current object",
      "The previous object",
      "A static class variable",
      "The base class"
    ]
  },
  {
    "q": "Which of the following defines a parameterized constructor correctly?",
    "o": [
      "Example(int x) { val = x; }",
      "Example() int x { val = x; }",
      "constructor Example(int x) { val = x; }",
      "Example->int(x) { val = x; }"
    ]
  },
  {
    "q": "How many destructors can a class have?",
    "o": [
      "Only one",
      "As many as needed",
      "None",
      "At least two"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Counter {\n    int count;\npublic:\n    Counter() {\n        count = 5;\n    }\n    void increment() {\n        count++;\n        cout << count;\n    }\n};\n\nint main() {\n    Counter c;\n    c.increment();\n    return 0;\n}",
    "o": [
      "6",
      "5",
      "1",
      "Compile error"
    ]
  },
  {
    "q": "What happens if no constructor is defined in a class?",
    "o": [
      "A default constructor is provided by the compiler",
      "A runtime error occurs",
      "Object cannot be created",
      "Destructor is called instead"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Alpha {\n    int a;\npublic:\n    Alpha(int x) { a = x; }\n    void show() { cout << a * a; }\n};\n\nint main() {\n    Alpha obj(3);\n    obj.show();\n    return 0;\n}",
    "o": [
      "9",
      "3",
      "0",
      "Compile-time error"
    ]
  },
  {
    "q": "Which keyword is used to define members accessible only within the same class?",
    "o": [
      "private",
      "public",
      "protected",
      "internal"
    ]
  },
  {
    "q": "What is the output of this C++ program?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Demo {\n    int x;\npublic:\n    Demo(int x) {\n        this->x = x;\n    }\n    void print() { cout << this->x + 2; }\n};\n\nint main() {\n    Demo d(5);\n    d.print();\n    return 0;\n}",
    "o": [
      "7",
      "5",
      "2",
      "Compile error"
    ]
  },
  {
    "q": "Which function has the same name as the class and no return type?",
    "o": [
      "Constructor",
      "Destructor",
      "Copy operator",
      "Virtual method"
    ]
  },
  {
    "q": "Which access specifier allows inherited classes to access base class members, but restricts access from outside?",
    "o": [
      "protected",
      "private",
      "public",
      "global"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Box {\n    int length;\npublic:\n    Box() { length = 10; }\n    ~Box() { cout << \"Destroyed\"; }\n    void getLength() { cout << length; }\n};\n\nint main() {\n    Box b;\n    b.getLength();\n    return 0;\n}",
    "o": [
      "10",
      "Destroyed",
      "0",
      "Compile error"
    ]
  },
  {
    "q": "What does `this` pointer NOT do?",
    "o": [
      "Refer to the base class",
      "Refer to the current object",
      "Disambiguate member names",
      "Support method chaining"
    ]
  },
  {
    "q": "Which of the following is a correct destructor declaration?",
    "o": [
      "~MyClass() {}",
      "MyClass~() {}",
      "destructor MyClass() {}",
      "delete MyClass() {}"
    ]
  },
  {
    "q": "What happens when an object with a destructor goes out of scope?",
    "o": [
      "Its destructor is automatically called",
      "Its memory is leaked",
      "Its constructor is re-invoked",
      "The program crashes"
    ]
  },
  {
    "q": "Which of the following is true about class members declared as `private`?",
    "o": [
      "They are accessible only within the class",
      "They are accessible everywhere",
      "They are accessible in all derived classes",
      "They are stored in separate memory"
    ]
  },
  {
    "q": "What will be the output of this code?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Test {\n    int x;\npublic:\n    Test() { x = 20; }\n    void print() { cout << x - 5; }\n};\n\nint main() {\n    Test t;\n    t.print();\n    return 0;\n}",
    "o": [
      "15",
      "20",
      "5",
      "0"
    ]
  },
  {
    "q": "What is the purpose of a destructor in C++?",
    "o": [
      "To release resources when an object is destroyed",
      "To initialize class members",
      "To overload operators",
      "To inherit base class properties"
    ]
  },
  {
    "q": "Which of the following defines a class with one public method?",
    "o": [
      "class MyClass { public: void show(); };",
      "class MyClass: show() public;",
      "public class MyClass { show(); };",
      "class: MyClass { void show(); };"
    ]
  },
  {
    "q": "What is the role of the `this` pointer inside a class method?",
    "o": [
      "It refers to the calling object",
      "It stores static members",
      "It points to class name",
      "It points to the parent class"
    ]
  },
  {
    "q": "What is the output of the following program?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Demo {\n    int value;\npublic:\n    Demo(int v) { value = v; }\n    void show() { cout << this->value * 3; }\n};\n\nint main() {\n    Demo d(4);\n    d.show();\n    return 0;\n}",
    "o": [
      "12",
      "4",
      "0",
      "Compile-time error"
    ]
  },
  {
    "q": "Which member function is automatically invoked when an object is destroyed?",
    "o": [
      "Destructor",
      "Constructor",
      "Virtual function",
      "Inline function"
    ]
  },
  {
    "q": "Which of the following is a correct way to access a public member of a class object?",
    "o": [
      "obj.memberName;",
      "obj->memberName;",
      "memberName.obj;",
      "memberName::obj;"
    ]
  },
  {
    "q": "What is the output of the following program?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Counter {\n    int c;\npublic:\n    Counter() { c = 1; }\n    ~Counter() { cout << c + 1; }\n};\n\nint main() {\n    Counter ct;\n    return 0;\n}",
    "o": [
      "2",
      "1",
      "Compile error",
      "Nothing"
    ]
  },
  {
    "q": "Which of the following correctly defines a class constructor?",
    "o": [
      "MyClass() { }",
      "int MyClass() { }",
      "MyClass(void): { }",
      "void constructor MyClass() { }"
    ]
  },
  {
    "q": "Which of the following best describes a class in C++?",
    "o": [
      "A user-defined data type that holds both data and functions",
      "A built-in type that stores only data",
      "A structure used only for inheritance",
      "A template for procedural programming"
    ]
  },
  {
    "q": "What will be the output of this program?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Sample {\n    int x;\npublic:\n    Sample() { x = 100; }\n    void show() { cout << x / 2; }\n};\n\nint main() {\n    Sample s;\n    s.show();\n    return 0;\n}",
    "o": [
      "50",
      "100",
      "0",
      "Compile error"
    ]
  },
  {
    "q": "Which of the following is a valid way to define a destructor?",
    "o": [
      "~Demo() {}",
      "Demo~() {}",
      "destructor Demo() {}",
      "void ~Demo()"
    ]
  },
  {
    "q": "What is the purpose of a parameterized constructor?",
    "o": [
      "To initialize objects with specific values",
      "To destroy objects automatically",
      "To copy an object",
      "To convert one type to another"
    ]
  },
  {
    "q": "What is the output of the following C++ code?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass MyClass {\n    int val;\npublic:\n    MyClass(int v) { val = v; }\n    void print() { cout << this->val * 2; }\n};\n\nint main() {\n    MyClass obj(6);\n    obj.print();\n    return 0;\n}",
    "o": [
      "12",
      "6",
      "0",
      "Error"
    ]
  },
  {
    "q": "Which keyword is used to make a class member accessible from anywhere?",
    "o": [
      "public",
      "private",
      "protected",
      "external"
    ]
  },
  {
    "q": "How many times is a destructor called for an object during program execution?",
    "o": [
      "Exactly once",
      "Zero or more times",
      "As many times as constructor",
      "Depends on access specifier"
    ]
  },
  {
    "q": "Which of the following is used to resolve naming conflicts between local variables and class members?",
    "o": [
      "this pointer",
      "scope resolution operator",
      "static keyword",
      "type casting"
    ]
  },
  {
    "q": "What will be the output of this code?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Temp {\n    int t;\npublic:\n    Temp(int temp) { t = temp; }\n    void print() { cout << this->t - 3; }\n};\n\nint main() {\n    Temp obj(10);\n    obj.print();\n    return 0;\n}",
    "o": [
      "7",
      "10",
      "3",
      "0"
    ]
  },
  {
    "q": "Which of the following is NOT a feature of constructors?",
    "o": [
      "They can be overloaded",
      "They have the same name as the class",
      "They return a value",
      "They can have parameters"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Item {\n    int id;\npublic:\n    Item(int i) { id = i; }\n    void display() { cout << id + 100; }\n};\n\nint main() {\n    Item obj(5);\n    obj.display();\n    return 0;\n}",
    "o": [
      "105",
      "100",
      "5",
      "0"
    ]
  },
  {
    "q": "Which of the following statements about constructors is true?",
    "o": [
      "Constructors can be overloaded",
      "Constructors must be virtual",
      "Constructors return `void`",
      "Constructors can be inherited"
    ]
  },
  {
    "q": "What is the access level of members declared under the `protected` keyword?",
    "o": [
      "Accessible within the class and by derived classes",
      "Accessible everywhere",
      "Accessible only in the same file",
      "Not accessible at all"
    ]
  },
  {
    "q": "Which of the following statements is true about the `this` pointer?",
    "o": [
      "`this` is a pointer to the invoking object",
      "`this` points to the class definition",
      "`this` is used to access global variables",
      "`this` can be reassigned by the user"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Number {\n    int val;\npublic:\n    Number() { val = 25; }\n    ~Number() { cout << val - 5; }\n};\n\nint main() {\n    Number n;\n    return 0;\n}",
    "o": [
      "20",
      "25",
      "0",
      "5"
    ]
  },
  {
    "q": "Which access specifier allows members to be accessed from outside the class?",
    "o": [
      "public",
      "private",
      "protected",
      "internal"
    ]
  },
  {
    "q": "Which of the following correctly defines a class with a default constructor?",
    "o": [
      "class A { public: A() {} };",
      "class A { A(void) => {}; };",
      "class A { constructor A() {}; };",
      "class A { def A() {}; };"
    ]
  },
  {
    "q": "Which member function is invoked automatically when an object goes out of scope?",
    "o": [
      "Destructor",
      "Constructor",
      "Inline function",
      "Static function"
    ]
  },
  {
    "q": "What is the output of this C++ code?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Box {\n    int width;\npublic:\n    Box(int w) { this->width = w; }\n    void show() { cout << width + 1; }\n};\n\nint main() {\n    Box b(9);\n    b.show();\n    return 0;\n}",
    "o": [
      "10",
      "9",
      "1",
      "Compile error"
    ]
  },
  {
    "q": "What is the primary reason for using the `this` pointer in a constructor?",
    "o": [
      "To distinguish between data members and constructor parameters",
      "To destroy the object",
      "To return multiple values",
      "To call the destructor"
    ]
  },
  {
    "q": "What will be the output of the following code?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Alpha {\n    int val;\npublic:\n    Alpha() { val = 42; }\n    void show() { cout << val; }\n};\n\nint main() {\n    Alpha a;\n    a.show();\n    return 0;\n}",
    "o": [
      "42",
      "0",
      "Compile error",
      "Undefined"
    ]
  },
  {
    "q": "Which of the following is the correct way to define a constructor with parameters?",
    "o": [
      "ClassName(int a) { }",
      "constructor ClassName(int a) { }",
      "ClassName::constructor(int a) { }",
      "ClassName.new(int a) { }"
    ]
  },
  {
    "q": "What will be printed by the following code?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Test {\n    int x;\npublic:\n    Test(int val) { x = val; }\n    void display() { cout << this->x + 8; }\n};\n\nint main() {\n    Test obj(12);\n    obj.display();\n    return 0;\n}",
    "o": [
      "20",
      "12",
      "8",
      "0"
    ]
  },
  {
    "q": "Which of the following access specifiers makes class members accessible only inside the class?",
    "o": [
      "private",
      "public",
      "protected",
      "global"
    ]
  },
  {
    "q": "Which of the following is a true statement about destructors?",
    "o": [
      "They cannot take arguments",
      "They can be overloaded",
      "They must return an int",
      "They are called manually"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Sample {\n    int a;\npublic:\n    Sample(int val) { a = val; }\n    ~Sample() { cout << a * 2; }\n};\n\nint main() {\n    Sample s(5);\n    return 0;\n}",
    "o": [
      "10",
      "5",
      "0",
      "Compile-time error"
    ]
  },
  {
    "q": "Which keyword is used to allow members to be accessed from outside a class?",
    "o": [
      "public",
      "private",
      "protected",
      "expose"
    ]
  },
  {
    "q": "Which of the following uses the `this` pointer to return the current object?",
    "o": [
      "return *this;",
      "return this;",
      "return &this;",
      "return ->this;"
    ]
  },
  {
    "q": "Which of the following can be used to initialize data members of a class during object creation?",
    "o": [
      "Constructor",
      "Destructor",
      "Virtual function",
      "Friend function"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Person {\n    int age;\npublic:\n    Person(int a) { age = a; }\n    void show() { cout << \"Age: \" << age; }\n};\n\nint main() {\n    Person p(30);\n    p.show();\n    return 0;\n}",
    "o": [
      "Age: 30",
      "30",
      "Age 30",
      "Compile error"
    ]
  },
  {
    "q": "Which of the following is the correct way to define a class named `Student`?",
    "o": [
      "class Student { };",
      "Student class { };",
      "define class Student { };",
      "class: Student { };"
    ]
  },
  {
    "q": "What will be the output of the following code?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Demo {\n    int x;\npublic:\n    Demo() { x = 4; }\n    void print() { cout << x * 3; }\n};\n\nint main() {\n    Demo d;\n    d.print();\n    return 0;\n}",
    "o": [
      "12",
      "3",
      "4",
      "0"
    ]
  },
  {
    "q": "Which of the following is **true** about constructors in C++?",
    "o": [
      "They have the same name as the class",
      "They must return an int",
      "They are always private",
      "They are called manually by the user"
    ]
  },
  {
    "q": "Which access specifier restricts access to class members only within the same class?",
    "o": [
      "private",
      "public",
      "protected",
      "internal"
    ]
  },
  {
    "q": "What is the role of the destructor in C++?",
    "o": [
      "It releases resources when an object is destroyed",
      "It copies objects",
      "It initializes member variables",
      "It overloads functions"
    ]
  },
  {
    "q": "What does the following code output?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Data {\n    int val;\npublic:\n    Data(int v) { this->val = v; }\n    void show() { cout << this->val - 2; }\n};\n\nint main() {\n    Data d(9);\n    d.show();\n    return 0;\n}",
    "o": [
      "7",
      "9",
      "2",
      "Compile error"
    ]
  },
  {
    "q": "What is a characteristic of the `this` pointer?",
    "o": [
      "It stores the address of the current object",
      "It points to the base class object",
      "It can be modified by the programmer",
      "It must be declared explicitly"
    ]
  },
  {
    "q": "What is the output of this program?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Count {\n    int n;\npublic:\n    Count(int a) { n = a; }\n    ~Count() { cout << n + 10; }\n};\n\nint main() {\n    Count c(15);\n    return 0;\n}",
    "o": [
      "25",
      "15",
      "10",
      "0"
    ]
  },
  {
    "q": "Which of the following is **not true** about access specifiers?",
    "o": [
      "private members can be accessed directly outside the class",
      "public members are accessible from outside the class",
      "protected members are accessible in derived classes",
      "private members are not inherited"
    ]
  },
  {
    "q": "How is constructor overloading achieved in C++?",
    "o": [
      "By defining multiple constructors with different parameter lists",
      "By changing the return type of the constructor",
      "By giving constructors different names",
      "By writing constructors in different classes"
    ]
  },
  {
    "q": "Which of the following correctly defines a class with a private data member and a public method?",
    "o": [
      "class MyClass { private: int x; public: void show(); };",
      "class MyClass { int x public void show(); };",
      "class MyClass { private int x; public: show(); };",
      "class MyClass { x; show(); };"
    ]
  },
  {
    "q": "What is the output of the following C++ code?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Car {\n    int speed;\npublic:\n    Car(int s) { speed = s; }\n    void display() { cout << speed + 5; }\n};\n\nint main() {\n    Car c(60);\n    c.display();\n    return 0;\n}",
    "o": [
      "65",
      "60",
      "5",
      "0"
    ]
  },
  {
    "q": "What will happen if a class has no constructor defined?",
    "o": [
      "The compiler provides a default constructor",
      "The object cannot be created",
      "A runtime error occurs",
      "The class cannot have member functions"
    ]
  },
  {
    "q": "Which of the following correctly uses the `this` pointer in a member function?",
    "o": [
      "this->x = x;",
      "this.x = x;",
      "x = *this;",
      "this = x;"
    ]
  },
  {
    "q": "Which statement is true about destructors?",
    "o": [
      "They do not take parameters and are automatically called",
      "They can be overloaded",
      "They must return an int",
      "They need to be called manually"
    ]
  },
  {
    "q": "What is the output of this program?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Book {\n    int pages;\npublic:\n    Book() { pages = 300; }\n    ~Book() { cout << pages / 3; }\n};\n\nint main() {\n    Book b;\n    return 0;\n}",
    "o": [
      "100",
      "300",
      "3",
      "0"
    ]
  },
  {
    "q": "Which access specifier allows access only to members of the same class and its derived classes?",
    "o": [
      "protected",
      "private",
      "public",
      "global"
    ]
  },
  {
    "q": "How many constructors can a class have in C++?",
    "o": [
      "Multiple, with different parameter lists",
      "Only one",
      "None",
      "One per class level"
    ]
  },
  {
    "q": "What is the role of the `this` pointer in a class method?",
    "o": [
      "To refer to the object that invoked the method",
      "To point to the base class",
      "To hold static data members",
      "To reference class templates"
    ]
  },
  {
    "q": "Which of the following is a correct destructor declaration?",
    "o": [
      "~ClassName() {}",
      "destructor ClassName() {}",
      "void ~ClassName(void) {}",
      "ClassName::~() {}"
    ]
  },
  {
    "q": "Which of the following correctly initializes an object of a class using a parameterized constructor?",
    "o": [
      "MyClass obj(10);",
      "MyClass obj = MyClass;",
      "MyClass obj();",
      "MyClass obj[] = new MyClass(10);"
    ]
  },
  {
    "q": "What will the following C++ program output?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Box {\n    int length;\npublic:\n    Box(int l) { length = l; }\n    void show() { cout << length; }\n};\n\nint main() {\n    Box b(7);\n    b.show();\n    return 0;\n}",
    "o": [
      "7",
      "0",
      "Compile error",
      "Garbage value"
    ]
  },
  {
    "q": "Which keyword is used to define a class in C++?",
    "o": [
      "class",
      "struct",
      "object",
      "define"
    ]
  },
  {
    "q": "Which of the following correctly defines a default constructor?",
    "o": [
      "MyClass() { }",
      "MyClass(void);",
      "constructor MyClass() { }",
      "MyClass[] { }"
    ]
  },
  {
    "q": "What will be the output of the following code snippet?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Test {\n    int x;\npublic:\n    Test(int a) { this->x = a; }\n    void print() { cout << this->x * 2; }\n};\n\nint main() {\n    Test t(9);\n    t.print();\n    return 0;\n}",
    "o": [
      "18",
      "9",
      "0",
      "Compile error"
    ]
  },
  {
    "q": "When is a destructor called in C++?",
    "o": [
      "When an object goes out of scope or is explicitly deleted",
      "At the beginning of program execution",
      "Before any constructor",
      "Only when the user calls it"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Sample {\n    int a;\npublic:\n    Sample() { a = 15; }\n    ~Sample() { cout << a - 5; }\n};\n\nint main() {\n    Sample s;\n    return 0;\n}",
    "o": [
      "10",
      "5",
      "15",
      "Compile error"
    ]
  },
  {
    "q": "Which of the following statements about `this` pointer is true?",
    "o": [
      "`this` is a constant pointer accessible only within non-static member functions",
      "`this` must be explicitly declared",
      "`this` points to the base class object",
      "`this` is used to call static functions"
    ]
  },
  {
    "q": "Which access specifier is used to allow access to members within the class and friend functions only?",
    "o": [
      "private",
      "protected",
      "public",
      "internal"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Counter {\n    int count;\npublic:\n    Counter(int c) { count = c; }\n    void increase() { this->count += 1; }\n    void show() { cout << count; }\n};\n\nint main() {\n    Counter c(99);\n    c.increase();\n    c.show();\n    return 0;\n}",
    "o": [
      "100",
      "99",
      "101",
      "0"
    ]
  },
  {
    "q": "What is the correct way to define a class in C++?",
    "o": [
      "class MyClass { public: int x; };",
      "class MyClass ( public: int x; );",
      "class MyClass { int x public; };",
      "class: MyClass { int x; }"
    ]
  },
  {
    "q": "Which of the following statements about access specifiers is true?",
    "o": [
      "Private members of a class are accessible only within the class itself.",
      "Public members of a class are not accessible outside the class.",
      "Protected members are accessible by all classes.",
      "There are no access specifiers in C++."
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass MyClass {\n  public:\n    MyClass() {\n      cout << \"Constructor called\";\n    }\n};\n\nint main() {\n  MyClass obj;\n  return 0;\n}",
    "o": [
      "Constructor called",
      "Constructor not called",
      "Error",
      "Nothing is printed"
    ]
  },
  {
    "q": "Which of the following correctly demonstrates the use of a destructor?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass MyClass {\n  public:\n    ~MyClass() {\n      cout << \"Destructor called\";\n    }\n};\n\nint main() {\n  MyClass obj;\n  return 0;\n}",
    "o": [
      "Destructor called",
      "Constructor called",
      "Error in destructor",
      "Nothing is printed"
    ]
  },
  {
    "q": "Which keyword is used to refer to the current object inside a class method?",
    "o": [
      "this",
      "self",
      "current",
      "object"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Demo {\n  public:\n    int a;\n    Demo(int a) {\n      this->a = a;\n    }\n    void show() {\n      cout << this->a;\n    }\n};\n\nint main() {\n  Demo obj(10);\n  obj.show();\n  return 0;\n}",
    "o": [
      "10",
      "a",
      "this->a",
      "Error"
    ]
  },
  {
    "q": "What is the purpose of a constructor in a C++ class?",
    "o": [
      "To initialize objects of the class",
      "To destroy objects of the class",
      "To define private members",
      "To allocate memory dynamically"
    ]
  },
  {
    "q": "Which of the following is the correct way to access public data members of a class?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Test {\n  public:\n    int x = 5;\n};\n\nint main() {\n  Test t;\n  cout << t.x;\n  return 0;\n}",
    "o": [
      "5",
      "x",
      "t.x",
      "Error"
    ]
  },
  {
    "q": "Which of the following defines a class constructor properly?",
    "o": [
      "MyClass() {}",
      "constructor MyClass()",
      "void MyClass() {}",
      "MyClass.constructor()"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass MyClass {\n  public:\n    int value;\n    MyClass(int v) {\n      value = v;\n    }\n};\n\nint main() {\n  MyClass obj(20);\n  cout << obj.value;\n  return 0;\n}",
    "o": [
      "20",
      "0",
      "Garbage value",
      "Compilation error"
    ]
  },
  {
    "q": "Which of the following correctly creates an object of a class?",
    "o": [
      "MyClass obj;",
      "class obj;",
      "object MyClass;",
      "create MyClass obj;"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Car {\n  public:\n    Car() {\n      cout << \"Car created\";\n    }\n};\n\nint main() {\n  Car c1;\n  Car c2;\n  return 0;\n}",
    "o": [
      "Car createdCar created",
      "Car created",
      "No output",
      "Compilation error"
    ]
  },
  {
    "q": "What does the `this` pointer in C++ point to?",
    "o": [
      "The current object",
      "The class name",
      "The memory address of a function",
      "The constructor"
    ]
  },
  {
    "q": "What is the correct use of a destructor in a class?",
    "o": [
      "~MyClass() {}",
      "destructor MyClass() {}",
      "~MyClass(void) return;",
      "MyClass::~()"
    ]
  },
  {
    "q": "What is the default access specifier for class members in C++?",
    "o": [
      "private",
      "public",
      "protected",
      "default"
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Sample {\n  int data;\n  public:\n    Sample(int data) {\n      this->data = data;\n    }\n    void print() {\n      cout << data;\n    }\n};\n\nint main() {\n  Sample obj(42);\n  obj.print();\n  return 0;\n}",
    "o": [
      "42",
      "data",
      "this->data",
      "Compilation error"
    ]
  },
  {
    "q": "Which access specifier allows members to be accessible anywhere in the program?",
    "o": [
      "public",
      "private",
      "protected",
      "global"
    ]
  },
  {
    "q": "Which statement is true about constructors?",
    "o": [
      "Constructors have the same name as the class.",
      "Constructors must return an int.",
      "Constructors can be called manually using constructor().",
      "Constructors can only be private."
    ]
  },
  {
    "q": "What is the output of the following code snippet?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Alpha {\n  public:\n    ~Alpha() {\n      cout << \"Alpha destroyed\";\n    }\n};\n\nint main() {\n  Alpha a;\n  return 0;\n}",
    "o": [
      "Alpha destroyed",
      "No output",
      "Alpha created",
      "Compilation error"
    ]
  },
  {
    "q": "What is the purpose of using `this->` in a class method?",
    "o": [
      "To distinguish class members from parameters with the same name",
      "To access private members from outside the class",
      "To access global variables",
      "To call static functions"
    ]
  },
  {
    "q": "Which of the following correctly declares a class named 'Student' with a public integer variable 'rollNo'?",
    "o": [
      "class Student { public: int rollNo; };",
      "class Student { int rollNo public; };",
      "class Student { int rollNo() public; };",
      "Student { public: int rollNo; };"
    ]
  },
  {
    "q": "What will the following code print?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Test {\n  public:\n    Test() { cout << \"Default constructor\"; }\n};\n\nint main() {\n  Test obj;\n  return 0;\n}",
    "o": [
      "Default constructor",
      "Test",
      "Constructor",
      "Compilation error"
    ]
  },
  {
    "q": "Which specifier allows a derived class to access the members of the base class but restricts access from outside the class hierarchy?",
    "o": [
      "protected",
      "private",
      "public",
      "global"
    ]
  },
  {
    "q": "How is a destructor different from a constructor?",
    "o": [
      "Destructor name is prefixed with ~ and has no parameters.",
      "Destructor must return a value.",
      "Destructor is called manually by the user.",
      "Destructor must be defined in the public section only."
    ]
  },
  {
    "q": "What will the following code output?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Box {\n  int length;\n  public:\n    Box(int length) { this->length = length; }\n    void show() { cout << length * 2; }\n};\n\nint main() {\n  Box b(7);\n  b.show();\n  return 0;\n}",
    "o": [
      "14",
      "7",
      "77",
      "Compilation error"
    ]
  },
  {
    "q": "Which of the following is NOT a valid access specifier in C++?",
    "o": [
      "external",
      "public",
      "private",
      "protected"
    ]
  },
  {
    "q": "Which of the following is true about the `this` pointer in C++?",
    "o": [
      "`this` holds the address of the current object",
      "`this` refers to the base class",
      "`this` is used only in static methods",
      "`this` is optional in all contexts"
    ]
  },
  {
    "q": "What happens when an object goes out of scope in C++?",
    "o": [
      "Its destructor is automatically called",
      "Its constructor is re-invoked",
      "Memory is never freed",
      "Only public data is deleted"
    ]
  },
  {
    "q": "What will the following program print?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Example {\n  public:\n    ~Example() { cout << \"Bye!\"; }\n};\n\nint main() {\n  Example e;\n  return 0;\n}",
    "o": [
      "Bye!",
      "Nothing",
      "Error",
      "Example"
    ]
  },
  {
    "q": "Which of the following defines a parameterized constructor correctly?",
    "o": [
      "MyClass(int a) { }",
      "MyClass() = int a;",
      "MyClass(a int) { }",
      "constructor MyClass(int a)"
    ]
  },
  {
    "q": "What will the following code output?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Demo {\n  public:\n    Demo() { cout << \"Constructor called \"; }\n    ~Demo() { cout << \"Destructor called\"; }\n};\n\nint main() {\n  Demo d;\n  return 0;\n}",
    "o": [
      "Constructor called Destructor called",
      "Destructor called Constructor called",
      "Constructor called",
      "Destructor called"
    ]
  },
  {
    "q": "Which of the following is true about constructors?",
    "o": [
      "They are automatically called when an object is created",
      "They must return void",
      "They are called manually",
      "They can be called from another class"
    ]
  },
  {
    "q": "Which access specifier restricts access to class members from outside the class?",
    "o": [
      "private",
      "public",
      "protected",
      "internal"
    ]
  },
  {
    "q": "What is the output of this program?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass A {\n  int x;\n  public:\n    A(int x) { this->x = x; }\n    void show() { cout << this->x; }\n};\n\nint main() {\n  A obj(25);\n  obj.show();\n  return 0;\n}",
    "o": [
      "25",
      "x",
      "this->x",
      "Compilation error"
    ]
  },
  {
    "q": "Which of the following statements about the `this` pointer is FALSE?",
    "o": [
      "It can be used in static member functions",
      "It stores the address of the current object",
      "It is used to resolve naming conflicts between data members and parameters",
      "It is implicitly passed to all non-static member functions"
    ]
  },
  {
    "q": "Which of these correctly defines a class and object in C++?",
    "o": [
      "class MyClass { public: void display(); };\nMyClass obj;",
      "object MyClass { display(); }",
      "class MyClass() { display(); }; obj MyClass;",
      "MyClass class { void display(); } obj;"
    ]
  },
  {
    "q": "When is a destructor called in C++?",
    "o": [
      "When an object goes out of scope or is explicitly deleted",
      "When the constructor finishes execution",
      "At the start of main()",
      "Only if declared public"
    ]
  },
  {
    "q": "What is the purpose of using a constructor?",
    "o": [
      "To initialize objects when they are created",
      "To destroy objects",
      "To call main function",
      "To overload operators"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Point {\n  int x;\n  public:\n    Point(int x) { this->x = x; }\n    void print() { cout << x + 5; }\n};\n\nint main() {\n  Point p(10);\n  p.print();\n  return 0;\n}",
    "o": [
      "15",
      "10",
      "5",
      "Error"
    ]
  },
  {
    "q": "Which of the following correctly defines a destructor for a class named 'Data'?",
    "o": [
      "~Data() {}",
      "Data() destructor {}",
      "delete Data() {}",
      "~Data(void);",
      "Destructor Data()"
    ]
  },
  {
    "q": "Which keyword is used to refer to the current instance of a class within a member function?",
    "o": [
      "this",
      "self",
      "current",
      "object"
    ]
  },
  {
    "q": "What will the following C++ code output?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Person {\n  string name;\npublic:\n  Person(string name) {\n    this->name = name;\n  }\n  void display() {\n    cout << name;\n  }\n};\n\nint main() {\n  Person p(\"John\");\n  p.display();\n  return 0;\n}",
    "o": [
      "John",
      "name",
      "this->name",
      "Error"
    ]
  },
  {
    "q": "What is true about constructors in C++?",
    "o": [
      "They can be overloaded",
      "They must return a value",
      "They must be static",
      "They can be private only"
    ]
  },
  {
    "q": "Which of the following correctly declares an object for a class named 'Vehicle'?",
    "o": [
      "Vehicle car;",
      "car Vehicle;",
      "class Vehicle car;",
      "object Vehicle car;"
    ]
  },
  {
    "q": "Which of the following cannot access private members of a class directly?",
    "o": [
      "A non-member function",
      "A friend function",
      "A member function",
      "The constructor"
    ]
  },
  {
    "q": "What does the destructor of a class typically do?",
    "o": [
      "Releases resources and performs cleanup",
      "Initializes class members",
      "Allocates memory",
      "Overloads operators"
    ]
  },
  {
    "q": "What is the output of this program?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Alpha {\n  int a;\npublic:\n  Alpha(int a) { this->a = a; }\n  void show() { cout << a * 3; }\n};\n\nint main() {\n  Alpha obj(4);\n  obj.show();\n  return 0;\n}",
    "o": [
      "12",
      "4",
      "3",
      "Error"
    ]
  },
  {
    "q": "Which of these best describes the purpose of the `this` pointer?",
    "o": [
      "It helps distinguish member variables from parameters with the same name",
      "It is used to access private members only",
      "It returns the class type",
      "It deletes the current object"
    ]
  },
  {
    "q": "How many destructors can a class have in C++?",
    "o": [
      "Only one",
      "As many as needed",
      "One for each object",
      "It depends on inheritance"
    ]
  },
  {
    "q": "What will this code display?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Sample {\n  public:\n    Sample() { cout << \"Created \"; }\n    ~Sample() { cout << \"Destroyed\"; }\n};\n\nint main() {\n  Sample s1;\n  return 0;\n}",
    "o": [
      "Created Destroyed",
      "Destroyed Created",
      "Error",
      "Nothing"
    ]
  },
  {
    "q": "What is the default access specifier for class members in C++?",
    "o": [
      "private",
      "public",
      "protected",
      "internal"
    ]
  },
  {
    "q": "What will be the output of this code?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Box {\n  int length;\npublic:\n  Box(int l) { length = l; }\n  void show() { cout << length; }\n};\n\nint main() {\n  Box b(7);\n  b.show();\n  return 0;\n}",
    "o": [
      "7",
      "0",
      "Error",
      "Garbage value"
    ]
  },
  {
    "q": "Which of the following correctly uses the 'this' pointer?",
    "o": [
      "this->value = value;",
      "this.value = value;",
      "*this = value;",
      "&this = value;"
    ]
  },
  {
    "q": "Which of these is true about a destructor in C++?",
    "o": [
      "It has the same name as the class but is preceded by a tilde (~)",
      "It must be declared public static",
      "It returns an integer value",
      "It takes at least one parameter"
    ]
  },
  {
    "q": "Which statement correctly defines a class and creates two objects?",
    "o": [
      "class Car { }; Car c1, c2;",
      "Car { }; new Car c1, c2;",
      "Car() { }; Car c1; Car c2;",
      "object Car c1, c2;"
    ]
  },
  {
    "q": "When is a constructor automatically invoked?",
    "o": [
      "When an object of the class is created",
      "When the class is declared",
      "When memory is allocated",
      "At the end of the program"
    ]
  },
  {
    "q": "What will this code display?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Example {\n  int x;\npublic:\n  Example(int x) { this->x = x; }\n  void print() { cout << x * x; }\n};\n\nint main() {\n  Example e(6);\n  e.print();\n  return 0;\n}",
    "o": [
      "36",
      "12",
      "6",
      "0"
    ]
  },
  {
    "q": "What does 'public:' mean in a class definition?",
    "o": [
      "Members after it can be accessed from outside the class",
      "Members after it are only visible inside the class",
      "It defines a function only",
      "It creates a subclass"
    ]
  },
  {
    "q": "Which of the following is the correct syntax for a default constructor?",
    "o": [
      "MyClass() {}",
      "MyClass(void) = default",
      "constructor MyClass() {}",
      "MyClass::MyClass() default"
    ]
  },
  {
    "q": "What is the main purpose of using access specifiers in classes?",
    "o": [
      "To control the visibility of class members",
      "To make classes run faster",
      "To declare return types",
      "To initialize objects"
    ]
  },
  {
    "q": "Which of the following best defines an object in C++?",
    "o": [
      "An instance of a class",
      "A function inside a class",
      "A data type",
      "A constructor"
    ]
  },
  {
    "q": "What will the following code output?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Student {\n    int id;\npublic:\n    void setId(int id) { this->id = id; }\n    void showId() { cout << id; }\n};\n\nint main() {\n    Student s;\n    s.setId(101);\n    s.showId();\n    return 0;\n}",
    "o": [
      "101",
      "0",
      "Error",
      "Undefined"
    ]
  },
  {
    "q": "Which access specifier allows class members to be accessed from outside the class?",
    "o": [
      "public",
      "private",
      "protected",
      "default"
    ]
  },
  {
    "q": "What is the role of a destructor in C++?",
    "o": [
      "To free resources before the object is destroyed",
      "To initialize class members",
      "To create a copy of the object",
      "To overload operators"
    ]
  },
  {
    "q": "What will the following code output?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Demo {\n    int x;\npublic:\n    Demo() { x = 10; }\n    ~Demo() { cout << x * 2; }\n};\n\nint main() {\n    Demo d;\n    return 0;\n}",
    "o": [
      "20",
      "10",
      "0",
      "Error"
    ]
  },
  {
    "q": "Which of the following is true about the 'this' pointer?",
    "o": [
      "It holds the address of the current object",
      "It points to the base class",
      "It stores object name",
      "It refers to the class definition"
    ]
  },
  {
    "q": "What is the output of the code below?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Number {\n    int n;\npublic:\n    Number(int val) { this->n = val; }\n    void display() { cout << n + 5; }\n};\n\nint main() {\n    Number obj(15);\n    obj.display();\n    return 0;\n}",
    "o": [
      "20",
      "15",
      "5",
      "Error"
    ]
  },
  {
    "q": "Which of the following is a feature of constructor overloading?",
    "o": [
      "Multiple constructors with different parameter lists",
      "Multiple constructors with same parameters",
      "Constructor with return type",
      "Multiple destructors"
    ]
  },
  {
    "q": "What happens if you do not define a constructor in a class?",
    "o": [
      "A default constructor is provided by the compiler",
      "The class cannot be instantiated",
      "Only static members are created",
      "You must declare one explicitly"
    ]
  },
  {
    "q": "Which member of a class can access private data of the same class?",
    "o": [
      "Member functions",
      "Non-member functions",
      "Friend functions only",
      "Main function"
    ]
  },
  {
    "q": "What is required for creating an object of a class in C++?",
    "o": [
      "Class must be defined first",
      "A constructor must be written",
      "Main function must be declared before class",
      "Destructor must be defined first"
    ]
  },
  {
    "q": "What does this code output?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Book {\n    string title;\npublic:\n    Book(string t) { title = t; }\n    void show() { cout << title; }\n};\n\nint main() {\n    Book b(\"C++ Guide\");\n    b.show();\n    return 0;\n}",
    "o": [
      "C++ Guide",
      "title",
      "Error",
      "Book"
    ]
  },
  {
    "q": "Which of the following members is inaccessible outside the class?",
    "o": [
      "private",
      "public",
      "protected",
      "default"
    ]
  },
  {
    "q": "What is the output of the destructor below?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Alpha {\npublic:\n    ~Alpha() { cout << \"Destroyed\"; }\n};\n\nint main() {\n    Alpha a;\n    return 0;\n}",
    "o": [
      "Destroyed",
      "Error",
      "Nothing",
      "Alpha"
    ]
  },
  {
    "q": "Which keyword is used to define a constructor with no arguments?",
    "o": [
      "Default constructor",
      "Empty constructor",
      "Null constructor",
      "Zero constructor"
    ]
  },
  {
    "q": "Which of the following is true about the 'this' pointer in C++?",
    "o": [
      "It is an implicit pointer available inside all non-static member functions",
      "It is a global pointer",
      "It can only be used in constructors",
      "It points to a static member"
    ]
  },
  {
    "q": "What will be the output?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Counter {\n    int count;\npublic:\n    Counter() { count = 5; }\n    void show() { cout << this->count; }\n};\n\nint main() {\n    Counter c;\n    c.show();\n    return 0;\n}",
    "o": [
      "5",
      "0",
      "Error",
      "this"
    ]
  },
  {
    "q": "What is true about access specifiers in C++?",
    "o": [
      "They define visibility of members",
      "They are optional",
      "They only work for functions",
      "They must be used for all members"
    ]
  },
  {
    "q": "When is the destructor for an object called?",
    "o": [
      "When the object goes out of scope",
      "Right after constructor",
      "Only when manually deleted",
      "During compilation"
    ]
  },
  {
    "q": "Which of the following is the correct way to define a class?",
    "o": [
      "class MyClass { int x; };",
      "MyClass class { int x; };",
      "def MyClass { int x; };",
      "int class MyClass {};"
    ]
  },
  {
    "q": "Which of the following correctly creates an object of a class named 'Person'?",
    "o": [
      "Person p1;",
      "class Person p1;",
      "object p1 = new Person();",
      "Person(p1);"
    ]
  },
  {
    "q": "What does the following program print?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Box {\n    int length;\npublic:\n    Box() { length = 7; }\n    void display() { cout << length; }\n};\n\nint main() {\n    Box b;\n    b.display();\n    return 0;\n}",
    "o": [
      "7",
      "0",
      "length",
      "Error"
    ]
  },
  {
    "q": "Which access specifier allows class members to be accessible only within the same class and friends?",
    "o": [
      "private",
      "protected",
      "public",
      "internal"
    ]
  },
  {
    "q": "What is true about destructors in C++?",
    "o": [
      "They have the same name as the class prefixed with a tilde (~)",
      "They can take arguments",
      "They are called explicitly by the programmer",
      "You can overload them"
    ]
  },
  {
    "q": "What does this pointer hold?",
    "o": [
      "Address of the current object",
      "Value of the class members",
      "Return value of the constructor",
      "Reference to base class"
    ]
  },
  {
    "q": "What will be the output of this code?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Test {\n    int a;\npublic:\n    Test(int a) { this->a = a; }\n    void print() { cout << a * 2; }\n};\n\nint main() {\n    Test obj(6);\n    obj.print();\n    return 0;\n}",
    "o": [
      "12",
      "6",
      "0",
      "Error"
    ]
  },
  {
    "q": "Which of the following is NOT true about constructors?",
    "o": [
      "They can have a return type",
      "They can be overloaded",
      "They initialize objects",
      "They are automatically called"
    ]
  },
  {
    "q": "Which keyword is used to protect class members from outside access, but allow access in derived classes?",
    "o": [
      "protected",
      "private",
      "public",
      "default"
    ]
  },
  {
    "q": "Which of the following is automatically called when an object is created?",
    "o": [
      "Constructor",
      "Destructor",
      "Member function",
      "Main function"
    ]
  },
  {
    "q": "Choose the correct output of this code:",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Point {\n    int x;\npublic:\n    Point(int x) { this->x = x; }\n    void show() { cout << this->x + 1; }\n};\n\nint main() {\n    Point p(4);\n    p.show();\n    return 0;\n}",
    "o": [
      "5",
      "4",
      "1",
      "Error"
    ]
  },
  {
    "q": "Which of the following best describes a class in C++?",
    "o": [
      "A blueprint for creating objects",
      "A single object instance",
      "An array of variables",
      "A function template"
    ]
  },
  {
    "q": "What is the output of the following C++ program?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Car {\n    string model;\npublic:\n    Car() { model = \"Sedan\"; }\n    void display() { cout << model; }\n};\n\nint main() {\n    Car c;\n    c.display();\n    return 0;\n}",
    "o": [
      "Sedan",
      "model",
      "Error",
      "Car"
    ]
  },
  {
    "q": "Which access specifier allows members to be accessed from anywhere in the program?",
    "o": [
      "public",
      "private",
      "protected",
      "default"
    ]
  },
  {
    "q": "Which of the following is true about destructors in C++?",
    "o": [
      "They are automatically called when an object goes out of scope",
      "They must be explicitly called",
      "They can be overloaded",
      "They are inherited from the base class"
    ]
  },
  {
    "q": "What is the main use of the this pointer in C++?",
    "o": [
      "To refer to the current object",
      "To access static members",
      "To return a pointer to the base class",
      "To access global variables"
    ]
  },
  {
    "q": "What does the following code print?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Value {\n    int val;\npublic:\n    Value(int val) { this->val = val; }\n    void show() { cout << val; }\n};\n\nint main() {\n    Value v(42);\n    v.show();\n    return 0;\n}",
    "o": [
      "42",
      "val",
      "0",
      "Error"
    ]
  },
  {
    "q": "What is a constructor?",
    "o": [
      "A special function that initializes an object",
      "A function that deletes an object",
      "A function that defines class access",
      "A method used to call the main() function"
    ]
  },
  {
    "q": "Which of the following will NOT cause a constructor to run?",
    "o": [
      "Creating a pointer to a class without using 'new'",
      "Creating an object of the class",
      "Calling the constructor directly",
      "Using a constructor in member initializer list"
    ]
  },
  {
    "q": "What is the correct way to define a destructor in C++?",
    "o": [
      "~ClassName();",
      "ClassName();",
      "destructor ClassName();",
      "delete ClassName();"
    ]
  },
  {
    "q": "Which of the following allows derived classes to access a base class member but not code outside the class?",
    "o": [
      "protected",
      "public",
      "private",
      "internal"
    ]
  },
  {
    "q": "Which of the following correctly defines a class named 'Student' in C++?",
    "o": [
      "class Student { };",
      "Student class { };",
      "define class Student { };",
      "object Student { };"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Counter {\n    int count;\npublic:\n    Counter() { count = 100; }\n    void print() { cout << count; }\n};\n\nint main() {\n    Counter c;\n    c.print();\n    return 0;\n}",
    "o": [
      "100",
      "0",
      "count",
      "Error"
    ]
  },
  {
    "q": "What happens if no constructor is defined in a C++ class?",
    "o": [
      "A default constructor is automatically provided",
      "The class cannot be instantiated",
      "The program gives an error",
      "Only static methods can be used"
    ]
  },
  {
    "q": "Which access specifier allows class members to be inherited but not accessed directly by objects?",
    "o": [
      "protected",
      "private",
      "public",
      "friend"
    ]
  },
  {
    "q": "Which pointer is automatically passed to all non-static member functions of a class in C++?",
    "o": [
      "this",
      "self",
      "object",
      "that"
    ]
  },
  {
    "q": "What is the output of this code using the this pointer?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Number {\n    int x;\npublic:\n    Number(int x) { this->x = x + 2; }\n    void display() { cout << x; }\n};\n\nint main() {\n    Number n(3);\n    n.display();\n    return 0;\n}",
    "o": [
      "5",
      "3",
      "2",
      "Error"
    ]
  },
  {
    "q": "Which of the following statements about destructors is FALSE?",
    "o": [
      "Destructors can take parameters",
      "Destructors start with a tilde ~",
      "Destructors are called automatically",
      "Each class can have only one destructor"
    ]
  },
  {
    "q": "What will be the output of the following program?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Message {\npublic:\n    Message() { cout << \"Hello \"; }\n    ~Message() { cout << \"World!\"; }\n};\n\nint main() {\n    Message m;\n    return 0;\n}",
    "o": [
      "Hello World!",
      "World! Hello",
      "Hello",
      "World!"
    ]
  },
  {
    "q": "Which keyword is used to define members that can only be accessed inside the class?",
    "o": [
      "private",
      "protected",
      "internal",
      "export"
    ]
  },
  {
    "q": "What is the main reason to use the 'this' pointer inside a class method?",
    "o": [
      "To resolve naming conflicts between member variables and parameters",
      "To call static methods",
      "To access global variables",
      "To refer to a base class object"
    ]
  },
  {
    "q": "Which of the following is required to create an object of a class in C++?",
    "o": [
      "ClassName obj;",
      "object ClassName;",
      "ClassName->obj;",
      "new ClassName;"
    ]
  },
  {
    "q": "What is the output of the following C++ code?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Box {\npublic:\n    Box() { cout << \"Box created\"; }\n};\n\nint main() {\n    Box b;\n    return 0;\n}",
    "o": [
      "Box created",
      "Error",
      "Nothing",
      "Created"
    ]
  },
  {
    "q": "Which of the following keywords specifies that class members are accessible only within the class and its friends?",
    "o": [
      "private",
      "protected",
      "public",
      "internal"
    ]
  },
  {
    "q": "What does the destructor of a class primarily handle?",
    "o": [
      "Resource cleanup before the object is destroyed",
      "Object creation",
      "Function overloading",
      "Accessing private data"
    ]
  },
  {
    "q": "Which of the following correctly uses the this pointer?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Test {\n    int x;\npublic:\n    Test(int x) {\n        this->x = x;\n    }\n    void print() { cout << x; }\n};\n\nint main() {\n    Test t(10);\n    t.print();\n    return 0;\n}",
    "o": [
      "10",
      "x",
      "0",
      "Error"
    ]
  },
  {
    "q": "What is the default access specifier for class members in C++?",
    "o": [
      "private",
      "public",
      "protected",
      "internal"
    ]
  },
  {
    "q": "What will be printed when the following code is run?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass MyClass {\n    int a;\npublic:\n    MyClass() { a = 25; }\n    void show() { cout << a; }\n};\n\nint main() {\n    MyClass obj;\n    obj.show();\n    return 0;\n}",
    "o": [
      "25",
      "a",
      "0",
      "Error"
    ]
  },
  {
    "q": "Which of the following is true about constructors?",
    "o": [
      "They do not have a return type",
      "They must return an int",
      "They can be called manually",
      "They can return void"
    ]
  },
  {
    "q": "What is the correct way to declare a parameterized constructor?",
    "o": [
      "ClassName(int a);",
      "void ClassName(int a);",
      "constructor ClassName(int a);",
      "~ClassName(int a);"
    ]
  },
  {
    "q": "Which one of the following statements about access specifiers is correct?",
    "o": [
      "Private members cannot be accessed directly by objects of the class",
      "Public members cannot be accessed outside the class",
      "Protected members are accessible by all objects",
      "Default access specifier is public in C++"
    ]
  },
  {
    "q": "Which of the following statements correctly declares and instantiates an object of class Car?",
    "o": [
      "Car myCar;",
      "Car = myCar;",
      "object myCar();",
      "Car->myCar;"
    ]
  },
  {
    "q": "What will be the output of the following code?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Demo {\npublic:\n    Demo() { cout << \"Constructor called\"; }\n    ~Demo() { cout << \" Destructor called\"; }\n};\n\nint main() {\n    Demo d;\n    return 0;\n}",
    "o": [
      "Constructor called Destructor called",
      "Destructor called Constructor called",
      "Constructor called",
      "Destructor called"
    ]
  },
  {
    "q": "Which of the following best describes a constructor?",
    "o": [
      "A special function that initializes objects of a class",
      "A function that deletes objects",
      "A method to return values from private members",
      "A function that must return int"
    ]
  },
  {
    "q": "Which access specifier allows data members to be accessible from outside the class?",
    "o": [
      "public",
      "private",
      "protected",
      "default"
    ]
  },
  {
    "q": "What is the purpose of the 'this' pointer in C++?",
    "o": [
      "To refer to the calling object itself",
      "To call a friend function",
      "To destroy the object",
      "To access static members"
    ]
  },
  {
    "q": "What will be the output of this code using this pointer?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Test {\n    int x;\npublic:\n    Test(int x) {\n        this->x = x * 2;\n    }\n    void show() { cout << x; }\n};\n\nint main() {\n    Test t(4);\n    t.show();\n    return 0;\n}",
    "o": [
      "8",
      "4",
      "2",
      "Error"
    ]
  },
  {
    "q": "Which of the following is true about destructors in C++?",
    "o": [
      "They are invoked automatically when an object goes out of scope",
      "They can be overloaded",
      "They can return values",
      "They require parameters"
    ]
  },
  {
    "q": "What is the default access specifier for class members in C++?",
    "o": [
      "private",
      "public",
      "protected",
      "internal"
    ]
  },
  {
    "q": "Choose the correct way to define a destructor for a class named FileHandler.",
    "o": [
      "~FileHandler() {}",
      "destructor FileHandler() {}",
      "FileHandler~() {}",
      "delete FileHandler() {}"
    ]
  },
  {
    "q": "Which of the following functions must not return a value?",
    "o": [
      "Constructor",
      "Member function",
      "Friend function",
      "Operator overload function"
    ]
  },
  {
    "q": "Which of the following defines a class named Student in C++?",
    "o": [
      "class Student {};",
      "Student class {};",
      "define Student {};",
      "object Student {};"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Greet {\npublic:\n    Greet() { cout << \"Hello! \"; }\n};\n\nint main() {\n    Greet g1, g2;\n    return 0;\n}",
    "o": [
      "Hello! Hello! ",
      "Hello!",
      "Nothing",
      "Compile error"
    ]
  },
  {
    "q": "Which access specifier allows members to be accessed only by derived classes?",
    "o": [
      "protected",
      "public",
      "private",
      "friend"
    ]
  },
  {
    "q": "What will happen if a class has no constructor defined?",
    "o": [
      "A default constructor will be provided by the compiler",
      "The class cannot be instantiated",
      "It will throw an error",
      "Only static members can be accessed"
    ]
  },
  {
    "q": "What does the keyword 'this' refer to inside a class method?",
    "o": [
      "The current instance of the class",
      "The base class",
      "A static variable",
      "None of the above"
    ]
  },
  {
    "q": "What is the correct way to initialize private members using a constructor?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Item {\n    int code;\npublic:\n    Item(int c) {\n        this->code = c;\n    }\n    void show() { cout << code; }\n};\n\nint main() {\n    Item obj(123);\n    obj.show();\n    return 0;\n}",
    "o": [
      "123",
      "code",
      "0",
      "Error"
    ]
  },
  {
    "q": "Which statement about destructors is TRUE?",
    "o": [
      "Destructors cannot be overloaded",
      "Destructors can take parameters",
      "You must manually call destructors",
      "Destructor name must differ from class name"
    ]
  },
  {
    "q": "Which of these class members can be accessed directly from outside the class?",
    "o": [
      "public",
      "private",
      "protected",
      "static"
    ]
  },
  {
    "q": "Which is the correct way to create an object and call a public method?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Lamp {\npublic:\n    void turnOn() { cout << \"On\"; }\n};\n\nint main() {\n    Lamp l;\n    l.turnOn();\n    return 0;\n}",
    "o": [
      "On",
      "turnOn",
      "Error",
      "Nothing"
    ]
  },
  {
    "q": "What is a key reason for using constructors in classes?",
    "o": [
      "To ensure object members are initialized properly when created",
      "To destroy objects safely",
      "To overload private variables",
      "To call friend functions automatically"
    ]
  },
  {
    "q": "Which of the following correctly creates an object for a class named Animal?",
    "o": [
      "Animal dog;",
      "Animal = dog();",
      "create Animal dog;",
      "Animal -> dog;"
    ]
  },
  {
    "q": "What is the output of this program?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Alpha {\n    int x;\npublic:\n    Alpha(int x) {\n        this->x = x + 1;\n    }\n    void show() { cout << x; }\n};\n\nint main() {\n    Alpha a(4);\n    a.show();\n    return 0;\n}",
    "o": [
      "5",
      "4",
      "1",
      "0"
    ]
  },
  {
    "q": "Which of the following is invoked automatically when an object is created?",
    "o": [
      "Constructor",
      "Destructor",
      "Virtual function",
      "Operator overloading function"
    ]
  },
  {
    "q": "What is the role of access specifiers in a class?",
    "o": [
      "They determine the accessibility of class members",
      "They define return types",
      "They control memory allocation",
      "They specify data types"
    ]
  },
  {
    "q": "Which keyword is used to access the current object's members from within a class?",
    "o": [
      "this",
      "self",
      "current",
      "me"
    ]
  },
  {
    "q": "What is the output of this code snippet?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Box {\npublic:\n    Box() { cout << \"Box created \"; }\n    ~Box() { cout << \"Box destroyed\"; }\n};\n\nint main() {\n    Box b1;\n    return 0;\n}",
    "o": [
      "Box created Box destroyed",
      "Box destroyed Box created",
      "Box created",
      "Box destroyed"
    ]
  },
  {
    "q": "Which of the following can access private members of a class directly?",
    "o": [
      "Only member functions and friends",
      "Any function",
      "Derived classes only",
      "Static functions"
    ]
  },
  {
    "q": "How many constructors can a class have in C++?",
    "o": [
      "Multiple (via overloading)",
      "Only one",
      "Two at most",
      "Only default constructor is allowed"
    ]
  },
  {
    "q": "Which access specifier allows class members to be inherited but not accessed directly outside the class?",
    "o": [
      "protected",
      "private",
      "public",
      "external"
    ]
  },
  {
    "q": "What is the output of this program using the `this` pointer?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Number {\n    int n;\npublic:\n    Number(int n) {\n        this->n = n * 3;\n    }\n    void print() { cout << n; }\n};\n\nint main() {\n    Number obj(2);\n    obj.print();\n    return 0;\n}",
    "o": [
      "6",
      "3",
      "2",
      "0"
    ]
  },
  {
    "q": "Which of the following statements correctly defines a constructor in C++?",
    "o": [
      "MyClass() {}",
      "void MyClass() {}",
      "constructor MyClass() {}",
      "def MyClass() {}"
    ]
  },
  {
    "q": "Which access specifier should be used to make a class member accessible only within the class?",
    "o": [
      "private",
      "public",
      "protected",
      "internal"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass A {\n    int x;\npublic:\n    A(int a) { x = a; }\n    void show() { cout << x; }\n};\n\nint main() {\n    A obj(7);\n    obj.show();\n    return 0;\n}",
    "o": [
      "7",
      "0",
      "Error",
      "Undefined"
    ]
  },
  {
    "q": "What is the main purpose of a destructor in C++?",
    "o": [
      "To release resources when an object goes out of scope",
      "To initialize object data members",
      "To copy an object",
      "To overload functions"
    ]
  },
  {
    "q": "Which of the following keywords is used to access the calling object in C++?",
    "o": [
      "this",
      "self",
      "current",
      "instance"
    ]
  },
  {
    "q": "What will be the output of this program?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Test {\npublic:\n    Test() { cout << \"Constructor \"; }\n    ~Test() { cout << \"Destructor\"; }\n};\n\nint main() {\n    Test t;\n    return 0;\n}",
    "o": [
      "Constructor Destructor",
      "Destructor Constructor",
      "Constructor",
      "Destructor"
    ]
  },
  {
    "q": "What is true about the use of constructors in class inheritance?",
    "o": [
      "Base class constructor is called before derived class constructor",
      "Derived class constructor is called before base class constructor",
      "Constructors are not used in inheritance",
      "Destructor is called before constructor"
    ]
  },
  {
    "q": "Which of the following best describes the `this` pointer?",
    "o": [
      "A pointer that holds the address of the current object",
      "A pointer to the base class",
      "A static pointer to all objects",
      "A pointer to the main function"
    ]
  },
  {
    "q": "Which is the correct way to define a class with a private integer and a public method?",
    "o": [
      "class Demo { private: int x; public: void show(); };",
      "class Demo { public: x; private: void show(); };",
      "class Demo { private x; public show(); };",
      "class Demo { int private x; void public show(); };"
    ]
  },
  {
    "q": "What is the output of the following code using the `this` pointer?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Sample {\n    int a;\npublic:\n    void setA(int a) {\n        this->a = a;\n    }\n    void print() { cout << a; }\n};\n\nint main() {\n    Sample s;\n    s.setA(15);\n    s.print();\n    return 0;\n}",
    "o": [
      "15",
      "0",
      "Error",
      "Undefined"
    ]
  },
  {
    "q": "Which keyword defines a class in C++?",
    "o": [
      "class",
      "define",
      "struct",
      "object"
    ]
  },
  {
    "q": "Which of the following access specifiers allows access within the same class and its derived classes only?",
    "o": [
      "protected",
      "private",
      "public",
      "global"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Box {\n    int width;\npublic:\n    Box(int w) { width = w; }\n    void display() { cout << width; }\n};\n\nint main() {\n    Box b(30);\n    b.display();\n    return 0;\n}",
    "o": [
      "30",
      "0",
      "Error",
      "Garbage value"
    ]
  },
  {
    "q": "Which method is called automatically when an object is destroyed?",
    "o": [
      "Destructor",
      "Constructor",
      "Main",
      "Deleter"
    ]
  },
  {
    "q": "Which of the following best describes the role of a constructor?",
    "o": [
      "It initializes objects of a class when they are created",
      "It destroys objects of a class",
      "It copies data from another object",
      "It sets access specifiers"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Sample {\npublic:\n    Sample() { cout << \"Hello \"; }\n    ~Sample() { cout << \"World!\"; }\n};\n\nint main() {\n    Sample s;\n    return 0;\n}",
    "o": [
      "Hello World!",
      "World! Hello",
      "Hello",
      "World!"
    ]
  },
  {
    "q": "Which is the correct syntax to define a default constructor?",
    "o": [
      "MyClass() {}",
      "MyClass(int x);",
      "void MyClass() {}",
      "MyClass::~MyClass()"
    ]
  },
  {
    "q": "Which of the following statements about the `this` pointer is true?",
    "o": [
      "It is a constant pointer to the current object",
      "It points to the base class object",
      "It stores the memory location of the class definition",
      "It can be modified by the user"
    ]
  },
  {
    "q": "What does the following code print?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Demo {\n    int x;\npublic:\n    Demo(int x) { this->x = x; }\n    void show() { cout << x; }\n};\n\nint main() {\n    Demo d(99);\n    d.show();\n    return 0;\n}",
    "o": [
      "99",
      "0",
      "Error",
      "Garbage value"
    ]
  },
  {
    "q": "Which of the following is true about destructors?",
    "o": [
      "They cannot have parameters",
      "They can be overloaded",
      "They must be public",
      "They are called manually"
    ]
  },
  {
    "q": "Which keyword is used to restrict direct access to data members from outside the class?",
    "o": [
      "private",
      "public",
      "protected",
      "internal"
    ]
  },
  {
    "q": "What will be the output of the following code?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Test {\npublic:\n    Test() { cout << \"Constructor Called\"; }\n};\n\nint main() {\n    Test obj;\n    return 0;\n}",
    "o": [
      "Constructor Called",
      "Error",
      "No Output",
      "Compilation Failed"
    ]
  },
  {
    "q": "In which of the following scenarios is the `this` pointer used?",
    "o": [
      "To refer to the current object inside a member function",
      "To access static members of the class",
      "To call global functions from within a class",
      "To define friend functions"
    ]
  },
  {
    "q": "Which of the following will correctly initialize an object of class `Car` with constructor `Car(int s)`?",
    "o": [
      "Car c1(5);",
      "Car c1 = Car;",
      "Car();",
      "Car c1->Car(5);"
    ]
  },
  {
    "q": "What will be the output of this code?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass MyClass {\npublic:\n    ~MyClass() { cout << \"Destroyed\"; }\n};\n\nint main() {\n    MyClass obj;\n    return 0;\n}",
    "o": [
      "Destroyed",
      "No Output",
      "Compile Error",
      "Segmentation Fault"
    ]
  },
  {
    "q": "Which of the following allows object creation without calling the constructor explicitly?",
    "o": [
      "Instantiation using class name",
      "Dynamic allocation",
      "Inheritance",
      "Friend function"
    ]
  },
  {
    "q": "What is true about the `protected` access specifier?",
    "o": [
      "Accessible in the same class and derived classes",
      "Accessible only in the same class",
      "Accessible everywhere",
      "Accessible only within functions"
    ]
  },
  {
    "q": "Which of these statements about the constructor is true?",
    "o": [
      "It has the same name as the class",
      "It can return a value",
      "It must always be private",
      "It must be virtual"
    ]
  },
  {
    "q": "What is the role of the destructor in a class?",
    "o": [
      "To release resources when an object is destroyed",
      "To copy values from another object",
      "To overload operators",
      "To invoke private members"
    ]
  },
  {
    "q": "What will the following code output?",
    "c": "#include <iostream>\nusing namespace std;\n\nclass Example {\n    int a;\npublic:\n    Example(int a) { this->a = a; }\n    void print() { cout << this->a; }\n};\n\nint main() {\n    Example ex(7);\n    ex.print();\n    return 0;\n}",
    "o": [
      "7",
      "0",
      "Error",
      "a"
    ]
  },
  {
    "q": "Which of the following creates an object of class `Student`?",
    "o": [
      "Student s1;",
      "Student->s1;",
      "Student::s1();",
      "class Student s1;"
    ]
  },
  {
    "q": "What does the `this` pointer point to in a non-static member function?",
    "o": [
      "The current object invoking the function",
      "The base class object",
      "A temporary object",
      "The class itself"
    ]
  },
  {
    "q": "What is the output of the following C++ code?",
    "c": "#include <iostream>\nusing namespace std;\nclass Demo {\npublic:\n    Demo() { cout << \"Constructor called\"; }\n};\nint main() {\n    Demo d;\n    return 0;\n}",
    "o": [
      "Constructor called",
      "Destructor called",
      "Compilation error",
      "No output"
    ]
  },
  {
    "q": "Which access specifier allows class members to be accessible within the class and its derived classes but not outside?",
    "o": [
      "protected",
      "private",
      "public",
      "static"
    ]
  },
  {
    "q": "What is the main purpose of a destructor in a C++ class?",
    "o": [
      "To free resources before the object is destroyed",
      "To initialize objects",
      "To call private functions",
      "To overload operators"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "#include <iostream>\nusing namespace std;\nclass Box {\n    int volume;\npublic:\n    Box(int v) { this->volume = v; }\n    void print() { cout << volume; }\n};\nint main() {\n    Box b(7);\n    b.print();\n    return 0;\n}",
    "o": [
      "7",
      "0",
      "volume",
      "Error"
    ]
  },
  {
    "q": "Which of the following statements about constructors is true?",
    "o": [
      "Constructors have the same name as the class",
      "Constructors must return void",
      "Constructors cannot be overloaded",
      "Constructors must be private"
    ]
  },
  {
    "q": "What will the following code output?",
    "c": "#include <iostream>\nusing namespace std;\nclass Sample {\npublic:\n    ~Sample() { cout << \"Bye\"; }\n};\nint main() {\n    Sample s;\n    return 0;\n}",
    "o": [
      "Bye",
      "Hello",
      "Error",
      "No output"
    ]
  },
  {
    "q": "What is the default access specifier for class members if not specified?",
    "o": [
      "private",
      "public",
      "protected",
      "global"
    ]
  },
  {
    "q": "What does the following code do?",
    "c": "#include <iostream>\nusing namespace std;\nclass Test {\n    int x;\npublic:\n    Test(int x) {\n        this->x = x;\n    }\n    void show() { cout << this->x; }\n};\nint main() {\n    Test t(3);\n    t.show();\n    return 0;\n}",
    "o": [
      "Displays 3",
      "Displays x",
      "Compilation error",
      "Displays 0"
    ]
  },
  {
    "q": "Which keyword is used to define a class in C++?",
    "o": [
      "class",
      "define",
      "struct",
      "object"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "#include <iostream>\nusing namespace std;\nclass Test {\n    int val;\npublic:\n    Test(int x) { val = x; }\n    void print() { cout << val; }\n};\nint main() {\n    Test obj(25);\n    obj.print();\n    return 0;\n}",
    "o": [
      "25",
      "0",
      "Error",
      "x"
    ]
  },
  {
    "q": "Which access specifier allows access to class members only from within the class?",
    "o": [
      "private",
      "public",
      "protected",
      "internal"
    ]
  },
  {
    "q": "Which of the following is a valid constructor declaration in C++?",
    "o": [
      "MyClass();",
      "int MyClass();",
      "void MyClass()",
      "MyClass(void)"
    ]
  },
  {
    "q": "What is the purpose of the `this` pointer in C++?",
    "o": [
      "It stores the address of the current object",
      "It returns the class name",
      "It creates a new object",
      "It calls the constructor"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "#include <iostream>\nusing namespace std;\nclass Alpha {\npublic:\n    Alpha() { cout << \"Hello Alpha\"; }\n};\nint main() {\n    Alpha a;\n    return 0;\n}",
    "o": [
      "Hello Alpha",
      "Alpha",
      "Hello",
      "No output"
    ]
  },
  {
    "q": "What is automatically called when an object goes out of scope?",
    "o": [
      "Destructor",
      "Constructor",
      "Copy constructor",
      "Static function"
    ]
  },
  {
    "q": "Choose the correct way to define a class named `Car` with a public member function `drive`.",
    "o": [
      "class Car { public: void drive(); };",
      "Car class { void drive(); };",
      "public class Car { drive(); };",
      "define Car { public drive(); };"
    ]
  },
  {
    "q": "Which of the following is true about access specifiers in C++?",
    "o": [
      "Private members are not accessible outside the class",
      "Public members are not accessible in main",
      "Protected members are accessible by everyone",
      "Access specifiers are optional"
    ]
  },
  {
    "q": "What does the following code print?",
    "c": "#include <iostream>\nusing namespace std;\nclass Number {\n    int a;\npublic:\n    Number(int x) { this->a = x; }\n    void show() { cout << this->a; }\n};\nint main() {\n    Number n(99);\n    n.show();\n    return 0;\n}",
    "o": [
      "99",
      "a",
      "Error",
      "0"
    ]
  },
  {
    "q": "Which of the following correctly creates an object of class `Student`?",
    "o": [
      "Student s1;",
      "object s1 = Student();",
      "Student->s1;",
      "create Student s1;"
    ]
  },
  {
    "q": "What will be the output of this code?",
    "c": "#include <iostream>\nusing namespace std;\nclass Demo {\n    int x;\npublic:\n    Demo() { x = 100; }\n    void show() { cout << x; }\n};\nint main() {\n    Demo d;\n    d.show();\n    return 0;\n}",
    "o": [
      "100",
      "0",
      "Error",
      "x"
    ]
  },
  {
    "q": "Which of the following is true about constructors in C++?",
    "o": [
      "They are automatically called when an object is created",
      "They return an int value",
      "They can be called like regular functions",
      "They must have the same name as the file"
    ]
  },
  {
    "q": "How can a class restrict access to its data members?",
    "o": [
      "By using private access specifier",
      "By making all members static",
      "By using default constructors",
      "By omitting function definitions"
    ]
  },
  {
    "q": "What is the output of this code using the `this` pointer?",
    "c": "#include <iostream>\nusing namespace std;\nclass Box {\n    int length;\npublic:\n    Box(int l) { this->length = l; }\n    void display() { cout << this->length; }\n};\nint main() {\n    Box b(10);\n    b.display();\n    return 0;\n}",
    "o": [
      "10",
      "length",
      "this",
      "Error"
    ]
  },
  {
    "q": "Which access specifier allows members to be accessed from any function in the program?",
    "o": [
      "public",
      "private",
      "protected",
      "friend"
    ]
  },
  {
    "q": "What happens if a class does not have a user-defined constructor?",
    "o": [
      "The compiler provides a default constructor",
      "Compilation fails",
      "The object cannot be created",
      "The destructor runs first"
    ]
  },
  {
    "q": "Which of the following best describes the `this` pointer in C++?",
    "o": [
      "It is an implicit pointer passed to all non-static member functions",
      "It is a pointer to the base class",
      "It points to the parent class",
      "It is only used in static functions"
    ]
  },
  {
    "q": "Identify the correct destructor declaration for class `Data`.",
    "o": [
      "~Data();",
      "destructor Data();",
      "delete Data();",
      "Data::~();"
    ]
  },
  {
    "q": "Which of the following is NOT a valid feature of C++ class?",
    "o": [
      "Allows multiple constructors with different parameters",
      "Allows private constructors",
      "Requires a destructor for every constructor",
      "Supports constructor overloading"
    ]
  },
  {
    "q": "What is the correct way to define a class named `Car` in C++?",
    "o": [
      "class Car { };",
      "Car class { };",
      "define class Car { };",
      "object Car { };"
    ]
  },
  {
    "q": "What will be the output of this code?",
    "c": "#include <iostream>\nusing namespace std;\nclass Sample {\n    int a;\npublic:\n    Sample(int x) { a = x; }\n    void show() { cout << a; }\n};\nint main() {\n    Sample s(25);\n    s.show();\n    return 0;\n}",
    "o": [
      "25",
      "0",
      "Error",
      "a"
    ]
  },
  {
    "q": "Which of the following statements is true about a destructor?",
    "o": [
      "It is invoked automatically when the object goes out of scope",
      "It must take at least one argument",
      "It returns an integer value",
      "It can be overloaded"
    ]
  },
  {
    "q": "What is the default access specifier for class members in C++?",
    "o": [
      "private",
      "public",
      "protected",
      "internal"
    ]
  },
  {
    "q": "What is the output of this program?",
    "c": "#include <iostream>\nusing namespace std;\nclass Test {\n    int val;\npublic:\n    Test(int v) { this->val = v; }\n    void print() { cout << val; }\n};\nint main() {\n    Test t(42);\n    t.print();\n    return 0;\n}",
    "o": [
      "42",
      "val",
      "Error",
      "this"
    ]
  },
  {
    "q": "Which of the following is the correct syntax for a parameterized constructor?",
    "o": [
      "MyClass(int x) { /*...*/ }",
      "constructor MyClass(int x) { /*...*/ }",
      "MyClass() { int x; }",
      "void MyClass(int x) { /*...*/ }"
    ]
  },
  {
    "q": "Which access specifier allows a member to be accessed only by members of the same class?",
    "o": [
      "private",
      "public",
      "protected",
      "global"
    ]
  },
  {
    "q": "What does the `this` pointer point to in a class method?",
    "o": [
      "The current object invoking the method",
      "The base class of the object",
      "The static instance of the object",
      "The address of the constructor"
    ]
  },
  {
    "q": "Which of the following is correct about destructors in C++?",
    "o": [
      "They have the same name as the class preceded by a tilde",
      "They can take parameters",
      "They can be private only",
      "They return a boolean"
    ]
  },
  {
    "q": "What will be the output?",
    "c": "#include <iostream>\nusing namespace std;\nclass Alpha {\n    int x;\npublic:\n    Alpha(int a) { x = a; }\n    void display() { cout << \"Value: \" << this->x; }\n};\nint main() {\n    Alpha obj(77);\n    obj.display();\n    return 0;\n}",
    "o": [
      "Value: 77",
      "Value: x",
      "x",
      "this->x"
    ]
  },
  {
    "q": "Which of the following correctly creates an object of class `Student`?",
    "o": [
      "Student s1;",
      "Student = new s1;",
      "object s1 = Student();",
      "Student() s1;"
    ]
  },
  {
    "q": "What will be the output of the following C++ code?",
    "c": "#include <iostream>\nusing namespace std;\nclass Number {\n    int n;\npublic:\n    Number(int x) { n = x; }\n    void show() { cout << n * 2; }\n};\nint main() {\n    Number obj(6);\n    obj.show();\n    return 0;\n}",
    "o": [
      "12",
      "6",
      "0",
      "Error"
    ]
  },
  {
    "q": "Which access specifier allows members to be inherited but not accessed outside the class?",
    "o": [
      "protected",
      "public",
      "private",
      "static"
    ]
  },
  {
    "q": "What is true about the constructor in C++?",
    "o": [
      "It has the same name as the class",
      "It returns a value",
      "It must be virtual",
      "It can only be private"
    ]
  },
  {
    "q": "What is the output of this program?",
    "c": "#include <iostream>\nusing namespace std;\nclass Box {\n    int length;\npublic:\n    Box(int l) { this->length = l; }\n    void display() { cout << length; }\n};\nint main() {\n    Box b(30);\n    b.display();\n    return 0;\n}",
    "o": [
      "30",
      "length",
      "this",
      "Error"
    ]
  },
  {
    "q": "What does a destructor do in C++?",
    "o": [
      "Frees resources when an object is destroyed",
      "Initializes class data members",
      "Allocates memory for the object",
      "Calls another constructor"
    ]
  },
  {
    "q": "How many times is a destructor called for an object?",
    "o": [
      "Once",
      "Twice",
      "Depends on how many constructors are called",
      "Zero"
    ]
  },
  {
    "q": "Which of the following correctly uses `this` pointer to return the current object?",
    "o": [
      "return *this;",
      "return this;",
      "return &this;",
      "return this();"
    ]
  },
  {
    "q": "Which of these is true about class objects?",
    "o": [
      "They can access both public and private members (via member functions)",
      "They can directly access private data members",
      "They must be dynamically created",
      "They canâ€™t be passed as function parameters"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "#include <iostream>\nusing namespace std;\nclass Demo {\n    int val;\npublic:\n    Demo(int v) { val = v; }\n    void show() { cout << this->val + 5; }\n};\nint main() {\n    Demo d(10);\n    d.show();\n    return 0;\n}",
    "o": [
      "15",
      "10",
      "5",
      "Error"
    ]
  },
  {
    "q": "Which keyword is used to define a class in C++?",
    "o": [
      "class",
      "struct",
      "object",
      "define"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "#include <iostream>\nusing namespace std;\nclass Sample {\n    int x;\npublic:\n    Sample(int val) { x = val; }\n    void display() { cout << x; }\n};\nint main() {\n    Sample obj(25);\n    obj.display();\n    return 0;\n}",
    "o": [
      "25",
      "0",
      "x",
      "Error"
    ]
  },
  {
    "q": "Which of the following is an example of a default constructor?",
    "o": [
      "MyClass() {}",
      "MyClass(int x) {}",
      "void MyClass() {}",
      "~MyClass() {}"
    ]
  },
  {
    "q": "What is the purpose of the `this` pointer?",
    "o": [
      "To refer to the current object",
      "To create a new object",
      "To destroy the object",
      "To access static members"
    ]
  },
  {
    "q": "Which access specifier makes class members accessible only within the same class?",
    "o": [
      "private",
      "public",
      "protected",
      "internal"
    ]
  },
  {
    "q": "What will be the output of this code?",
    "c": "#include <iostream>\nusing namespace std;\nclass Test {\n    int a;\npublic:\n    Test() { a = 10; }\n    void show() { cout << this->a * 3; }\n};\nint main() {\n    Test t;\n    t.show();\n    return 0;\n}",
    "o": [
      "30",
      "10",
      "3",
      "Error"
    ]
  },
  {
    "q": "What is true about constructors in C++?",
    "o": [
      "They are automatically called when an object is created",
      "They must return an int",
      "They can be called manually only",
      "They are inherited from the base class"
    ]
  },
  {
    "q": "Which of the following correctly defines a destructor for class `Item`?",
    "o": [
      "~Item() {}",
      "destructor Item() {}",
      "void ~Item() {}",
      "~Item(void);"
    ]
  },
  {
    "q": "Which of the following best describes an object in C++?",
    "o": [
      "An instance of a class",
      "A class definition",
      "A function inside a class",
      "A static variable"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "#include <iostream>\nusing namespace std;\nclass Counter {\n    int count;\npublic:\n    Counter() { count = 5; }\n    void increment() { this->count += 1; }\n    void show() { cout << count; }\n};\nint main() {\n    Counter c;\n    c.increment();\n    c.show();\n    return 0;\n}",
    "o": [
      "6",
      "5",
      "1",
      "Error"
    ]
  },
  {
    "q": "Which of the following best defines a C++ class named `Student`?",
    "o": [
      "class Student { };",
      "Student class() { };",
      "define class Student() { };",
      "object Student { };"
    ]
  },
  {
    "q": "What will be the output of the following code?",
    "c": "#include <iostream>\nusing namespace std;\nclass Demo {\n    int x;\npublic:\n    Demo(int a) { x = a; }\n    void print() { cout << x; }\n};\nint main() {\n    Demo d(42);\n    d.print();\n    return 0;\n}",
    "o": [
      "42",
      "0",
      "Error",
      "x"
    ]
  },
  {
    "q": "Which access specifier allows class members to be accessible from outside the class?",
    "o": [
      "public",
      "private",
      "protected",
      "default"
    ]
  },
  {
    "q": "Which constructor is invoked when an object is declared without parameters?",
    "o": [
      "Default constructor",
      "Parameterized constructor",
      "Copy constructor",
      "Move constructor"
    ]
  },
  {
    "q": "What is the role of a destructor in a class?",
    "o": [
      "To clean up when an object goes out of scope",
      "To initialize member variables",
      "To create objects",
      "To overload functions"
    ]
  },
  {
    "q": "What will be the output of the following code?",
    "c": "#include <iostream>\nusing namespace std;\nclass Number {\n    int n;\npublic:\n    Number(int x) { n = x; }\n    void show() { cout << this->n * 2; }\n};\nint main() {\n    Number num(6);\n    num.show();\n    return 0;\n}",
    "o": [
      "12",
      "6",
      "3",
      "0"
    ]
  },
  {
    "q": "Which of the following best describes the `this` pointer in C++?",
    "o": [
      "A pointer that holds the address of the current object",
      "A pointer to a class function",
      "A pointer to a base class",
      "A keyword to declare static members"
    ]
  },
  {
    "q": "How many destructors can a class have in C++?",
    "o": [
      "Only one",
      "Two",
      "As many as needed",
      "None"
    ]
  },
  {
    "q": "Which access specifier allows access in the class and its derived classes only?",
    "o": [
      "protected",
      "public",
      "private",
      "internal"
    ]
  },
  {
    "q": "What will be the output of this code?",
    "c": "#include <iostream>\nusing namespace std;\nclass Box {\n    int length;\npublic:\n    Box() { length = 7; }\n    void display() { cout << this->length + 3; }\n};\nint main() {\n    Box b;\n    b.display();\n    return 0;\n}",
    "o": [
      "10",
      "7",
      "3",
      "0"
    ]
  },
  {
    "q": "What is the correct way to create an object `car1` of a class `Car`?",
    "o": [
      "Car car1;",
      "Car::car1();",
      "car1 = Car();",
      "Car->car1();"
    ]
  },
  {
    "q": "What is the output of this code snippet?",
    "c": "#include <iostream>\nusing namespace std;\nclass Greet {\npublic:\n    Greet() { cout << \"Hello C++\"; }\n};\nint main() {\n    Greet g;\n    return 0;\n}",
    "o": [
      "Hello C++",
      "g",
      "Error",
      "Nothing"
    ]
  },
  {
    "q": "Which access specifier prevents access from outside the class?",
    "o": [
      "private",
      "public",
      "protected",
      "external"
    ]
  },
  {
    "q": "Which of the following statements is true about destructors?",
    "o": [
      "Destructors have the same name as the class, preceded by a tilde (~)",
      "Destructors can take parameters",
      "Destructors must be called manually",
      "Destructors are optional and never needed"
    ]
  },
  {
    "q": "Why is the `this` pointer used inside a class?",
    "o": [
      "To refer to the calling object",
      "To call private methods",
      "To allocate memory",
      "To refer to base class only"
    ]
  },
  {
    "q": "What will be printed by the following code?",
    "c": "#include <iostream>\nusing namespace std;\nclass Sample {\n    int x;\npublic:\n    Sample(int x) { this->x = x; }\n    void show() { cout << x; }\n};\nint main() {\n    Sample s(20);\n    s.show();\n    return 0;\n}",
    "o": [
      "20",
      "x",
      "0",
      "Error"
    ]
  },
  {
    "q": "Which constructor is invoked when one object is initialized with another object of the same class?",
    "o": [
      "Copy constructor",
      "Default constructor",
      "Parameterized constructor",
      "Friend constructor"
    ]
  },
  {
    "q": "In C++, where can you define the constructor for a class?",
    "o": [
      "Inside or outside the class definition",
      "Only outside the class",
      "Only inside the class",
      "In a separate file"
    ]
  },
  {
    "q": "Which keyword is used to specify members that should not be accessed outside the class?",
    "o": [
      "private",
      "protected",
      "internal",
      "extern"
    ]
  },
  {
    "q": "What will be the output of this program?",
    "c": "#include <iostream>\nusing namespace std;\nclass Test {\n    int a;\npublic:\n    Test(int a) { this->a = a + 1; }\n    void display() { cout << this->a; }\n};\nint main() {\n    Test t(9);\n    t.display();\n    return 0;\n}",
    "o": [
      "10",
      "9",
      "11",
      "0"
    ]
  },
  {
    "q": "Which of the following statements correctly defines a class named `Student`?",
    "o": [
      "class Student { };",
      "define Student { };",
      "Student() { };",
      "create class Student { };"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "#include <iostream>\nusing namespace std;\nclass Test {\npublic:\n    Test() { cout << \"Constructor called\"; }\n};\nint main() {\n    Test t;\n    return 0;\n}",
    "o": [
      "Constructor called",
      "Test",
      "Error",
      "No output"
    ]
  },
  {
    "q": "Which access specifier allows class members to be accessed from outside the class?",
    "o": [
      "public",
      "private",
      "protected",
      "default"
    ]
  },
  {
    "q": "Which of the following is automatically invoked when an object goes out of scope?",
    "o": [
      "Destructor",
      "Constructor",
      "Copy Constructor",
      "Virtual Function"
    ]
  },
  {
    "q": "What does the `this` pointer in C++ represent?",
    "o": [
      "A pointer to the current object",
      "A pointer to the base class",
      "A global pointer",
      "A pointer to static data"
    ]
  },
  {
    "q": "What is the output of the code?",
    "c": "#include <iostream>\nusing namespace std;\nclass Demo {\n    int x;\npublic:\n    Demo(int x) { this->x = x; }\n    void show() { cout << this->x * 2; }\n};\nint main() {\n    Demo d(4);\n    d.show();\n    return 0;\n}",
    "o": [
      "8",
      "4",
      "2",
      "Error"
    ]
  },
  {
    "q": "Which type of constructor can be used to initialize an object with values from another object?",
    "o": [
      "Copy constructor",
      "Default constructor",
      "Destructor",
      "Inline constructor"
    ]
  },
  {
    "q": "In C++, what is the default access specifier for members of a class?",
    "o": [
      "private",
      "public",
      "protected",
      "internal"
    ]
  },
  {
    "q": "How many destructors can a class have in C++?",
    "o": [
      "Only one",
      "One for each object",
      "Multiple with different parameters",
      "Unlimited"
    ]
  },
  {
    "q": "What will be the output of this code?",
    "c": "#include <iostream>\nusing namespace std;\nclass Alpha {\n    int a;\npublic:\n    Alpha(int a) { this->a = a + 5; }\n    void print() { cout << a; }\n};\nint main() {\n    Alpha obj(10);\n    obj.print();\n    return 0;\n}",
    "o": [
      "15",
      "10",
      "5",
      "20"
    ]
  },
  {
    "q": "Which of the following correctly creates an object `car1` of class `Car`?",
    "o": [
      "Car car1;",
      "object Car car1;",
      "create Car car1();",
      "class car1 = new Car();"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "#include <iostream>\nusing namespace std;\nclass A {\n    public:\n        A() { cout << \"Hello \"; }\n        ~A() { cout << \"World!\"; }\n};\nint main() {\n    A obj;\n    return 0;\n}",
    "o": [
      "Hello World!",
      "World! Hello",
      "Hello",
      "World!"
    ]
  },
  {
    "q": "Which of the following access specifiers makes a class member inaccessible outside the class?",
    "o": [
      "private",
      "public",
      "protected",
      "global"
    ]
  },
  {
    "q": "What is a constructor in C++?",
    "o": [
      "A special function that initializes objects",
      "A function that destroys objects",
      "A static function inside a class",
      "A friend function"
    ]
  },
  {
    "q": "What keyword refers to the current object inside a class method?",
    "o": [
      "this",
      "self",
      "object",
      "current"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "#include <iostream>\nusing namespace std;\nclass Box {\n    int volume;\npublic:\n    Box(int v) { this->volume = v; }\n    void show() { cout << volume; }\n};\nint main() {\n    Box b(25);\n    b.show();\n    return 0;\n}",
    "o": [
      "25",
      "0",
      "Error",
      "undefined"
    ]
  },
  {
    "q": "Which function is called automatically when an object is destroyed?",
    "o": [
      "Destructor",
      "Constructor",
      "Friend function",
      "Virtual function"
    ]
  },
  {
    "q": "What will be the output of this code?",
    "c": "#include <iostream>\nusing namespace std;\nclass Person {\npublic:\n    Person() { cout << \"P\"; }\n    ~Person() { cout << \"Q\"; }\n};\nint main() {\n    Person p;\n    return 0;\n}",
    "o": [
      "PQ",
      "QP",
      "P",
      "Q"
    ]
  },
  {
    "q": "Which of the following allows controlled access to class members?",
    "o": [
      "Access specifiers",
      "Constructors",
      "Destructors",
      "Data types"
    ]
  },
  {
    "q": "Why is the `this` pointer used in constructors?",
    "o": [
      "To distinguish between class attributes and parameters",
      "To destroy the object",
      "To make member functions static",
      "To access friend functions"
    ]
  },
  {
    "q": "Which of the following is the correct way to define a class in C++?",
    "o": [
      "class Student { };",
      "define class Student { };",
      "Student class { };",
      "class = Student { };"
    ]
  },
  {
    "q": "What is the output of the following code?",
    "c": "#include <iostream>\nusing namespace std;\nclass Test {\n    int x;\npublic:\n    Test(int a) { x = a; }\n    void show() { cout << x; }\n};\nint main() {\n    Test obj(100);\n    obj.show();\n}",
    "o": [
      "100",
      "0",
      "Error",
      "Undefined"
    ]
  },
  {
    "q": "Which specifier allows a member to be accessed only within the class and by friends?",
    "o": [
      "private",
      "public",
      "protected",
      "external"
    ]
  },
  {
    "q": "What is the purpose of a destructor in C++?",
    "o": [
      "To clean up resources when an object is destroyed",
      "To initialize class members",
      "To define a friend class",
      "To create static members"
    ]
  },
  {
    "q": "What is the output of this code?",
    "c": "#include <iostream>\nusing namespace std;\nclass Demo {\n    int a;\npublic:\n    Demo(int a) { this->a = a; }\n    void display() { cout << this->a; }\n};\nint main() {\n    Demo d(42);\n    d.display();\n}",
    "o": [
      "42",
      "0",
      "a",
      "Error"
    ]
  },
  {
    "q": "Which of the following automatically gets called when an object goes out of scope?",
    "o": [
      "Destructor",
      "Constructor",
      "Friend function",
      "Static function"
    ]
  },
  {
    "q": "Choose the correct statement about constructors:",
    "o": [
      "They have the same name as the class.",
      "They return an integer by default.",
      "They are always private.",
      "They can be virtual."
    ]
  },
  {
    "q": "What does the `this` pointer point to?",
    "o": [
      "The current object of the class",
      "The base class of the object",
      "A static member of the class",
      "The function calling object"
    ]
  },
  {
    "q": "What is the default access specifier for members of a class if none is specified?",
    "o": [
      "private",
      "public",
      "protected",
      "internal"
    ]
  },
  {
    "q": "Which of these is a valid destructor declaration for a class named `Book`?",
    "o": [
      "~Book()",
      "destructor Book()",
      "Book.destructor()",
      "void Book~()"
    ]
  },
  {
    "q": "Which of the following correctly creates an object of a class named 'Person'?",
    "o": [
      "Person p1;",
      "class Person p1;",
      "new Person;",
      "Person = p1;"
    ]
  },
  {
    "q": "What is the output of this code snippet?",
    "c": "#include <iostream>\nusing namespace std;\nclass MyClass {\n    int value;\npublic:\n    MyClass() { value = 7; }\n    void display() { cout << value; }\n};\nint main() {\n    MyClass obj;\n    obj.display();\n}",
    "o": [
      "7",
      "0",
      "undefined",
      "Error"
    ]
  },
  {
    "q": "Which access specifier allows members to be accessed from outside the class?",
    "o": [
      "public",
      "private",
      "protected",
      "internal"
    ]
  },
  {
    "q": "Which keyword is used to refer to the invoking object inside a class?",
    "o": [
      "this",
      "self",
      "object",
      "caller"
    ]
  },
  {
    "q": "What is the purpose of a constructor in C++?",
    "o": [
      "To initialize objects of a class",
      "To destroy objects",
      "To make objects static",
      "To call the destructor"
    ]
  },
  {
    "q": "What will be the output of the following code?",
    "c": "#include <iostream>\nusing namespace std;\nclass Test {\npublic:\n    Test() { cout << \"Constructor called\"; }\n    ~Test() { cout << \" Destructor called\"; }\n};\nint main() {\n    Test t;\n    return 0;\n}",
    "o": [
      "Constructor called Destructor called",
      "Destructor called Constructor called",
      "Only Constructor called",
      "Only Destructor called"
    ]
  },
  {
    "q": "Which of the following is true about a class in C++?",
    "o": [
      "It is a user-defined data type",
      "It cannot have functions",
      "It must inherit another class",
      "It cannot be instantiated"
    ]
  },
  {
    "q": "Which of these will correctly initialize a constructor with parameters?",
    "o": [
      "Student s1(10, \"John\");",
      "Student s1 = Student();",
      "Student s1;",
      "Student = s1();"
    ]
  },
  {
    "q": "What does the `this` pointer help resolve in constructors?",
    "o": [
      "Ambiguity between class member and constructor parameter",
      "Calling base class constructor",
      "Accessing static members",
      "Returning a different object"
    ]
  },
  {
    "q": "Which of the following is called automatically when an object is created?",
    "o": [
      "Constructor",
      "Destructor",
      "Friend function",
      "Member function"
    ]
  },
  {
    "q": "Which of the following best defines a class in C++?",
    "o": [
      "A blueprint for creating objects",
      "A built-in data type",
      "A function container only",
      "An access specifier"
    ]
  },
  {
    "q": "What is the output of this code snippet?",
    "c": "#include<iostream>\nusing namespace std;\nclass Demo {\n    int x;\npublic:\n    Demo(int a) { x = a; }\n    void show() { cout << x; }\n};\nint main() {\n    Demo d(25);\n    d.show();\n}",
    "o": [
      "25",
      "0",
      "Error",
      "Garbage value"
    ]
  },
  {
    "q": "Which access specifier makes class members inaccessible outside the class?",
    "o": [
      "private",
      "public",
      "protected",
      "static"
    ]
  },
  {
    "q": "What is the main use of a destructor in C++?",
    "o": [
      "To release resources when an object goes out of scope",
      "To initialize object data",
      "To call another constructor",
      "To allocate memory"
    ]
  },
  {
    "q": "Choose the correct declaration of a constructor with no parameters.",
    "o": [
      "MyClass();",
      "void MyClass();",
      "constructor MyClass();",
      "int MyClass();"
    ]
  },
  {
    "q": "Which of the following uses of 'this' pointer is valid?",
    "o": [
      "To refer to the calling object in a member function",
      "To access global variables",
      "To inherit from another class",
      "To delete an object"
    ]
  },
  {
    "q": "What is the output of this code snippet?",
    "c": "#include<iostream>\nusing namespace std;\nclass A {\n    int x;\npublic:\n    A(int x) { this->x = x; }\n    void print() { cout << this->x; }\n};\nint main() {\n    A obj(50);\n    obj.print();\n}",
    "o": [
      "50",
      "0",
      "x",
      "Error"
    ]
  },
  {
    "q": "Which of these members will be inherited as private in a derived class?",
    "o": [
      "private members of the base class",
      "public members of the base class",
      "protected members of the base class",
      "All members"
    ]
  },
  {
    "q": "What happens if a class does not have a constructor defined?",
    "o": [
      "A default constructor is provided automatically",
      "Object creation fails",
      "Compilation error",
      "Destructor is skipped"
    ]
  },
  {
    "q": "Where is the destructor declared in a class?",
    "o": [
      "Using a tilde (~) followed by the class name",
      "Using the keyword 'destructor'",
      "As a static method",
      "Same name as class with return type"
    ]
  },
  {
    "q": "Which keyword is used to define a class in C++?",
    "o": [
      "class",
      "struct",
      "define",
      "object"
    ]
  },
  {
    "q": "What is the output of this code snippet?",
    "c": "#include<iostream>\nusing namespace std;\nclass Test {\npublic:\n    Test() { cout << \"Constructor called\"; }\n};\nint main() {\n    Test t;\n    return 0;\n}",
    "o": [
      "Constructor called",
      "Error",
      "Destructor called",
      "No output"
    ]
  },
  {
    "q": "What is the role of a constructor in a class?",
    "o": [
      "To initialize objects of the class",
      "To destroy objects of the class",
      "To inherit the class",
      "To overload operators"
    ]
  },
  {
    "q": "Which access specifier allows members to be accessed only within the same class?",
    "o": [
      "private",
      "protected",
      "public",
      "external"
    ]
  },
  {
    "q": "What is the correct syntax to declare a destructor in C++?",
    "o": [
      "~MyClass();",
      "destructor MyClass();",
      "void ~MyClass();",
      "~MyClass(void);"
    ]
  },
  {
    "q": "What does the following code print?",
    "c": "#include<iostream>\nusing namespace std;\nclass MyClass {\n    int val;\npublic:\n    MyClass(int v) { this->val = v; }\n    void show() { cout << val; }\n};\nint main() {\n    MyClass obj(30);\n    obj.show();\n}",
    "o": [
      "30",
      "0",
      "val",
      "Error"
    ]
  },
  {
    "q": "What is the function of the 'this' pointer in C++?",
    "o": [
      "It stores the address of the current object",
      "It refers to the parent class",
      "It holds the address of the class definition",
      "It is used to call static members"
    ]
  },
  {
    "q": "Which of these is a correct way to create an object of class `Student`?",
    "o": [
      "Student s1;",
      "Student = new Student();",
      "s1 = Student();",
      "Student->s1();"
    ]
  },
  {
    "q": "What happens if you do not define a destructor explicitly in your class?",
    "o": [
      "A default destructor is provided by the compiler",
      "The class cannot be instantiated",
      "Memory leaks occur automatically",
      "Compilation fails"
    ]
  },
  {
    "q": "What is the access level of class members if no access specifier is used?",
    "o": [
      "private",
      "public",
      "protected",
      "global"
    ]
  },
  {
    "q": "Which of the following correctly defines a class named 'Book' in C++?",
    "o": [
      "class Book { };",
      "Book class { };",
      "define Book { };",
      "class = Book { };"
    ]
  },
  {
    "q": "What is the output of this code snippet?",
    "c": "#include<iostream>\nusing namespace std;\nclass Sample {\npublic:\n    Sample() { cout << \"Object created\"; }\n};\nint main() {\n    Sample s;\n    return 0;\n}",
    "o": [
      "Object created",
      "Compilation error",
      "Nothing",
      "Object destroyed"
    ]
  },
  {
    "q": "Which access specifier allows a class member to be accessible from anywhere in the program?",
    "o": [
      "public",
      "private",
      "protected",
      "internal"
    ]
  },
  {
    "q": "Which of the following best describes a constructor?",
    "o": [
      "It is a special function that is called automatically when an object is created",
      "It is used to destroy objects",
      "It is used to inherit a class",
      "It is used to define static members"
    ]
  },
  {
    "q": "What does the 'this' pointer point to?",
    "o": [
      "The current object",
      "The parent class",
      "The function's local variables",
      "The main class"
    ]
  },
  {
    "q": "Which of these is a correct way to define a parameterized constructor in C++?",
    "o": [
      "MyClass(int x) { val = x; }",
      "constructor MyClass(int x) { val = x; }",
      "MyClass = (int x) { val = x; }",
      "MyClass(int x) -> { val = x; }"
    ]
  },
  {
    "q": "Which code will destroy an object created dynamically using `new`?",
    "o": [
      "delete ptr;",
      "destroy ptr;",
      "remove ptr;",
      "dispose ptr;"
    ]
  },
  {
    "q": "What is the purpose of a destructor in a class?",
    "o": [
      "To release resources or perform cleanup when an object is destroyed",
      "To overload operators",
      "To create instances of a class",
      "To initialize static data members"
    ]
  },
  {
    "q": "How many destructors can a class have?",
    "o": [
      "Only one",
      "Multiple with different parameters",
      "Unlimited",
      "One per object"
    ]
  },
  {
    "q": "What is the output of this code snippet?",
    "c": "#include<iostream>\nusing namespace std;\nclass Test {\n    int a;\npublic:\n    Test(int a) { this->a = a; }\n    void print() { cout << this->a; }\n};\nint main() {\n    Test t(42);\n    t.print();\n    return 0;\n}",
    "o": [
      "42",
      "0",
      "this->a",
      "Error"
    ]
  },
  {
    "q": "Which of the following creates an object of class Car?",
    "o": [
      "Car myCar;",
      "Car = new myCar();",
      "class Car myCar;",
      "create Car myCar;"
    ]
  },
  {
    "q": "What is the output of this C++ code?",
    "c": "#include<iostream>\nusing namespace std;\nclass Demo {\npublic:\n    Demo() { cout << \"Constructor called \"; }\n    ~Demo() { cout << \"Destructor called\"; }\n};\nint main() {\n    Demo d;\n    return 0;\n}",
    "o": [
      "Constructor called Destructor called",
      "Destructor called Constructor called",
      "Constructor called",
      "Destructor called"
    ]
  },
  {
    "q": "What keyword is used to restrict direct access to class members from outside the class?",
    "o": [
      "private",
      "public",
      "protected",
      "static"
    ]
  },
  {
    "q": "What does the following constructor do?\n`MyClass::MyClass() { this->val = 0; }`",
    "o": [
      "Initializes the member variable 'val' to 0",
      "Destroys the object",
      "Calls another constructor",
      "Returns an integer"
    ]
  },
  {
    "q": "Which access specifier allows access to class members only within the class and its friends?",
    "o": [
      "private",
      "protected",
      "public",
      "global"
    ]
  },
  {
    "q": "What is true about destructors in C++?",
    "o": [
      "They have the same name as the class preceded by a tilde (~)",
      "They can take parameters",
      "They can be overloaded",
      "They return an integer"
    ]
  },
  {
    "q": "Which keyword is used to access the current object inside a member function?",
    "o": [
      "this",
      "self",
      "current",
      "object"
    ]
  },
  {
    "q": "Which of the following statements is TRUE about constructors?",
    "o": [
      "Constructors do not have a return type",
      "Constructors must be declared using `void`",
      "Constructors return an int",
      "Constructors can be virtual"
    ]
  },
  {
    "q": "What is the result of using 'this' pointer in a member function?",
    "o": [
      "It refers to the calling object",
      "It refers to the class definition",
      "It refers to the constructor only",
      "It disables other objects"
    ]
  },
  {
    "q": "Which of the following is the correct way to define a destructor?",
    "o": [
      "~MyClass() {}",
      "destructor MyClass() {}",
      "MyClass~() {}",
      "MyClass::~() {}"
    ]
  },
  {
    "q": "What is the correct way to define a class named 'Book' in C++?",
    "o": [
      "class Book { };",
      "Book class { };",
      "define class Book() { };",
      "class: Book { };"
    ]
  },
  {
    "q": "What is the output of the following C++ program?",
    "c": "#include<iostream>\nusing namespace std;\nclass Test {\npublic:\n    Test() { cout << \"Constructor! \"; }\n    ~Test() { cout << \"Destructor!\"; }\n};\nint main() {\n    Test obj;\n    return 0;\n}",
    "o": [
      "Constructor! Destructor!",
      "Destructor! Constructor!",
      "Constructor!",
      "Destructor!"
    ]
  },
  {
    "q": "Which of the following members cannot be accessed from outside the class?",
    "o": [
      "private members",
      "public members",
      "protected members",
      "friend members"
    ]
  },
  {
    "q": "What is the purpose of a constructor?",
    "o": [
      "To initialize objects when they are created",
      "To clean up memory",
      "To delete objects",
      "To inherit base classes"
    ]
  },
  {
    "q": "Which specifier allows access to class members only by derived classes and the class itself?",
    "o": [
      "protected",
      "public",
      "private",
      "external"
    ]
  },
  {
    "q": "What is the function of the destructor?",
    "o": [
      "To release resources before an object is destroyed",
      "To allocate memory for an object",
      "To copy objects",
      "To inherit from base class"
    ]
  },
  {
    "q": "Which of the following correctly uses the 'this' pointer?",
    "c": "class Sample {\n    int x;\npublic:\n    void setX(int x) {\n        this->x = x;\n    }\n};",
    "o": [
      "this->x = x;",
      "x = this->x;",
      "this.x = x;",
      "x.this = x;"
    ]
  },
  {
    "q": "Which of the following is TRUE about constructors?",
    "o": [
      "They can be overloaded",
      "They must return an int",
      "They can be virtual",
      "They are called manually"
    ]
  },
  {
    "q": "Where is the 'this' pointer available?",
    "o": [
      "In non-static member functions only",
      "In static member functions only",
      "In global functions",
      "Everywhere in the program"
    ]
  },
  {
    "q": "Which of the following is the correct way to define a parameterized constructor?",
    "c": "class Car {\n    int speed;\npublic:\n    Car(int s) {\n        speed = s;\n    }\n};",
    "o": [
      "Car(int s) { speed = s; }",
      "Car(s) { speed = s; }",
      "Car() s { speed = s; }",
      "void Car(int s) { speed = s; }"
    ]
  },
  {
    "q": "What will be the output of this program?",
    "c": "#include<iostream>\nusing namespace std;\nclass Demo {\n    int val;\npublic:\n    Demo(int x) { val = x; cout << val << \" \"; }\n};\nint main() {\n    Demo d1(5);\n    return 0;\n}",
    "o": [
      "5 ",
      "0 ",
      "Garbage value ",
      "Compilation error"
    ]
  },
  {
    "q": "Which access specifier allows class members to be accessible from outside the class?",
    "o": [
      "public",
      "private",
      "protected",
      "external"
    ]
  },
  {
    "q": "Which of the following is true about destructors in C++?",
    "o": [
      "They are invoked automatically when the object goes out of scope.",
      "They must have a return type.",
      "They can be called manually using destructor().",
      "They can take parameters."
    ]
  },
  {
    "q": "What will be the output of the following code?",
    "c": "#include<iostream>\nusing namespace std;\nclass MyClass {\n    int a;\npublic:\n    MyClass(int a) { this->a = a; }\n    void print() { cout << a; }\n};\nint main() {\n    MyClass obj(10);\n    obj.print();\n    return 0;\n}",
    "o": [
      "10",
      "0",
      "a",
      "Compilation Error"
    ]
  },
  {
    "q": "Which of the following statements about the 'this' pointer is TRUE?",
    "o": [
      "It holds the address of the current object",
      "It is passed to static functions",
      "It can point to any object",
      "It is available in global functions"
    ]
  },
  {
    "q": "Which of the following is a correct destructor declaration?",
    "o": [
      "~MyClass()",
      "destructor MyClass()",
      "void ~MyClass()",
      "MyClass.destructor()"
    ]
  },
  {
    "q": "How many constructors can a class have in C++?",
    "o": [
      "As many as needed with different parameter lists",
      "Only one",
      "Maximum of two",
      "Only default and copy constructor"
    ]
  },
  {
    "q": "What does the following code print?",
    "c": "#include<iostream>\nusing namespace std;\nclass Test {\npublic:\n    Test() { cout << \"Constructed \"; }\n    ~Test() { cout << \"Destroyed\"; }\n};\nint main() {\n    Test t;\n    return 0;\n}",
    "o": [
      "Constructed Destroyed",
      "Destroyed Constructed",
      "Constructed",
      "Destroyed"
    ]
  },
  {
    "q": "Which of the following correctly creates an object of class Car?",
    "o": [
      "Car c1;",
      "object Car;",
      "Car = new Car();",
      "create Car c1;"
    ]
  },
  {
    "q": "Which of the following is a characteristic of constructors?",
    "o": [
      "They have the same name as the class",
      "They can return values",
      "They are inherited",
      "They must be private"
    ]
  }
]